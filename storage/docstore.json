{"docstore/metadata": {"1d1baa03-c6f3-4610-9f77-b26b95123cba": {"doc_hash": "788d269d09d03e7d0a56a38eacc92f7cd6ea10919853d5881ab0389ad1ad18a3"}, "9808ab77-f1a8-4683-9977-2dee8a4c5828": {"doc_hash": "cdd9f1ca2ffd7ded52b501a7978ab5f0c6174cdf89df0a2841b92e01ca734d81"}, "ec42a72e-2280-432e-b782-163ce6301e3b": {"doc_hash": "66842d8cb07c4cde53579cb722c596c43937453a070ebfacecb5744a4b5b602c"}, "8df783f4-4076-4e92-a211-2e4e9dfb0064": {"doc_hash": "f336944889ea71aa647b3762fc1ce7f688be841fc6e34d3e0761485288fcc48f"}, "a047ec66-08e5-442b-8da6-1668c6a0cf3a": {"doc_hash": "7d51bfda9edfcefce26859905509dda147c356b70d98f1d8e98b380dac828dc8"}, "62d8c3cd-6b19-45eb-9b69-6d31ee7aec11": {"doc_hash": "791b5a3ad8070fe5f978acd69fcb8a01eeb356bfc3809530f764ffd326f0e46d"}, "dcf19d7d-c990-4b78-a44b-e0005da5b489": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "5b61e905-33ed-43bd-add9-00ff3b9662de": {"doc_hash": "1586ad2b1ac127651add69654fcf1f02112a41b6078c1d68383b12210186865e"}, "5a149286-00a5-4fb2-bd99-f417f937320f": {"doc_hash": "2ebafb97da40e55633e194f13c61ab0e886daea2be1b86c03ab8940804a30e0b"}, "fdeab5b5-eeba-4a4c-afe1-d43a0ff5309d": {"doc_hash": "5a50f033c961acb4da8f61d792316d438d69d07b0c4e497191a3eb0d6182cea4"}, "e44861d8-a1f0-477a-bb0d-69916afee46b": {"doc_hash": "2c5efa52f1c0968346492357f267a4cc3519586054d1cfffb56200139b447837"}, "a618e9d7-a0d3-4408-af49-5f17200e5b74": {"doc_hash": "e564f856002c6e1303f4b8eb2b0423660f972f43adfd30053fcda908639f4172"}, "0796285b-5e13-4871-870a-d739897a79b6": {"doc_hash": "2590135ec413ddf1f969a07ffc11625f84e91a0d943867f834b36d090b3153fa"}, "e6f56868-b7de-4860-974a-14d04b02c48f": {"doc_hash": "b8a7c4f4c08b81df22c296f4d449ead692f3b1960abae2654f2cd52599757bd2"}, "26b73214-5ba0-4609-a439-809b7ac80bf3": {"doc_hash": "597a4403b5a3db9cfad666f7cc49b3d419d01a286caadae59922a4b659e01f9c"}, "1aa209e7-029d-4f20-a4e0-9e9fad7e786a": {"doc_hash": "2fa902df20df01839aa9680f3f796c0788d3ca2a0d1355c50ad950f8a40fd8e3"}, "0073e0e8-87a2-454f-adaf-9ee3b8f4c8f3": {"doc_hash": "4869a9ecb602dd729315f2af17d94f5746a279912cd56d3fa661586ccf80b90f"}, "7467d371-e5e0-476b-908c-99441d384750": {"doc_hash": "ba5241a90bea15527b0c36dd77b023d93bdc5e6113ccff92ab2214bfdbaf5a90"}, "3d268c10-d111-44da-a5b7-36260a32f9e0": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "1a22c53f-a0b1-414a-a8f6-c1f0dc0317e9": {"doc_hash": "3791fd6147163475221178f30cfe67e5c249fa6368c16d06fa306558f5eac8ec"}, "5bd02a5e-5b8d-46bc-9f1f-077c3bf246ec": {"doc_hash": "3fd28b84ccb034a632e455747248caa1ffd3d821657f4dfd534691c620dec78a"}, "ad9f9ced-3c86-4231-9403-656847cfecdd": {"doc_hash": "a12a25c30766ee3579d395443bc5c2546c367971d23bbb795da5c624f5f3313a"}, "ad1c0b89-a961-4650-9467-b6140034e9fe": {"doc_hash": "bbdc38e4344fa7027e1a5df6fcdf88957bb3540293f529f080906b949005f996"}, "b9bbffe7-3ee9-4955-b789-cf151d2bcc60": {"doc_hash": "1c9bd188d342d73a18e542ea94e18b88afc4b6d439928ecedfbc884266cce5c8"}, "6f5b9b4e-8d0f-448b-9bef-cc864f665904": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "cf89e281-a52e-491a-8daf-0067f9c31db2": {"doc_hash": "6355a075926d9f6157191022ab69f418d8954695c94eda5c2a924f2f7522b28a"}, "f72ce39d-643c-4d6e-91c9-a6eef09613ea": {"doc_hash": "8abde3a84175cdbc2469a7ed8c7cb07ebf8425408ff5c3df80cf5649487103c3"}, "2f7d3b5c-ba36-4d9c-94ed-2f1e3b0ad19b": {"doc_hash": "ee2e5c6b3d972ee9250b3165189553d0f5cc2dca2c40474ef8dd77f0168cfc9a"}, "cc017129-6eb9-491b-83de-ba38983a3b99": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "2796cf5a-2555-42e9-b7bd-8ce00b87fc14": {"doc_hash": "4ade83ea1ec71d5eb33813a9c9d4d5e224954fce246983c7fd477f9172f48a73"}, "ca266c4e-113e-43d5-9611-f06295838240": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "3c126f03-965e-46d7-a966-526786046d75": {"doc_hash": "2eae6c92fd4777f1ebc20b66950100d0a51cb746a85809d473577f1c910f1dcb"}, "b4e758e8-ffc5-4fe5-beda-563eb996f5f2": {"doc_hash": "e32ad7f387a6a54e3a22f3c6aeec9a3ac88ba48f699b163a1d3673d9683e4cc1"}, "b6f0812d-0866-4b88-b491-9d9c066ee0cd": {"doc_hash": "2f499a9fe160cb79c5c2211e521377a53a5cf037e5aae89a34f5023ae0449955"}, "d7617009-4e33-432e-a01f-181c598e4248": {"doc_hash": "522a644fb0df73869b2d223930ef5e63eaa9d2b55cf8463e858d4fbe949df7be"}, "eb021ee3-d0c1-453a-84ef-e708fc9e23fa": {"doc_hash": "5d94a108a1b31d1a379ca050de3b81aac635965927bbdd6e6c51e0aa885c8d27"}, "0a046843-5ab8-427b-9c82-97899a3f1204": {"doc_hash": "607bab335ef2ab8f8477124379a90d361f9ce392e1aba772cbcee614d904a140"}, "bf3f73ca-1574-43b6-84d0-0f582c6806a7": {"doc_hash": "df9b44f0c7accd71baef717d74d09fbc383fe9df982a171c235797d259831e9e"}, "3f4807ea-416b-4904-99bf-65d91415dbf7": {"doc_hash": "469d968bbe19ff154fd162934f2ab6fb34ce556eb4928590c7c2d1ab36f8decc"}, "2daf754d-4d3a-4f5b-86b7-206b2ec4f84e": {"doc_hash": "c39b934724ed6b2a17e1f595cd1d94748d557c91b650598b3ba715489219274d"}, "b753db42-87df-4063-a41e-aef6170e3892": {"doc_hash": "b9c1aa78387cd061ddca10df2dd1acb265dd4dd766d75c7e81d86c25f3c67f60"}, "18e2c49b-f4ab-425e-b95e-fe31962a2dc7": {"doc_hash": "58ff2e01010cdf46ca99b488d0bcd24b585bea56c6153634573c596ee06c1efb"}, "177a7f78-a4dd-4254-b67f-2e15e5cde805": {"doc_hash": "a8fafefd10cc42eb8612ba3d415233925cccf5737f16d5eb33bb52af0424e711"}, "c184216a-01e5-409e-b418-4ec2beadd0fe": {"doc_hash": "b6e354c69b24443da522c4847658f9a3cdb6db2c28ca876482b5645f1e110290"}, "181ec876-e228-4fc5-804e-d39fb195fd62": {"doc_hash": "8476c7a7f78289e2818d25e8f0bcbb62e377cc40c112d83dd3141ab8e22a0ea1"}, "5257f577-289f-4647-aa6e-1452a72eb79a": {"doc_hash": "1c5011ed139cd0fd31c5061ef30aab393be2fa413aad1952e9147034a78999e2"}, "f3d390bb-d139-4dbc-8424-d37ede41a03c": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "6c0642f6-2001-49b0-b1da-e64b27053a62": {"doc_hash": "6bc0bebb03305379ca8dbbf2fc948903d3a783119e5cc28c384cd2c36f612681"}, "e85178e8-cb49-4ab7-8689-f52473bcc995": {"doc_hash": "6868c0e87074cc6b0353477f802f7eac98f215484c9789838bd5849bbb9b6794"}, "829bced3-c1f2-43bc-92fb-38e3307f2f3f": {"doc_hash": "f8ec81d2212e9554a539467d2758cad1814fc4c5f1cdf984077cc958fd200b37"}, "386a0e8f-64ec-479f-9ee6-a4f4bd6537ed": {"doc_hash": "361a91792c7cab36cfa9c84e20f59426bc709a658b94501f8c2b9064fbabc7ec"}, "632c4dd1-7773-4864-b24f-7c34610c32ae": {"doc_hash": "c83db562b0eaa24ae0d2052836bd94841cb00f564d2eeef56692bc3562dbdf27"}, "40f45d5c-e60f-4b20-9265-0f4306d35f27": {"doc_hash": "345ed853fef88142a2389016e49179aa07db451ff69629841980d092870e5a27"}, "6b2711c8-4963-4ad7-9f84-6520e8d477eb": {"doc_hash": "21490426ce7ec27a01954b57c41ff17fa31d55cbaab96de59f4ec20aaa4b8c51"}, "05204725-89af-40b6-939f-1036b943b279": {"doc_hash": "18793b5e15ca50c4a8b3d4f05c094059b278c9fdb24b860aefa53e12ee2d30d7"}, "ab2b811a-9134-4cc1-a78e-6a25150b8ef6": {"doc_hash": "0f21e0578465196a227e0cc8d454a34cf74c4d96a08c73bff1be51d73aa65e15"}, "7220c50f-5d88-45ec-8b10-9df96de543dd": {"doc_hash": "69484db8e800dcbabaa260f7dcb23d663456aa218d8b59c3c5cd078ea3203122"}, "c2fe4195-c69f-40ee-998c-482f53041309": {"doc_hash": "ba3b45ac28eff46383573bdfaa3fb7108aeba54aee70b58d3d58ce5bbf360b2e"}, "9f1dfaa4-39d6-4cb4-8314-c9a3f0e2414b": {"doc_hash": "28b12002dcaa2f7e9e588507d6633065204ae3807238ac4ec36fa21b4a481ab3"}, "c81fb79e-fa03-4623-b4dd-3b66c8d99f34": {"doc_hash": "a85c0eaef1bba568daf4284e1104c15a3fb36afaea2517f642ec5cbba7d80a7f"}, "1e351f9b-0751-4d08-925a-b8d31cb0b459": {"doc_hash": "4db0ea074a4b41d665c24a07dcb835d67962df72546df7d78d2b81058c757336"}, "0fd7efd7-c004-42d3-bf0f-852f6fa85f2b": {"doc_hash": "8a7ca61605688a4b70db2f4e92d2887d311db18a4ff9c6df2a20ce9ace7a5b92"}, "176bd1e5-ef37-47ee-aead-5c13208adca4": {"doc_hash": "5e839e2fd413476afbf13ef2605ed0223b3f89a122305c9bb24af69a61eefb10"}, "923ad0da-023f-4746-a71b-fb4797a3966f": {"doc_hash": "8cc53193684dc5e21ae6bd635d34789955328bfa6bd518d7661b51ad4dccc76d"}, "813af12d-03eb-4008-9759-dd0351de5b8a": {"doc_hash": "e57be3ece9bbdb5f7d7c82ea3f338ca830265773413adc93893c2b0b5d8e58fb"}, "c2c81484-d2b2-4ee4-bf20-6bd2c584649f": {"doc_hash": "0d8c2b5f96c787b58a51113ea1105ea550c6a8e5c07eba6237cb8d9143fbc284"}, "ceffbeec-91af-4bb9-b96f-e3887e270b05": {"doc_hash": "1246e583c12e5256f6731186caac4898df29541a81d611b3da02e940de2cb89c"}, "c71c2253-051c-4134-b3bc-38034913fdfa": {"doc_hash": "f902c540701451a11c139f413f07afe6aa582abbf034f3ee49916d68f1aa0f02"}, "004103bd-da0c-4e66-9a80-4004789b6d8b": {"doc_hash": "5532e2837d2d3d3015f2565af8cddbb9f22e8c29eb81c14c0420ede1e6d7e165"}, "12e9ffce-bf9c-4bcf-b425-be6a36225461": {"doc_hash": "4307e6cde5cad4683553ef7371f9736ab6ed5fc8a24a82641cf798e7ebc04e41"}, "670691da-1af7-4a7e-8eaf-303497c79377": {"doc_hash": "0e5566c7c07e2984a003d1b556c2ac19d7f7103fa375c55145e89d20b891927a"}, "46173870-5ae4-4ae0-8d4a-09c3effe2ca5": {"doc_hash": "7a40b1faed65807dabd47d0700320dc466e5500da96c3b678d92cb3c8c884477"}, "9600eabe-14f3-4a6a-b7b6-ae0f158c1794": {"doc_hash": "607d8fefe265bf1b5b28fb5343a47c1080ed1055481530dd16d82395f58dca34"}, "2e835c08-7ce7-4684-a11b-16299b20f791": {"doc_hash": "33020b03f2063b4ddce0c6f8262ff0e68b20453777198e1d88c3af38aaa1debd"}, "1eac3ece-fb94-4721-a205-5c11b6da8905": {"doc_hash": "6deb000ccc32e99ca37071af505205c075e0c2bfa913f40b1c14fdb33dee9191"}, "b0c03699-ef6b-41be-bce9-ba88c27984ae": {"doc_hash": "d6c99dac4527c6f1460c520eaa19b6ea1021a9366d79cccf42cb0515379b97c9"}, "d2f14d70-ac9e-433b-9135-598d8ee0d05b": {"doc_hash": "3fd2f717988211c1926c6bd0c0095feefae97d20bba3b3e680433eba466c8190"}, "54aff9d7-30e0-418a-9163-0f3af7f7c4f6": {"doc_hash": "64af7a2aa5320371201fb2a4ea51220398c1f18ba5e4ee180135c4189657b6fd"}, "f39da648-ebd1-4c28-8159-9a91852f37cd": {"doc_hash": "3594432ca7cd07ffef1c1973249f1dc5d28a521f15f913ee726704ef9ff797f7"}, "93050b94-e078-4e05-a9aa-02f79c8abdb0": {"doc_hash": "2109adef5c9fc28018a3d30c8f7a125fa9250338720105fe7215d905d373da93"}, "49916695-9d7b-49df-bada-5f3dadb8c7ff": {"doc_hash": "8eeb2383647fd8c4d843941a11dbdd6c2177d6020c73e04cffe30463888b7bfb"}, "c90dc745-ba15-402e-b8f9-9ae178e9d9d8": {"doc_hash": "a14486e705daa25fd59ef181771620d4198cd076f2ce3dca94a2eef904bff3c8"}, "cfebe566-186c-4760-b71a-7a5e37d02e67": {"doc_hash": "04eb87971a62fa11be8c5f140514c42e6f40a85009a2d53d472d1da216359c3d"}, "9db335d0-4728-472e-a920-628afe85bc1a": {"doc_hash": "2f48a4a6a1b2c8df07c1a00ea2af5b979cb2fecc4b7f8b97d27a779cf266e364"}, "b8527c9b-5002-421e-9c35-2b57e6f34bcf": {"doc_hash": "ba017b67dde09df4817dfa4137f9af3975dcb791b637ee27a338175d30f14921"}, "f2760dbf-f3cf-446b-94ff-16f231899bd8": {"doc_hash": "938e322d294d96aeeead8c2c9ef07547728ad19cf39453eaf060d77fa1e88a18"}, "e0987405-a52e-4138-9a79-12eadeb1ffac": {"doc_hash": "06c647ab3b5724fe080c8c4f4b6b65d9f12d5e6f997fccb113a87f01d5d77c3e"}, "c194c1c7-df20-41f0-bdc7-f0f7acc90c2e": {"doc_hash": "da4e39ba071a855cf611fbc4f765bec5876cf30c15b55e304154763d9e44b8a4"}, "52db4253-9d84-443d-8fc0-2aecbec1ca4d": {"doc_hash": "3fc4603e4229d92eed3e3336e2cdf87e6e370079651f66c428ac322eff72caa1"}, "6f0600a8-ab8f-4ca4-bfba-47660401cd3a": {"doc_hash": "bd927a6ceb3025619ad32f558ed190df27c0147c189625895e937f816ec2c4f8"}, "53bd4853-e1e1-4036-b094-5631df681b40": {"doc_hash": "64fc82f37ce9bcb4db133650f2a08971f9675e0c6d985fcc1ba6039686be53ad"}, "2b06a8ec-c863-4e57-9a96-a8f7a893ea22": {"doc_hash": "efaa041cf6a5a0e420bd718ec6001a4d1b42a6f8f40bfedcab8f6e79f80cd40b"}, "a9c7e8fb-02b2-49d8-8c2b-a56d1010d872": {"doc_hash": "8e69a9f5792b90fe700d852c2b2260bda66b1cb0702e4a725eb0d1ba0f59ed04"}, "a9660f39-b3b4-49db-954c-b857cc6f0f40": {"doc_hash": "8c9f6c0c8a58989f5fab1ef0110b0310ba85dae6d7e0de1e96f42441e5b72b70"}, "b27a1f4e-35ad-4bb4-af7e-7c86c2790ef1": {"doc_hash": "9c15903bb301a2befe07ddc2ea7282bfd87d638d193dc8ac130ce040c7962a15"}, "e326d52c-8e18-4e7f-9586-d6cd8c90bfa7": {"doc_hash": "4f492eed1bb0b85439b4e4cf86e079e0d2509f4019f9b36ed3d8cef57e7288f3"}, "d20a1274-cdb3-484d-aa5c-304940004d14": {"doc_hash": "001fc15a5da9f6324ef863a035f5516c5760a8fdff4b9113385714f23555669b"}, "ee74f456-c6a2-4829-bb5f-65e62ac7dd35": {"doc_hash": "becd90dbadd115e2ebf32a4459ae89c485607a8f43ed556b1b583b324bb9e2eb"}, "85f3d880-c9ae-4e6e-a7b1-121123bdf14e": {"doc_hash": "90c49733f066bc081ac0698ef3c49bb6fe7a1b15fbbd54f23869ec9a5610a584"}, "571b071c-a310-4eac-84cd-52948f04c910": {"doc_hash": "061a04b0aa032cee31eb22540f3a5ab8562bf4b398979a286ef8031004f917cc"}, "b443310a-4f93-40f2-b7fb-04e488b2c072": {"doc_hash": "0dc21c4c4789beedfb6cb93f1ea3cab29a4e7ae810188b6d506aed8765cd5a5a"}, "10bb00df-702d-4ceb-975c-ab679dee4e14": {"doc_hash": "a885f7840a3e9a278611fdd359572c7b3d0ad137c28e8e4a571140d5ba43949b"}, "7a315e4f-d594-44ed-a1cb-c30e91739750": {"doc_hash": "9e500897c89cfe5f74d7022fce6813d43ad1e53377bf482d0a326d7d2f5a7531"}, "ffc8f1ed-00a7-428f-b1a2-dbebe437b11e": {"doc_hash": "e57edfc37e62a3611f4586c20b2fa7f2f8f1f5ec31886c9f71b48a61a84b6922"}, "bd2b71fa-97c3-4bbd-a68e-ffbe9f811f6d": {"doc_hash": "e9cf114e2c3ab01e4e128b4788e219baa5c7e8a89fc5c3195f6a1a9d06faa5a5"}, "0f43862d-bc29-4102-9fb5-7602315cd86b": {"doc_hash": "1871f86777348118edffbf3a4e3ad8588891c31a7ce5b01d5cf3b51ee55614c2"}, "81f67177-d6d1-45df-9ff3-acb6bbd0d302": {"doc_hash": "709395f2a69f3efed6a386d1a23b448d861081bfb00a579b70abb79e0a57046d"}, "6b7491cd-e336-479f-a652-d9b5faecb704": {"doc_hash": "ea42bc43d1becd791694343da5f715709becf57dd57671106103652cc6b325d9"}, "11e8bc8c-8b5c-4137-93bf-d5bb2190c667": {"doc_hash": "6142174fdd27a3d0cbddeab0c0d38dc2504752f6858717b71a209cd0f2f36afc"}, "9a4cfe53-ffe1-4560-89ae-27e94dd16801": {"doc_hash": "cb89e24a1c68460c12618c7f57926e6661be7c85910a667af7c2b6c3e08c6500"}, "ca0db829-8805-471d-a5c2-6fd6cbc8078a": {"doc_hash": "4dc3eb3eb0932921b7522377e46dfd4285e9e30a4d84351bed0a1b8426b9d6d1"}, "0137af98-7e46-448c-9167-349760428b08": {"doc_hash": "8cbf250173ff099ddd2642080f7e506beec31de12b703007c0f6ce0b45fc105f"}, "78bacbc2-bcb1-4156-a428-a3b4adb1db70": {"doc_hash": "65293bf9a67fba1e3ea98f866aea603ae5046d4d6add1c4b16acfd88615cc36f"}, "b33622c4-5f9c-4b27-ab0a-8007add8120a": {"doc_hash": "72c18d88b5f9992802500a6978cb9bf1565a45e252547b1434d4ef77a4398ba5"}, "321e99a4-6c1c-4c76-a457-6a528e445ad9": {"doc_hash": "345a824281ff5696204e49216f7a4cffbd7609e55d9cee258069a3308d5d1628"}, "8dcda919-bcdd-4d0e-80af-596b5a267512": {"doc_hash": "c5103f866c503b804bd2e68ef6e1536ab9df9ffbf651d0ab1ec3da99442e15bd"}, "26c3d0e9-f115-4c3e-a05b-4258ca854214": {"doc_hash": "0be6a21153c3914a7ddeb6a49e4aa1329380f87c62a142bb7f52ce4fca8e673d"}, "3e628e7b-9a34-48be-b0f0-5ad3fcbe94b0": {"doc_hash": "7e77572c5995a3cc4ef616ce6e198bdb4417a78a28a17382967fca3b12736dae"}, "e0da973f-01ab-4c4f-a947-7b40b5219b32": {"doc_hash": "bfbfc15462b5240c40340e889ab6c0c7731ec749a3b97a4e7ff05e7cee291406"}, "75290870-f1dc-443e-be2c-fa9c0e5f7bcb": {"doc_hash": "073892fb03ff5378f097d70aedae2e57a3524cc8c3ea860bef560d54e503b1d9"}, "5f3cd516-ecb6-4888-89f7-13af4b0df74d": {"doc_hash": "8f7e58045b2897ad6537a37043e977df67be811eef8bb8f4c8cc9b8472922761"}, "3ce2a25b-3cde-4aa2-86d0-4be2dbbc22ca": {"doc_hash": "d631e64380cfd84ee3ddec2480f798e98bb509864f5c16d9f46ac0f5ac0ebc2f"}, "2f4d65f6-4127-4109-909a-59e1fe2e0861": {"doc_hash": "8c3b3fd83394bbe420c92c7ba4ad3e8fc5b6ac3a2a94590441fe4d07700a91ad"}, "372d1996-de06-426e-a430-a6b6cad0476a": {"doc_hash": "bbe24c6c00299db819ee8aae1cc0124910441a4065a7e02aba30d4b2cddcd07c"}, "29a96a0d-8aa9-4fa9-812d-839eba70911a": {"doc_hash": "dbb2166d8c52cccefaa30fda25e5999d167b2f336864d49a3157a82696e2751c"}, "07e6cd1d-6d63-45dd-8b7d-fd48c734ab62": {"doc_hash": "7d4417f525d3f30946402f41e24bcb49000198d7055b61e690dd30106aeada70"}, "dff9e31a-5d34-4e92-b210-db7da99093fc": {"doc_hash": "09493d5b077507967513c845ebab4029a63d2400f7df33748ca95e9b3d52cc17"}, "ebb9d183-cfcd-4342-9716-afddeaa1302e": {"doc_hash": "4386f7e42901f30de068aafea37fa3649e33f2d56cd9c272f7cf4d2033643491"}, "431f2daa-f594-4600-b8e8-e0734771e623": {"doc_hash": "5c28a9e4a730b98c36bd0571f0d8d1fbfcc361a62b3d26809ea38885a8b61b13"}, "4b9a1e04-0615-4171-8829-ed2e9e54065c": {"doc_hash": "4d510205b589c4c446174ce2fcbef084d32b7851c6b03ba48c69bd2c5f42aaab"}, "91a542e5-0019-4902-8741-69c75eed8b25": {"doc_hash": "05733d5e73d33ad825edff56d094d5cfd727e259cacce93f62f8b54cf84bc12f"}, "d3cbe5a0-fab5-4a33-bb62-0dd43731453b": {"doc_hash": "aa1c76eeaf3648301da07c4cf9b2555b876d67e3a7cb062ce451122523f84e31"}, "94854d01-4bfa-455c-bdd4-4a009a2d89bd": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "19d6beb9-c634-497d-beea-109a48d6890d": {"doc_hash": "b0d90cb64724900b3a45d7fd937b321edcfe1241e9472f107d4a2f4cee5297ce"}, "e3c51dd3-04c3-47e1-8192-db54d888af92": {"doc_hash": "b2666e5adc5971d78217426237f1bfdf84a5318582ea68e970ccfd2de28969af"}, "d4790dfc-1083-4506-abdc-c6d40bf9241f": {"doc_hash": "d0867499fb5dadb120060e637750498ec8a3ceeefa873f22bb88328eb26a86c5"}, "479799ab-7d82-4297-a293-c918a11f68cf": {"doc_hash": "fd537a3e8d0fd9290976078bfb828326fe6ccf5d79fe52263459a7aff0e31126"}, "011a7eb2-2844-431e-91da-a45974adb667": {"doc_hash": "66743ad26c671d9db8e2e8b3777e8ec7213b0c43126df3173792a7118d6cf34a"}, "eca1e77c-4f7f-46ca-aa8d-553e52ad8b61": {"doc_hash": "87f3ea1ebc87861ea8a4d223a0b9e6cd1654728d267a2328266c5aabc8d23224"}, "4bbfbd84-2c41-4d7b-879e-bd7045aa5bf8": {"doc_hash": "edd7d970a048c513a15fca8696df3670d69163ed1af960a7cc380ae6cab77219"}, "9ed6479c-2835-4ef2-829d-e0a75ef0b6f0": {"doc_hash": "06ead3047751ddcb012919ea4317566ecd908a35e1aaf464151e7718f5829637"}, "d8ac74df-e1ec-4a78-9d40-694767d6b21a": {"doc_hash": "2e4508d8489c0db93d3d904aaea35ea1fe804c655e97f4093058fddd254154cd"}, "16a0cf89-e092-4225-9cd7-e321acac1554": {"doc_hash": "3e64f0babf43eb013381362cc9e3b84827022a2ca55036078bc4346ad7d4e0f4"}, "134a497a-cfe0-43c5-a48e-420144c08973": {"doc_hash": "37b1c10f51ee5b92ee328924712875638795a3fcb748c74d6ac7de6dc502426a"}, "a545d0f9-0fcd-4d2d-9fe6-04ae256d4c96": {"doc_hash": "0076fe966c4afa3d0cb4d4eb9d3b8274eacfb20716f79cbe9a7f0a45b1ad18cb"}, "5e5e4196-561a-4c8f-95ae-aa82d5505471": {"doc_hash": "4a45cdb4bc0254ab09afb2cd896e19c8cd66f23c3f17f551347c0607817df368"}, "fd6c5776-8c62-4d7c-990d-c4321538235f": {"doc_hash": "f8345e0b0f76790919b94c860532de11a77d32f1ef189c3b9302a772cc088957"}, "9d56d754-a5cb-4b13-ac5d-13a4ffacd7eb": {"doc_hash": "f3097e9aa14747d4aef15a30da47c49fdb8ebc1423c4d8de127fdc08c5bf78b2"}, "fd0d5124-f4ea-42d5-b2a2-0b6ae9e53cbb": {"doc_hash": "158594dedd17c2317ac73c531ccc7b8b0abea821ed50b3eb537dce8d676d2f98"}, "dae28d8e-7b67-4218-a48d-9a97969cbefe": {"doc_hash": "60c9bcb2588352339680936e95d5d437a8526ccca57709c3be1d4523d4dd8e18"}, "525e1717-2340-4802-a7b8-73bae0616679": {"doc_hash": "6c12aaad64702d4d5e9a15982df43f80456c5be43f9e5be1c3ffb1e8202ff3ff"}, "ea733736-961f-4673-80b9-c955290b3c9f": {"doc_hash": "294cbae535a82d5ffa3ca81f2ff448b489889b7040ef79ed53f124171eca959f"}, "1a2b9bd4-041d-4f10-833c-79ec891c049c": {"doc_hash": "01d076c481c60c821ff91695e7d293c5e7438e96d217ab4dd7f0842bbcb3ae4a"}, "e4b7e8bd-1f4a-49aa-ad66-afe5b99a8a15": {"doc_hash": "2c914cd8ec2e713a167be4b1b8b1adb3f60c355fdfc926afdda05cff33ee3408"}, "1ba24ca6-3fcb-4fa0-8df3-de166d139c19": {"doc_hash": "69b227475c826d7ea28c05e1126b9e8e242e46218ccb5b10c207ac99f13754fc"}, "99fdf391-62ab-49a4-be8d-6eb1b6046c1e": {"doc_hash": "bf1d53e81ab311490029ea705e514b8b88e5f648fcce7036945150eae27abcd6"}, "f7313fa5-9ed9-469f-9c40-c462b82d2265": {"doc_hash": "cc6e82a74015f6865bcb58df6c529615ba783e898124aed320029e18d7b18195"}, "f911e384-1de4-4463-a2b2-c3770d0b8ecd": {"doc_hash": "054d0ec527664cbb1dee1b7c2eea37c5ca301f5674cb4fc42631a555ca655b8f"}, "6470e424-1054-4318-83cd-28f48714cb5e": {"doc_hash": "4fe789fcb313cec605bd933f5d103121843e7743a120c49a0c6cc3923c749992"}, "9a5532e6-8ee2-4669-b2de-2e9786ee34c1": {"doc_hash": "ff251e4c6ee253db4f6110bb514cf91143b183a7901308671e83c2391afb85b6"}, "6796bd05-9825-4805-88da-f469b7a2eb4b": {"doc_hash": "0000adaae2c9619c5c94eee12a3928d3f741e96c3fc5f760d365e4efaeaeca27"}, "2961fc4e-0518-4599-84b9-bd6f8c876968": {"doc_hash": "ebcf43d2bb3d0e50825c0ae1c6a8e1767a4cb4c80bd4152de5ff78652283341c"}, "14bb8349-c701-4922-88a7-42b750c52736": {"doc_hash": "24dc5f4262f86733a31d43e08c02d05cd56e0e561b24d09fa71e68280709955d"}, "a279150a-5ee4-49ff-8d54-e91bde64c680": {"doc_hash": "0d210da508ed3cb09ce411a22eb48b8b4632eef2733801ae3c2a13435c09e26d"}, "03e363ed-81bf-4396-867a-1d796205441d": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "1b97ac2c-8a5c-4122-9a5e-abcef4078c2b": {"doc_hash": "7000d0b67309865ed72537d55b9bd5d871aaf866944a7b6bedea2bb51c213115"}, "143586cb-816c-45b3-84ba-c063d4d9f506": {"doc_hash": "975cc8d3a0484b3f63fb9cff22d4880e41102cc08b3049363f56f4100208f2b7"}, "99ad6c3b-5e13-4103-965a-e8fd2891ba40": {"doc_hash": "e015bcdce9aa9e2690c5de1a3f5cc91392f1cec3917638c49dbd2b48b54bb305"}, "1127571b-bb0a-4ad4-abeb-86fce034675f": {"doc_hash": "9f577be9e7c2f3d4b9835b37b40af46786b8182e749c97462ee825939f82cf82"}, "0b8fd5d3-af03-4891-81f9-b22fa7134deb": {"doc_hash": "019febad84574e347e6e261165d2a469de7ad97342281cadb4212362198d2318"}, "55f3aad0-5a41-4220-a3db-a6b126edbdde": {"doc_hash": "ea7e795623c5ff6284450f5be8b71163af027efde4fbc513c17424875d7870e0"}, "1d2bf1fb-cbd9-4a6f-b6a7-d7f17dd0f688": {"doc_hash": "f61e0964525d84007847ff092568f6a318a18b16bd6167a634dafb9d579f6571"}, "bce5cfce-567c-4fac-862e-923ef324b5ea": {"doc_hash": "49563abaa387c2c5330cb4a8645295f79181fe5f1e0dffdafcd1bec793712c9d"}, "1d28c199-0fdf-4a72-a3f9-169a76281026": {"doc_hash": "458edb7e03e9de3fd906c0c8905654cbbfadd36dc4bd6ecba5f8c776d4cd3184"}, "957e781f-4df4-4be3-9bef-57bab432902c": {"doc_hash": "99a6478b11fa71e2d0303c4b01fb1ee58e7c9834cb1d84b8ad3a1b3058f842f8"}, "4560894e-d5f4-49a5-987c-10846caaedfd": {"doc_hash": "4f20348ba6fb3f5bcd7dcf799279c730c21451ff2075078c3f61e63097dc036f"}, "fccfddb5-c36b-4cba-aca8-3ab5e83174ac": {"doc_hash": "bed204c77207652bc039200da34a8a773264287431a7a0f962e81c573f6fc3cb"}, "b3344f3c-d2f2-4e6f-bafe-9185c2af83a6": {"doc_hash": "63684962e719c84c6801c7436b7ad21a6c54aa900c4b00a0c17edf73f6228df1"}, "26ac80d7-4e9a-4f94-8a8d-7647eab4d960": {"doc_hash": "978eec9dae528d86d85e802ae56ac5d0fec6ccb4fb247fa7acad17157a372e0d"}, "a366c28f-bf78-4bc8-a2a4-6d61ca1e8faf": {"doc_hash": "989a560d808a16daef8427a63fb93bad6c756e1f45c74fcf22e16b6436ae5ce0"}, "abf31dac-182f-4c25-a6b5-f4999680ea21": {"doc_hash": "fc1a8df157867c779fb4c6b1d0a049b9ac2f20d92c9b543df2f79db11a14397c"}, "6388febd-7e90-41e8-89ab-88acd38b9b66": {"doc_hash": "9a6c5b9858673b2a0bbd234328fba130bbd2eae9985b4f6ed66e327340976b06"}, "026c914a-29f3-4643-b33a-554615d6a766": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "3db0d810-6c2f-40e2-bef8-0435f7085900": {"doc_hash": "936151d3a4d89e7964e7e28b455e33e849eeb4f1a5f5aa4eff3e44554ed43f88"}, "586b4fed-44e7-4286-ac9c-27428b49190a": {"doc_hash": "79220a1dacf93ab5edb1c420c1847f9f4cf7f0065588d210022a601eaa8cb0bf"}, "fff026bd-77c1-4cf5-9a58-ae3c99319c9e": {"doc_hash": "1de4e7461e7595bc686fe2af4c55dbde339612222bd5e29413aa82c92a023794"}, "d552cfe4-67ea-43dd-874e-ff9cee3730c1": {"doc_hash": "ecf577c93bf6a9bdf6fef38ee896d888b2ef3ac42bab63f0b53817b88342d3b3"}, "566534af-4457-4c79-9551-2d20cdccdfa2": {"doc_hash": "6f74ab639fd03ef2b7916c38b8b64a0a51702da63e9504583f67dcd695311787"}, "2c701332-4fd5-40d3-9a2e-edad38f5cda3": {"doc_hash": "292806089b12f584777eb537a1d28a31c93f715395e4da04ee21e38016d944f0"}, "ac598ff0-7dde-4d75-b5d8-03b56a9a7cd1": {"doc_hash": "32d5de7e2eaab7e091ad171fc29b91d4ea24146c1d9242ec42fd6f6706013d66"}, "cd1f4905-e614-4fd6-89e8-bc56dfce5005": {"doc_hash": "bf80e6061ac8fe313546732d1a1fb3bd1361def4eeaa170f793139e9ff180ecb"}, "b5cb8a19-3ead-4999-b7bc-66164232ee33": {"doc_hash": "dc33fe84f684eae0556d4bcefe6bb15e65d61981b96e40bf3809b16dc71892f9"}, "2c98c9b3-a045-451a-be3c-707e258409aa": {"doc_hash": "31b4151569222ddfa090e01ac9d46b7378f6f4173ea27d84d35b98b6af406fc1"}, "ea8983f0-85ec-41b4-9832-38693710bb3e": {"doc_hash": "66ec7812009d9c1e819a9190b47e0e07f83ff549e565895d16e64f32332a5f87"}, "24482ac1-906f-4fdf-ace3-e21ee4592bc1": {"doc_hash": "c70975bb41ee583d4f92a016b000067940abef5c28858ef2ddafe38ea7956ed6"}, "f8a73abc-8b7b-473a-bc70-7dc262128f43": {"doc_hash": "75f242a5c082000c90ee4e88305c0b120e60507844f0583e63b78a61357b1656"}, "b85b2c9f-f6f8-4d09-96ad-693e08719039": {"doc_hash": "ce7704813a2e4e19e34a4788233e3b30019e1bbaabbd100a9ec8e15c24ca93ae"}, "d2c1cf8b-e9bf-40ac-b7f5-a3d89e91edb6": {"doc_hash": "c4698a1d45d403c2c6ba8d32700367ee9420cd57f4f50034eb6b124fa0d9a4b1"}, "e710e637-2fb8-48dd-8071-d072f748b64b": {"doc_hash": "98fadc4ce2c85d6d33bf14295cb72302375b4bf2a994c35012b697a01bfa985f"}, "715dcca5-1b64-4245-ba57-715fe3fac989": {"doc_hash": "3477aeed448bdce411bce0f646ac06aaf4f4e7a3a192b821e485eaf4b9b7ec3b"}, "c3e12033-fd83-44a1-902e-c35207db8512": {"doc_hash": "0c188e84c341042992dc2416751cd979f09ca25aa91dd77a1c8d39a411d612d3"}, "b098aa41-27eb-4a6b-b52b-c79410d38383": {"doc_hash": "5cf638ad2eff63a4f11b2df4804ceb562871ff83df285101163413ecc9ea60d3"}, "a6f2e44c-e202-4563-a035-78e4dcd2b825": {"doc_hash": "819304c4d1636667c2342127ce0508cd343c11729c27ee2bddd214cbd1c00dfb"}, "eefc890c-bb1d-404f-aa4e-d55ec467ead1": {"doc_hash": "317b5082cac59381af479de3baff5fe2d6700de4d347438ec3bc68e95ccca519"}, "8dabf594-fa7e-4c08-a47e-b45bd960c2ab": {"doc_hash": "709ad4334e7d1c798cc7cfb3b676eb491239fb44f94cbe5929aca45e75d39525"}, "6f591dd7-1ddf-4848-a123-0a7855b9e1c0": {"doc_hash": "720e9237968ebd001553bd2e6954d3a694db8c1985b13bc8eae8de02d1647690"}, "a60e5cea-ab36-4494-8666-b971ed5646e6": {"doc_hash": "1cfe86a4891a467a4d95447a3a21cd8166f87075996069c5c36c77dfcdfbff41"}, "eb18a2be-1afa-4d23-a812-e70c516e5053": {"doc_hash": "e42e725b3a7ce202dd22f2251ca2fbdf2492d12a8eb272a6b4ca0100136c041a"}, "fb398e8b-369b-4c4f-aa02-fb0e2bc98ccf": {"doc_hash": "c5409acda627731d5f48db035747092334ecfd3f9d7644395dcb4a62541396ea"}, "f57d40f9-ca5f-47e1-82a9-6ab56f496a36": {"doc_hash": "252a804f3012f561a7bc3592bff76681077f8f355ec7f62b7b7e9f1243c5dff8"}, "7762a72e-0f61-4d34-8270-53bd9be0b690": {"doc_hash": "a56b5eea8048345c99c8cb76f5769606a4314332593489aca5d2c00a57f9cfec"}, "32feb1bf-0377-40bc-9e6d-1f57849b83c7": {"doc_hash": "8a45cd48f3e56454916790b5db8df267e845ec69d8e2e7f34d1713bdffdee815"}, "2a3011a6-50a7-4470-8571-bd6685d3c442": {"doc_hash": "fc119e25d8decb2a7b795997e359f45f5519bb5376d2c1ff9d4b9b71fde26b7b"}, "3116ac29-5983-4d5e-aa9e-89b57960b943": {"doc_hash": "8f3f99867a89ae9daf76c7db5b1620557ff363b1dafa9dcf251c8d0512aa56b5"}, "a68fc1f4-3d46-455e-983a-d73786304b20": {"doc_hash": "bf8d74684dd40422e7975602fd0608b45c123ef57f8380dadb6d08f92d2d38eb"}, "907de937-ba12-4cf3-a7fd-ea8811c91a12": {"doc_hash": "e754ac9bc16c7d4a9343bfc21f90a154ba32986249c9c970609f2f220b825da5"}, "cdc361c2-ba9a-40a6-b3d1-7d70ce715907": {"doc_hash": "faa10e3e47ce27964c866c232d18be8d14c6fb4ebc8c831c6a3d84cfcc841ed7"}, "47b0867c-314b-45c7-961e-b2ffacbfcbd6": {"doc_hash": "607698cb46df55d417e1d57aeae64fe87ec885ae3d719a878b81c476e34f9b0f"}, "401b851c-4b06-4832-8661-348efbc8a029": {"doc_hash": "ab7a7c15de281f964f1841d39651d54e6fa6a5368161a17381f1733f4868dbeb"}, "60c5813b-194f-44dc-aeca-b2e294a053ab": {"doc_hash": "560d04a98c8a2bf66cd08c64ccdd7f954e08ec241adcfe4c1dfc953c61390d8f"}, "b0ab75b3-0e32-4fba-aa3d-f6501ff1f6c3": {"doc_hash": "fc131a8854fcda7e11d8a55111a480558ef33374a4d499dcfeda34e4b179e76d"}, "a5497175-ac41-46dd-b542-313101438eb7": {"doc_hash": "b7ee6d786f850192c7ac13f02dc752fd6d99f47d271ebd8f3ce5960a7b73ccca"}, "d3fd87b6-7c3d-4d16-bc38-7cd0cf2dba33": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "38062fe1-3efb-4af5-8238-59032184224a": {"doc_hash": "abfe013e8e875ec75aaed7f2dcd0d2e828f9bedaf796fa7066175b4764158eb2"}, "ce3b0c30-db4c-44af-bdbf-ad72968590b6": {"doc_hash": "3d0bc1147e49966d38be8a8448a7037b41726707ad537d68629273366718e115"}, "f5428164-e69a-4511-bab5-0ed4907a66b8": {"doc_hash": "c9fb664e92ab26e6ed9ade380916241701043409d7fbbbf1838b1af8b35e6a54"}, "11839251-0972-4fcf-98d5-1e96b5e6febe": {"doc_hash": "57fb7e370e08e23377e60ed4a192749eb0c10327fdfb396fcf982087b1a7c1c4"}, "0ddf5fa0-18c4-4178-8b15-28306a8f27a1": {"doc_hash": "c7d9843f421306da55e81644d7a958fa9f68bf65eef3a6934110b6335d4e46a6"}, "fab49502-c1c4-4874-bf14-42d086211eb9": {"doc_hash": "4df81d9da30e48d822a00e4aba795fc3d05f67ebb486c9f68a5983f56ecec37e"}, "c6d71844-218b-4b3c-8ec8-b7d21ffa03c8": {"doc_hash": "9aa7f32344d6443a33273c3388989bf42e1ec8002c407d59ebba2ad3327f35ae"}, "4821d88d-083d-4fb7-96b2-bc33f3cd4833": {"doc_hash": "46495359c6070b148917e476b55dc1ce6c61ec4b218790175dfc680b33a64e5c"}, "295785f1-8d2b-4582-90ac-b9425bea0afa": {"doc_hash": "b8190553986804675ee0013f948d26f4374fc6b7724af5f9e4bcc6ad7d8299dc"}, "d06c9d02-6bce-4350-a3c2-ed23155f2b42": {"doc_hash": "64dfd3e6cc8757a8f3f9c48336d0e02cc125f3b9a953c9860fde56c9e8393ea1"}, "52914f46-cfde-4193-929c-3563fa2031c5": {"doc_hash": "92deedc44dcca6708f796d7ae555ef6e75627eaef7e8c9447ab005da23d4e5e7"}, "d4ed3b70-ccee-4205-a111-04efeca34e0a": {"doc_hash": "a3a1863483cae6a773ed05e38f89f86af781d004940247e56f0d50a1e52dbf38"}, "2b4e3b1f-b4fb-4ad6-beec-800c6b589377": {"doc_hash": "3781d73410ebfc13663d54c715fea66c83db64f2fa4fd91c6db6dd51df9f96bb"}, "caf7c77b-b9f5-4b21-b2df-9237614f5604": {"doc_hash": "28fbcceb1a319cacb03836f9a0323d1d88a210d30d8938904923c2311e51140b"}, "cd306b6d-35ca-4169-af99-48bd4c3d09f0": {"doc_hash": "f95f13857fe60d3abdf0655db6f0bdc342987d132ca605a84273fcaed0cfc30e"}, "3b05a250-477d-4275-8905-4211b1a975bf": {"doc_hash": "55eb6de0c15de219a3e0142acdd1faa2f67daed313a3e3e95723e472d4906617"}, "9567c207-0a67-473a-9433-cb30e74a0b5a": {"doc_hash": "bd7c561a3cc9ad942eda76affde97c2fbc0a6892f3d851c775997c018710df0e"}, "dcb0a653-40d6-4df2-ae36-94ef093e8886": {"doc_hash": "bc42bd3017a010e238fbf405cd1dbaeea7b3023d06b8a9f7c2f177b28e1e72fe"}, "147dd45f-5d06-4913-af1f-c43e5425e63f": {"doc_hash": "26919fffa4266eea681583a518275045edbc5ac7491168a1327884110ed4cdc2"}, "525718eb-b425-4b79-8d73-b15822a0f3c6": {"doc_hash": "815365dda23781755ed0ee690a310995b2b6dfd735003852ad5df37c0f3cc0ac"}, "a0b0acc8-840b-4422-ae48-826db59e12dd": {"doc_hash": "678b5c0402e0d98591674c46acf9afde1045ac000edab627a5010a1b0d167859"}, "7f33ce81-b1b4-4889-aafd-d5f5f370d877": {"doc_hash": "4a4675c75a88b0f616c34d9d10f0d22f1896039385a9ff98bd0f8cdcb71ef58f"}, "7ceecf92-6721-4f77-82da-312959cb0eb6": {"doc_hash": "39d10b2945eb947b4e55ed022c853940238ee9bc131f65fdbaa2dbdd91468c79"}, "b976ccd1-0e4c-4b19-b7cb-bb8d7e22747f": {"doc_hash": "65d13bdd969feaee11959f21fe61d1ef7c3e7815b7208067e4b1ebc0c24f5362"}, "b678f24e-45a2-485f-b6ae-d81f169e5b4e": {"doc_hash": "94efb8e323851424042bda59959d3302f175d509ae4bed90779d3202ad088482"}, "1a5c1c7e-605a-49d7-aea1-9f8cd7028037": {"doc_hash": "9b677f9177645d0c5bba7ff97940c17ed2060070cbd6d43b4aae410cfcec376d"}, "477bfe58-3a30-4596-befa-265b35347458": {"doc_hash": "24295b23efcb27b076c6061476c28cabd1e8c44e65adf26ca06bc96db0f73244"}, "797d82f5-ae36-444e-9ef4-4f1935439737": {"doc_hash": "90c97db3182f9cff94f725a62b85a568eb443d93b387a7811cc9350322557be0"}, "0f2e80de-f13d-443d-af52-c8a71508d0d0": {"doc_hash": "b9248d38a60c969852d6d805f27ab70b6766bf46f91b5e5e934d0f684102f028"}, "254d5bd0-fc3c-432b-9d1b-6a309088976c": {"doc_hash": "1701b4644710e4c022bf75cbecedaa9b5522f0b957e4842eaf13c1e1749005b3"}, "81b270bc-5b13-48ec-917a-1abee218d9cd": {"doc_hash": "5b632802a250741656291e72a19a49d5aef9aaa94224644dab02e481e46f5820"}, "f8d17f7f-08f9-4602-9934-10600eb86522": {"doc_hash": "abb25511676b2d234950e7874a9ef921d11c8b5cd6bb4bc19fcf1472ec24795e"}, "a300ae8b-6907-431e-a588-7a855e38e50d": {"doc_hash": "b192fc91cb856f6df68c53e7061e19f15104195882545a3714fec06585d1540d"}, "d5f71016-c79e-4024-b898-0f87bc436f6c": {"doc_hash": "9558e74d49d9ed9c5182191bbfcd9a89fa3640c97d402a8063ed4781ef8b1084"}, "1f31637e-fd02-43ba-85f5-1d76a29edc45": {"doc_hash": "2e9f7a7639e643629d2c638497f5b2c170d5ed30cbce0176b7a3f36f4b87f95a"}, "b5438909-29ce-4865-8e7f-5780a68edc89": {"doc_hash": "bdeff85173e51f92c315d29d887871c1f3251c94e7ad13d1513236cb5ef4b980"}, "6daf7c8d-169c-4e71-b3aa-7d656c5aa335": {"doc_hash": "adf3756f4d736bda74887752417a8a47321f3a63faae21a82aa7dfc79aceebae"}, "9c5098d1-0a4a-4d55-95ee-6df2759dfe96": {"doc_hash": "da98255bd2a3e54a2ba175a90ff5e98b8a144be82bbd1c69ac15d62c85ae8b9f"}, "c3f93af7-81e2-4537-b9b6-bccfe8312be8": {"doc_hash": "b3f2097e994d6d1cd30ddaf0fe47d56ca29392eafaefeafdaae33f04b3649e5a"}, "8d959bfd-bb64-47f7-911c-9c083ab1c30d": {"doc_hash": "36eb6392460a3317a8891834868302294ce86122dbe0c542d096bad5b379ed00"}, "d7cb1dc2-af40-42ae-ba9f-700904bf5a95": {"doc_hash": "d090894a34faa6bae5bcc6a84039fb427c4bcb7c2d3ae976917ea2e0ac13ac92"}, "b2511b1e-1be2-4a93-ba44-9dc973a0a9fd": {"doc_hash": "0a2602727a91f7a95122cc81821f631e2c21e24c8804c5a2137d520b26d443ea"}, "365027d3-bb03-4a81-8da3-a962a2555411": {"doc_hash": "f769a24b808804d1219fd583e6c05ea5e29d3477edb162392da7c13346f328f2"}, "92efdd71-4c98-4e32-8a26-73bfeffa15f7": {"doc_hash": "eb8357dbc28ef3fd4f15115ec3a9d1fb777bb003bf28592abe8ee82940714922"}, "6526a161-6d12-44f7-8179-cc640fe3430a": {"doc_hash": "9d7996b640383c8f0cc1b90c878c2d0e43d1fb9eb78c5e62b820ee69946061a7"}, "e5538af5-739f-422e-8fd4-842a95100454": {"doc_hash": "fb501b29864d1e14574d741f69a2e4eb9275b6ab8e7c58de0e26360a73f17498"}, "9b01bb83-5716-45f4-8fa4-52c27394eac3": {"doc_hash": "44d0e991809a4b4b60546b8240bbf84fc81a5c1bfcae6967606719694dc4968f"}, "2679f2d0-c56c-4e2a-86fb-f52ac438a56e": {"doc_hash": "f2c8129eeb58619187c82b63e891770f99c449a282afdf44503adeaec44b794d"}, "7db29dd5-3b0f-4114-af3e-544f12562230": {"doc_hash": "3196e02bcfaaa4625a1b7397c7c4c4c530a3ea5dc420720d2186ffa8f73d3da5"}, "417fbe10-311b-4221-adce-6d8f1c8a3d2b": {"doc_hash": "20707e1bf26088c45fba0a77171ce0827e32792290932911e9e1461283411b35"}, "19ae6b6d-2bbc-4709-9c27-1d196e5814cc": {"doc_hash": "8943d6d923cd1e64f22f6652c1f0f43543c552adf76f03de84f6c756125c343d"}, "0eb11fe7-d1c0-4e7f-b83d-bedfd3bb8ac7": {"doc_hash": "5c37d58a7c719378978fb1992e4d85e80886aa4a1f633e494f0ea638fc8616da"}, "b0651d64-9470-4e90-97f5-294404387893": {"doc_hash": "6f1067a9ed4b7340b15f1991d2f71992a268897bb548ae54896bfaa82dbac4e9"}, "da3bb542-5030-46cc-9d18-888e96baf54b": {"doc_hash": "53f8a720bd7db9645f7708fc42ccc3d747ad32f08176159ca7d141c55627642c"}, "798fc166-f2a5-4ea9-a1d3-7e0985c78487": {"doc_hash": "93f24fbb8df7d62ae8459bb3586c04bc23c186b3b0b8617c24e2601347e8e98c"}, "f3419ce1-8af9-47bf-824e-a752aa4d10ea": {"doc_hash": "43c490bcf97622ed7c14997b4188341b7398868c29f5637b1c8c81a59b5e6340"}, "5c96af14-8d46-48c6-855b-fcd8c7a73ac1": {"doc_hash": "e1e6ddbc81c778c044c02d90191accfcb48fa913a08f15e619e5e417a1ca33cb"}, "f1bbb7cb-18dc-4f96-849b-a4db39ea554b": {"doc_hash": "36e0fcd1b19b6244803c11d005291a884d819e9ab9b3e7de2671a650dee1897d"}, "3e463451-0b00-4782-9640-47611f1b5cfe": {"doc_hash": "12c1ce05279a1b1273bfa74b5bd059ea518a4e090a5c811b89445547e5238f3d"}, "41cf41a1-2bff-473e-9290-4b90b09e03d4": {"doc_hash": "a9cbeb658f457733f99f7eb03b935fb967f2665c8bbd68fa3156daa23352258f"}, "d74e098f-2a40-4127-86a2-6b81fc9e329d": {"doc_hash": "c0bb69812456f5a1245fb0708869f3ee72ba12bf8a1ff43bba1194e08b2afa1c"}, "47838cde-e8e3-40b5-a74e-952d956e4c7a": {"doc_hash": "242a29df4a4e459f554f453f755ebc47680b0c8ae6ba7da1384953669539b082"}, "5944158c-54e7-4259-b9b2-d7fa58fd0ce2": {"doc_hash": "2f9455ed984d8885d2b7f3db94d89a968d4cd2c5ba05d755242f23c37205c538"}, "73b6846b-37f3-45c8-9acc-6e353b97d485": {"doc_hash": "aa74dd91c6a330846e58b6dbc89c01680f7cc1218f240390ad3c0de04b6a38e6"}, "bd93353b-78af-4d64-a5ca-40087cf45f5e": {"doc_hash": "a08e85ea4e1255bc9571d771938db0aac31097a314fa72af13eb056f50d21f25"}, "f6d1a57b-e17b-4f78-8566-d47e8525f40c": {"doc_hash": "5c2b36477f604423252a4dac69afc93d15ce60f3a0d40da3f7a1ef9cd1bab252"}, "88e9680c-0a8e-46f8-baa5-2478e5e7de03": {"doc_hash": "7e6ebe370b0c50f6cf5638f646dd6d978429f45a97b9b68c25f60cc8be59993e"}, "1fd068ce-718f-485e-887a-b5dcbab5396d": {"doc_hash": "1033eb67c25f8a37556d9b26b8d1abab8e5bafb439c53d0ed968d8af521ff17f"}, "e0b80983-7483-4ca6-ac72-05577586137f": {"doc_hash": "f98ed4bb94533990cf53b6fb696460868061e81162e8970254e5c6f91d87c08c"}, "20da4996-3bc4-4b68-bfda-cfd130060dd7": {"doc_hash": "cc8c6ef4874e65296429759020aac77f0f9020716ce6548423c8d54297b201dc"}, "c1044ee8-0424-497a-8db9-83b93acb1c38": {"doc_hash": "a45c3caded02a0112150815db6917dbe4dea53c87a076740915696ab1f61c04b"}, "f6c988ba-a0b6-4b5f-bb39-1885ef0cc6c6": {"doc_hash": "7757a6178db289d7eae73ff3e858ad66bb2b0500bda8eb2ead9ed0b56e676f15"}, "3558b6ba-1382-445a-806d-e4ee1e8dae18": {"doc_hash": "9519038f011e570e57c91f8d5269a12467fc9f3ac2bdbde6c5d60c375ef615dd"}, "bff12fb3-7c7d-4933-b52a-6e9b3bb38064": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "7bd5c609-4f68-44cb-a2f9-e7aa0027d797": {"doc_hash": "3653f0a1d1f45b3f4efea2266cb32929ec87255d72eb66e58aeb0a44e6ac3969"}, "76b1c29c-69cc-4152-9644-dbb0381d20a3": {"doc_hash": "f2a3316a38480a6d8ef8b528caedb8f3f1e8d8765e546feaa389067bbb584184"}, "c2fb43d8-5e80-4edb-8252-5b1c6c853ba5": {"doc_hash": "4187c47063ed08ab30036de8a1bceeb924201538fd749ab4c7fae819f4428157"}, "ed47c2be-31a0-4b93-814d-96b706709af6": {"doc_hash": "4923261c8fdfbbdf86a82446e9567c18b25a7745f9dc3a9f3442d1187fb505c3"}, "3071a475-adbe-4c31-bbb5-1ea73e06a834": {"doc_hash": "3b34ee90af64f7cbafd522e548770eca2859a69933cd0d7569b481fd28e35c30"}, "b40e685c-05f3-42fd-8b9e-2da3241c3c97": {"doc_hash": "b1ec878c18812739b4db34183dd1fffb30b14bf7062cef787e9b2437df863cbb"}, "cb736e8e-ef47-4322-8509-a86d54659846": {"doc_hash": "6aea77b7e89ff5fdaa3e20f50f015e1be3c45f792a538308afeb0b0378f0ed3e"}, "5422306f-455e-4a92-9d6e-1095334f5ec8": {"doc_hash": "7657abd3dc8807c7a906da1a77dd694fa172f31fa1e432ba39e3e38e36be7852"}, "736650ca-46a7-46e2-89ac-f31a5f6d6ed4": {"doc_hash": "d4873d8fc4c9be5ad58c5f9d4eb24d2388784c2a54d8c3c243bcdc4f6c062de0"}, "99c74577-1e2b-41e2-bf02-e7714f773426": {"doc_hash": "4edadba046b97d9a2675a3d864a894558961754c2b5460a2d209e449a258f490"}, "dc91214b-09de-4bff-a373-d386bf126e10": {"doc_hash": "ab4da3bb21aee9d1c5b7e35f2ccc6105d76dc2ab9019dfd1d048b98f31c4cadc"}, "3247c556-c251-4d8e-92fd-6c444ee9e8d4": {"doc_hash": "30a25536d0430838096c941430ec4af9db54da16d39ecb380e6f7cad6e4c3bed"}, "4954e71a-c7b4-4cc9-b906-a427e3ba12bf": {"doc_hash": "43e12a327d4ab0d61d088bc31ccc059ed3e2c6ee1e705b144a48908ce98c02b4"}, "6845825d-dcc4-45f3-bc8b-4aa2f25791eb": {"doc_hash": "153bcb467730f238596612da20c07aa897ddd8cd70c2e4e49658751bce6c3791"}, "b63eb823-65b8-4f81-ac25-2643ab0de952": {"doc_hash": "d6cdbcdad07beb8b1fb48666a0f929559c42bf6ad6caf9584a2f07cdf5c3074a"}, "9ac6a875-2674-4875-ba0f-e2ddd4664a9f": {"doc_hash": "3a057f6f2e40257cfb381903adb87151f0917e31bc81b6274565dd86e1c49646"}, "5b943f8d-da2e-4489-83d0-315e25d8c0af": {"doc_hash": "236534220e97d08593c6bdaa4fe92b9060e5bc2a231d0a9c66c06e05a60415c1"}, "1ea64f0b-df78-4e30-b208-d7cc9a906641": {"doc_hash": "122c7db8c7f0807c5f22f4a07f471af40e0bf066f18992006c47b1687746a11e"}, "b34bde9b-921b-4e4f-8db4-b4f42004df4d": {"doc_hash": "6551640b4b031f12069da98ac193635445c6b1557c08aa238458e6a6955472f1"}, "720dbb9b-6cb5-42fd-8b2b-98bb1df4fa92": {"doc_hash": "fb0b01c88a664cdf388e54a1667d5206fd75855e1ac2509cbde9e978a2e630ba"}, "e8687c05-bdfc-4f8a-81a4-91d807fc2bfa": {"doc_hash": "9283f558efa57cbefed5f9658b26bc0c9548abc7b43d415136ae9ac12c9f22c9"}, "f6f5414f-48b4-4d9e-9342-ec0be4d70a79": {"doc_hash": "e0c8be9065bcc47fc784c7f33630e7914dfd352c41463969b1108f7df67c266b"}, "ec439c5f-4fb1-42a5-bd53-23b528c8a034": {"doc_hash": "b8806d7bf7387ed530a29afc12622c38d1302886eb91daf99bf7a3445aff1f36"}, "9967566f-8d3e-410f-b3b0-2abb6d3b4917": {"doc_hash": "a1a3e641ca127cb4443075e9eacf94068becd8e3b4af9d0cd911d330c5d4ed06"}, "7d5fd680-3984-4d9f-abb7-154a069d9198": {"doc_hash": "c855fc666ab75c722aed5d97650f2b64639b96ac89a24dc7770c4aa75a1fe020"}, "bd7befe7-954d-4140-bfdb-ea9224fc7d95": {"doc_hash": "d068e382e5d7edd13124241f3a30cfa5b26840a8e7fd93d14c4d2eb55ab6f936"}, "293bebd4-c05a-4185-a8d3-2fd4c380c4b0": {"doc_hash": "2dc522e9aa87b01e48550a61c07cf26e10fbc9c05062059f7156d46f7c136e9d"}, "3565263c-cd86-4611-abb1-76e7156ec4d4": {"doc_hash": "008ab8bff58aa8eec364063e92f89ba3796b71c8e57c725914974b84a35b1857"}, "00a6454b-31d3-45b7-b596-0d87a5010c70": {"doc_hash": "a41d254833e6625d940559ebf773b4d4e20cf29d99942bac701e367d95a30b5b"}, "99226b58-b8ac-4f2e-9daf-a4dcf4ea23a6": {"doc_hash": "bca5dfde28f8240b1bafe851dba9fc4a4834e7063aaaa261452edb84fe61f746"}, "07660a68-d66c-410f-9aca-ec1b975d2d5e": {"doc_hash": "f1e0b146842e2a301d6841b786f948303b2c56f4938f6dd2406eec4ede414928"}, "f767f52d-a0fb-4309-a1ec-fa95404729c9": {"doc_hash": "86d7701484e146afd8f7746cbc3d58818149d425cab322c05afd058a61cab36e"}, "517ca926-f127-4824-a6c4-d8312b787518": {"doc_hash": "f3a7803701b0674993c1797d719660baff370481384f16f4b6c3d4887b7926d3"}, "9e4ca1e2-53cc-4d4f-be35-ad98183623ab": {"doc_hash": "c860912c06035fdb27ae4c3f38e5fcac09e60b081a83aa269256bd14361fddc3"}, "b548d86a-6af5-4223-9a16-8d5dec55155f": {"doc_hash": "7eaf60aa2918161d003bd961ae305fb2c30c481b9cb44b55e2f4e27e2cb7caeb"}, "ac126ab5-c1f3-4117-9c69-735dab219d4d": {"doc_hash": "9ea3f27bc5a041e2de9afc49f94b209303f50de1d0e26a23d4331a6d5457f6de"}, "c5a18b58-b19d-4e85-bea5-81831b9ea486": {"doc_hash": "3eae02ad34b1f29ff02efd51996988bea2737dd9c20235238edea2bf4b5a62b0"}, "6bb96ce0-1458-4b22-9d23-08ab0e590d2a": {"doc_hash": "e327ed2afc6a861ca4bb5180629c0d698184a63d3d480f92194c4bc0186dabeb"}, "6ac933ff-741a-4e85-a2aa-f6adc31970f7": {"doc_hash": "9e107f1c795cd613b0dc086ef8ea30a67204936b8f44a92865a56c72c32862e7"}, "ab4f8438-c1d8-4e72-813b-8a31ea8a562c": {"doc_hash": "2690397a9513d611a9b36dd639aec5594ddf0602d8d8098968b50b489251a97c"}, "815da48c-4209-45e7-bd38-2fb37d5fbd2e": {"doc_hash": "bce8051e0fe36dd9cc28f9c8ea3e0510e95bb553e0699afb47871a40b01c3572"}, "556d9d2c-4fcd-43dc-ab43-0d2091fdab34": {"doc_hash": "c43109224b70a4208b6fcde22bb3edcf4eeb754781332fa0cf7088740d0c1255"}, "89fcab02-a926-495a-b8f1-383724d2bd14": {"doc_hash": "576cfa17765cb7abd7ab29fa528407b5fb74b481ea74146a6b0e9e745f570a97"}, "807aefac-1828-4b1b-8cbf-2b8e3b91a2bb": {"doc_hash": "b61164c2b0e14ec9141139ada3faac20b263fa276d0eb0709bfa5266bd58d4ff"}, "823babdc-b9c9-4440-a971-740f50d65a61": {"doc_hash": "281994e041d8a4ad5f3ef3e245f7584bdf8bb8aaff65650213ac44f85cdf233a"}, "efe0f79b-2f23-48b8-b1a7-dfb683bf964c": {"doc_hash": "3460713d98d781f09648f962695ba9c6bdcb47f3e364f7d89a7a3a73428e04b9"}, "8f650b97-e971-4ec9-8ebf-b5b01760fee8": {"doc_hash": "9a3c45c9637a0bc5821f63f8930df8848fa9c00a64ac1ede65d206b9a87fae0a"}, "ab414123-9f57-4173-8acb-8d6d1f09d3df": {"doc_hash": "5eb424cb8fe12cf71ce68782e25d3a3e94970626a2f834b22814921097b1435e"}, "6482c848-e524-4afa-b54a-7919594d6ac6": {"doc_hash": "a46af08ccda1f4bd1cb8aa712e43fbee4611ed4f97408e81c83a0cf7d18c618d"}, "1dcfae0f-969c-4dee-86ef-2eb7bed3ea17": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "ccb3eae5-d3b8-4c03-bf6c-5eb92f1c0f8f": {"doc_hash": "e6788da0c65925511afc868158f401628be61fb736ee44e42a559f58717e18d2"}, "33460cd3-8cc1-4f4a-8995-ed5d2783b19b": {"doc_hash": "ea9d3621f4cb6d4096fdfd70bb4e0068257469e0456183baa57cca6c1460c1e5"}, "8d1d7474-026b-487c-ab26-80e43788d426": {"doc_hash": "291ad6594baf43eadf46371b869575d81faa5490489410cf2dafcdd733beb43c"}, "7a0030e8-749c-4d30-ae8b-81f030bc7a2d": {"doc_hash": "6afd946991448b704efd8839a034f4f3fca2e5ae21139fc471f6786c880e9a87"}, "3968bab8-b910-4a03-b3f3-550770c85437": {"doc_hash": "f98fa661cfe67095ac1448d395bf5c14b8b5f552d3204d40f9ca6b2add4a0b5b"}, "7f4f9660-efb7-42df-95d9-230ccc1cd29c": {"doc_hash": "fbf3287e4676432e326f22f77cc20f0bfe4965c370fc7d0032c7514f838afd07"}, "583be628-3759-4676-a1ca-e6e0ade06826": {"doc_hash": "291d8b94bb4f54698e341b5a954f11489a557c732bf5da41f18916ceb81723f8"}, "f4de8b51-3edb-4112-aad5-d19580041366": {"doc_hash": "dcbd325de4884275de5d222e52d59d245a4de5e13fcc8daf1b2c55486e9dfecc"}, "816da1e9-330b-4bf6-ac60-5969cd42bdb3": {"doc_hash": "d0622adaf33ec81b75d0320de63b96ea0205b59fcd89c8dd6bb641417a0371f4"}, "3f0d48d3-37ea-46ad-8316-bec482db7aed": {"doc_hash": "40b573fde946d03c13ce3e7c3731df7d1b21e1267210b64a66060fd2c09e33f7"}, "713fd54f-672e-4eb0-bce9-7e494d3477f5": {"doc_hash": "656608e52c983e85f95c6e498a456cd780d4caf3f5efdaaa616bb242a2352dc0"}, "af5c6865-a60c-434a-9bef-7c09ee8e950a": {"doc_hash": "352b367869b786a1d5d5389ce69ceb89f3cd39783f3bb91673f691470f515446"}, "2ea6c917-0841-4890-b541-ce57acc666e2": {"doc_hash": "f9823145b247cac410dfecac67e6b1244705aa02ae76ced499c150acb1249aab"}, "1d7b2bd3-d78c-42a6-aa89-8f46fb9c4a47": {"doc_hash": "738883d099474c7ef1e17e586f6e28fb80e4689e2d6ea06d199713dff1bb7e7e"}, "f1bd6783-bf07-449d-9b8b-e3fbb5331a68": {"doc_hash": "18aadd9a93fb4f76de94125386988721e589d3b5187c15e5f8d6bf3a7ef2e6d9"}, "736c5aa9-0d40-4717-8124-5363f77e84e6": {"doc_hash": "304d5a7c452d46676e0160a395329489da166441512c6aa36757c5f5cbf29351"}, "8a9fdba5-ce2b-43c4-8e7a-b8f8f4890358": {"doc_hash": "d0fb9b458c35349e5f2e32ec9e7e49c086cce2adfaeeb431d5709a2140449d6c"}, "174bb6a4-2439-4d6a-8a36-3c8ac79db009": {"doc_hash": "45ecf6be6d48459bcf71706b944125c0bb99876dc301773b53380805c6ba7d31"}, "84e1ce13-0d04-4747-8891-497050c21c80": {"doc_hash": "4361dd37917a50264ef8292483f9a7577955a5b7d54137bfe75f4d311e391ff7"}, "e2f315bf-0774-42fd-9d05-e6993ac6f6e0": {"doc_hash": "2c3db558a5583b556c8eb5d415bc637fc87095f60e3bc030079184176a0b56c5"}, "6c1d3e8c-78b9-4d36-82bb-9490c89c870e": {"doc_hash": "ad7c57e31aa8bcbfda83cb26755d4104a6ad275440f3764188ebce56b15f37a6"}, "da5a33f9-8023-497a-bf32-6109f8662e66": {"doc_hash": "d5778906192e3acb4e95ffbc0b814376657c47f52f8f7de9016666056f9c4744"}, "8f68d969-4609-4cab-92fe-e3069981a5ca": {"doc_hash": "047d740dabecb274a642d3464efef852f88854fa5c305ba5f8a367b253663f6b"}, "ea833cad-33cb-4e42-ae0c-584a89b1fb4d": {"doc_hash": "0ce600f4fe210a62cb078ae513f6f74c386aad7009428a51b380f7c3f1178095"}, "3bb8df50-cbf9-4498-ab36-6adb21350ae4": {"doc_hash": "72178885b22a5fc496ffb55e24a881e52ceca2041c259c563655a2f604d95852"}, "417ce1fc-ab60-45cb-8f7b-ad3be3196749": {"doc_hash": "41c4505f2dfe1b276dd9fa9cccbf7b364c8556e7970a0bcd95c6663d7dc6fc57"}, "f89e1d95-daec-485c-9026-3e3efc98370f": {"doc_hash": "2fe454524027db2e84a6de553ba1e04dc36811c67f3978c75b1e68f843baef7c"}, "8cd9a97e-1d98-4453-9159-a88be6a8f7d7": {"doc_hash": "63234f9488f45f55d426a9b5e9885fad67c73fd5013111920261826438acbf4f"}, "60a797ef-8017-4d63-b3c9-98447a805da3": {"doc_hash": "4ae510d6d264ac49cbc3b4460f177d21106c15e467da2a70d1cc5a4ab9befc85"}, "e123caef-4655-49f4-9731-1fca741408b3": {"doc_hash": "09c1327e91ea42c3b25c0601f5e293273d729928b962e8e1e2a6a138e9457881"}, "8b67d42f-af2e-4c90-af07-812fb284ab0f": {"doc_hash": "20ffa756dac449e57f4c64e84d97645c2d84ca2f2b0e6ede0bccbfd57fc2bf25"}, "cef553ff-d329-48ab-96af-1e0cefe5bd52": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "c1891747-f67a-4805-990c-10fd9b83ecd3": {"doc_hash": "6fa5a214bf4379d173e34aa64c867e5dceaa155f1ce735a173de8bb3b09cd15e"}, "7d6d0ded-5bcd-4ca9-8bde-34d3776314c2": {"doc_hash": "ecd249bb15bcdf054e9cffc4f25446551b566d529e415369efc03918fdb7d29c"}, "9ee0d506-3e6c-441d-9d89-c726bbc5be33": {"doc_hash": "23fde665d833c2a7d686741a65f24fc7b258be657a1288fab77b1998a60934b4"}, "63d61ce1-ef11-4669-92c1-a30ed0ca29a6": {"doc_hash": "d1f5ba4c622f2dbb4a7f1755fc6041c6f2cad420c1b0509ee3e825c731923e96"}, "94a178d9-9dd7-4c6f-a401-032d4ffae205": {"doc_hash": "683690c6d68be30a7868c8008bbf15b08a8fcb32fbe3a0cd9d36cb0f23b507a8"}, "8ebb69d0-563b-4ebc-83f2-1e4b6bbb4425": {"doc_hash": "13dc21c61c18f74e15de32ef2318791904c98991f50c44b6b4e6a90793ca6942"}, "75c04ce3-e845-4faa-889c-7e4373397195": {"doc_hash": "cd7b645bc49345528401f5972be45a6f8dfa33f132429e2cb99b55edfdbdc1e3"}, "c1ef4326-d171-4a4a-950b-44cb34a3c0ad": {"doc_hash": "4af16f9c1e3f932486a5213e933179aa57cea3097378d823bdc81b92064173f0"}, "bcfcaf83-feae-441d-989a-249326f4082f": {"doc_hash": "f6a770cfce1751704873c912854020749d483ff50605f34eca5a9fbcbb13a03c"}, "0247d5e5-2c5a-4089-b383-32e694511e79": {"doc_hash": "8bc20b6f067593ef440bf650666f7996397dcbdeb56a31f6e13dbdf8543740ca"}, "24da72b9-9ffb-4c55-8f7d-d8409d39b53a": {"doc_hash": "91bd5a3ada34bc1678fafa3e2f333b6e533ff20125523ee14df141ed8fa5f5a6"}, "45c0cdf5-b975-459d-bfc1-405155210906": {"doc_hash": "d2d90d48d2a654e8d5896851a5dbefc273e2130232b1560e94ae51b5ee62305a"}, "70516267-81e2-4a1d-bdb9-36731cf4aa9e": {"doc_hash": "8d428f811b4d74368f9116219c60e96870b443375bcdd2506bb265881789aecf"}, "2a5775ae-5d20-4035-8187-e4c51548e8e2": {"doc_hash": "8386ebd8c584d86959784552e0edcdb4d3cf452d95db5431eb9f2673f36458dd"}, "d52a36c7-28de-49e1-9316-f61a07c40bff": {"doc_hash": "0d475fc08c418328c6309eed431625d4cbee8fd6b5b76387695837bc0eb000c6"}, "8ec43bd6-a946-4e28-b2d4-81f13d003b8e": {"doc_hash": "6f71d2bda0df1c88c3caeef31ef1693c78a774847d0bae4973dd90f1d2c83477"}, "e96a88f2-c65d-4925-b96f-8cc7d9792980": {"doc_hash": "e33d6e047f6e44ffd73ff0d5a4022916d1096ee9a19ef0633041d577f0f3bfc5"}, "2a8c2819-37c0-41fb-bb22-2c390c3e31a9": {"doc_hash": "3446ecd4ad482f04fa6f78c40cd51a3ca7185ec309efa5063f8f967258d66245"}, "52dcfe4c-ac38-45dc-97bb-50bf45548e95": {"doc_hash": "b184fc4d6f3a3a9b1bded805cd69d3b24241a7acb7e186a6360c38e43959258b"}, "3cfb1410-9df7-48d0-bb8a-04d6961c15a1": {"doc_hash": "2411dd501fbdf532741c207f0c7f0a5cad5b578374fbd0fdf5b1d9848e88a984"}, "34d947ce-c896-45cf-a380-1b1c2e69352b": {"doc_hash": "2ae8fe1a03435d6c6804a3ec36a1698b655c734c6c0b5005e1dfbc8e671eb14c"}, "60d4a2bf-bce4-4486-a68e-9254611dddd1": {"doc_hash": "d19133c8b684669158c74b2003f2bc3338fe5e3c4fc5284bbf825fbbae3d4ea9"}, "9da828f5-1665-431c-a0d7-1782ddb1fc7b": {"doc_hash": "28094fe20e2c95ae346469df2e63852dc42199a4158aa578e2b08b502452822f"}, "0e2a7417-63cb-40f1-b611-b581652815ca": {"doc_hash": "292ff450bc775006900ba160f19fc07b1c2517429603eb553f6cbdbd68ff4562"}, "0a6df6a2-6024-4d80-af2f-00cd0be109f6": {"doc_hash": "c1bec8037d718b23369c24173f12f78540dfe7517961116bf46c38edd4629c88"}, "44a27c52-2ac4-41c8-aa14-d2bc6eeaecb4": {"doc_hash": "b01cb1bb079b1abbac7fa77316663e1e0de03dd475b24a1b866f94f26148221c"}, "d7aa0775-cc23-403c-b23f-84fa2a37dbf1": {"doc_hash": "52822f4b05066249f71a68a3a5cd53c847ea394c72bdfb9ec69a9b7994c9fcb3"}, "fc6ae143-7fda-4193-b52a-2e232d82c7ce": {"doc_hash": "3ac04608d190da200f776aee9d6e1188be2a91759ce15cdb8b0648a42446d083"}, "7fdf2bc9-1cd7-434d-9496-3ffa3e1bfd2b": {"doc_hash": "b75cab4009e589f506d245bbd101c389796e3c767b17e983c744a130859249b0"}, "e7ce7143-4d96-4984-a213-860513e7800c": {"doc_hash": "29bd9f5b940dedfda7ed36dc15595fc514c39dfc6430503596553cf823483fdc"}, "b7d373a2-c27a-411e-bbb1-0eaabcc1a9f7": {"doc_hash": "997dfafd66c45c2ffd9acaa5944057d3839a35627567394466d9c8b637fa054c"}, "fccae089-e1ca-448d-af71-404966474ca8": {"doc_hash": "2e0cc09fbdda4882765c680b177d9cc85be856bf9853b1170bff3e49aec6c5dc"}, "608a0009-411e-4289-b7a7-296bcedc579b": {"doc_hash": "bace6eef1eea5f41db80efa0ff9a21132e7b41a868986599647833fb3296ab73"}, "b61cc75d-b5c5-43d6-b882-8f02eb4a250e": {"doc_hash": "e3893464a97f815bf5b01bee47636eff00d5123b5576321db3c2297103831296"}, "9fa108ae-f31a-4790-a32d-df70d2b88a73": {"doc_hash": "7ce5b11f27daa6a7b12f93641338dfb955ea085b6d9eb129de341772debfd2cb"}, "aec55f65-4da7-4a42-b205-fa9481ac47d2": {"doc_hash": "10f7af62b51165c7b2f7f194b925fc865db730d5318edb8b1d807438b4a173b3"}, "0a39d496-0972-4c20-99bd-44382fff6b9e": {"doc_hash": "8e033c5d88cc6c5fb544742132ee4ef260e7f1d56346768323f5ce4a248da3ae"}, "a86b5ab6-d887-4c8d-8ecf-aee648a2267f": {"doc_hash": "3291a78893d94668353cf193ae6dd1c32eb01f7655c42dd430f698680ffbc614"}, "66b26d01-2de6-4625-a692-819df8ca743c": {"doc_hash": "d8080f94709d0757fd9a4a476ecab77f7be9e7ea4fbecf440086ac03e058358e"}, "1aad1afd-883b-4c7b-b917-109f19fa4f3e": {"doc_hash": "d3d0f315dad2c74684028518c5a3e0983024da3a6f88fcd6f917ee058364dee8"}, "69db63e8-1226-4ea8-9736-2c92f50153fb": {"doc_hash": "7c92b42ee43e064383874ea30d396019614b4ad3e0125f26003bc8ba0ec7f335"}, "3df05c36-7ac1-49fa-b384-2dceb5bb4d1b": {"doc_hash": "cbc66325cedd678012b6f591d650baf34f07cc668a300d09a4f59457f841cc5d"}, "7b156118-14d4-4bf1-9127-641696d3a746": {"doc_hash": "286686ebaf5b935e0ff4691e1310add3ecbb7332ed14fb6e5709dd748482f95f"}, "4e6bc38c-617a-4895-aeaf-9ba37dc78556": {"doc_hash": "73d82a8a6f2c0fd56a138c238fcc824d5c01b8318576c7efa09886cc5bc9b584"}, "11006273-4fc6-4a99-b835-61cb80254f64": {"doc_hash": "f0bfdc5d31b3f0ce3bc3bc7179b1d7bca83febd4a27b0ec80a8b4835e9a837df"}, "c5b760a4-a70d-40e1-a971-447bbedab459": {"doc_hash": "165ca4ccd77ba06f91629ad68c1966ef87ad8fb3b300c37f52ce58eeb7061af3"}, "8fde6c13-ce59-471c-8bd8-2528808952bf": {"doc_hash": "ef72ce08ce82127f327d8f6c7ab4e94c30c5da0b023b15c931286588802bdd55"}, "e63d98a6-e9d7-43ef-a6f5-bc69e1292d81": {"doc_hash": "91313179ccf8584f6a938d284e18bf8dd78c0ca835fcbecf4aeb93a9e5539871"}, "d96cd64d-3d28-421e-8bdd-79b8156693ca": {"doc_hash": "4501456b19462d2aaf265240e2c158f0b47ea38cb812f49cd40574d4724823c8"}, "4686d2d2-c98d-4b01-af72-48c5e8235592": {"doc_hash": "2ebfc4d016c399d8d80413edcacaa20bd228b3fe77e948b3a6c61a08c4a55a74"}, "54242bdd-5cb0-41fe-a331-3c24c719a174": {"doc_hash": "2e7bbe43c2df02f7c01ae4e7e26fc4f830031512427145cd4b47a488be6a3f75"}, "7df9a371-36f6-4e32-bad9-a49238bf7748": {"doc_hash": "79b22c328b66e22fd349c66a2f28c82a8665bc07c7c1ef7b97cbda522da0e58b"}, "9c9eb790-63ac-4929-9288-a40697d6f129": {"doc_hash": "e99d668dae2bd8ddd7dc2f050856fbf0885e99b13a3f367891e83a7bb7aed8b4"}, "075a961b-5dfc-426c-a486-1ebffac9655f": {"doc_hash": "38f48f23402e3ee8aa378e10f6f34436d097677a68fe5b21d93679ec4cb204ea"}, "caa841cc-6426-4f40-9f3b-0b2b89dd1520": {"doc_hash": "553f391c6cde9fdaa25e65f284c1ac2f6d38ad25ec35633286a460e68427ce26"}, "bd9c2a72-d0ae-4750-8d27-2aca06b0fbbb": {"doc_hash": "01ed2dbe2f1a657cd7cabd0bcd784f3b9761e06f10e4f424b644c217f74fadc8"}, "522223ec-6fce-4eec-bed7-f6eee9dc5321": {"doc_hash": "a01d2f96104eec0516858374b0e7d068ccf43b5d7bd8ef49516e6c65dbc849e6"}, "f266a285-53a6-4af1-9571-fea000c3709b": {"doc_hash": "0c0b41fa82d13353985f49b537c58a8bfec95cdc28f9424e0383412672e3e0b9"}, "523e9a22-24bc-4f65-9bf0-c6aeccc526fe": {"doc_hash": "4ea9bc2c0feb8c2986769bfcc3c2e428288390c8181d790992d4afcce28d9f09"}, "fa51f938-ceee-4636-99b4-253668b66633": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "1f2f284c-9710-4695-a59a-9735d4e60e5a": {"doc_hash": "2be52644e43792cbed9f6e552833143610959fefe48b0c19fd8b0b53e39a788e"}, "7c792e07-ced1-42b7-bd75-4bcc3213839a": {"doc_hash": "71d26fb549fd2fe1b317dc044bfd577711c33efc9c39ed531bf2a1b10581a30e"}, "fa31f90c-6c93-4a30-9f09-d5d2164f705f": {"doc_hash": "90f2a18c066075f30201e168a4cff4273685f709d77b61d47843386c45c1c64f"}, "8330c622-4ed0-4962-8eae-34d3d772bd99": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f"}, "3bee48f5-54c3-4f50-828d-35671214ec5b": {"doc_hash": "4076a5ed8b499066b88f9874af7f1059aa5b700c9782404180e366a6dbcaf5bc"}, "ca20f5c3-efbd-4557-8a78-dbd0dcc96542": {"doc_hash": "688e88ed661fcdd5d2c8fe81446436cea5dcdb009048aefa5a7c9a92cb7eedc7"}, "32ff9c05-d355-4878-bcda-033c918cff99": {"doc_hash": "53024b89817a907ebf8aa30d6a473adba4fed1cd1a93b52367a7f37aa062648a"}, "018d53a3-b850-467f-8394-062ab5b55aaa": {"doc_hash": "ffe79dc180d6944830543785c4b09c1e5f5b843872675a1d7b340f697256e320"}, "c9444508-1c72-4010-94cb-24bd00277749": {"doc_hash": "d77db202f46681fcc0819cc913492a834f9e5e00bc2a153ce113fce01dd7cf1f"}, "0b7be2ea-c511-434b-a3fd-a4ada747d45f": {"doc_hash": "ebd9989f44cbf80812b1e60761587816658f6ee15ae28a475805b1f90e82342b"}, "995f121e-a983-452d-9f11-c5efba5c2af2": {"doc_hash": "388002521fda3bada6cc907827ec354de488dcabad921df29ea2a7aa9bb1ff1c"}, "67801df2-70d8-409b-bea3-ab03e5b95c08": {"doc_hash": "0f4447fbb5e798b3f991f257900280d714bf73337fa6a7ecfdf0e80da7f433e5"}, "6c03ea0e-fd65-4642-8717-66d44be4145e": {"doc_hash": "19c3e8e3a72daaf503573353f5188bbb0e9ab41b6daca0a5a93b8029e1e3d307"}, "47b89433-2c06-4f1b-84a7-26df87c3dc8b": {"doc_hash": "37996ea0041487e43d26ebb1036d2532c1aad888fb99a8f15aa728003ad71f45"}, "9844f360-9f03-40bd-b3c1-223c242990e4": {"doc_hash": "81e13f5d34879dd4d6e99eaa579cf32327d9cf3f00980c8276f5ad7cc2c8e9f2"}, "ba7d344f-f6f7-41b7-85df-c695302d0034": {"doc_hash": "cf63e2c6995a36e3764efe4358ca4bcd317362c23a56455becae79da4f2ef543"}, "f870920f-f6d1-4250-9d25-21637308e1bc": {"doc_hash": "2ca1b9094386a39bc5031a2e28627c2589afd6aae911ac07f918d17e5a495a60"}, "08995181-8794-4c15-9c69-5b43948bf058": {"doc_hash": "ed586b1782a632c1734aba524f4c0c32310849b655eda7ef27c8cdd3c400583a"}, "f2da3132-2f1b-4d64-95fb-a07768620643": {"doc_hash": "6b32acabc8e0c7436fa9285e561918dda05db2e3474bcb8c7951437352ca4e4b"}, "9c1d895d-fdd8-4a09-a7e6-dc4cfadee7b5": {"doc_hash": "e1239e0868651d3fab045e2ef63c0ed7014730bbd5ddc9ae6a9c0f84d027eb94"}, "4749472b-2bd3-44d1-a077-f5c9d0763dc3": {"doc_hash": "79ed5dcddf2d4e37ebe9c3ded21b67e52080e7d4ba6321af5c87c3e01059396c"}, "2864ab27-9984-4d55-b99a-14b236bdd164": {"doc_hash": "027e11136574dfaa4671a48888eed78312c160c19c3e559a72e1ee055ab3dc57"}, "fc1422c5-a532-4e5b-89ae-7697fcebe8a4": {"doc_hash": "087a0f8fd6b12b466b5dc853e64d80e5bdcba7384adeed84940e3ca53bd8f2ef"}, "4edf47ec-0232-408c-81b5-9c568f136dc1": {"doc_hash": "788d269d09d03e7d0a56a38eacc92f7cd6ea10919853d5881ab0389ad1ad18a3", "ref_doc_id": "1d1baa03-c6f3-4610-9f77-b26b95123cba"}, "6cdf88ba-6d4a-4302-826d-36a4f795d6b4": {"doc_hash": "cdd9f1ca2ffd7ded52b501a7978ab5f0c6174cdf89df0a2841b92e01ca734d81", "ref_doc_id": "9808ab77-f1a8-4683-9977-2dee8a4c5828"}, "401b5e3a-529d-4c89-9ffb-b96dbab40afd": {"doc_hash": "66842d8cb07c4cde53579cb722c596c43937453a070ebfacecb5744a4b5b602c", "ref_doc_id": "ec42a72e-2280-432e-b782-163ce6301e3b"}, "d1702043-0703-4b53-aed1-485de9ded984": {"doc_hash": "f336944889ea71aa647b3762fc1ce7f688be841fc6e34d3e0761485288fcc48f", "ref_doc_id": "8df783f4-4076-4e92-a211-2e4e9dfb0064"}, "6d24c795-71cc-4ff5-aaf6-9302ee84258b": {"doc_hash": "7d51bfda9edfcefce26859905509dda147c356b70d98f1d8e98b380dac828dc8", "ref_doc_id": "a047ec66-08e5-442b-8da6-1668c6a0cf3a"}, "cebda661-911c-4a63-bd1b-13022d2d4550": {"doc_hash": "791b5a3ad8070fe5f978acd69fcb8a01eeb356bfc3809530f764ffd326f0e46d", "ref_doc_id": "62d8c3cd-6b19-45eb-9b69-6d31ee7aec11"}, "31d396ee-c23b-468d-93b1-a0e5ba650687": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "dcf19d7d-c990-4b78-a44b-e0005da5b489"}, "6793dbb9-4ee4-4015-a244-75a314ac4999": {"doc_hash": "1586ad2b1ac127651add69654fcf1f02112a41b6078c1d68383b12210186865e", "ref_doc_id": "5b61e905-33ed-43bd-add9-00ff3b9662de"}, "931c2ee1-45bc-432e-8f38-bf8affc19333": {"doc_hash": "2ebafb97da40e55633e194f13c61ab0e886daea2be1b86c03ab8940804a30e0b", "ref_doc_id": "5a149286-00a5-4fb2-bd99-f417f937320f"}, "97ff9ddb-56e7-445f-9765-16c09d3d72f4": {"doc_hash": "5a50f033c961acb4da8f61d792316d438d69d07b0c4e497191a3eb0d6182cea4", "ref_doc_id": "fdeab5b5-eeba-4a4c-afe1-d43a0ff5309d"}, "8961aeaa-b613-4494-8df0-875d44765fcb": {"doc_hash": "2c5efa52f1c0968346492357f267a4cc3519586054d1cfffb56200139b447837", "ref_doc_id": "e44861d8-a1f0-477a-bb0d-69916afee46b"}, "2f032b13-2695-40cc-903a-989808b7ee01": {"doc_hash": "e564f856002c6e1303f4b8eb2b0423660f972f43adfd30053fcda908639f4172", "ref_doc_id": "a618e9d7-a0d3-4408-af49-5f17200e5b74"}, "aef3ef00-7e3e-44dd-b6ff-3e5079a91d31": {"doc_hash": "2590135ec413ddf1f969a07ffc11625f84e91a0d943867f834b36d090b3153fa", "ref_doc_id": "0796285b-5e13-4871-870a-d739897a79b6"}, "587a3e00-0524-4f3f-a2a0-d180508caf26": {"doc_hash": "b8a7c4f4c08b81df22c296f4d449ead692f3b1960abae2654f2cd52599757bd2", "ref_doc_id": "e6f56868-b7de-4860-974a-14d04b02c48f"}, "eab82e75-7627-48dd-9c28-a89bcab74544": {"doc_hash": "597a4403b5a3db9cfad666f7cc49b3d419d01a286caadae59922a4b659e01f9c", "ref_doc_id": "26b73214-5ba0-4609-a439-809b7ac80bf3"}, "917bb0f4-4303-4bd2-954a-d8ac85b728b5": {"doc_hash": "2fa902df20df01839aa9680f3f796c0788d3ca2a0d1355c50ad950f8a40fd8e3", "ref_doc_id": "1aa209e7-029d-4f20-a4e0-9e9fad7e786a"}, "5f98cca6-229f-4a40-97b4-2ed3398b71ca": {"doc_hash": "4869a9ecb602dd729315f2af17d94f5746a279912cd56d3fa661586ccf80b90f", "ref_doc_id": "0073e0e8-87a2-454f-adaf-9ee3b8f4c8f3"}, "6dc7cae4-7896-404b-98df-51b16dc0f02b": {"doc_hash": "ba5241a90bea15527b0c36dd77b023d93bdc5e6113ccff92ab2214bfdbaf5a90", "ref_doc_id": "7467d371-e5e0-476b-908c-99441d384750"}, "da2985b1-99c6-424c-a0d5-49369adda818": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "3d268c10-d111-44da-a5b7-36260a32f9e0"}, "452c4bdc-050e-4ae2-972a-8976bfc974bf": {"doc_hash": "3791fd6147163475221178f30cfe67e5c249fa6368c16d06fa306558f5eac8ec", "ref_doc_id": "1a22c53f-a0b1-414a-a8f6-c1f0dc0317e9"}, "057aa515-f7d0-4006-9913-67320b4ea8e9": {"doc_hash": "3fd28b84ccb034a632e455747248caa1ffd3d821657f4dfd534691c620dec78a", "ref_doc_id": "5bd02a5e-5b8d-46bc-9f1f-077c3bf246ec"}, "9cc4b6ba-71ae-4b93-bac6-2c22a4ca9ed8": {"doc_hash": "a12a25c30766ee3579d395443bc5c2546c367971d23bbb795da5c624f5f3313a", "ref_doc_id": "ad9f9ced-3c86-4231-9403-656847cfecdd"}, "f0936cab-9a4f-47be-b561-d51a1f1ffc3c": {"doc_hash": "bbdc38e4344fa7027e1a5df6fcdf88957bb3540293f529f080906b949005f996", "ref_doc_id": "ad1c0b89-a961-4650-9467-b6140034e9fe"}, "b585a0ab-b920-4a44-9ab4-38ecf810d352": {"doc_hash": "1c9bd188d342d73a18e542ea94e18b88afc4b6d439928ecedfbc884266cce5c8", "ref_doc_id": "b9bbffe7-3ee9-4955-b789-cf151d2bcc60"}, "196131fe-4252-4d62-a6cf-ffbf94509cea": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "6f5b9b4e-8d0f-448b-9bef-cc864f665904"}, "641ffb4a-d1af-4bc2-8a78-4ccb6f7b23ea": {"doc_hash": "6355a075926d9f6157191022ab69f418d8954695c94eda5c2a924f2f7522b28a", "ref_doc_id": "cf89e281-a52e-491a-8daf-0067f9c31db2"}, "8f278069-92ba-4a4d-8416-585add7f025a": {"doc_hash": "8abde3a84175cdbc2469a7ed8c7cb07ebf8425408ff5c3df80cf5649487103c3", "ref_doc_id": "f72ce39d-643c-4d6e-91c9-a6eef09613ea"}, "2a4aee53-5d7a-4f50-a2bc-b713b7bf14e3": {"doc_hash": "ee2e5c6b3d972ee9250b3165189553d0f5cc2dca2c40474ef8dd77f0168cfc9a", "ref_doc_id": "2f7d3b5c-ba36-4d9c-94ed-2f1e3b0ad19b"}, "c312d7a1-1d1c-4684-a748-4384e7d37db0": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "cc017129-6eb9-491b-83de-ba38983a3b99"}, "bd6ffabb-1d46-4f5e-9b7e-6ea5285c659b": {"doc_hash": "4ade83ea1ec71d5eb33813a9c9d4d5e224954fce246983c7fd477f9172f48a73", "ref_doc_id": "2796cf5a-2555-42e9-b7bd-8ce00b87fc14"}, "3a98b9b6-17e3-4f35-a768-aaa2437cb60f": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "ca266c4e-113e-43d5-9611-f06295838240"}, "f421d97e-8688-467d-a7d1-918ef9aa3834": {"doc_hash": "2eae6c92fd4777f1ebc20b66950100d0a51cb746a85809d473577f1c910f1dcb", "ref_doc_id": "3c126f03-965e-46d7-a966-526786046d75"}, "c826acf3-8636-4e08-b778-a4e981b1c885": {"doc_hash": "e32ad7f387a6a54e3a22f3c6aeec9a3ac88ba48f699b163a1d3673d9683e4cc1", "ref_doc_id": "b4e758e8-ffc5-4fe5-beda-563eb996f5f2"}, "11c0225e-96ca-4d6b-864b-00aaf6167fba": {"doc_hash": "2f499a9fe160cb79c5c2211e521377a53a5cf037e5aae89a34f5023ae0449955", "ref_doc_id": "b6f0812d-0866-4b88-b491-9d9c066ee0cd"}, "4cbfece1-da10-4430-94f0-950f1aaaafef": {"doc_hash": "522a644fb0df73869b2d223930ef5e63eaa9d2b55cf8463e858d4fbe949df7be", "ref_doc_id": "d7617009-4e33-432e-a01f-181c598e4248"}, "22d3b465-de61-45ca-8b36-a43421fe07b7": {"doc_hash": "5d94a108a1b31d1a379ca050de3b81aac635965927bbdd6e6c51e0aa885c8d27", "ref_doc_id": "eb021ee3-d0c1-453a-84ef-e708fc9e23fa"}, "d76b5db4-4965-4488-baae-ea1d108ab655": {"doc_hash": "607bab335ef2ab8f8477124379a90d361f9ce392e1aba772cbcee614d904a140", "ref_doc_id": "0a046843-5ab8-427b-9c82-97899a3f1204"}, "8e0b8809-d245-4a9e-823e-b5f11f1453ed": {"doc_hash": "df9b44f0c7accd71baef717d74d09fbc383fe9df982a171c235797d259831e9e", "ref_doc_id": "bf3f73ca-1574-43b6-84d0-0f582c6806a7"}, "91d056a4-5bc6-4f3c-a0a7-93b16fc04e25": {"doc_hash": "469d968bbe19ff154fd162934f2ab6fb34ce556eb4928590c7c2d1ab36f8decc", "ref_doc_id": "3f4807ea-416b-4904-99bf-65d91415dbf7"}, "c5f7a56e-ec41-4658-b466-b0e340084449": {"doc_hash": "c39b934724ed6b2a17e1f595cd1d94748d557c91b650598b3ba715489219274d", "ref_doc_id": "2daf754d-4d3a-4f5b-86b7-206b2ec4f84e"}, "0c421d2d-5eaf-4904-9fe5-041892be888a": {"doc_hash": "b9c1aa78387cd061ddca10df2dd1acb265dd4dd766d75c7e81d86c25f3c67f60", "ref_doc_id": "b753db42-87df-4063-a41e-aef6170e3892"}, "32332606-5189-4448-bef2-9ccb1dd0c5ba": {"doc_hash": "58ff2e01010cdf46ca99b488d0bcd24b585bea56c6153634573c596ee06c1efb", "ref_doc_id": "18e2c49b-f4ab-425e-b95e-fe31962a2dc7"}, "a0c20bde-4697-4c20-85f0-9539a0fd3130": {"doc_hash": "a8fafefd10cc42eb8612ba3d415233925cccf5737f16d5eb33bb52af0424e711", "ref_doc_id": "177a7f78-a4dd-4254-b67f-2e15e5cde805"}, "d9b54a71-b6fb-43e9-8aa4-3ac233c9dbdf": {"doc_hash": "b6e354c69b24443da522c4847658f9a3cdb6db2c28ca876482b5645f1e110290", "ref_doc_id": "c184216a-01e5-409e-b418-4ec2beadd0fe"}, "489a958a-34e4-489f-aa1b-a186f7788754": {"doc_hash": "8476c7a7f78289e2818d25e8f0bcbb62e377cc40c112d83dd3141ab8e22a0ea1", "ref_doc_id": "181ec876-e228-4fc5-804e-d39fb195fd62"}, "96b47de9-42a9-4525-9652-d62d182f5efa": {"doc_hash": "1c5011ed139cd0fd31c5061ef30aab393be2fa413aad1952e9147034a78999e2", "ref_doc_id": "5257f577-289f-4647-aa6e-1452a72eb79a"}, "12128c5b-1244-4dd1-948f-55e5aed44f69": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "f3d390bb-d139-4dbc-8424-d37ede41a03c"}, "b654461a-13ea-4346-9e0a-085bc461b50b": {"doc_hash": "6bc0bebb03305379ca8dbbf2fc948903d3a783119e5cc28c384cd2c36f612681", "ref_doc_id": "6c0642f6-2001-49b0-b1da-e64b27053a62"}, "d6bf80d4-9661-491f-b795-5dbb8611bc7b": {"doc_hash": "6868c0e87074cc6b0353477f802f7eac98f215484c9789838bd5849bbb9b6794", "ref_doc_id": "e85178e8-cb49-4ab7-8689-f52473bcc995"}, "b001ed2b-1c9d-4a23-9285-69b21166897e": {"doc_hash": "f8ec81d2212e9554a539467d2758cad1814fc4c5f1cdf984077cc958fd200b37", "ref_doc_id": "829bced3-c1f2-43bc-92fb-38e3307f2f3f"}, "42290184-daf4-4e9c-842a-cdbfd3a77974": {"doc_hash": "361a91792c7cab36cfa9c84e20f59426bc709a658b94501f8c2b9064fbabc7ec", "ref_doc_id": "386a0e8f-64ec-479f-9ee6-a4f4bd6537ed"}, "8e889f6b-b42a-4fda-900b-3e17ea950b7e": {"doc_hash": "c83db562b0eaa24ae0d2052836bd94841cb00f564d2eeef56692bc3562dbdf27", "ref_doc_id": "632c4dd1-7773-4864-b24f-7c34610c32ae"}, "c6b7e307-eeec-40e9-8f69-83e0b7f068dc": {"doc_hash": "345ed853fef88142a2389016e49179aa07db451ff69629841980d092870e5a27", "ref_doc_id": "40f45d5c-e60f-4b20-9265-0f4306d35f27"}, "d4ca1b0a-500b-4476-9a83-3276567bd392": {"doc_hash": "21490426ce7ec27a01954b57c41ff17fa31d55cbaab96de59f4ec20aaa4b8c51", "ref_doc_id": "6b2711c8-4963-4ad7-9f84-6520e8d477eb"}, "23bd8f2f-c6a5-40b9-8bc0-b1ad880e7c3a": {"doc_hash": "18793b5e15ca50c4a8b3d4f05c094059b278c9fdb24b860aefa53e12ee2d30d7", "ref_doc_id": "05204725-89af-40b6-939f-1036b943b279"}, "8b06276b-ebf4-4f56-9780-bdd18b72de14": {"doc_hash": "0f21e0578465196a227e0cc8d454a34cf74c4d96a08c73bff1be51d73aa65e15", "ref_doc_id": "ab2b811a-9134-4cc1-a78e-6a25150b8ef6"}, "05872280-e21f-4981-bbbd-1f25592546a3": {"doc_hash": "69484db8e800dcbabaa260f7dcb23d663456aa218d8b59c3c5cd078ea3203122", "ref_doc_id": "7220c50f-5d88-45ec-8b10-9df96de543dd"}, "61714b55-fcbe-4deb-8bb1-5e5db11a251f": {"doc_hash": "ba3b45ac28eff46383573bdfaa3fb7108aeba54aee70b58d3d58ce5bbf360b2e", "ref_doc_id": "c2fe4195-c69f-40ee-998c-482f53041309"}, "40eef337-d053-47bd-a894-91e49b327fbb": {"doc_hash": "28b12002dcaa2f7e9e588507d6633065204ae3807238ac4ec36fa21b4a481ab3", "ref_doc_id": "9f1dfaa4-39d6-4cb4-8314-c9a3f0e2414b"}, "014e93b4-52eb-4fcc-9be0-6743b1bc7324": {"doc_hash": "a85c0eaef1bba568daf4284e1104c15a3fb36afaea2517f642ec5cbba7d80a7f", "ref_doc_id": "c81fb79e-fa03-4623-b4dd-3b66c8d99f34"}, "e740443a-7273-4fdd-8769-3d0bcfc4a878": {"doc_hash": "4db0ea074a4b41d665c24a07dcb835d67962df72546df7d78d2b81058c757336", "ref_doc_id": "1e351f9b-0751-4d08-925a-b8d31cb0b459"}, "24dfebc2-3b46-4b4a-a056-b886ceeb4b21": {"doc_hash": "8a7ca61605688a4b70db2f4e92d2887d311db18a4ff9c6df2a20ce9ace7a5b92", "ref_doc_id": "0fd7efd7-c004-42d3-bf0f-852f6fa85f2b"}, "c6f99af6-ae92-4479-b733-6e9290ed4080": {"doc_hash": "5e839e2fd413476afbf13ef2605ed0223b3f89a122305c9bb24af69a61eefb10", "ref_doc_id": "176bd1e5-ef37-47ee-aead-5c13208adca4"}, "e249ad4b-db17-4109-a770-0695bfcff43b": {"doc_hash": "8cc53193684dc5e21ae6bd635d34789955328bfa6bd518d7661b51ad4dccc76d", "ref_doc_id": "923ad0da-023f-4746-a71b-fb4797a3966f"}, "ee98a5ed-3f1e-4a48-a166-0d00524fdf65": {"doc_hash": "e57be3ece9bbdb5f7d7c82ea3f338ca830265773413adc93893c2b0b5d8e58fb", "ref_doc_id": "813af12d-03eb-4008-9759-dd0351de5b8a"}, "d5cae16c-59f4-4dcb-b1ec-8956958be84e": {"doc_hash": "0d8c2b5f96c787b58a51113ea1105ea550c6a8e5c07eba6237cb8d9143fbc284", "ref_doc_id": "c2c81484-d2b2-4ee4-bf20-6bd2c584649f"}, "3a6eb1bc-31e0-4367-a79d-e8f7fd70aaf6": {"doc_hash": "1246e583c12e5256f6731186caac4898df29541a81d611b3da02e940de2cb89c", "ref_doc_id": "ceffbeec-91af-4bb9-b96f-e3887e270b05"}, "bc9fb91b-e3ab-4a85-8d6b-d7de88910b9c": {"doc_hash": "f902c540701451a11c139f413f07afe6aa582abbf034f3ee49916d68f1aa0f02", "ref_doc_id": "c71c2253-051c-4134-b3bc-38034913fdfa"}, "146c47e8-2e2c-43d4-8296-b315db068a02": {"doc_hash": "5532e2837d2d3d3015f2565af8cddbb9f22e8c29eb81c14c0420ede1e6d7e165", "ref_doc_id": "004103bd-da0c-4e66-9a80-4004789b6d8b"}, "0decbf09-ee2b-4319-8289-530fd171b8d0": {"doc_hash": "4307e6cde5cad4683553ef7371f9736ab6ed5fc8a24a82641cf798e7ebc04e41", "ref_doc_id": "12e9ffce-bf9c-4bcf-b425-be6a36225461"}, "3eaf3ec7-a8fe-4c5b-8cbe-553cce0707d8": {"doc_hash": "0e5566c7c07e2984a003d1b556c2ac19d7f7103fa375c55145e89d20b891927a", "ref_doc_id": "670691da-1af7-4a7e-8eaf-303497c79377"}, "2d820291-7456-429a-a591-4a541f2fe340": {"doc_hash": "7a40b1faed65807dabd47d0700320dc466e5500da96c3b678d92cb3c8c884477", "ref_doc_id": "46173870-5ae4-4ae0-8d4a-09c3effe2ca5"}, "8b3ecda9-f2b1-4a9f-b6eb-957bb72380a3": {"doc_hash": "607d8fefe265bf1b5b28fb5343a47c1080ed1055481530dd16d82395f58dca34", "ref_doc_id": "9600eabe-14f3-4a6a-b7b6-ae0f158c1794"}, "af83d168-1a9e-4679-9a50-93adbc0893aa": {"doc_hash": "33020b03f2063b4ddce0c6f8262ff0e68b20453777198e1d88c3af38aaa1debd", "ref_doc_id": "2e835c08-7ce7-4684-a11b-16299b20f791"}, "cbd7e16d-9c19-4672-8223-247e7d2c95f4": {"doc_hash": "6deb000ccc32e99ca37071af505205c075e0c2bfa913f40b1c14fdb33dee9191", "ref_doc_id": "1eac3ece-fb94-4721-a205-5c11b6da8905"}, "225f78b1-73d2-4b98-85eb-96b7d3859b47": {"doc_hash": "d6c99dac4527c6f1460c520eaa19b6ea1021a9366d79cccf42cb0515379b97c9", "ref_doc_id": "b0c03699-ef6b-41be-bce9-ba88c27984ae"}, "ad3fada0-46f9-4615-9334-bae6c63c3c76": {"doc_hash": "3fd2f717988211c1926c6bd0c0095feefae97d20bba3b3e680433eba466c8190", "ref_doc_id": "d2f14d70-ac9e-433b-9135-598d8ee0d05b"}, "eebb379e-b1a8-424d-878e-6199f178f4ee": {"doc_hash": "64af7a2aa5320371201fb2a4ea51220398c1f18ba5e4ee180135c4189657b6fd", "ref_doc_id": "54aff9d7-30e0-418a-9163-0f3af7f7c4f6"}, "b5ae41f7-e338-4baf-863c-601d32317223": {"doc_hash": "3594432ca7cd07ffef1c1973249f1dc5d28a521f15f913ee726704ef9ff797f7", "ref_doc_id": "f39da648-ebd1-4c28-8159-9a91852f37cd"}, "91c28aa2-beb6-4df8-b076-87ff1e59ee52": {"doc_hash": "2109adef5c9fc28018a3d30c8f7a125fa9250338720105fe7215d905d373da93", "ref_doc_id": "93050b94-e078-4e05-a9aa-02f79c8abdb0"}, "10468574-c4e4-44e7-b364-d36567ece64f": {"doc_hash": "8eeb2383647fd8c4d843941a11dbdd6c2177d6020c73e04cffe30463888b7bfb", "ref_doc_id": "49916695-9d7b-49df-bada-5f3dadb8c7ff"}, "7e0f799b-3b04-4118-bd58-a1401a098f84": {"doc_hash": "a14486e705daa25fd59ef181771620d4198cd076f2ce3dca94a2eef904bff3c8", "ref_doc_id": "c90dc745-ba15-402e-b8f9-9ae178e9d9d8"}, "ac91eba3-2021-45c9-98e8-083b51af108b": {"doc_hash": "04eb87971a62fa11be8c5f140514c42e6f40a85009a2d53d472d1da216359c3d", "ref_doc_id": "cfebe566-186c-4760-b71a-7a5e37d02e67"}, "df9e6cc1-17a8-4367-958a-39a15efbec2f": {"doc_hash": "2f48a4a6a1b2c8df07c1a00ea2af5b979cb2fecc4b7f8b97d27a779cf266e364", "ref_doc_id": "9db335d0-4728-472e-a920-628afe85bc1a"}, "7c606c85-bab4-44bd-a232-dcce6ec56f72": {"doc_hash": "ba017b67dde09df4817dfa4137f9af3975dcb791b637ee27a338175d30f14921", "ref_doc_id": "b8527c9b-5002-421e-9c35-2b57e6f34bcf"}, "471bd6be-d6ef-41b2-9ca6-2b80207ff410": {"doc_hash": "938e322d294d96aeeead8c2c9ef07547728ad19cf39453eaf060d77fa1e88a18", "ref_doc_id": "f2760dbf-f3cf-446b-94ff-16f231899bd8"}, "84b49567-c626-4b89-b5fc-7b0139cfdcc9": {"doc_hash": "06c647ab3b5724fe080c8c4f4b6b65d9f12d5e6f997fccb113a87f01d5d77c3e", "ref_doc_id": "e0987405-a52e-4138-9a79-12eadeb1ffac"}, "e7100307-d031-456b-96e0-a232b373fda0": {"doc_hash": "da4e39ba071a855cf611fbc4f765bec5876cf30c15b55e304154763d9e44b8a4", "ref_doc_id": "c194c1c7-df20-41f0-bdc7-f0f7acc90c2e"}, "fab76254-3ec2-40b5-9e94-9690347d37c6": {"doc_hash": "3fc4603e4229d92eed3e3336e2cdf87e6e370079651f66c428ac322eff72caa1", "ref_doc_id": "52db4253-9d84-443d-8fc0-2aecbec1ca4d"}, "c3333456-f3ad-481e-aeb4-0f5c9a7b8ef0": {"doc_hash": "bd927a6ceb3025619ad32f558ed190df27c0147c189625895e937f816ec2c4f8", "ref_doc_id": "6f0600a8-ab8f-4ca4-bfba-47660401cd3a"}, "f4d109c4-8aae-480f-b5f2-b323e3856845": {"doc_hash": "64fc82f37ce9bcb4db133650f2a08971f9675e0c6d985fcc1ba6039686be53ad", "ref_doc_id": "53bd4853-e1e1-4036-b094-5631df681b40"}, "d1e158d1-e15c-41c6-aca6-5fb7285880bf": {"doc_hash": "efaa041cf6a5a0e420bd718ec6001a4d1b42a6f8f40bfedcab8f6e79f80cd40b", "ref_doc_id": "2b06a8ec-c863-4e57-9a96-a8f7a893ea22"}, "6a824b90-5eee-491a-b5c4-a717cd09e27f": {"doc_hash": "8e69a9f5792b90fe700d852c2b2260bda66b1cb0702e4a725eb0d1ba0f59ed04", "ref_doc_id": "a9c7e8fb-02b2-49d8-8c2b-a56d1010d872"}, "7d4227ac-ab54-408a-b072-d4db28184974": {"doc_hash": "8c9f6c0c8a58989f5fab1ef0110b0310ba85dae6d7e0de1e96f42441e5b72b70", "ref_doc_id": "a9660f39-b3b4-49db-954c-b857cc6f0f40"}, "f2c32ab1-65e0-4fdc-bbfb-9120a986703f": {"doc_hash": "9c15903bb301a2befe07ddc2ea7282bfd87d638d193dc8ac130ce040c7962a15", "ref_doc_id": "b27a1f4e-35ad-4bb4-af7e-7c86c2790ef1"}, "189d0ca4-3521-4a78-b955-7946396cbdf4": {"doc_hash": "4f492eed1bb0b85439b4e4cf86e079e0d2509f4019f9b36ed3d8cef57e7288f3", "ref_doc_id": "e326d52c-8e18-4e7f-9586-d6cd8c90bfa7"}, "25f01218-a3dc-4e61-ada5-64fbcada32d9": {"doc_hash": "001fc15a5da9f6324ef863a035f5516c5760a8fdff4b9113385714f23555669b", "ref_doc_id": "d20a1274-cdb3-484d-aa5c-304940004d14"}, "241cda35-f1f0-4b74-8232-605992efd8a3": {"doc_hash": "becd90dbadd115e2ebf32a4459ae89c485607a8f43ed556b1b583b324bb9e2eb", "ref_doc_id": "ee74f456-c6a2-4829-bb5f-65e62ac7dd35"}, "e75a3e95-e160-43e8-932f-ac4521d2e70a": {"doc_hash": "90c49733f066bc081ac0698ef3c49bb6fe7a1b15fbbd54f23869ec9a5610a584", "ref_doc_id": "85f3d880-c9ae-4e6e-a7b1-121123bdf14e"}, "844f3e85-fdf1-4ec0-ae9c-77072429fe40": {"doc_hash": "061a04b0aa032cee31eb22540f3a5ab8562bf4b398979a286ef8031004f917cc", "ref_doc_id": "571b071c-a310-4eac-84cd-52948f04c910"}, "c7c7b346-4c38-45fd-b379-88dcaa1c4cba": {"doc_hash": "0dc21c4c4789beedfb6cb93f1ea3cab29a4e7ae810188b6d506aed8765cd5a5a", "ref_doc_id": "b443310a-4f93-40f2-b7fb-04e488b2c072"}, "ddb2a544-a164-413d-b857-ee82a481a5f4": {"doc_hash": "a885f7840a3e9a278611fdd359572c7b3d0ad137c28e8e4a571140d5ba43949b", "ref_doc_id": "10bb00df-702d-4ceb-975c-ab679dee4e14"}, "835f644f-447f-4c66-bc09-67d39d3e086d": {"doc_hash": "9e500897c89cfe5f74d7022fce6813d43ad1e53377bf482d0a326d7d2f5a7531", "ref_doc_id": "7a315e4f-d594-44ed-a1cb-c30e91739750"}, "d5ef895c-dc9f-48fc-8fb1-e606c181ecce": {"doc_hash": "e57edfc37e62a3611f4586c20b2fa7f2f8f1f5ec31886c9f71b48a61a84b6922", "ref_doc_id": "ffc8f1ed-00a7-428f-b1a2-dbebe437b11e"}, "af16708a-ecc6-4adb-bf54-e24a578803a7": {"doc_hash": "e9cf114e2c3ab01e4e128b4788e219baa5c7e8a89fc5c3195f6a1a9d06faa5a5", "ref_doc_id": "bd2b71fa-97c3-4bbd-a68e-ffbe9f811f6d"}, "e5d97c0e-f7b6-4eb2-8924-f95401e538e5": {"doc_hash": "1871f86777348118edffbf3a4e3ad8588891c31a7ce5b01d5cf3b51ee55614c2", "ref_doc_id": "0f43862d-bc29-4102-9fb5-7602315cd86b"}, "17d0af34-8e8c-47ef-acc8-27e908e551ad": {"doc_hash": "709395f2a69f3efed6a386d1a23b448d861081bfb00a579b70abb79e0a57046d", "ref_doc_id": "81f67177-d6d1-45df-9ff3-acb6bbd0d302"}, "36008bfe-7cb3-40fb-b914-df9eec7a85f7": {"doc_hash": "ea42bc43d1becd791694343da5f715709becf57dd57671106103652cc6b325d9", "ref_doc_id": "6b7491cd-e336-479f-a652-d9b5faecb704"}, "500fcaf7-ef28-428c-8952-b7e152530a57": {"doc_hash": "6142174fdd27a3d0cbddeab0c0d38dc2504752f6858717b71a209cd0f2f36afc", "ref_doc_id": "11e8bc8c-8b5c-4137-93bf-d5bb2190c667"}, "75f48f55-93d5-4c7e-95d0-44a10fa9904d": {"doc_hash": "cb89e24a1c68460c12618c7f57926e6661be7c85910a667af7c2b6c3e08c6500", "ref_doc_id": "9a4cfe53-ffe1-4560-89ae-27e94dd16801"}, "3c07422f-f740-4286-b5fc-c866487f55b9": {"doc_hash": "4dc3eb3eb0932921b7522377e46dfd4285e9e30a4d84351bed0a1b8426b9d6d1", "ref_doc_id": "ca0db829-8805-471d-a5c2-6fd6cbc8078a"}, "0bd3eb75-d412-49f6-a906-83334f8ef17b": {"doc_hash": "8cbf250173ff099ddd2642080f7e506beec31de12b703007c0f6ce0b45fc105f", "ref_doc_id": "0137af98-7e46-448c-9167-349760428b08"}, "edfb05f0-2ca7-427b-b38e-4293ea0c6c67": {"doc_hash": "65293bf9a67fba1e3ea98f866aea603ae5046d4d6add1c4b16acfd88615cc36f", "ref_doc_id": "78bacbc2-bcb1-4156-a428-a3b4adb1db70"}, "5b151c28-70a2-4632-b05a-9896e093fa0a": {"doc_hash": "72c18d88b5f9992802500a6978cb9bf1565a45e252547b1434d4ef77a4398ba5", "ref_doc_id": "b33622c4-5f9c-4b27-ab0a-8007add8120a"}, "29b3a83b-4da1-4d4b-bb78-77b18dfe533c": {"doc_hash": "345a824281ff5696204e49216f7a4cffbd7609e55d9cee258069a3308d5d1628", "ref_doc_id": "321e99a4-6c1c-4c76-a457-6a528e445ad9"}, "b176278f-1af1-4ae7-91bb-42fad0dbf716": {"doc_hash": "c5103f866c503b804bd2e68ef6e1536ab9df9ffbf651d0ab1ec3da99442e15bd", "ref_doc_id": "8dcda919-bcdd-4d0e-80af-596b5a267512"}, "e24781ee-a5a7-42ea-8e3e-71748215d076": {"doc_hash": "0be6a21153c3914a7ddeb6a49e4aa1329380f87c62a142bb7f52ce4fca8e673d", "ref_doc_id": "26c3d0e9-f115-4c3e-a05b-4258ca854214"}, "4c657eaf-84f1-4c9e-a0bc-8b97e12e607a": {"doc_hash": "7e77572c5995a3cc4ef616ce6e198bdb4417a78a28a17382967fca3b12736dae", "ref_doc_id": "3e628e7b-9a34-48be-b0f0-5ad3fcbe94b0"}, "af55ae02-fbe3-45d5-8c55-330767d238bc": {"doc_hash": "bfbfc15462b5240c40340e889ab6c0c7731ec749a3b97a4e7ff05e7cee291406", "ref_doc_id": "e0da973f-01ab-4c4f-a947-7b40b5219b32"}, "6cf0c576-72da-4e0f-a3f7-071fe5f713c9": {"doc_hash": "073892fb03ff5378f097d70aedae2e57a3524cc8c3ea860bef560d54e503b1d9", "ref_doc_id": "75290870-f1dc-443e-be2c-fa9c0e5f7bcb"}, "dfa97452-3007-4300-ab3c-6417540ada2e": {"doc_hash": "8f7e58045b2897ad6537a37043e977df67be811eef8bb8f4c8cc9b8472922761", "ref_doc_id": "5f3cd516-ecb6-4888-89f7-13af4b0df74d"}, "84b0c7a5-8ff6-4897-b606-cc7bc770592d": {"doc_hash": "d631e64380cfd84ee3ddec2480f798e98bb509864f5c16d9f46ac0f5ac0ebc2f", "ref_doc_id": "3ce2a25b-3cde-4aa2-86d0-4be2dbbc22ca"}, "d58b6ef9-2b06-48aa-b98a-573e1e00c309": {"doc_hash": "8c3b3fd83394bbe420c92c7ba4ad3e8fc5b6ac3a2a94590441fe4d07700a91ad", "ref_doc_id": "2f4d65f6-4127-4109-909a-59e1fe2e0861"}, "a7d2e7e5-7cf5-4080-b1b8-8246deeca572": {"doc_hash": "bbe24c6c00299db819ee8aae1cc0124910441a4065a7e02aba30d4b2cddcd07c", "ref_doc_id": "372d1996-de06-426e-a430-a6b6cad0476a"}, "c561f292-db90-4ed9-a7a2-d7c8705e00ce": {"doc_hash": "dbb2166d8c52cccefaa30fda25e5999d167b2f336864d49a3157a82696e2751c", "ref_doc_id": "29a96a0d-8aa9-4fa9-812d-839eba70911a"}, "79463e93-cedf-4c23-8710-92d8d0159ea9": {"doc_hash": "7d4417f525d3f30946402f41e24bcb49000198d7055b61e690dd30106aeada70", "ref_doc_id": "07e6cd1d-6d63-45dd-8b7d-fd48c734ab62"}, "c39eb48b-6ece-4c6f-9c37-c69a118de154": {"doc_hash": "09493d5b077507967513c845ebab4029a63d2400f7df33748ca95e9b3d52cc17", "ref_doc_id": "dff9e31a-5d34-4e92-b210-db7da99093fc"}, "a6d1f671-0a4a-4324-8c29-5895503611b7": {"doc_hash": "4386f7e42901f30de068aafea37fa3649e33f2d56cd9c272f7cf4d2033643491", "ref_doc_id": "ebb9d183-cfcd-4342-9716-afddeaa1302e"}, "6622d65e-1e2f-490c-827c-fea83ee1e280": {"doc_hash": "5c28a9e4a730b98c36bd0571f0d8d1fbfcc361a62b3d26809ea38885a8b61b13", "ref_doc_id": "431f2daa-f594-4600-b8e8-e0734771e623"}, "803713a0-3968-42c5-b39e-38a2546ebfbe": {"doc_hash": "4d510205b589c4c446174ce2fcbef084d32b7851c6b03ba48c69bd2c5f42aaab", "ref_doc_id": "4b9a1e04-0615-4171-8829-ed2e9e54065c"}, "6c052e3b-4b34-4668-99f0-38d67db95935": {"doc_hash": "05733d5e73d33ad825edff56d094d5cfd727e259cacce93f62f8b54cf84bc12f", "ref_doc_id": "91a542e5-0019-4902-8741-69c75eed8b25"}, "3044002f-abf0-4ebd-ac21-f9ffea7a52c4": {"doc_hash": "aa1c76eeaf3648301da07c4cf9b2555b876d67e3a7cb062ce451122523f84e31", "ref_doc_id": "d3cbe5a0-fab5-4a33-bb62-0dd43731453b"}, "71bfc9e5-9ae3-4dea-93f4-b83860251771": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "94854d01-4bfa-455c-bdd4-4a009a2d89bd"}, "5ae9eac2-b2b8-44b7-9db7-d3db0853d180": {"doc_hash": "b0d90cb64724900b3a45d7fd937b321edcfe1241e9472f107d4a2f4cee5297ce", "ref_doc_id": "19d6beb9-c634-497d-beea-109a48d6890d"}, "037586cb-4709-4132-b37f-e0f69b7665b7": {"doc_hash": "b2666e5adc5971d78217426237f1bfdf84a5318582ea68e970ccfd2de28969af", "ref_doc_id": "e3c51dd3-04c3-47e1-8192-db54d888af92"}, "f4b3115e-043d-48e8-bac1-d121bcaa65c4": {"doc_hash": "d0867499fb5dadb120060e637750498ec8a3ceeefa873f22bb88328eb26a86c5", "ref_doc_id": "d4790dfc-1083-4506-abdc-c6d40bf9241f"}, "c5b177f1-e2a1-4ae7-8d18-181ff29c69e9": {"doc_hash": "fd537a3e8d0fd9290976078bfb828326fe6ccf5d79fe52263459a7aff0e31126", "ref_doc_id": "479799ab-7d82-4297-a293-c918a11f68cf"}, "8fc3a558-29f3-4166-9f59-f4ba4f8d9253": {"doc_hash": "66743ad26c671d9db8e2e8b3777e8ec7213b0c43126df3173792a7118d6cf34a", "ref_doc_id": "011a7eb2-2844-431e-91da-a45974adb667"}, "9546141b-09b5-483a-b84d-1e6ef3142cb0": {"doc_hash": "87f3ea1ebc87861ea8a4d223a0b9e6cd1654728d267a2328266c5aabc8d23224", "ref_doc_id": "eca1e77c-4f7f-46ca-aa8d-553e52ad8b61"}, "34705267-76d4-404d-8f1d-707368fed4bc": {"doc_hash": "edd7d970a048c513a15fca8696df3670d69163ed1af960a7cc380ae6cab77219", "ref_doc_id": "4bbfbd84-2c41-4d7b-879e-bd7045aa5bf8"}, "000a83bc-3b81-46a3-8a5a-74f6771da929": {"doc_hash": "06ead3047751ddcb012919ea4317566ecd908a35e1aaf464151e7718f5829637", "ref_doc_id": "9ed6479c-2835-4ef2-829d-e0a75ef0b6f0"}, "27f4fe41-104a-44c6-829e-a9f14834f2a8": {"doc_hash": "2e4508d8489c0db93d3d904aaea35ea1fe804c655e97f4093058fddd254154cd", "ref_doc_id": "d8ac74df-e1ec-4a78-9d40-694767d6b21a"}, "afcd8498-985d-4636-a683-d0f3e9b1d3db": {"doc_hash": "3e64f0babf43eb013381362cc9e3b84827022a2ca55036078bc4346ad7d4e0f4", "ref_doc_id": "16a0cf89-e092-4225-9cd7-e321acac1554"}, "3bc74ce6-fff7-42b4-8611-aba0dca9aedf": {"doc_hash": "37b1c10f51ee5b92ee328924712875638795a3fcb748c74d6ac7de6dc502426a", "ref_doc_id": "134a497a-cfe0-43c5-a48e-420144c08973"}, "2d5b9ef2-98ee-4d09-b3ee-85d80c6415d1": {"doc_hash": "0076fe966c4afa3d0cb4d4eb9d3b8274eacfb20716f79cbe9a7f0a45b1ad18cb", "ref_doc_id": "a545d0f9-0fcd-4d2d-9fe6-04ae256d4c96"}, "d8275205-b75e-4273-82e6-cd50f87dd643": {"doc_hash": "4a45cdb4bc0254ab09afb2cd896e19c8cd66f23c3f17f551347c0607817df368", "ref_doc_id": "5e5e4196-561a-4c8f-95ae-aa82d5505471"}, "5bec92b5-ef8d-4ba7-96b4-adc2c39fafaf": {"doc_hash": "f8345e0b0f76790919b94c860532de11a77d32f1ef189c3b9302a772cc088957", "ref_doc_id": "fd6c5776-8c62-4d7c-990d-c4321538235f"}, "b769dbae-0aa1-41a9-a2b9-51f207915fa2": {"doc_hash": "f3097e9aa14747d4aef15a30da47c49fdb8ebc1423c4d8de127fdc08c5bf78b2", "ref_doc_id": "9d56d754-a5cb-4b13-ac5d-13a4ffacd7eb"}, "7694cb2b-ff7f-43ed-b3c2-d0adf1909a9b": {"doc_hash": "158594dedd17c2317ac73c531ccc7b8b0abea821ed50b3eb537dce8d676d2f98", "ref_doc_id": "fd0d5124-f4ea-42d5-b2a2-0b6ae9e53cbb"}, "7ba35e27-837c-40cd-8133-2092a06457f9": {"doc_hash": "60c9bcb2588352339680936e95d5d437a8526ccca57709c3be1d4523d4dd8e18", "ref_doc_id": "dae28d8e-7b67-4218-a48d-9a97969cbefe"}, "c2793d7b-f19c-4af7-aed5-b6390c037272": {"doc_hash": "6c12aaad64702d4d5e9a15982df43f80456c5be43f9e5be1c3ffb1e8202ff3ff", "ref_doc_id": "525e1717-2340-4802-a7b8-73bae0616679"}, "08d2bb1b-9bfc-44a0-aa29-9e36b05f21a8": {"doc_hash": "294cbae535a82d5ffa3ca81f2ff448b489889b7040ef79ed53f124171eca959f", "ref_doc_id": "ea733736-961f-4673-80b9-c955290b3c9f"}, "023eaa90-d79c-4e91-8164-0694ae3c8397": {"doc_hash": "01d076c481c60c821ff91695e7d293c5e7438e96d217ab4dd7f0842bbcb3ae4a", "ref_doc_id": "1a2b9bd4-041d-4f10-833c-79ec891c049c"}, "359eea17-c49e-4f9c-b6e2-f8d88f7cfffa": {"doc_hash": "2c914cd8ec2e713a167be4b1b8b1adb3f60c355fdfc926afdda05cff33ee3408", "ref_doc_id": "e4b7e8bd-1f4a-49aa-ad66-afe5b99a8a15"}, "6ef94be8-4a43-4215-a770-71197dbc400b": {"doc_hash": "69b227475c826d7ea28c05e1126b9e8e242e46218ccb5b10c207ac99f13754fc", "ref_doc_id": "1ba24ca6-3fcb-4fa0-8df3-de166d139c19"}, "d2c78001-925d-4f0e-b3c1-f3ace47545a5": {"doc_hash": "bf1d53e81ab311490029ea705e514b8b88e5f648fcce7036945150eae27abcd6", "ref_doc_id": "99fdf391-62ab-49a4-be8d-6eb1b6046c1e"}, "73b0ea8f-ad0d-464a-b02e-010ca41d9525": {"doc_hash": "cc6e82a74015f6865bcb58df6c529615ba783e898124aed320029e18d7b18195", "ref_doc_id": "f7313fa5-9ed9-469f-9c40-c462b82d2265"}, "a5f68a09-4f90-402c-b906-cd1e67cf92dd": {"doc_hash": "054d0ec527664cbb1dee1b7c2eea37c5ca301f5674cb4fc42631a555ca655b8f", "ref_doc_id": "f911e384-1de4-4463-a2b2-c3770d0b8ecd"}, "9f63714a-6143-4a85-b106-cdbf4669728e": {"doc_hash": "4fe789fcb313cec605bd933f5d103121843e7743a120c49a0c6cc3923c749992", "ref_doc_id": "6470e424-1054-4318-83cd-28f48714cb5e"}, "652da2b9-4af8-4d9e-a35b-c3b16a0526a1": {"doc_hash": "ff251e4c6ee253db4f6110bb514cf91143b183a7901308671e83c2391afb85b6", "ref_doc_id": "9a5532e6-8ee2-4669-b2de-2e9786ee34c1"}, "a5d29cee-f5e2-436c-8f4c-c9d597aac62a": {"doc_hash": "0000adaae2c9619c5c94eee12a3928d3f741e96c3fc5f760d365e4efaeaeca27", "ref_doc_id": "6796bd05-9825-4805-88da-f469b7a2eb4b"}, "92c7fd55-3af9-42ce-b58b-98265abab806": {"doc_hash": "ebcf43d2bb3d0e50825c0ae1c6a8e1767a4cb4c80bd4152de5ff78652283341c", "ref_doc_id": "2961fc4e-0518-4599-84b9-bd6f8c876968"}, "014f1d3d-3179-4c94-9564-b82481e197c4": {"doc_hash": "24dc5f4262f86733a31d43e08c02d05cd56e0e561b24d09fa71e68280709955d", "ref_doc_id": "14bb8349-c701-4922-88a7-42b750c52736"}, "be83846e-4a96-4089-aac2-f12cc8237783": {"doc_hash": "0d210da508ed3cb09ce411a22eb48b8b4632eef2733801ae3c2a13435c09e26d", "ref_doc_id": "a279150a-5ee4-49ff-8d54-e91bde64c680"}, "fe40715f-aaf4-4068-8abb-b8c20416ea60": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "03e363ed-81bf-4396-867a-1d796205441d"}, "103edf06-464f-4bbc-bfb7-4d6f90606a98": {"doc_hash": "7000d0b67309865ed72537d55b9bd5d871aaf866944a7b6bedea2bb51c213115", "ref_doc_id": "1b97ac2c-8a5c-4122-9a5e-abcef4078c2b"}, "6583aff1-129b-44a5-83a7-d504e1d3f904": {"doc_hash": "975cc8d3a0484b3f63fb9cff22d4880e41102cc08b3049363f56f4100208f2b7", "ref_doc_id": "143586cb-816c-45b3-84ba-c063d4d9f506"}, "4a21ed45-c5c4-444b-940d-484b92226f3f": {"doc_hash": "e015bcdce9aa9e2690c5de1a3f5cc91392f1cec3917638c49dbd2b48b54bb305", "ref_doc_id": "99ad6c3b-5e13-4103-965a-e8fd2891ba40"}, "776a5a0e-110f-445f-bcef-889107df3b97": {"doc_hash": "9f577be9e7c2f3d4b9835b37b40af46786b8182e749c97462ee825939f82cf82", "ref_doc_id": "1127571b-bb0a-4ad4-abeb-86fce034675f"}, "471566c2-4b1c-4d57-93c8-30291e6f15d6": {"doc_hash": "019febad84574e347e6e261165d2a469de7ad97342281cadb4212362198d2318", "ref_doc_id": "0b8fd5d3-af03-4891-81f9-b22fa7134deb"}, "9d4a8e36-07f5-4d81-a943-fa8e5bb978bd": {"doc_hash": "ea7e795623c5ff6284450f5be8b71163af027efde4fbc513c17424875d7870e0", "ref_doc_id": "55f3aad0-5a41-4220-a3db-a6b126edbdde"}, "f92aaac2-9fc6-4bd5-9d70-5af59e75ca7f": {"doc_hash": "f61e0964525d84007847ff092568f6a318a18b16bd6167a634dafb9d579f6571", "ref_doc_id": "1d2bf1fb-cbd9-4a6f-b6a7-d7f17dd0f688"}, "390b4f0f-2248-4042-9108-a97eeabc6931": {"doc_hash": "49563abaa387c2c5330cb4a8645295f79181fe5f1e0dffdafcd1bec793712c9d", "ref_doc_id": "bce5cfce-567c-4fac-862e-923ef324b5ea"}, "1f8def8f-1f5a-4aad-ac12-a894b98b221b": {"doc_hash": "458edb7e03e9de3fd906c0c8905654cbbfadd36dc4bd6ecba5f8c776d4cd3184", "ref_doc_id": "1d28c199-0fdf-4a72-a3f9-169a76281026"}, "33206ee2-6832-4eae-8f31-832600b84f82": {"doc_hash": "99a6478b11fa71e2d0303c4b01fb1ee58e7c9834cb1d84b8ad3a1b3058f842f8", "ref_doc_id": "957e781f-4df4-4be3-9bef-57bab432902c"}, "bce96abe-7364-4c07-a7af-f2ffe3de5ca5": {"doc_hash": "4f20348ba6fb3f5bcd7dcf799279c730c21451ff2075078c3f61e63097dc036f", "ref_doc_id": "4560894e-d5f4-49a5-987c-10846caaedfd"}, "2ac2d11d-1b4a-4409-b26f-caf0175ab750": {"doc_hash": "bed204c77207652bc039200da34a8a773264287431a7a0f962e81c573f6fc3cb", "ref_doc_id": "fccfddb5-c36b-4cba-aca8-3ab5e83174ac"}, "41cb553f-adce-440b-9e1d-2ecfbf26d6e4": {"doc_hash": "63684962e719c84c6801c7436b7ad21a6c54aa900c4b00a0c17edf73f6228df1", "ref_doc_id": "b3344f3c-d2f2-4e6f-bafe-9185c2af83a6"}, "9bc6afe3-8760-46d7-afac-9def0ae20f0b": {"doc_hash": "978eec9dae528d86d85e802ae56ac5d0fec6ccb4fb247fa7acad17157a372e0d", "ref_doc_id": "26ac80d7-4e9a-4f94-8a8d-7647eab4d960"}, "c876f86a-8e62-4a91-9d52-e122a499be56": {"doc_hash": "989a560d808a16daef8427a63fb93bad6c756e1f45c74fcf22e16b6436ae5ce0", "ref_doc_id": "a366c28f-bf78-4bc8-a2a4-6d61ca1e8faf"}, "8647c29f-9296-40d1-891c-d67f320c2f46": {"doc_hash": "fc1a8df157867c779fb4c6b1d0a049b9ac2f20d92c9b543df2f79db11a14397c", "ref_doc_id": "abf31dac-182f-4c25-a6b5-f4999680ea21"}, "9df8e144-0ddb-46aa-8909-6ee8f1db80a0": {"doc_hash": "9a6c5b9858673b2a0bbd234328fba130bbd2eae9985b4f6ed66e327340976b06", "ref_doc_id": "6388febd-7e90-41e8-89ab-88acd38b9b66"}, "c265a3de-1eb5-4683-9144-1d3d9ca2c586": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "026c914a-29f3-4643-b33a-554615d6a766"}, "0ce2b5e8-6f4a-44c6-9c17-4ba13a903ed3": {"doc_hash": "936151d3a4d89e7964e7e28b455e33e849eeb4f1a5f5aa4eff3e44554ed43f88", "ref_doc_id": "3db0d810-6c2f-40e2-bef8-0435f7085900"}, "0031574b-17f1-4ae6-8475-38e1f11b46b1": {"doc_hash": "79220a1dacf93ab5edb1c420c1847f9f4cf7f0065588d210022a601eaa8cb0bf", "ref_doc_id": "586b4fed-44e7-4286-ac9c-27428b49190a"}, "87390136-8361-4438-be09-efd5a44c9786": {"doc_hash": "1de4e7461e7595bc686fe2af4c55dbde339612222bd5e29413aa82c92a023794", "ref_doc_id": "fff026bd-77c1-4cf5-9a58-ae3c99319c9e"}, "5a8fce17-482c-48e2-beed-27487c49d1f7": {"doc_hash": "ecf577c93bf6a9bdf6fef38ee896d888b2ef3ac42bab63f0b53817b88342d3b3", "ref_doc_id": "d552cfe4-67ea-43dd-874e-ff9cee3730c1"}, "1d3241ae-ac8e-4eca-b94e-96e9df8a31f8": {"doc_hash": "6f74ab639fd03ef2b7916c38b8b64a0a51702da63e9504583f67dcd695311787", "ref_doc_id": "566534af-4457-4c79-9551-2d20cdccdfa2"}, "c1ef0d57-53a6-47bb-ae24-cab2295fb152": {"doc_hash": "292806089b12f584777eb537a1d28a31c93f715395e4da04ee21e38016d944f0", "ref_doc_id": "2c701332-4fd5-40d3-9a2e-edad38f5cda3"}, "66319d01-2127-4bec-8823-6777a258b267": {"doc_hash": "32d5de7e2eaab7e091ad171fc29b91d4ea24146c1d9242ec42fd6f6706013d66", "ref_doc_id": "ac598ff0-7dde-4d75-b5d8-03b56a9a7cd1"}, "87b682fe-507d-4873-b5eb-4672765d8de2": {"doc_hash": "bf80e6061ac8fe313546732d1a1fb3bd1361def4eeaa170f793139e9ff180ecb", "ref_doc_id": "cd1f4905-e614-4fd6-89e8-bc56dfce5005"}, "79a8bc35-1caa-4bb6-893b-423bad9070e7": {"doc_hash": "dc33fe84f684eae0556d4bcefe6bb15e65d61981b96e40bf3809b16dc71892f9", "ref_doc_id": "b5cb8a19-3ead-4999-b7bc-66164232ee33"}, "6b715474-ab00-49b3-b96b-ec7c6a15db0e": {"doc_hash": "31b4151569222ddfa090e01ac9d46b7378f6f4173ea27d84d35b98b6af406fc1", "ref_doc_id": "2c98c9b3-a045-451a-be3c-707e258409aa"}, "e664b102-79bf-4f1d-a8a6-2920e6d0c50b": {"doc_hash": "66ec7812009d9c1e819a9190b47e0e07f83ff549e565895d16e64f32332a5f87", "ref_doc_id": "ea8983f0-85ec-41b4-9832-38693710bb3e"}, "f75c1b39-a71c-4bfd-8642-7db6dc74977c": {"doc_hash": "c70975bb41ee583d4f92a016b000067940abef5c28858ef2ddafe38ea7956ed6", "ref_doc_id": "24482ac1-906f-4fdf-ace3-e21ee4592bc1"}, "4f4f070f-810a-4a0e-848a-fa0ec71f7975": {"doc_hash": "75f242a5c082000c90ee4e88305c0b120e60507844f0583e63b78a61357b1656", "ref_doc_id": "f8a73abc-8b7b-473a-bc70-7dc262128f43"}, "dfe3733b-1ade-4bdf-a7d9-0bb1d873d789": {"doc_hash": "ce7704813a2e4e19e34a4788233e3b30019e1bbaabbd100a9ec8e15c24ca93ae", "ref_doc_id": "b85b2c9f-f6f8-4d09-96ad-693e08719039"}, "6200bb52-bd00-4b64-b893-2799b2e59e6e": {"doc_hash": "c4698a1d45d403c2c6ba8d32700367ee9420cd57f4f50034eb6b124fa0d9a4b1", "ref_doc_id": "d2c1cf8b-e9bf-40ac-b7f5-a3d89e91edb6"}, "2994bbd5-0ab5-4deb-9229-1ac886a45ce0": {"doc_hash": "98fadc4ce2c85d6d33bf14295cb72302375b4bf2a994c35012b697a01bfa985f", "ref_doc_id": "e710e637-2fb8-48dd-8071-d072f748b64b"}, "f779ad36-6b5d-492e-98df-d24eb9809fcf": {"doc_hash": "3477aeed448bdce411bce0f646ac06aaf4f4e7a3a192b821e485eaf4b9b7ec3b", "ref_doc_id": "715dcca5-1b64-4245-ba57-715fe3fac989"}, "064873f0-01ce-484d-8774-fa7afc371950": {"doc_hash": "0c188e84c341042992dc2416751cd979f09ca25aa91dd77a1c8d39a411d612d3", "ref_doc_id": "c3e12033-fd83-44a1-902e-c35207db8512"}, "aaa30792-d935-4209-a77f-c2b4174ecd35": {"doc_hash": "5cf638ad2eff63a4f11b2df4804ceb562871ff83df285101163413ecc9ea60d3", "ref_doc_id": "b098aa41-27eb-4a6b-b52b-c79410d38383"}, "b2ee11ba-af15-4210-98c8-d6c79d68ce14": {"doc_hash": "819304c4d1636667c2342127ce0508cd343c11729c27ee2bddd214cbd1c00dfb", "ref_doc_id": "a6f2e44c-e202-4563-a035-78e4dcd2b825"}, "f0be3316-1000-443f-bea9-8645961ab40d": {"doc_hash": "317b5082cac59381af479de3baff5fe2d6700de4d347438ec3bc68e95ccca519", "ref_doc_id": "eefc890c-bb1d-404f-aa4e-d55ec467ead1"}, "079dfe27-0605-4033-a27c-c71d19fa0d34": {"doc_hash": "709ad4334e7d1c798cc7cfb3b676eb491239fb44f94cbe5929aca45e75d39525", "ref_doc_id": "8dabf594-fa7e-4c08-a47e-b45bd960c2ab"}, "88245585-e5cf-4bff-bd34-1e5240fea79b": {"doc_hash": "720e9237968ebd001553bd2e6954d3a694db8c1985b13bc8eae8de02d1647690", "ref_doc_id": "6f591dd7-1ddf-4848-a123-0a7855b9e1c0"}, "5b18ce63-074f-415c-8b60-8370cc0f1e65": {"doc_hash": "1cfe86a4891a467a4d95447a3a21cd8166f87075996069c5c36c77dfcdfbff41", "ref_doc_id": "a60e5cea-ab36-4494-8666-b971ed5646e6"}, "a93a9ea4-e5a7-4108-b68c-64eeff75b1e2": {"doc_hash": "e42e725b3a7ce202dd22f2251ca2fbdf2492d12a8eb272a6b4ca0100136c041a", "ref_doc_id": "eb18a2be-1afa-4d23-a812-e70c516e5053"}, "3e9c3584-15f2-4ebd-a8f8-34bef9b8d596": {"doc_hash": "c5409acda627731d5f48db035747092334ecfd3f9d7644395dcb4a62541396ea", "ref_doc_id": "fb398e8b-369b-4c4f-aa02-fb0e2bc98ccf"}, "a2b1b829-0120-44c9-a283-8c6afd214ce5": {"doc_hash": "252a804f3012f561a7bc3592bff76681077f8f355ec7f62b7b7e9f1243c5dff8", "ref_doc_id": "f57d40f9-ca5f-47e1-82a9-6ab56f496a36"}, "9338af10-315d-4d73-96ae-c181ac8e2070": {"doc_hash": "a56b5eea8048345c99c8cb76f5769606a4314332593489aca5d2c00a57f9cfec", "ref_doc_id": "7762a72e-0f61-4d34-8270-53bd9be0b690"}, "7a8a7248-2e8a-4ecc-976f-90e750de043a": {"doc_hash": "8a45cd48f3e56454916790b5db8df267e845ec69d8e2e7f34d1713bdffdee815", "ref_doc_id": "32feb1bf-0377-40bc-9e6d-1f57849b83c7"}, "db4af358-a91b-4377-b371-09c130da01f3": {"doc_hash": "fc119e25d8decb2a7b795997e359f45f5519bb5376d2c1ff9d4b9b71fde26b7b", "ref_doc_id": "2a3011a6-50a7-4470-8571-bd6685d3c442"}, "66739602-ecf3-42a1-ac70-1039497d2dca": {"doc_hash": "8f3f99867a89ae9daf76c7db5b1620557ff363b1dafa9dcf251c8d0512aa56b5", "ref_doc_id": "3116ac29-5983-4d5e-aa9e-89b57960b943"}, "b92ee4e3-4ff9-4e65-a190-88c156c5566d": {"doc_hash": "bf8d74684dd40422e7975602fd0608b45c123ef57f8380dadb6d08f92d2d38eb", "ref_doc_id": "a68fc1f4-3d46-455e-983a-d73786304b20"}, "4d84001c-7c97-4911-9956-ad8b5a128fda": {"doc_hash": "e754ac9bc16c7d4a9343bfc21f90a154ba32986249c9c970609f2f220b825da5", "ref_doc_id": "907de937-ba12-4cf3-a7fd-ea8811c91a12"}, "91c3fc8d-9e74-45a5-955b-13349db2cfe7": {"doc_hash": "faa10e3e47ce27964c866c232d18be8d14c6fb4ebc8c831c6a3d84cfcc841ed7", "ref_doc_id": "cdc361c2-ba9a-40a6-b3d1-7d70ce715907"}, "f5481cb7-36fb-4956-b1c8-0966bf7bdb1f": {"doc_hash": "607698cb46df55d417e1d57aeae64fe87ec885ae3d719a878b81c476e34f9b0f", "ref_doc_id": "47b0867c-314b-45c7-961e-b2ffacbfcbd6"}, "3993586e-5769-4d5f-a01d-cd30d988ea1a": {"doc_hash": "ab7a7c15de281f964f1841d39651d54e6fa6a5368161a17381f1733f4868dbeb", "ref_doc_id": "401b851c-4b06-4832-8661-348efbc8a029"}, "6d369ba6-2356-4648-9e03-f437d3426012": {"doc_hash": "560d04a98c8a2bf66cd08c64ccdd7f954e08ec241adcfe4c1dfc953c61390d8f", "ref_doc_id": "60c5813b-194f-44dc-aeca-b2e294a053ab"}, "d1569b7a-24b4-45eb-81dc-6bb799c8abf8": {"doc_hash": "fc131a8854fcda7e11d8a55111a480558ef33374a4d499dcfeda34e4b179e76d", "ref_doc_id": "b0ab75b3-0e32-4fba-aa3d-f6501ff1f6c3"}, "227e5b1a-1e33-483a-ba3f-0c85fd7cfc58": {"doc_hash": "b7ee6d786f850192c7ac13f02dc752fd6d99f47d271ebd8f3ce5960a7b73ccca", "ref_doc_id": "a5497175-ac41-46dd-b542-313101438eb7"}, "01ea07ab-f222-4e60-8fda-ee1dc5b0302c": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "d3fd87b6-7c3d-4d16-bc38-7cd0cf2dba33"}, "4ee935ab-fe8d-4c81-af12-50bf250e5f7b": {"doc_hash": "abfe013e8e875ec75aaed7f2dcd0d2e828f9bedaf796fa7066175b4764158eb2", "ref_doc_id": "38062fe1-3efb-4af5-8238-59032184224a"}, "0d948b30-867b-407c-ab06-6d9225b16801": {"doc_hash": "3d0bc1147e49966d38be8a8448a7037b41726707ad537d68629273366718e115", "ref_doc_id": "ce3b0c30-db4c-44af-bdbf-ad72968590b6"}, "8d9edada-6491-4181-b0ad-63eaaaf9ff6e": {"doc_hash": "c9fb664e92ab26e6ed9ade380916241701043409d7fbbbf1838b1af8b35e6a54", "ref_doc_id": "f5428164-e69a-4511-bab5-0ed4907a66b8"}, "4956c4c0-eed5-4041-b349-fa584b613127": {"doc_hash": "57fb7e370e08e23377e60ed4a192749eb0c10327fdfb396fcf982087b1a7c1c4", "ref_doc_id": "11839251-0972-4fcf-98d5-1e96b5e6febe"}, "621db5f7-9dab-49e1-af53-33fbd0eeb533": {"doc_hash": "c7d9843f421306da55e81644d7a958fa9f68bf65eef3a6934110b6335d4e46a6", "ref_doc_id": "0ddf5fa0-18c4-4178-8b15-28306a8f27a1"}, "355653c9-b572-4a56-9b84-31ffa842f96c": {"doc_hash": "4df81d9da30e48d822a00e4aba795fc3d05f67ebb486c9f68a5983f56ecec37e", "ref_doc_id": "fab49502-c1c4-4874-bf14-42d086211eb9"}, "20dde164-6d96-4a77-a9a6-b3d9cac4fb95": {"doc_hash": "9aa7f32344d6443a33273c3388989bf42e1ec8002c407d59ebba2ad3327f35ae", "ref_doc_id": "c6d71844-218b-4b3c-8ec8-b7d21ffa03c8"}, "6ac6e32d-aa82-454f-8dd4-c5b2d28e1771": {"doc_hash": "46495359c6070b148917e476b55dc1ce6c61ec4b218790175dfc680b33a64e5c", "ref_doc_id": "4821d88d-083d-4fb7-96b2-bc33f3cd4833"}, "2c053595-f1d5-4df6-8fbd-965cab5b12ba": {"doc_hash": "b8190553986804675ee0013f948d26f4374fc6b7724af5f9e4bcc6ad7d8299dc", "ref_doc_id": "295785f1-8d2b-4582-90ac-b9425bea0afa"}, "a19d7248-e750-42d0-bd84-a8de9caf4147": {"doc_hash": "64dfd3e6cc8757a8f3f9c48336d0e02cc125f3b9a953c9860fde56c9e8393ea1", "ref_doc_id": "d06c9d02-6bce-4350-a3c2-ed23155f2b42"}, "f2ea714d-412f-435a-a971-acd128ada9d2": {"doc_hash": "92deedc44dcca6708f796d7ae555ef6e75627eaef7e8c9447ab005da23d4e5e7", "ref_doc_id": "52914f46-cfde-4193-929c-3563fa2031c5"}, "26b69292-72fe-486a-bf23-4e4d890e4a5e": {"doc_hash": "a3a1863483cae6a773ed05e38f89f86af781d004940247e56f0d50a1e52dbf38", "ref_doc_id": "d4ed3b70-ccee-4205-a111-04efeca34e0a"}, "f8c6fa2b-3a6c-499f-a82a-bbcf366404da": {"doc_hash": "3781d73410ebfc13663d54c715fea66c83db64f2fa4fd91c6db6dd51df9f96bb", "ref_doc_id": "2b4e3b1f-b4fb-4ad6-beec-800c6b589377"}, "1a636504-55d9-40b2-b969-3cde57c2eadf": {"doc_hash": "28fbcceb1a319cacb03836f9a0323d1d88a210d30d8938904923c2311e51140b", "ref_doc_id": "caf7c77b-b9f5-4b21-b2df-9237614f5604"}, "8c6b9305-9716-464d-ac83-e6b65c552c12": {"doc_hash": "f95f13857fe60d3abdf0655db6f0bdc342987d132ca605a84273fcaed0cfc30e", "ref_doc_id": "cd306b6d-35ca-4169-af99-48bd4c3d09f0"}, "31c51fe1-0761-48ba-996d-2730a45a5fe7": {"doc_hash": "55eb6de0c15de219a3e0142acdd1faa2f67daed313a3e3e95723e472d4906617", "ref_doc_id": "3b05a250-477d-4275-8905-4211b1a975bf"}, "493359b6-53eb-4869-b232-6177ce6a95b4": {"doc_hash": "bd7c561a3cc9ad942eda76affde97c2fbc0a6892f3d851c775997c018710df0e", "ref_doc_id": "9567c207-0a67-473a-9433-cb30e74a0b5a"}, "6bd112bb-2f56-4457-a2de-a3dc73749def": {"doc_hash": "bc42bd3017a010e238fbf405cd1dbaeea7b3023d06b8a9f7c2f177b28e1e72fe", "ref_doc_id": "dcb0a653-40d6-4df2-ae36-94ef093e8886"}, "5c185139-1672-4b05-8ab2-0c2c64a3adb4": {"doc_hash": "26919fffa4266eea681583a518275045edbc5ac7491168a1327884110ed4cdc2", "ref_doc_id": "147dd45f-5d06-4913-af1f-c43e5425e63f"}, "206c86eb-42fb-4dbf-a6cd-ac7788d541ab": {"doc_hash": "815365dda23781755ed0ee690a310995b2b6dfd735003852ad5df37c0f3cc0ac", "ref_doc_id": "525718eb-b425-4b79-8d73-b15822a0f3c6"}, "109da770-5ce6-4b71-b2af-e3e78ab2c055": {"doc_hash": "678b5c0402e0d98591674c46acf9afde1045ac000edab627a5010a1b0d167859", "ref_doc_id": "a0b0acc8-840b-4422-ae48-826db59e12dd"}, "45fee225-76bb-4be2-af2d-924964ff423f": {"doc_hash": "4a4675c75a88b0f616c34d9d10f0d22f1896039385a9ff98bd0f8cdcb71ef58f", "ref_doc_id": "7f33ce81-b1b4-4889-aafd-d5f5f370d877"}, "5003bd1a-a9a8-49e5-96cf-3d2089da2ab9": {"doc_hash": "39d10b2945eb947b4e55ed022c853940238ee9bc131f65fdbaa2dbdd91468c79", "ref_doc_id": "7ceecf92-6721-4f77-82da-312959cb0eb6"}, "f320e175-32e6-4a95-b73f-c9d24c0be7c4": {"doc_hash": "65d13bdd969feaee11959f21fe61d1ef7c3e7815b7208067e4b1ebc0c24f5362", "ref_doc_id": "b976ccd1-0e4c-4b19-b7cb-bb8d7e22747f"}, "fd9e5706-6fae-46f4-a610-2854dbbcaafa": {"doc_hash": "94efb8e323851424042bda59959d3302f175d509ae4bed90779d3202ad088482", "ref_doc_id": "b678f24e-45a2-485f-b6ae-d81f169e5b4e"}, "f556e10c-8770-4893-834f-011f418bbfd6": {"doc_hash": "9b677f9177645d0c5bba7ff97940c17ed2060070cbd6d43b4aae410cfcec376d", "ref_doc_id": "1a5c1c7e-605a-49d7-aea1-9f8cd7028037"}, "1c9dff9b-3da7-41f8-ba29-40c9edd1faf9": {"doc_hash": "24295b23efcb27b076c6061476c28cabd1e8c44e65adf26ca06bc96db0f73244", "ref_doc_id": "477bfe58-3a30-4596-befa-265b35347458"}, "01ed3659-b5a7-4933-921f-9129e5246699": {"doc_hash": "90c97db3182f9cff94f725a62b85a568eb443d93b387a7811cc9350322557be0", "ref_doc_id": "797d82f5-ae36-444e-9ef4-4f1935439737"}, "1513a2ea-688f-4952-9081-5a93963811bb": {"doc_hash": "b9248d38a60c969852d6d805f27ab70b6766bf46f91b5e5e934d0f684102f028", "ref_doc_id": "0f2e80de-f13d-443d-af52-c8a71508d0d0"}, "8ed24efe-0b9d-4608-8fc2-02d6a8d6f54a": {"doc_hash": "1701b4644710e4c022bf75cbecedaa9b5522f0b957e4842eaf13c1e1749005b3", "ref_doc_id": "254d5bd0-fc3c-432b-9d1b-6a309088976c"}, "e51cb12d-8487-408b-ab6a-7f4e51806f2e": {"doc_hash": "5b632802a250741656291e72a19a49d5aef9aaa94224644dab02e481e46f5820", "ref_doc_id": "81b270bc-5b13-48ec-917a-1abee218d9cd"}, "10e75e74-dfc4-4116-bcf0-1ee1a17f8e08": {"doc_hash": "abb25511676b2d234950e7874a9ef921d11c8b5cd6bb4bc19fcf1472ec24795e", "ref_doc_id": "f8d17f7f-08f9-4602-9934-10600eb86522"}, "83d10a9a-1f37-48ef-9cfc-5e65a5618ae4": {"doc_hash": "b192fc91cb856f6df68c53e7061e19f15104195882545a3714fec06585d1540d", "ref_doc_id": "a300ae8b-6907-431e-a588-7a855e38e50d"}, "f357bcc0-28eb-4ac4-8c15-4644e0891cab": {"doc_hash": "9558e74d49d9ed9c5182191bbfcd9a89fa3640c97d402a8063ed4781ef8b1084", "ref_doc_id": "d5f71016-c79e-4024-b898-0f87bc436f6c"}, "3b91eb20-3c3d-4e31-aa7c-6f2585382a7c": {"doc_hash": "2e9f7a7639e643629d2c638497f5b2c170d5ed30cbce0176b7a3f36f4b87f95a", "ref_doc_id": "1f31637e-fd02-43ba-85f5-1d76a29edc45"}, "0571b00d-9832-4575-9aaf-9317b4b68621": {"doc_hash": "bdeff85173e51f92c315d29d887871c1f3251c94e7ad13d1513236cb5ef4b980", "ref_doc_id": "b5438909-29ce-4865-8e7f-5780a68edc89"}, "7df48a73-ffa3-4405-9e62-da3bb4e88690": {"doc_hash": "adf3756f4d736bda74887752417a8a47321f3a63faae21a82aa7dfc79aceebae", "ref_doc_id": "6daf7c8d-169c-4e71-b3aa-7d656c5aa335"}, "85c39591-d095-4b98-9ad2-416b4d785079": {"doc_hash": "da98255bd2a3e54a2ba175a90ff5e98b8a144be82bbd1c69ac15d62c85ae8b9f", "ref_doc_id": "9c5098d1-0a4a-4d55-95ee-6df2759dfe96"}, "aaae221b-980c-4afe-abf4-d924b9b8e8d4": {"doc_hash": "b3f2097e994d6d1cd30ddaf0fe47d56ca29392eafaefeafdaae33f04b3649e5a", "ref_doc_id": "c3f93af7-81e2-4537-b9b6-bccfe8312be8"}, "091d4173-5e9a-4381-92d0-4bb4b53a36e2": {"doc_hash": "36eb6392460a3317a8891834868302294ce86122dbe0c542d096bad5b379ed00", "ref_doc_id": "8d959bfd-bb64-47f7-911c-9c083ab1c30d"}, "a8afc509-eff8-4ce5-b58c-be6e29cf6f09": {"doc_hash": "d090894a34faa6bae5bcc6a84039fb427c4bcb7c2d3ae976917ea2e0ac13ac92", "ref_doc_id": "d7cb1dc2-af40-42ae-ba9f-700904bf5a95"}, "8f9b74eb-8552-4bdb-a213-8dc926f2d246": {"doc_hash": "0a2602727a91f7a95122cc81821f631e2c21e24c8804c5a2137d520b26d443ea", "ref_doc_id": "b2511b1e-1be2-4a93-ba44-9dc973a0a9fd"}, "fd186674-52e1-4191-b6b0-4f34b5c33739": {"doc_hash": "f769a24b808804d1219fd583e6c05ea5e29d3477edb162392da7c13346f328f2", "ref_doc_id": "365027d3-bb03-4a81-8da3-a962a2555411"}, "bbeff375-3182-41a1-b261-d3d0fc381850": {"doc_hash": "eb8357dbc28ef3fd4f15115ec3a9d1fb777bb003bf28592abe8ee82940714922", "ref_doc_id": "92efdd71-4c98-4e32-8a26-73bfeffa15f7"}, "4550aae7-b224-4382-9aae-b71e938f6af2": {"doc_hash": "9d7996b640383c8f0cc1b90c878c2d0e43d1fb9eb78c5e62b820ee69946061a7", "ref_doc_id": "6526a161-6d12-44f7-8179-cc640fe3430a"}, "d08b21af-0ed9-4752-9ba8-f5c2c3ce494a": {"doc_hash": "fb501b29864d1e14574d741f69a2e4eb9275b6ab8e7c58de0e26360a73f17498", "ref_doc_id": "e5538af5-739f-422e-8fd4-842a95100454"}, "3ea710cc-8d20-4301-a415-dd45dcbd8464": {"doc_hash": "44d0e991809a4b4b60546b8240bbf84fc81a5c1bfcae6967606719694dc4968f", "ref_doc_id": "9b01bb83-5716-45f4-8fa4-52c27394eac3"}, "9dfe52ed-3e43-4ab7-bc59-c81bbc1477bf": {"doc_hash": "f2c8129eeb58619187c82b63e891770f99c449a282afdf44503adeaec44b794d", "ref_doc_id": "2679f2d0-c56c-4e2a-86fb-f52ac438a56e"}, "8df15780-7f3c-404b-957d-0d1a88ff55af": {"doc_hash": "3196e02bcfaaa4625a1b7397c7c4c4c530a3ea5dc420720d2186ffa8f73d3da5", "ref_doc_id": "7db29dd5-3b0f-4114-af3e-544f12562230"}, "362b4396-f019-4996-8572-c8f5b07d01a6": {"doc_hash": "20707e1bf26088c45fba0a77171ce0827e32792290932911e9e1461283411b35", "ref_doc_id": "417fbe10-311b-4221-adce-6d8f1c8a3d2b"}, "6efbd2ac-fb3c-4baa-8134-302499cca2e6": {"doc_hash": "8943d6d923cd1e64f22f6652c1f0f43543c552adf76f03de84f6c756125c343d", "ref_doc_id": "19ae6b6d-2bbc-4709-9c27-1d196e5814cc"}, "a5a82a65-d69f-4468-a8b1-38d37a60f4ec": {"doc_hash": "5c37d58a7c719378978fb1992e4d85e80886aa4a1f633e494f0ea638fc8616da", "ref_doc_id": "0eb11fe7-d1c0-4e7f-b83d-bedfd3bb8ac7"}, "a8be7381-0914-4206-9cdf-3bb914083414": {"doc_hash": "6f1067a9ed4b7340b15f1991d2f71992a268897bb548ae54896bfaa82dbac4e9", "ref_doc_id": "b0651d64-9470-4e90-97f5-294404387893"}, "ec8b2d88-10ec-4e2f-a04b-103af7d1d1a4": {"doc_hash": "53f8a720bd7db9645f7708fc42ccc3d747ad32f08176159ca7d141c55627642c", "ref_doc_id": "da3bb542-5030-46cc-9d18-888e96baf54b"}, "f16eb65a-1d1c-434d-a02a-30f14e1d2f1e": {"doc_hash": "93f24fbb8df7d62ae8459bb3586c04bc23c186b3b0b8617c24e2601347e8e98c", "ref_doc_id": "798fc166-f2a5-4ea9-a1d3-7e0985c78487"}, "8ba43bfe-9a7e-456c-8b0e-3b6a9cb95177": {"doc_hash": "43c490bcf97622ed7c14997b4188341b7398868c29f5637b1c8c81a59b5e6340", "ref_doc_id": "f3419ce1-8af9-47bf-824e-a752aa4d10ea"}, "fefc7547-4936-4267-a58d-538c425e69bc": {"doc_hash": "e1e6ddbc81c778c044c02d90191accfcb48fa913a08f15e619e5e417a1ca33cb", "ref_doc_id": "5c96af14-8d46-48c6-855b-fcd8c7a73ac1"}, "ce542681-5df6-40f1-98ab-f25c958db555": {"doc_hash": "36e0fcd1b19b6244803c11d005291a884d819e9ab9b3e7de2671a650dee1897d", "ref_doc_id": "f1bbb7cb-18dc-4f96-849b-a4db39ea554b"}, "d373c242-503b-418d-ad2e-4a600c34d723": {"doc_hash": "12c1ce05279a1b1273bfa74b5bd059ea518a4e090a5c811b89445547e5238f3d", "ref_doc_id": "3e463451-0b00-4782-9640-47611f1b5cfe"}, "ca276a6a-518a-4bf9-b601-0ec824e6e577": {"doc_hash": "a9cbeb658f457733f99f7eb03b935fb967f2665c8bbd68fa3156daa23352258f", "ref_doc_id": "41cf41a1-2bff-473e-9290-4b90b09e03d4"}, "61fb5623-4a4e-4558-bcd6-4ed61764e5e4": {"doc_hash": "c0bb69812456f5a1245fb0708869f3ee72ba12bf8a1ff43bba1194e08b2afa1c", "ref_doc_id": "d74e098f-2a40-4127-86a2-6b81fc9e329d"}, "e3243344-5260-4418-a126-043faae264e3": {"doc_hash": "242a29df4a4e459f554f453f755ebc47680b0c8ae6ba7da1384953669539b082", "ref_doc_id": "47838cde-e8e3-40b5-a74e-952d956e4c7a"}, "e87e1b3a-547d-4e7a-9a7b-43781a095cfb": {"doc_hash": "2f9455ed984d8885d2b7f3db94d89a968d4cd2c5ba05d755242f23c37205c538", "ref_doc_id": "5944158c-54e7-4259-b9b2-d7fa58fd0ce2"}, "edd11344-6f86-4f7f-bb7e-0055f1e17925": {"doc_hash": "aa74dd91c6a330846e58b6dbc89c01680f7cc1218f240390ad3c0de04b6a38e6", "ref_doc_id": "73b6846b-37f3-45c8-9acc-6e353b97d485"}, "20a0372d-30a0-4e19-9fe8-4bfd9c17513a": {"doc_hash": "a08e85ea4e1255bc9571d771938db0aac31097a314fa72af13eb056f50d21f25", "ref_doc_id": "bd93353b-78af-4d64-a5ca-40087cf45f5e"}, "ad6f3633-cb40-4253-90c5-e497bed907fc": {"doc_hash": "5c2b36477f604423252a4dac69afc93d15ce60f3a0d40da3f7a1ef9cd1bab252", "ref_doc_id": "f6d1a57b-e17b-4f78-8566-d47e8525f40c"}, "869d6937-816c-4398-931c-2b48f326e89b": {"doc_hash": "7e6ebe370b0c50f6cf5638f646dd6d978429f45a97b9b68c25f60cc8be59993e", "ref_doc_id": "88e9680c-0a8e-46f8-baa5-2478e5e7de03"}, "4a5c8e8e-9643-4178-bb15-51bcb4f8a065": {"doc_hash": "1033eb67c25f8a37556d9b26b8d1abab8e5bafb439c53d0ed968d8af521ff17f", "ref_doc_id": "1fd068ce-718f-485e-887a-b5dcbab5396d"}, "1993dd5f-f1c8-4f19-9638-af4a0a967a9d": {"doc_hash": "f98ed4bb94533990cf53b6fb696460868061e81162e8970254e5c6f91d87c08c", "ref_doc_id": "e0b80983-7483-4ca6-ac72-05577586137f"}, "25d02104-a1f4-4a52-972b-f0037e6e7984": {"doc_hash": "cc8c6ef4874e65296429759020aac77f0f9020716ce6548423c8d54297b201dc", "ref_doc_id": "20da4996-3bc4-4b68-bfda-cfd130060dd7"}, "9dd90495-39df-493d-b3fc-52c47dfc1567": {"doc_hash": "a45c3caded02a0112150815db6917dbe4dea53c87a076740915696ab1f61c04b", "ref_doc_id": "c1044ee8-0424-497a-8db9-83b93acb1c38"}, "f08c999d-55a6-46d3-a503-60a2cc43fe92": {"doc_hash": "7757a6178db289d7eae73ff3e858ad66bb2b0500bda8eb2ead9ed0b56e676f15", "ref_doc_id": "f6c988ba-a0b6-4b5f-bb39-1885ef0cc6c6"}, "6dcb4123-1ae1-483d-8c90-2b965d3d0ac8": {"doc_hash": "9519038f011e570e57c91f8d5269a12467fc9f3ac2bdbde6c5d60c375ef615dd", "ref_doc_id": "3558b6ba-1382-445a-806d-e4ee1e8dae18"}, "5c33eae1-4945-47c0-9ae1-a6dccb5f9f0c": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "bff12fb3-7c7d-4933-b52a-6e9b3bb38064"}, "cce1653f-e93c-4d78-ad95-0d6bfc889fe8": {"doc_hash": "3653f0a1d1f45b3f4efea2266cb32929ec87255d72eb66e58aeb0a44e6ac3969", "ref_doc_id": "7bd5c609-4f68-44cb-a2f9-e7aa0027d797"}, "def95df7-9d85-44a5-901e-27caae716292": {"doc_hash": "f2a3316a38480a6d8ef8b528caedb8f3f1e8d8765e546feaa389067bbb584184", "ref_doc_id": "76b1c29c-69cc-4152-9644-dbb0381d20a3"}, "2c2d0efa-c041-44ac-9596-8123e0187104": {"doc_hash": "4187c47063ed08ab30036de8a1bceeb924201538fd749ab4c7fae819f4428157", "ref_doc_id": "c2fb43d8-5e80-4edb-8252-5b1c6c853ba5"}, "dd016ec9-c6b2-47dc-a7d2-dd8698664070": {"doc_hash": "4923261c8fdfbbdf86a82446e9567c18b25a7745f9dc3a9f3442d1187fb505c3", "ref_doc_id": "ed47c2be-31a0-4b93-814d-96b706709af6"}, "5d189999-b189-41e0-b7d4-63523c6d1776": {"doc_hash": "3b34ee90af64f7cbafd522e548770eca2859a69933cd0d7569b481fd28e35c30", "ref_doc_id": "3071a475-adbe-4c31-bbb5-1ea73e06a834"}, "f9c21777-97c6-4150-bea8-132bcf9758b8": {"doc_hash": "b1ec878c18812739b4db34183dd1fffb30b14bf7062cef787e9b2437df863cbb", "ref_doc_id": "b40e685c-05f3-42fd-8b9e-2da3241c3c97"}, "3a22b7b2-9c89-4f74-9307-026fc65081e6": {"doc_hash": "6aea77b7e89ff5fdaa3e20f50f015e1be3c45f792a538308afeb0b0378f0ed3e", "ref_doc_id": "cb736e8e-ef47-4322-8509-a86d54659846"}, "e30a7447-86ef-483c-a669-2c2509c60d0c": {"doc_hash": "7657abd3dc8807c7a906da1a77dd694fa172f31fa1e432ba39e3e38e36be7852", "ref_doc_id": "5422306f-455e-4a92-9d6e-1095334f5ec8"}, "c924316e-d266-4a77-9355-b861fee597b0": {"doc_hash": "d4873d8fc4c9be5ad58c5f9d4eb24d2388784c2a54d8c3c243bcdc4f6c062de0", "ref_doc_id": "736650ca-46a7-46e2-89ac-f31a5f6d6ed4"}, "2d39eaa3-0d1c-4bf6-aae5-d08ca19bb937": {"doc_hash": "4edadba046b97d9a2675a3d864a894558961754c2b5460a2d209e449a258f490", "ref_doc_id": "99c74577-1e2b-41e2-bf02-e7714f773426"}, "04008d16-7658-4807-ba95-b8424d979c05": {"doc_hash": "ab4da3bb21aee9d1c5b7e35f2ccc6105d76dc2ab9019dfd1d048b98f31c4cadc", "ref_doc_id": "dc91214b-09de-4bff-a373-d386bf126e10"}, "361ee216-599f-4164-82ae-a6689b92c7fc": {"doc_hash": "30a25536d0430838096c941430ec4af9db54da16d39ecb380e6f7cad6e4c3bed", "ref_doc_id": "3247c556-c251-4d8e-92fd-6c444ee9e8d4"}, "c75af2a9-9e4d-4509-a09a-e6e1d13fb4d9": {"doc_hash": "43e12a327d4ab0d61d088bc31ccc059ed3e2c6ee1e705b144a48908ce98c02b4", "ref_doc_id": "4954e71a-c7b4-4cc9-b906-a427e3ba12bf"}, "1e32f4d0-64bc-4694-8653-39f0f5a5d1a3": {"doc_hash": "153bcb467730f238596612da20c07aa897ddd8cd70c2e4e49658751bce6c3791", "ref_doc_id": "6845825d-dcc4-45f3-bc8b-4aa2f25791eb"}, "47813bf9-2a31-4101-b40b-fcba953e7be7": {"doc_hash": "d6cdbcdad07beb8b1fb48666a0f929559c42bf6ad6caf9584a2f07cdf5c3074a", "ref_doc_id": "b63eb823-65b8-4f81-ac25-2643ab0de952"}, "c6e911fd-6c11-45f7-95b5-5173c28b0476": {"doc_hash": "3a057f6f2e40257cfb381903adb87151f0917e31bc81b6274565dd86e1c49646", "ref_doc_id": "9ac6a875-2674-4875-ba0f-e2ddd4664a9f"}, "a3c3b0d7-40a8-43f0-98f8-59ca2de6c8bc": {"doc_hash": "236534220e97d08593c6bdaa4fe92b9060e5bc2a231d0a9c66c06e05a60415c1", "ref_doc_id": "5b943f8d-da2e-4489-83d0-315e25d8c0af"}, "4d4e3a15-5d1c-4285-9fb9-07f20f507482": {"doc_hash": "122c7db8c7f0807c5f22f4a07f471af40e0bf066f18992006c47b1687746a11e", "ref_doc_id": "1ea64f0b-df78-4e30-b208-d7cc9a906641"}, "d3858ba3-b706-43d2-aa4b-a2515ca5fdef": {"doc_hash": "6551640b4b031f12069da98ac193635445c6b1557c08aa238458e6a6955472f1", "ref_doc_id": "b34bde9b-921b-4e4f-8db4-b4f42004df4d"}, "56642dd3-2109-4d76-8e73-cb747d37f5fd": {"doc_hash": "fb0b01c88a664cdf388e54a1667d5206fd75855e1ac2509cbde9e978a2e630ba", "ref_doc_id": "720dbb9b-6cb5-42fd-8b2b-98bb1df4fa92"}, "aa2c5fa1-4bde-450d-9d72-65e4ffc34fc6": {"doc_hash": "9283f558efa57cbefed5f9658b26bc0c9548abc7b43d415136ae9ac12c9f22c9", "ref_doc_id": "e8687c05-bdfc-4f8a-81a4-91d807fc2bfa"}, "eefdbb25-09d8-4044-97cf-b9b90feab8a4": {"doc_hash": "e0c8be9065bcc47fc784c7f33630e7914dfd352c41463969b1108f7df67c266b", "ref_doc_id": "f6f5414f-48b4-4d9e-9342-ec0be4d70a79"}, "2d3f8eda-feb0-4fce-bed4-ae19122b18bb": {"doc_hash": "b8806d7bf7387ed530a29afc12622c38d1302886eb91daf99bf7a3445aff1f36", "ref_doc_id": "ec439c5f-4fb1-42a5-bd53-23b528c8a034"}, "17a3f36c-58eb-4159-b17a-1b9998ddd8ea": {"doc_hash": "a1a3e641ca127cb4443075e9eacf94068becd8e3b4af9d0cd911d330c5d4ed06", "ref_doc_id": "9967566f-8d3e-410f-b3b0-2abb6d3b4917"}, "38e2716a-3fb1-4b38-a667-d47251331e12": {"doc_hash": "c855fc666ab75c722aed5d97650f2b64639b96ac89a24dc7770c4aa75a1fe020", "ref_doc_id": "7d5fd680-3984-4d9f-abb7-154a069d9198"}, "f3551ecb-6dbd-4507-8400-71e82a99845b": {"doc_hash": "d068e382e5d7edd13124241f3a30cfa5b26840a8e7fd93d14c4d2eb55ab6f936", "ref_doc_id": "bd7befe7-954d-4140-bfdb-ea9224fc7d95"}, "e6860251-a6f5-4362-92ff-a83cf2e7bb58": {"doc_hash": "2dc522e9aa87b01e48550a61c07cf26e10fbc9c05062059f7156d46f7c136e9d", "ref_doc_id": "293bebd4-c05a-4185-a8d3-2fd4c380c4b0"}, "82081ef7-da8c-4701-b4b4-88de5dcb4a18": {"doc_hash": "008ab8bff58aa8eec364063e92f89ba3796b71c8e57c725914974b84a35b1857", "ref_doc_id": "3565263c-cd86-4611-abb1-76e7156ec4d4"}, "5862b298-0064-484d-973d-489dcda19315": {"doc_hash": "a41d254833e6625d940559ebf773b4d4e20cf29d99942bac701e367d95a30b5b", "ref_doc_id": "00a6454b-31d3-45b7-b596-0d87a5010c70"}, "8d767ca8-ff7f-4632-a588-28d70c9a6037": {"doc_hash": "bca5dfde28f8240b1bafe851dba9fc4a4834e7063aaaa261452edb84fe61f746", "ref_doc_id": "99226b58-b8ac-4f2e-9daf-a4dcf4ea23a6"}, "a9bafaa1-eea0-45f6-9e9e-48855c521ca3": {"doc_hash": "f1e0b146842e2a301d6841b786f948303b2c56f4938f6dd2406eec4ede414928", "ref_doc_id": "07660a68-d66c-410f-9aca-ec1b975d2d5e"}, "abc14f02-9827-481a-bc89-23088210135c": {"doc_hash": "86d7701484e146afd8f7746cbc3d58818149d425cab322c05afd058a61cab36e", "ref_doc_id": "f767f52d-a0fb-4309-a1ec-fa95404729c9"}, "e2c44c65-3e18-423a-a65e-0edb787e9d97": {"doc_hash": "f3a7803701b0674993c1797d719660baff370481384f16f4b6c3d4887b7926d3", "ref_doc_id": "517ca926-f127-4824-a6c4-d8312b787518"}, "325d7034-1b85-4eaa-b061-5de7cd4817a4": {"doc_hash": "c860912c06035fdb27ae4c3f38e5fcac09e60b081a83aa269256bd14361fddc3", "ref_doc_id": "9e4ca1e2-53cc-4d4f-be35-ad98183623ab"}, "e13b388e-f816-410a-8fc9-8d8a13c4280c": {"doc_hash": "7eaf60aa2918161d003bd961ae305fb2c30c481b9cb44b55e2f4e27e2cb7caeb", "ref_doc_id": "b548d86a-6af5-4223-9a16-8d5dec55155f"}, "2016821f-b4d4-4a48-9af6-cb83298a2fe7": {"doc_hash": "9ea3f27bc5a041e2de9afc49f94b209303f50de1d0e26a23d4331a6d5457f6de", "ref_doc_id": "ac126ab5-c1f3-4117-9c69-735dab219d4d"}, "4934dc4b-e83b-4c76-b6a8-cd7e2996d9b7": {"doc_hash": "3eae02ad34b1f29ff02efd51996988bea2737dd9c20235238edea2bf4b5a62b0", "ref_doc_id": "c5a18b58-b19d-4e85-bea5-81831b9ea486"}, "c557b98c-f550-439a-baae-ee5357fd4913": {"doc_hash": "e327ed2afc6a861ca4bb5180629c0d698184a63d3d480f92194c4bc0186dabeb", "ref_doc_id": "6bb96ce0-1458-4b22-9d23-08ab0e590d2a"}, "2ea8cf0a-773f-4066-9b27-9a49d6fe4b7e": {"doc_hash": "9e107f1c795cd613b0dc086ef8ea30a67204936b8f44a92865a56c72c32862e7", "ref_doc_id": "6ac933ff-741a-4e85-a2aa-f6adc31970f7"}, "7eac7cca-e933-431d-bb6c-5df6a8d84c82": {"doc_hash": "2690397a9513d611a9b36dd639aec5594ddf0602d8d8098968b50b489251a97c", "ref_doc_id": "ab4f8438-c1d8-4e72-813b-8a31ea8a562c"}, "e5da2a62-9c17-4f58-b144-75224404594b": {"doc_hash": "bce8051e0fe36dd9cc28f9c8ea3e0510e95bb553e0699afb47871a40b01c3572", "ref_doc_id": "815da48c-4209-45e7-bd38-2fb37d5fbd2e"}, "50507e9c-7f5c-4fc8-811d-0d8a069c93f8": {"doc_hash": "c43109224b70a4208b6fcde22bb3edcf4eeb754781332fa0cf7088740d0c1255", "ref_doc_id": "556d9d2c-4fcd-43dc-ab43-0d2091fdab34"}, "5fc40572-c56d-495c-99d8-57dea8229e3d": {"doc_hash": "576cfa17765cb7abd7ab29fa528407b5fb74b481ea74146a6b0e9e745f570a97", "ref_doc_id": "89fcab02-a926-495a-b8f1-383724d2bd14"}, "7ce4b246-c762-4410-ad7b-c8fe2a743540": {"doc_hash": "b61164c2b0e14ec9141139ada3faac20b263fa276d0eb0709bfa5266bd58d4ff", "ref_doc_id": "807aefac-1828-4b1b-8cbf-2b8e3b91a2bb"}, "309ca1f5-161a-4bb8-a011-1a92b30f6ce6": {"doc_hash": "281994e041d8a4ad5f3ef3e245f7584bdf8bb8aaff65650213ac44f85cdf233a", "ref_doc_id": "823babdc-b9c9-4440-a971-740f50d65a61"}, "bdf69ce1-cd4b-4795-b657-b5d5706f825c": {"doc_hash": "3460713d98d781f09648f962695ba9c6bdcb47f3e364f7d89a7a3a73428e04b9", "ref_doc_id": "efe0f79b-2f23-48b8-b1a7-dfb683bf964c"}, "807a3fd1-d28e-4419-8885-08c47ac3968b": {"doc_hash": "9a3c45c9637a0bc5821f63f8930df8848fa9c00a64ac1ede65d206b9a87fae0a", "ref_doc_id": "8f650b97-e971-4ec9-8ebf-b5b01760fee8"}, "e68fd50b-8133-4d47-8076-3c03dad7438d": {"doc_hash": "5eb424cb8fe12cf71ce68782e25d3a3e94970626a2f834b22814921097b1435e", "ref_doc_id": "ab414123-9f57-4173-8acb-8d6d1f09d3df"}, "0fb9c46a-6b4d-40ce-b7cf-141da971514c": {"doc_hash": "a46af08ccda1f4bd1cb8aa712e43fbee4611ed4f97408e81c83a0cf7d18c618d", "ref_doc_id": "6482c848-e524-4afa-b54a-7919594d6ac6"}, "b4052ad7-c8ad-4b74-bc60-9fef9398c1fd": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "1dcfae0f-969c-4dee-86ef-2eb7bed3ea17"}, "56713210-a9d1-4369-a628-f5aba8be6c90": {"doc_hash": "e6788da0c65925511afc868158f401628be61fb736ee44e42a559f58717e18d2", "ref_doc_id": "ccb3eae5-d3b8-4c03-bf6c-5eb92f1c0f8f"}, "0e7e2281-38ae-406c-ab7c-d395f282b774": {"doc_hash": "ea9d3621f4cb6d4096fdfd70bb4e0068257469e0456183baa57cca6c1460c1e5", "ref_doc_id": "33460cd3-8cc1-4f4a-8995-ed5d2783b19b"}, "eac0d71f-1cf8-48b5-8242-aee39cbbd449": {"doc_hash": "291ad6594baf43eadf46371b869575d81faa5490489410cf2dafcdd733beb43c", "ref_doc_id": "8d1d7474-026b-487c-ab26-80e43788d426"}, "9f8839b2-6297-476d-ac0d-314934b4bf78": {"doc_hash": "6afd946991448b704efd8839a034f4f3fca2e5ae21139fc471f6786c880e9a87", "ref_doc_id": "7a0030e8-749c-4d30-ae8b-81f030bc7a2d"}, "f1890bf2-e3fd-46b5-82f6-969cbdc30807": {"doc_hash": "f98fa661cfe67095ac1448d395bf5c14b8b5f552d3204d40f9ca6b2add4a0b5b", "ref_doc_id": "3968bab8-b910-4a03-b3f3-550770c85437"}, "8ee3dce2-a8c9-48c8-9e02-b52f881a52b1": {"doc_hash": "fbf3287e4676432e326f22f77cc20f0bfe4965c370fc7d0032c7514f838afd07", "ref_doc_id": "7f4f9660-efb7-42df-95d9-230ccc1cd29c"}, "f64276c9-371a-43a9-a43c-f2f7bbf41384": {"doc_hash": "291d8b94bb4f54698e341b5a954f11489a557c732bf5da41f18916ceb81723f8", "ref_doc_id": "583be628-3759-4676-a1ca-e6e0ade06826"}, "526c3d41-a980-431e-9daf-45815c500336": {"doc_hash": "dcbd325de4884275de5d222e52d59d245a4de5e13fcc8daf1b2c55486e9dfecc", "ref_doc_id": "f4de8b51-3edb-4112-aad5-d19580041366"}, "88d7a298-e38a-4b5b-891c-f5db37f020b4": {"doc_hash": "d0622adaf33ec81b75d0320de63b96ea0205b59fcd89c8dd6bb641417a0371f4", "ref_doc_id": "816da1e9-330b-4bf6-ac60-5969cd42bdb3"}, "f1d1ea7a-4b40-4b21-b9dc-9620d49e93f8": {"doc_hash": "40b573fde946d03c13ce3e7c3731df7d1b21e1267210b64a66060fd2c09e33f7", "ref_doc_id": "3f0d48d3-37ea-46ad-8316-bec482db7aed"}, "8a49965b-0e49-49e7-9d5e-038419dbeb29": {"doc_hash": "656608e52c983e85f95c6e498a456cd780d4caf3f5efdaaa616bb242a2352dc0", "ref_doc_id": "713fd54f-672e-4eb0-bce9-7e494d3477f5"}, "f5c939ce-7b5c-439d-a5b0-fcff358c79ad": {"doc_hash": "352b367869b786a1d5d5389ce69ceb89f3cd39783f3bb91673f691470f515446", "ref_doc_id": "af5c6865-a60c-434a-9bef-7c09ee8e950a"}, "35fe5075-015b-4424-a0b6-7ebd4e802d77": {"doc_hash": "f9823145b247cac410dfecac67e6b1244705aa02ae76ced499c150acb1249aab", "ref_doc_id": "2ea6c917-0841-4890-b541-ce57acc666e2"}, "2e413dcc-e5df-43c3-b8de-450512c95c2f": {"doc_hash": "738883d099474c7ef1e17e586f6e28fb80e4689e2d6ea06d199713dff1bb7e7e", "ref_doc_id": "1d7b2bd3-d78c-42a6-aa89-8f46fb9c4a47"}, "fbe792d7-1635-47ff-b6c2-0e1f432ef813": {"doc_hash": "18aadd9a93fb4f76de94125386988721e589d3b5187c15e5f8d6bf3a7ef2e6d9", "ref_doc_id": "f1bd6783-bf07-449d-9b8b-e3fbb5331a68"}, "ab5cf61c-afdc-442e-96db-dd5fa303a0bc": {"doc_hash": "304d5a7c452d46676e0160a395329489da166441512c6aa36757c5f5cbf29351", "ref_doc_id": "736c5aa9-0d40-4717-8124-5363f77e84e6"}, "571f910a-0ea8-4c66-ae18-199c9d3b11c4": {"doc_hash": "d0fb9b458c35349e5f2e32ec9e7e49c086cce2adfaeeb431d5709a2140449d6c", "ref_doc_id": "8a9fdba5-ce2b-43c4-8e7a-b8f8f4890358"}, "58689a31-236e-417c-81f0-5f0957378b41": {"doc_hash": "45ecf6be6d48459bcf71706b944125c0bb99876dc301773b53380805c6ba7d31", "ref_doc_id": "174bb6a4-2439-4d6a-8a36-3c8ac79db009"}, "d4c396d5-252a-4d3e-8ad2-61c4bd64ff77": {"doc_hash": "4361dd37917a50264ef8292483f9a7577955a5b7d54137bfe75f4d311e391ff7", "ref_doc_id": "84e1ce13-0d04-4747-8891-497050c21c80"}, "37c8366f-16c6-47ce-bc05-bd99bf5fde55": {"doc_hash": "2c3db558a5583b556c8eb5d415bc637fc87095f60e3bc030079184176a0b56c5", "ref_doc_id": "e2f315bf-0774-42fd-9d05-e6993ac6f6e0"}, "2eb61a6f-6343-4373-9d5d-1c0701dc3219": {"doc_hash": "ad7c57e31aa8bcbfda83cb26755d4104a6ad275440f3764188ebce56b15f37a6", "ref_doc_id": "6c1d3e8c-78b9-4d36-82bb-9490c89c870e"}, "d1a23346-67b0-4ee8-a870-d2a7be7b9fe2": {"doc_hash": "d5778906192e3acb4e95ffbc0b814376657c47f52f8f7de9016666056f9c4744", "ref_doc_id": "da5a33f9-8023-497a-bf32-6109f8662e66"}, "a908a631-4ae2-46f6-a87e-277f01222a1b": {"doc_hash": "047d740dabecb274a642d3464efef852f88854fa5c305ba5f8a367b253663f6b", "ref_doc_id": "8f68d969-4609-4cab-92fe-e3069981a5ca"}, "79d0119e-ae74-4a9f-a8a4-c63c854df299": {"doc_hash": "0ce600f4fe210a62cb078ae513f6f74c386aad7009428a51b380f7c3f1178095", "ref_doc_id": "ea833cad-33cb-4e42-ae0c-584a89b1fb4d"}, "bf9f1651-1bbe-45b4-9e34-3f72f4e7879e": {"doc_hash": "72178885b22a5fc496ffb55e24a881e52ceca2041c259c563655a2f604d95852", "ref_doc_id": "3bb8df50-cbf9-4498-ab36-6adb21350ae4"}, "ca06c1ad-6a4f-4f82-b112-0acf836e3757": {"doc_hash": "41c4505f2dfe1b276dd9fa9cccbf7b364c8556e7970a0bcd95c6663d7dc6fc57", "ref_doc_id": "417ce1fc-ab60-45cb-8f7b-ad3be3196749"}, "dd89b0c1-9235-47f3-be8f-e91d00a03705": {"doc_hash": "2fe454524027db2e84a6de553ba1e04dc36811c67f3978c75b1e68f843baef7c", "ref_doc_id": "f89e1d95-daec-485c-9026-3e3efc98370f"}, "9f7d036d-5130-485b-a892-83922f3a4f1c": {"doc_hash": "63234f9488f45f55d426a9b5e9885fad67c73fd5013111920261826438acbf4f", "ref_doc_id": "8cd9a97e-1d98-4453-9159-a88be6a8f7d7"}, "02fb9d94-8682-4588-bea5-c0d76f53144a": {"doc_hash": "4ae510d6d264ac49cbc3b4460f177d21106c15e467da2a70d1cc5a4ab9befc85", "ref_doc_id": "60a797ef-8017-4d63-b3c9-98447a805da3"}, "649821a7-79e7-4acd-ba34-b13672ddaaa7": {"doc_hash": "09c1327e91ea42c3b25c0601f5e293273d729928b962e8e1e2a6a138e9457881", "ref_doc_id": "e123caef-4655-49f4-9731-1fca741408b3"}, "a1bc262f-859d-4a18-b7ac-45fd81d0d171": {"doc_hash": "20ffa756dac449e57f4c64e84d97645c2d84ca2f2b0e6ede0bccbfd57fc2bf25", "ref_doc_id": "8b67d42f-af2e-4c90-af07-812fb284ab0f"}, "d84fb232-b198-479e-b054-63b37e04a376": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "cef553ff-d329-48ab-96af-1e0cefe5bd52"}, "3e24a498-af1d-442f-86db-2a2b26b83ab7": {"doc_hash": "6fa5a214bf4379d173e34aa64c867e5dceaa155f1ce735a173de8bb3b09cd15e", "ref_doc_id": "c1891747-f67a-4805-990c-10fd9b83ecd3"}, "0a11b6f3-6cae-4a57-b5d7-585b0420e75c": {"doc_hash": "ecd249bb15bcdf054e9cffc4f25446551b566d529e415369efc03918fdb7d29c", "ref_doc_id": "7d6d0ded-5bcd-4ca9-8bde-34d3776314c2"}, "44998c0e-0209-4be7-88b6-4acbe02068cf": {"doc_hash": "23fde665d833c2a7d686741a65f24fc7b258be657a1288fab77b1998a60934b4", "ref_doc_id": "9ee0d506-3e6c-441d-9d89-c726bbc5be33"}, "4ee73331-809f-4371-b107-2752722c521f": {"doc_hash": "d1f5ba4c622f2dbb4a7f1755fc6041c6f2cad420c1b0509ee3e825c731923e96", "ref_doc_id": "63d61ce1-ef11-4669-92c1-a30ed0ca29a6"}, "593c9bfe-b307-4f23-ab15-426802b3ba33": {"doc_hash": "683690c6d68be30a7868c8008bbf15b08a8fcb32fbe3a0cd9d36cb0f23b507a8", "ref_doc_id": "94a178d9-9dd7-4c6f-a401-032d4ffae205"}, "fc80510c-0dc7-45b1-ba1b-bff162d1fbb0": {"doc_hash": "13dc21c61c18f74e15de32ef2318791904c98991f50c44b6b4e6a90793ca6942", "ref_doc_id": "8ebb69d0-563b-4ebc-83f2-1e4b6bbb4425"}, "29ab628d-2627-4076-90f7-ea97549fd4c9": {"doc_hash": "cd7b645bc49345528401f5972be45a6f8dfa33f132429e2cb99b55edfdbdc1e3", "ref_doc_id": "75c04ce3-e845-4faa-889c-7e4373397195"}, "075dc5ca-b1b5-42e3-b40d-1a555b1ca357": {"doc_hash": "4af16f9c1e3f932486a5213e933179aa57cea3097378d823bdc81b92064173f0", "ref_doc_id": "c1ef4326-d171-4a4a-950b-44cb34a3c0ad"}, "cd0f4af2-09dd-40f0-80ed-41897d2833ec": {"doc_hash": "f6a770cfce1751704873c912854020749d483ff50605f34eca5a9fbcbb13a03c", "ref_doc_id": "bcfcaf83-feae-441d-989a-249326f4082f"}, "e65270b1-dd36-4a09-a73c-822d8664fd30": {"doc_hash": "8bc20b6f067593ef440bf650666f7996397dcbdeb56a31f6e13dbdf8543740ca", "ref_doc_id": "0247d5e5-2c5a-4089-b383-32e694511e79"}, "0eaf5f44-3947-4c77-b750-4d9ad443806c": {"doc_hash": "91bd5a3ada34bc1678fafa3e2f333b6e533ff20125523ee14df141ed8fa5f5a6", "ref_doc_id": "24da72b9-9ffb-4c55-8f7d-d8409d39b53a"}, "d903f4fa-481a-4530-8f2f-8d0073da2603": {"doc_hash": "d2d90d48d2a654e8d5896851a5dbefc273e2130232b1560e94ae51b5ee62305a", "ref_doc_id": "45c0cdf5-b975-459d-bfc1-405155210906"}, "90e1b4b5-d5d0-4f61-9cbc-52e8eaafbe3e": {"doc_hash": "8d428f811b4d74368f9116219c60e96870b443375bcdd2506bb265881789aecf", "ref_doc_id": "70516267-81e2-4a1d-bdb9-36731cf4aa9e"}, "5495d483-071e-484d-a8a0-804d4ad02d5c": {"doc_hash": "8386ebd8c584d86959784552e0edcdb4d3cf452d95db5431eb9f2673f36458dd", "ref_doc_id": "2a5775ae-5d20-4035-8187-e4c51548e8e2"}, "f33250d2-bf5b-4c37-96f8-0c22eec5f4d0": {"doc_hash": "0d475fc08c418328c6309eed431625d4cbee8fd6b5b76387695837bc0eb000c6", "ref_doc_id": "d52a36c7-28de-49e1-9316-f61a07c40bff"}, "d7aea967-4066-4664-8de9-3f77042a32fd": {"doc_hash": "6f71d2bda0df1c88c3caeef31ef1693c78a774847d0bae4973dd90f1d2c83477", "ref_doc_id": "8ec43bd6-a946-4e28-b2d4-81f13d003b8e"}, "8e0f69f0-1fc9-47d7-8237-d0733cd6d097": {"doc_hash": "e33d6e047f6e44ffd73ff0d5a4022916d1096ee9a19ef0633041d577f0f3bfc5", "ref_doc_id": "e96a88f2-c65d-4925-b96f-8cc7d9792980"}, "d195f49d-999a-4cb9-9683-a196b6f74e44": {"doc_hash": "3446ecd4ad482f04fa6f78c40cd51a3ca7185ec309efa5063f8f967258d66245", "ref_doc_id": "2a8c2819-37c0-41fb-bb22-2c390c3e31a9"}, "3a68baf1-b459-4caf-989c-2bc45d177006": {"doc_hash": "b184fc4d6f3a3a9b1bded805cd69d3b24241a7acb7e186a6360c38e43959258b", "ref_doc_id": "52dcfe4c-ac38-45dc-97bb-50bf45548e95"}, "b1ec9382-1d04-40bb-b0e2-10317b884df6": {"doc_hash": "2411dd501fbdf532741c207f0c7f0a5cad5b578374fbd0fdf5b1d9848e88a984", "ref_doc_id": "3cfb1410-9df7-48d0-bb8a-04d6961c15a1"}, "714e8e16-b82d-4b68-9efb-c583d2b4e0fc": {"doc_hash": "2ae8fe1a03435d6c6804a3ec36a1698b655c734c6c0b5005e1dfbc8e671eb14c", "ref_doc_id": "34d947ce-c896-45cf-a380-1b1c2e69352b"}, "9cd5a72d-28bd-4330-aa62-bc312f250fae": {"doc_hash": "d19133c8b684669158c74b2003f2bc3338fe5e3c4fc5284bbf825fbbae3d4ea9", "ref_doc_id": "60d4a2bf-bce4-4486-a68e-9254611dddd1"}, "8e0c3610-9272-414a-92f9-40ac54401108": {"doc_hash": "28094fe20e2c95ae346469df2e63852dc42199a4158aa578e2b08b502452822f", "ref_doc_id": "9da828f5-1665-431c-a0d7-1782ddb1fc7b"}, "7de07210-fea1-47a7-bd9f-311e3ae64b2c": {"doc_hash": "292ff450bc775006900ba160f19fc07b1c2517429603eb553f6cbdbd68ff4562", "ref_doc_id": "0e2a7417-63cb-40f1-b611-b581652815ca"}, "2fe37b74-d1d3-4ec1-963b-3c7eae616c63": {"doc_hash": "c1bec8037d718b23369c24173f12f78540dfe7517961116bf46c38edd4629c88", "ref_doc_id": "0a6df6a2-6024-4d80-af2f-00cd0be109f6"}, "03372624-8c8b-4290-be17-ef32421398df": {"doc_hash": "b01cb1bb079b1abbac7fa77316663e1e0de03dd475b24a1b866f94f26148221c", "ref_doc_id": "44a27c52-2ac4-41c8-aa14-d2bc6eeaecb4"}, "31280672-c8b7-4ddd-a2dd-10a382a37cb9": {"doc_hash": "52822f4b05066249f71a68a3a5cd53c847ea394c72bdfb9ec69a9b7994c9fcb3", "ref_doc_id": "d7aa0775-cc23-403c-b23f-84fa2a37dbf1"}, "d16ee9f8-a6ad-430e-b6b2-528d0e78c03e": {"doc_hash": "3ac04608d190da200f776aee9d6e1188be2a91759ce15cdb8b0648a42446d083", "ref_doc_id": "fc6ae143-7fda-4193-b52a-2e232d82c7ce"}, "9fc7b9d8-f3c7-4117-a3e2-c251dbbfaa88": {"doc_hash": "b75cab4009e589f506d245bbd101c389796e3c767b17e983c744a130859249b0", "ref_doc_id": "7fdf2bc9-1cd7-434d-9496-3ffa3e1bfd2b"}, "cc536e84-76e3-483d-af87-fa229d491215": {"doc_hash": "29bd9f5b940dedfda7ed36dc15595fc514c39dfc6430503596553cf823483fdc", "ref_doc_id": "e7ce7143-4d96-4984-a213-860513e7800c"}, "d66ef5dc-85d9-4f55-8996-646e87d402e4": {"doc_hash": "2dfb452b656a77c0cd91ca3219e613216a843b8af793665b49872f916f9687e1", "ref_doc_id": "b7d373a2-c27a-411e-bbb1-0eaabcc1a9f7"}, "8bd8ecc2-09af-427d-a5a3-18d234a77c38": {"doc_hash": "e76307b5565cfad0fdd43048f6ab81f6cee92fff6e6d355d75a6a8980becec8d", "ref_doc_id": "b7d373a2-c27a-411e-bbb1-0eaabcc1a9f7"}, "1bd16e6b-5770-439b-9e65-94c2aa08a407": {"doc_hash": "2e0cc09fbdda4882765c680b177d9cc85be856bf9853b1170bff3e49aec6c5dc", "ref_doc_id": "fccae089-e1ca-448d-af71-404966474ca8"}, "7318a024-7904-4b84-884b-826075217736": {"doc_hash": "bace6eef1eea5f41db80efa0ff9a21132e7b41a868986599647833fb3296ab73", "ref_doc_id": "608a0009-411e-4289-b7a7-296bcedc579b"}, "89b51367-6414-4e5e-b37b-e5d93ae4786c": {"doc_hash": "e3893464a97f815bf5b01bee47636eff00d5123b5576321db3c2297103831296", "ref_doc_id": "b61cc75d-b5c5-43d6-b882-8f02eb4a250e"}, "1101a264-b0e6-4b59-9d96-404994729523": {"doc_hash": "7ce5b11f27daa6a7b12f93641338dfb955ea085b6d9eb129de341772debfd2cb", "ref_doc_id": "9fa108ae-f31a-4790-a32d-df70d2b88a73"}, "aa627225-e8d2-4827-9117-d6878ae11f23": {"doc_hash": "10f7af62b51165c7b2f7f194b925fc865db730d5318edb8b1d807438b4a173b3", "ref_doc_id": "aec55f65-4da7-4a42-b205-fa9481ac47d2"}, "248029fe-e35e-4aa5-ad70-f4e024b86dd8": {"doc_hash": "8e033c5d88cc6c5fb544742132ee4ef260e7f1d56346768323f5ce4a248da3ae", "ref_doc_id": "0a39d496-0972-4c20-99bd-44382fff6b9e"}, "3a998dff-e030-4f11-857e-3d73a8e27188": {"doc_hash": "3291a78893d94668353cf193ae6dd1c32eb01f7655c42dd430f698680ffbc614", "ref_doc_id": "a86b5ab6-d887-4c8d-8ecf-aee648a2267f"}, "7bbfed40-3829-4d12-a554-037829ed8187": {"doc_hash": "d8080f94709d0757fd9a4a476ecab77f7be9e7ea4fbecf440086ac03e058358e", "ref_doc_id": "66b26d01-2de6-4625-a692-819df8ca743c"}, "5db08d2a-b388-401b-a8a4-e8eaf5feb724": {"doc_hash": "d3d0f315dad2c74684028518c5a3e0983024da3a6f88fcd6f917ee058364dee8", "ref_doc_id": "1aad1afd-883b-4c7b-b917-109f19fa4f3e"}, "707e880f-65b5-4062-ba15-4a2af7d5a7d5": {"doc_hash": "7c92b42ee43e064383874ea30d396019614b4ad3e0125f26003bc8ba0ec7f335", "ref_doc_id": "69db63e8-1226-4ea8-9736-2c92f50153fb"}, "1642316a-f879-4192-b050-a56e3b356c22": {"doc_hash": "cbc66325cedd678012b6f591d650baf34f07cc668a300d09a4f59457f841cc5d", "ref_doc_id": "3df05c36-7ac1-49fa-b384-2dceb5bb4d1b"}, "b3fc9d4e-6433-4eee-8be2-059f6f8ec45f": {"doc_hash": "286686ebaf5b935e0ff4691e1310add3ecbb7332ed14fb6e5709dd748482f95f", "ref_doc_id": "7b156118-14d4-4bf1-9127-641696d3a746"}, "f6fac4b9-ddab-4895-9c95-5ba5197abf14": {"doc_hash": "73d82a8a6f2c0fd56a138c238fcc824d5c01b8318576c7efa09886cc5bc9b584", "ref_doc_id": "4e6bc38c-617a-4895-aeaf-9ba37dc78556"}, "7dcfe417-9921-4e65-9e58-4df90fe86a98": {"doc_hash": "f0bfdc5d31b3f0ce3bc3bc7179b1d7bca83febd4a27b0ec80a8b4835e9a837df", "ref_doc_id": "11006273-4fc6-4a99-b835-61cb80254f64"}, "9be83ca3-4577-496f-9c84-b77f9b3576bf": {"doc_hash": "165ca4ccd77ba06f91629ad68c1966ef87ad8fb3b300c37f52ce58eeb7061af3", "ref_doc_id": "c5b760a4-a70d-40e1-a971-447bbedab459"}, "1e01fcc9-dc8f-47f5-a8ed-f0431c94d5b2": {"doc_hash": "ef72ce08ce82127f327d8f6c7ab4e94c30c5da0b023b15c931286588802bdd55", "ref_doc_id": "8fde6c13-ce59-471c-8bd8-2528808952bf"}, "9d453c45-a5a8-47f7-9390-e2cba4d847c7": {"doc_hash": "91313179ccf8584f6a938d284e18bf8dd78c0ca835fcbecf4aeb93a9e5539871", "ref_doc_id": "e63d98a6-e9d7-43ef-a6f5-bc69e1292d81"}, "033be745-26a4-4e92-9132-265287278e21": {"doc_hash": "4501456b19462d2aaf265240e2c158f0b47ea38cb812f49cd40574d4724823c8", "ref_doc_id": "d96cd64d-3d28-421e-8bdd-79b8156693ca"}, "f874f34e-8c75-4b92-a64e-9d2f223923c9": {"doc_hash": "2ebfc4d016c399d8d80413edcacaa20bd228b3fe77e948b3a6c61a08c4a55a74", "ref_doc_id": "4686d2d2-c98d-4b01-af72-48c5e8235592"}, "c9aeb828-3aa9-4b63-b088-3a4b3a4bf88e": {"doc_hash": "2e7bbe43c2df02f7c01ae4e7e26fc4f830031512427145cd4b47a488be6a3f75", "ref_doc_id": "54242bdd-5cb0-41fe-a331-3c24c719a174"}, "ea3a66c1-c701-4261-93db-f18afcfa8451": {"doc_hash": "79b22c328b66e22fd349c66a2f28c82a8665bc07c7c1ef7b97cbda522da0e58b", "ref_doc_id": "7df9a371-36f6-4e32-bad9-a49238bf7748"}, "4efbe6d2-de49-46a4-b77b-bdf7bbd0f699": {"doc_hash": "e99d668dae2bd8ddd7dc2f050856fbf0885e99b13a3f367891e83a7bb7aed8b4", "ref_doc_id": "9c9eb790-63ac-4929-9288-a40697d6f129"}, "724826d3-7f26-41a9-9580-b2bad9437d45": {"doc_hash": "38f48f23402e3ee8aa378e10f6f34436d097677a68fe5b21d93679ec4cb204ea", "ref_doc_id": "075a961b-5dfc-426c-a486-1ebffac9655f"}, "b2f6d704-3ced-4ef6-b91b-bcaf938055de": {"doc_hash": "553f391c6cde9fdaa25e65f284c1ac2f6d38ad25ec35633286a460e68427ce26", "ref_doc_id": "caa841cc-6426-4f40-9f3b-0b2b89dd1520"}, "e90f877d-6013-42ae-844f-b82648383c7d": {"doc_hash": "01ed2dbe2f1a657cd7cabd0bcd784f3b9761e06f10e4f424b644c217f74fadc8", "ref_doc_id": "bd9c2a72-d0ae-4750-8d27-2aca06b0fbbb"}, "7f144d24-6e7b-4f1c-9fff-e0ca013ea343": {"doc_hash": "a01d2f96104eec0516858374b0e7d068ccf43b5d7bd8ef49516e6c65dbc849e6", "ref_doc_id": "522223ec-6fce-4eec-bed7-f6eee9dc5321"}, "46e916f9-dd25-4f43-9c71-b1c2b3156cf3": {"doc_hash": "0c0b41fa82d13353985f49b537c58a8bfec95cdc28f9424e0383412672e3e0b9", "ref_doc_id": "f266a285-53a6-4af1-9571-fea000c3709b"}, "193517b4-1b26-4a42-b0c4-5e9c3213d304": {"doc_hash": "4ea9bc2c0feb8c2986769bfcc3c2e428288390c8181d790992d4afcce28d9f09", "ref_doc_id": "523e9a22-24bc-4f65-9bf0-c6aeccc526fe"}, "9d794e10-d1d9-4f56-b4c0-d6d073597ae5": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "fa51f938-ceee-4636-99b4-253668b66633"}, "ad27cb85-3dca-4b16-9dab-7dec00287632": {"doc_hash": "2be52644e43792cbed9f6e552833143610959fefe48b0c19fd8b0b53e39a788e", "ref_doc_id": "1f2f284c-9710-4695-a59a-9735d4e60e5a"}, "7ad9cbfd-cac0-4d1e-9e6e-a105a1774c41": {"doc_hash": "71d26fb549fd2fe1b317dc044bfd577711c33efc9c39ed531bf2a1b10581a30e", "ref_doc_id": "7c792e07-ced1-42b7-bd75-4bcc3213839a"}, "7fd71a01-b1d3-439c-9d7a-cd58f398412f": {"doc_hash": "90f2a18c066075f30201e168a4cff4273685f709d77b61d47843386c45c1c64f", "ref_doc_id": "fa31f90c-6c93-4a30-9f09-d5d2164f705f"}, "855fb120-3feb-4fce-8813-63c72eb40d63": {"doc_hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "ref_doc_id": "8330c622-4ed0-4962-8eae-34d3d772bd99"}, "fa152b0d-d7b9-400c-861d-b12e89c383e8": {"doc_hash": "4076a5ed8b499066b88f9874af7f1059aa5b700c9782404180e366a6dbcaf5bc", "ref_doc_id": "3bee48f5-54c3-4f50-828d-35671214ec5b"}, "77461fde-48ff-4dc3-905b-ad0c286744eb": {"doc_hash": "688e88ed661fcdd5d2c8fe81446436cea5dcdb009048aefa5a7c9a92cb7eedc7", "ref_doc_id": "ca20f5c3-efbd-4557-8a78-dbd0dcc96542"}, "19e86d68-b5b9-4294-b8c1-7ce09b4cdb94": {"doc_hash": "53024b89817a907ebf8aa30d6a473adba4fed1cd1a93b52367a7f37aa062648a", "ref_doc_id": "32ff9c05-d355-4878-bcda-033c918cff99"}, "e3ac1895-dcf6-4e14-b78e-785ae48f7d3a": {"doc_hash": "ffe79dc180d6944830543785c4b09c1e5f5b843872675a1d7b340f697256e320", "ref_doc_id": "018d53a3-b850-467f-8394-062ab5b55aaa"}, "24042656-5d5e-41db-94eb-e75e01048125": {"doc_hash": "d77db202f46681fcc0819cc913492a834f9e5e00bc2a153ce113fce01dd7cf1f", "ref_doc_id": "c9444508-1c72-4010-94cb-24bd00277749"}, "617f93ac-5cd2-4650-846b-34709a8884db": {"doc_hash": "ebd9989f44cbf80812b1e60761587816658f6ee15ae28a475805b1f90e82342b", "ref_doc_id": "0b7be2ea-c511-434b-a3fd-a4ada747d45f"}, "dd000c8d-509c-46b7-b624-741c8843f25d": {"doc_hash": "388002521fda3bada6cc907827ec354de488dcabad921df29ea2a7aa9bb1ff1c", "ref_doc_id": "995f121e-a983-452d-9f11-c5efba5c2af2"}, "12223403-3614-47f2-89e4-0d287becc24c": {"doc_hash": "0f4447fbb5e798b3f991f257900280d714bf73337fa6a7ecfdf0e80da7f433e5", "ref_doc_id": "67801df2-70d8-409b-bea3-ab03e5b95c08"}, "46761435-a68a-47fd-9758-3c4b10503962": {"doc_hash": "19c3e8e3a72daaf503573353f5188bbb0e9ab41b6daca0a5a93b8029e1e3d307", "ref_doc_id": "6c03ea0e-fd65-4642-8717-66d44be4145e"}, "cf9ac21a-cdb1-46af-803d-b6364d8d5183": {"doc_hash": "37996ea0041487e43d26ebb1036d2532c1aad888fb99a8f15aa728003ad71f45", "ref_doc_id": "47b89433-2c06-4f1b-84a7-26df87c3dc8b"}, "b067de27-4e22-48d1-84df-c1619cac3234": {"doc_hash": "81e13f5d34879dd4d6e99eaa579cf32327d9cf3f00980c8276f5ad7cc2c8e9f2", "ref_doc_id": "9844f360-9f03-40bd-b3c1-223c242990e4"}, "7c21e5da-b566-4586-a12c-6ac56df7e265": {"doc_hash": "cf63e2c6995a36e3764efe4358ca4bcd317362c23a56455becae79da4f2ef543", "ref_doc_id": "ba7d344f-f6f7-41b7-85df-c695302d0034"}, "4e25da57-83f1-482e-8026-799c93fa6a61": {"doc_hash": "2ca1b9094386a39bc5031a2e28627c2589afd6aae911ac07f918d17e5a495a60", "ref_doc_id": "f870920f-f6d1-4250-9d25-21637308e1bc"}, "fb446fd2-2c4e-48f4-b730-efdc07c08f14": {"doc_hash": "ed586b1782a632c1734aba524f4c0c32310849b655eda7ef27c8cdd3c400583a", "ref_doc_id": "08995181-8794-4c15-9c69-5b43948bf058"}, "0e3d0dcf-fd6c-4613-8dc3-235938b6781a": {"doc_hash": "6b32acabc8e0c7436fa9285e561918dda05db2e3474bcb8c7951437352ca4e4b", "ref_doc_id": "f2da3132-2f1b-4d64-95fb-a07768620643"}, "792dc495-5158-4f45-a31f-bf9093cefa25": {"doc_hash": "e1239e0868651d3fab045e2ef63c0ed7014730bbd5ddc9ae6a9c0f84d027eb94", "ref_doc_id": "9c1d895d-fdd8-4a09-a7e6-dc4cfadee7b5"}, "ea45eb46-4907-4c4a-8450-fea6464394bb": {"doc_hash": "79ed5dcddf2d4e37ebe9c3ded21b67e52080e7d4ba6321af5c87c3e01059396c", "ref_doc_id": "4749472b-2bd3-44d1-a077-f5c9d0763dc3"}, "ad7c2bb4-c078-4055-89f2-e8a0d4c508f3": {"doc_hash": "027e11136574dfaa4671a48888eed78312c160c19c3e559a72e1ee055ab3dc57", "ref_doc_id": "2864ab27-9984-4d55-b99a-14b236bdd164"}, "f43984e9-f22c-4310-a4f5-d5b67fbb98ec": {"doc_hash": "087a0f8fd6b12b466b5dc853e64d80e5bdcba7384adeed84940e3ca53bd8f2ef", "ref_doc_id": "fc1422c5-a532-4e5b-89ae-7697fcebe8a4"}}, "docstore/data": {"4edf47ec-0232-408c-81b5-9c568f136dc1": {"__data__": {"id_": "4edf47ec-0232-408c-81b5-9c568f136dc1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1d1baa03-c6f3-4610-9f77-b26b95123cba", "node_type": "4", "metadata": {}, "hash": "788d269d09d03e7d0a56a38eacc92f7cd6ea10919853d5881ab0389ad1ad18a3", "class_name": "RelatedNodeInfo"}}, "text": "NO_CONTENT_HERE", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 15, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6cdf88ba-6d4a-4302-826d-36a4f795d6b4": {"__data__": {"id_": "6cdf88ba-6d4a-4302-826d-36a4f795d6b4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9808ab77-f1a8-4683-9977-2dee8a4c5828", "node_type": "4", "metadata": {}, "hash": "cdd9f1ca2ffd7ded52b501a7978ab5f0c6174cdf89df0a2841b92e01ca734d81", "class_name": "RelatedNodeInfo"}}, "text": "Clean Code", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 10, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "401b5e3a-529d-4c89-9ffb-b96dbab40afd": {"__data__": {"id_": "401b5e3a-529d-4c89-9ffb-b96dbab40afd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ec42a72e-2280-432e-b782-163ce6301e3b", "node_type": "4", "metadata": {}, "hash": "66842d8cb07c4cde53579cb722c596c43937453a070ebfacecb5744a4b5b602c", "class_name": "RelatedNodeInfo"}}, "text": "# Robert C. Martin Series\n\nThe mission of this series is to improve the state of the art of software craftsmanship. The books in this series are technical, pragmatic, and substantial. The authors are highly experienced craftsmen and professionals dedicated to writing about what actually works in practice, as opposed to what might work in theory. You will read about what the author has done, not what he thinks you should do. If the book is about programming, there will be lots of code. If the book is about managing, there will be lots of case studies from real projects.\n\nThese are the books that all serious practitioners will have on their bookshelves. These are the books that will be remembered for making a difference and for guiding professionals to become true craftsman.\n\n# Books in the Series\n\n- Managing Agile Projects - Sanjiv Augustine\n- Agile Estimating and Planning - Mike Cohn\n- Working Effectively with Legacy Code - Michael C. Feathers\n- Agile Java\u2122: Crafting Code with Test-Driven Development - Jeff Langr\n- Agile Principles, Patterns, and Practices in C# - Robert C. Martin and Micah Martin\n- Agile Software Development: Principles, Patterns, and Practices - Robert C. Martin\n- Clean Code: A Handbook of Agile Software Craftsmanship - Robert C. Martin\n- UML For Java\u2122 Programmers - Robert C. Martin\n- Fit for Developing Software: Framework for Integrated Tests - Rick Mugridge and Ward Cunningham\n- Agile Software Development with SCRUM - Ken Schwaber and Mike Beedle\n- Extreme Software Engineering: A Hands on Approach - Daniel H. Steinberg and Daniel W. Palmer\n\nFor more information, visit informit.com/martinseries", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1641, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1702043-0703-4b53-aed1-485de9ded984": {"__data__": {"id_": "d1702043-0703-4b53-aed1-485de9ded984", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8df783f4-4076-4e92-a211-2e4e9dfb0064", "node_type": "4", "metadata": {}, "hash": "f336944889ea71aa647b3762fc1ce7f688be841fc6e34d3e0761485288fcc48f", "class_name": "RelatedNodeInfo"}}, "text": "# Clean Code\n\n# A Handbook of Agile Software Craftsmanship\n\n# The Object Mentors:\n\nRobert C. Martin\n\nMichael C. Feathers\n\nTimothy R. Ottinger\n\nJeffrey J. Langr\n\nBrett L. Schuchert\n\nJames W. Grenning\n\nKevin Dean Wampler\n\nObject Mentor Inc.\n\nWriting clean code is what you must do in order to call yourself a professional. There is no reasonable excuse for doing anything less than your best.\n\nUpper Saddle River, NJ \u2022 Boston \u2022 Indianapolis \u2022 San Francisco\n\nNew York \u2022 Toronto \u2022 Montreal \u2022 London \u2022 Munich \u2022 Paris \u2022 Madrid\n\nCapetown \u2022 Sydney \u2022 Tokyo \u2022 Singapore \u2022 Mexico City", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d24c795-71cc-4ff5-aaf6-9302ee84258b": {"__data__": {"id_": "6d24c795-71cc-4ff5-aaf6-9302ee84258b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a047ec66-08e5-442b-8da6-1668c6a0cf3a", "node_type": "4", "metadata": {}, "hash": "7d51bfda9edfcefce26859905509dda147c356b70d98f1d8e98b380dac828dc8", "class_name": "RelatedNodeInfo"}}, "text": "Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this book, and the publisher was aware of a trademark claim, the designations have been printed with initial capital letters or in all capitals.\n\nThe authors and publisher have taken care in the preparation of this book, but make no expressed or implied warranty of any kind and assume no responsibility for errors or omissions. No liability is assumed for incidental or consequential damages in connection with or arising out of the use of the information or programs contained herein.\n\nThe publisher offers excellent discounts on this book when ordered in quantity for bulk purchases or special sales, which may include electronic versions and/or custom covers and content particular to your business, training goals, marketing focus, and branding interests. For more information, please contact:\n\nU.S. Corporate and Government Sales\n\n(800) 382-3419\n\ncorpsales@pearsontechgroup.com\n\nFor sales outside the United States please contact:\n\nInternational Sales\n\ninternational@pearsoned.com\n\nIncludes bibliographical references and index.\n\nISBN 0-13-235088-2 (pbk. : alk. paper)\n\n1. Agile software development. 2. Computer software\u2014Reliability. I. Title.\n\nQA76.76.D47M3652 2008\n\n005.1\u2014dc22 2008024750\n\nCopyright \u00a9 2009 Pearson Education, Inc.\n\nAll rights reserved. Printed in the United States of America. This publication is protected by copyright, and permission must be obtained from the publisher prior to any prohibited reproduction, storage in a retrieval system, or transmission in any form or by any means, electronic, mechanical, photocopying, recording, or likewise. For information regarding permissions, write to:\n\nPearson Education, Inc\n\nRights and Contracts Department\n\n501 Boylston Street, Suite 900\n\nBoston, MA 02116\n\nFax: (617) 671-3447\n\nISBN-13: 978-0-13-235088-4\n\nISBN-10: 0-13-235088-2\n\nText printed in the United States on recycled paper at Courier in Stoughton, Massachusetts.\n\nFirst printing July, 2008", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cebda661-911c-4a63-bd1b-13022d2d4550": {"__data__": {"id_": "cebda661-911c-4a63-bd1b-13022d2d4550", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "62d8c3cd-6b19-45eb-9b69-6d31ee7aec11", "node_type": "4", "metadata": {}, "hash": "791b5a3ad8070fe5f978acd69fcb8a01eeb356bfc3809530f764ffd326f0e46d", "class_name": "RelatedNodeInfo"}}, "text": "For Ann Marie: The ever enduring love of my life.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 49, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "31d396ee-c23b-468d-93b1-a0e5ba650687": {"__data__": {"id_": "31d396ee-c23b-468d-93b1-a0e5ba650687", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dcf19d7d-c990-4b78-a44b-e0005da5b489", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6793dbb9-4ee4-4015-a244-75a314ac4999": {"__data__": {"id_": "6793dbb9-4ee4-4015-a244-75a314ac4999", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5b61e905-33ed-43bd-add9-00ff3b9662de", "node_type": "4", "metadata": {}, "hash": "1586ad2b1ac127651add69654fcf1f02112a41b6078c1d68383b12210186865e", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\nForeword ................................................................................................ xix\n\nIntroduction ..........................................................................................xxv\n\nOn the Cover ....................................................................................... xxix\n\n# Chapter 1: Clean Code\n\nThere Will Be Code ...............................................................................2\n\nBad Code................................................................................................3\n\nThe Total Cost of Owning a Mess ........................................................4\n\nThe Grand Redesign in the Sky..........................................................5\n\nAttitude...............................................................................................5\n\nThe Primal Conundrum......................................................................6\n\nThe Art of Clean Code?......................................................................6\n\nWhat Is Clean Code?..........................................................................7\n\nSchools of Thought ..............................................................................12\n\nWe Are Authors....................................................................................13\n\nThe Boy Scout Rule .............................................................................14\n\nPrequel and Principles........................................................................15\n\nConclusion............................................................................................15\n\nBibliography.........................................................................................15\n\n# Chapter 2: Meaningful Names\n\nIntroduction .........................................................................................17\n\nUse Intention-Revealing Names .........................................................18\n\nAvoid Disinformation ..........................................................................19\n\nMake Meaningful Distinctions...........................................................20\n\nUse Pronounceable Names..................................................................21\n\nUse Searchable Names ........................................................................22", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "931c2ee1-45bc-432e-8f38-bf8affc19333": {"__data__": {"id_": "931c2ee1-45bc-432e-8f38-bf8affc19333", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5a149286-00a5-4fb2-bd99-f417f937320f", "node_type": "4", "metadata": {}, "hash": "2ebafb97da40e55633e194f13c61ab0e886daea2be1b86c03ab8940804a30e0b", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\n# Avoid Encodings\n\n23\n\n# Hungarian Notation\n\n23\n\n# Member Prefixes\n\n24\n\n# Interfaces and Implementations\n\n24\n\n# Avoid Mental Mapping\n\n25\n\n# Class Names\n\n25\n\n# Method Names\n\n25\n\n# Don\u2019t Be Cute\n\n26\n\n# Pick One Word per Concept\n\n26\n\n# Don\u2019t Pun\n\n26\n\n# Use Solution Domain Names\n\n27\n\n# Use Problem Domain Names\n\n27\n\n# Add Meaningful Context\n\n27\n\n# Don\u2019t Add Gratuitous Context\n\n29\n\n# Final Words\n\n30\n\n# Chapter 3: Functions\n\n31\n\n# Small!\n\n34\n\n# Blocks and Indenting\n\n35\n\n# Do One Thing\n\n35\n\n# Sections within Functions\n\n36\n\n# One Level of Abstraction per Function\n\n36\n\n# Reading Code from Top to Bottom: The Stepdown Rule\n\n37\n\n# Switch Statements\n\n37\n\n# Use Descriptive Names\n\n39\n\n# Function Arguments\n\n40\n\n# Common Monadic Forms\n\n41\n\n# Flag Arguments\n\n41\n\n# Dyadic Functions\n\n42\n\n# Triads\n\n42\n\n# Argument Objects\n\n43\n\n# Argument Lists\n\n43\n\n# Verbs and Keywords\n\n43\n\n# Have No Side Effects\n\n44\n\n# Output Arguments\n\n45\n\n# Command Query Separation\n\n45", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 958, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97ff9ddb-56e7-445f-9765-16c09d3d72f4": {"__data__": {"id_": "97ff9ddb-56e7-445f-9765-16c09d3d72f4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fdeab5b5-eeba-4a4c-afe1-d43a0ff5309d", "node_type": "4", "metadata": {}, "hash": "5a50f033c961acb4da8f61d792316d438d69d07b0c4e497191a3eb0d6182cea4", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\nix\n\n# Prefer Exceptions to Returning Error Codes\n\n46\n\n# Extract Try/Catch Blocks\n\n46\n\n# Error Handling Is One Thing\n\n47\n\n# The Error.java Dependency Magnet\n\n47\n\n# Don\u2019t Repeat Yourself\n\n48\n\n# Structured Programming\n\n48\n\n# How Do You Write Functions Like This?\n\n49\n\n# Conclusion\n\n49\n\n# SetupTeardownIncluder\n\n50\n\n# Bibliography\n\n52\n\n# Chapter 4: Comments\n\n53\n\n# Comments Do Not Make Up for Bad Code\n\n55\n\n# Explain Yourself in Code\n\n55\n\n# Good Comments\n\n55\n\n# Legal Comments\n\n55\n\n# Informative Comments\n\n56\n\n# Explanation of Intent\n\n56\n\n# Clarification\n\n57\n\n# Warning of Consequences\n\n58\n\n# TODO Comments\n\n58\n\n# Amplification\n\n59\n\n# Javadocs in Public APIs\n\n59\n\n# Bad Comments\n\n59\n\n# Mumbling\n\n59\n\n# Redundant Comments\n\n60\n\n# Misleading Comments\n\n63\n\n# Mandated Comments\n\n63\n\n# Journal Comments\n\n63\n\n# Noise Comments\n\n64\n\n# Scary Noise\n\n66\n\n# Don\u2019t Use a Comment When You Can Use a Function or a Variable\n\n67\n\n# Position Markers\n\n67\n\n# Closing Brace Comments\n\n67\n\n# Attributions and Bylines\n\n68", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1004, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8961aeaa-b613-4494-8df0-875d44765fcb": {"__data__": {"id_": "8961aeaa-b613-4494-8df0-875d44765fcb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e44861d8-a1f0-477a-bb0d-69916afee46b", "node_type": "4", "metadata": {}, "hash": "2c5efa52f1c0968346492357f267a4cc3519586054d1cfffb56200139b447837", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\n- Commented-Out Code......................................................................68\n- HTML Comments ............................................................................69\n- Nonlocal Information .......................................................................69\n- Too Much Information .....................................................................70\n- Inobvious Connection.......................................................................70\n- Function Headers..............................................................................70\n- Javadocs in Nonpublic Code ............................................................71\n- Example............................................................................................71\n- Bibliography.........................................................................................74\n\n# Chapter 5: Formatting\n\n- The Purpose of Formatting ................................................................76\n- Vertical Formatting .............................................................................76\n- - The Newspaper Metaphor ................................................................77\n- Vertical Openness Between Concepts ..............................................78\n- Vertical Density ................................................................................79\n- Vertical Distance ..............................................................................80\n- Vertical Ordering ..............................................................................84\n\nHorizontal Formatting........................................................................85\n- - Horizontal Openness and Density ....................................................86\n- Horizontal Alignment.......................................................................87\n- Indentation........................................................................................88\n- Dummy Scopes.................................................................................90\n\nTeam Rules...........................................................................................90\n- Uncle Bob\u2019s Formatting Rules............................................................90\n\n# Chapter 6: Objects and Data Structures\n\n- Data Abstraction..................................................................................93\n- Data/Object Anti-Symmetry ..............................................................95\n- The Law of Demeter............................................................................97\n- - Train Wrecks ....................................................................................98\n- Hybrids .............................................................................................99\n- Hiding Structure ...............................................................................99\n\nData Transfer Objects.......................................................................100\n- - Active Record.................................................................................101\n\nConclusion..........................................................................................101\n- Bibliography.......................................................................................101", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f032b13-2695-40cc-903a-989808b7ee01": {"__data__": {"id_": "2f032b13-2695-40cc-903a-989808b7ee01", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a618e9d7-a0d3-4408-af49-5f17200e5b74", "node_type": "4", "metadata": {}, "hash": "e564f856002c6e1303f4b8eb2b0423660f972f43adfd30053fcda908639f4172", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\nxi\n\n# Chapter 7: Error Handling\n\n103\n\n- Use Exceptions Rather Than Return Codes ...................................104\n- Write Your Try-Catch-Finally Statement First .......................105\n- Use Unchecked Exceptions ...............................................................106\n- Provide Context with Exceptions.....................................................107\n- Define Exception Classes in Terms of a Caller\u2019s Needs..................107\n- Define the Normal Flow ....................................................................109\n- Don\u2019t Return Null..............................................................................110\n- Don\u2019t Pass Null ..................................................................................111\n- Conclusion..........................................................................................112\n- Bibliography.......................................................................................112\n\n# Chapter 8: Boundaries\n\n113\n\n- Using Third-Party Code....................................................................114\n- Exploring and Learning Boundaries...............................................116\n- Learning log4j.................................................................................116\n- Learning Tests Are Better Than Free...............................................118\n- Using Code That Does Not Yet Exist................................................118\n- Clean Boundaries ..............................................................................120\n- Bibliography.......................................................................................120\n\n# Chapter 9: Unit Tests\n\n121\n\n- The Three Laws of TDD ...................................................................122\n- Keeping Tests Clean ..........................................................................123\n- - Tests Enable the -ilities...................................................................124\n\nClean Tests .........................................................................................124\n- - Domain-Specific Testing Language................................................127\n- A Dual Standard .............................................................................127\n\nOne Assert per Test ...........................................................................130\n- Single Concept per Test ..................................................................131\n- F.I.R.S.T..............................................................................................132\n- Conclusion..........................................................................................133\n- Bibliography.......................................................................................133\n\n# Chapter 10: Classes\n\n135\n\n- Class Organization ............................................................................136", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2939, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aef3ef00-7e3e-44dd-b6ff-3e5079a91d31": {"__data__": {"id_": "aef3ef00-7e3e-44dd-b6ff-3e5079a91d31", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0796285b-5e13-4871-870a-d739897a79b6", "node_type": "4", "metadata": {}, "hash": "2590135ec413ddf1f969a07ffc11625f84e91a0d943867f834b36d090b3153fa", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\n# Classes Should Be Small!\n\n..................................................................136\n\n# The Single Responsibility Principle\n\n...............................................138\n\n# Cohesion\n\n.........................................................................................140\n\n# Maintaining Cohesion Results in Many Small Classes\n\n..................141\n\n# Organizing for Change\n\n.....................................................................147\n\n# Isolating from Change\n\n....................................................................149\n\n# Bibliography\n\n.......................................................................................151\n\n# Chapter 11: Systems\n\n# How Would You Build a City?\n\n..........................................................154\n\n# Separate Constructing a System from Using It\n\n..............................154\n\n# Separation of Main\n\n.........................................................................155\n\n# Factories\n\n.........................................................................................155\n\n# Dependency Injection\n\n.....................................................................157\n\n# Scaling Up\n\n..........................................................................................157\n\n# Cross-Cutting Concerns\n\n.................................................................160\n\n# Java Proxies\n\n........................................................................................161\n\n# Pure Java AOP Frameworks\n\n.............................................................163\n\n# AspectJ Aspects\n\n.................................................................................166\n\n# Test Drive the System Architecture\n\n....................................................166\n\n# Optimize Decision Making\n\n...............................................................167\n\n# Use Standards Wisely, When They Add Demonstrable Value\n\n.........168\n\n# Systems Need Domain-Specific Languages\n\n.....................................168\n\n# Conclusion\n\n..........................................................................................169\n\n# Bibliography\n\n.......................................................................................169\n\n# Chapter 12: Emergence\n\n# Getting Clean via Emergent Design\n\n................................................171\n\n# Simple Design Rule 1: Runs All the Tests\n\n........................................172\n\n# Simple Design Rules 2\u20134: Refactoring\n\n............................................172\n\n# No Duplication\n\n...................................................................................173\n\n# Expressive\n\n...........................................................................................175\n\n# Minimal Classes and Methods\n\n.........................................................176\n\n# Conclusion\n\n..........................................................................................176\n\n# Bibliography\n\n.......................................................................................176\n\n# Chapter 13: Concurrency\n\n# Why Concurrency?\n\n...........................................................................178\n\n# Myths and Misconceptions\n\n.............................................................179", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3310, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "587a3e00-0524-4f3f-a2a0-d180508caf26": {"__data__": {"id_": "587a3e00-0524-4f3f-a2a0-d180508caf26", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e6f56868-b7de-4860-974a-14d04b02c48f", "node_type": "4", "metadata": {}, "hash": "b8a7c4f4c08b81df22c296f4d449ead692f3b1960abae2654f2cd52599757bd2", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\nxiii\n\n# Challenges\n\n180\n\n# Concurrency Defense Principles\n\n180\n\n# Single Responsibility Principle\n\n181\n\n# Corollary: Limit the Scope of Data\n\n181\n\n# Corollary: Use Copies of Data\n\n181\n\n# Corollary: Threads Should Be as Independent as Possible\n\n182\n\n# Know Your Library\n\n182\n\n# Thread-Safe Collections\n\n182\n\n# Know Your Execution Models\n\n183\n\n# Producer-Consumer\n\n184\n\n# Readers-Writers\n\n184\n\n# Dining Philosophers\n\n184\n\n# Beware Dependencies Between Synchronized Methods\n\n185\n\n# Keep Synchronized Sections Small\n\n185\n\n# Writing Correct Shut-Down Code Is Hard\n\n186\n\n# Testing Threaded Code\n\n186\n\n# Treat Spurious Failures as Candidate Threading Issues\n\n187\n\n# Get Your Nonthreaded Code Working First\n\n187\n\n# Make Your Threaded Code Pluggable\n\n187\n\n# Make Your Threaded Code Tunable\n\n187\n\n# Run with More Threads Than Processors\n\n188\n\n# Run on Different Platforms\n\n188\n\n# Instrument Your Code to Try and Force Failures\n\n188\n\n# Hand-Coded\n\n189\n\n# Automated\n\n189\n\n# Conclusion\n\n190\n\n# Bibliography\n\n191\n\n# Chapter 14: Successive Refinement\n\n193\n\n# Args Implementation\n\n194\n\n# How Did I Do This?\n\n200\n\n# Args: The Rough Draft\n\n201\n\n# So I Stopped\n\n212\n\n# On Incrementalism\n\n212\n\n# String Arguments\n\n214\n\n# Conclusion\n\n250", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1228, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eab82e75-7627-48dd-9c28-a89bcab74544": {"__data__": {"id_": "eab82e75-7627-48dd-9c28-a89bcab74544", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "26b73214-5ba0-4609-a439-809b7ac80bf3", "node_type": "4", "metadata": {}, "hash": "597a4403b5a3db9cfad666f7cc49b3d419d01a286caadae59922a4b659e01f9c", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\n# Chapter 15: JUnit Internals\n\n251\n\n# The JUnit Framework\n\n252\n\n# Conclusion\n\n265\n\n# Chapter 16: Refactoring SerialDate\n\n267\n\n# First, Make It Work\n\n268\n\n# Then Make It Right\n\n270\n\n# Conclusion\n\n284\n\n# Bibliography\n\n284\n\n# Chapter 17: Smells and Heuristics\n\n285\n\n# Comments\n\n286\n\n# C1: Inappropriate Information\n\n286\n\n# C2: Obsolete Comment\n\n286\n\n# C3: Redundant Comment\n\n286\n\n# C4: Poorly Written Comment\n\n287\n\n# C5: Commented-Out Code\n\n287\n\n# Environment\n\n287\n\n# E1: Build Requires More Than One Step\n\n287\n\n# E2: Tests Require More Than One Step\n\n287\n\n# Functions\n\n288\n\n# F1: Too Many Arguments\n\n288\n\n# F2: Output Arguments\n\n288\n\n# F3: Flag Arguments\n\n288\n\n# F4: Dead Function\n\n288\n\n# General\n\n288\n\n# G1: Multiple Languages in One Source File\n\n288\n\n# G2: Obvious Behavior Is Unimplemented\n\n288\n\n# G3: Incorrect Behavior at the Boundaries\n\n289\n\n# G4: Overridden Safeties\n\n289\n\n# G5: Duplication\n\n289\n\n# G6: Code at Wrong Level of Abstraction\n\n290\n\n# G7: Base Classes Depending on Their Derivatives\n\n291\n\n# G8: Too Much Information\n\n291\n\n# G9: Dead Code\n\n292\n\n# G10: Vertical Separation\n\n292\n\n# G11: Inconsistency\n\n292\n\n# G12: Clutter\n\n293", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1151, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "917bb0f4-4303-4bd2-954a-d8ac85b728b5": {"__data__": {"id_": "917bb0f4-4303-4bd2-954a-d8ac85b728b5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1aa209e7-029d-4f20-a4e0-9e9fad7e786a", "node_type": "4", "metadata": {}, "hash": "2fa902df20df01839aa9680f3f796c0788d3ca2a0d1355c50ad950f8a40fd8e3", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\n|G13: Artificial Coupling|293|\n|---|---|\n|G14: Feature Envy|293|\n|G15: Selector Arguments|294|\n|G16: Obscured Intent|295|\n|G17: Misplaced Responsibility|295|\n|G18: Inappropriate Static|296|\n|G19: Use Explanatory Variables|296|\n|G20: Function Names Should Say What They Do|297|\n|G21: Understand the Algorithm|297|\n|G22: Make Logical Dependencies Physical|298|\n|G23: Prefer Polymorphism to If/Else or Switch/Case|299|\n|G24: Follow Standard Conventions|299|\n|G25: Replace Magic Numbers with Named Constants|300|\n|G26: Be Precise|301|\n|G27: Structure over Convention|301|\n|G28: Encapsulate Conditionals|301|\n|G29: Avoid Negative Conditionals|302|\n|G30: Functions Should Do One Thing|302|\n|G31: Hidden Temporal Couplings|302|\n|G32: Don\u2019t Be Arbitrary|303|\n|G33: Encapsulate Boundary Conditions|304|\n|G34: Functions Should Descend Only One Level of Abstraction|304|\n|G35: Keep Configurable Data at High Levels|306|\n|G36: Avoid Transitive Navigation|306|\n|Java|307|\n|J1: Avoid Long Import Lists by Using Wildcards|307|\n|J2: Don\u2019t Inherit Constants|307|\n|J3: Constants versus Enums|308|\n|Names|309|\n|N1: Choose Descriptive Names|309|\n|N2: Choose Names at the Appropriate Level of Abstraction|311|\n|N3: Use Standard Nomenclature Where Possible|311|\n|N4: Unambiguous Names|312|\n|N5: Use Long Names for Long Scopes|312|\n|N6: Avoid Encodings|312|\n|N7: Names Should Describe Side-Effects.|313|", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f98cca6-229f-4a40-97b4-2ed3398b71ca": {"__data__": {"id_": "5f98cca6-229f-4a40-97b4-2ed3398b71ca", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0073e0e8-87a2-454f-adaf-9ee3b8f4c8f3", "node_type": "4", "metadata": {}, "hash": "4869a9ecb602dd729315f2af17d94f5746a279912cd56d3fa661586ccf80b90f", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\n# Tests\n\n....................................................................................................313\n\n# T1: Insufficient Tests\n\n.......................................................................313\n\n# T2: Use a Coverage Tool!\n\n...............................................................313\n\n# T3: Don\u2019t Skip Trivial Tests\n\n............................................................313\n\n# T4: An Ignored Test Is a Question about an Ambiguity\n\n..................313\n\n# T5: Test Boundary Conditions\n\n........................................................314\n\n# T6: Exhaustively Test Near Bugs\n\n....................................................314\n\n# T7: Patterns of Failure Are Revealing\n\n............................................314\n\n# T8: Test Coverage Patterns Can Be Revealing\n\n...............................314\n\n# T9: Tests Should Be Fast\n\n.................................................................314\n\n# Conclusion\n\n..........................................................................................314\n\n# Bibliography\n\n.......................................................................................315\n\n# Appendix A: Concurrency II\n\n.........................................................317\n\n# Client/Server Example\n\n......................................................................317\n\n# The Server\n\n......................................................................................317\n\n# Adding Threading\n\n...........................................................................319\n\n# Server Observations\n\n.......................................................................319\n\n# Conclusion\n\n......................................................................................321\n\n# Possible Paths of Execution\n\n..............................................................321\n\n# Number of Paths\n\n.............................................................................322\n\n# Digging Deeper\n\n..............................................................................323\n\n# Conclusion\n\n......................................................................................326\n\n# Knowing Your Library\n\n......................................................................326\n\n# Executor Framework\n\n......................................................................326\n\n# Nonblocking Solutions\n\n...................................................................327\n\n# Nonthread-Safe Classes\n\n..................................................................328\n\n# Dependencies Between Methods Can Break Concurrent Code\n\n...........................................................329\n\n# Tolerate the Failure\n\n.........................................................................330\n\n# Client-Based Locking\n\n.....................................................................330\n\n# Server-Based Locking\n\n....................................................................332\n\n# Increasing Throughput\n\n.....................................................................333\n\n# Single-Thread Calculation of Throughput\n\n......................................334\n\n# Multithread Calculation of Throughput\n\n..........................................335\n\n# Deadlock\n\n.............................................................................................335\n\n# Mutual Exclusion\n\n...........................................................................336\n\n# Lock & Wait\n\n...................................................................................337", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3572, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6dc7cae4-7896-404b-98df-51b16dc0f02b": {"__data__": {"id_": "6dc7cae4-7896-404b-98df-51b16dc0f02b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7467d371-e5e0-476b-908c-99441d384750", "node_type": "4", "metadata": {}, "hash": "ba5241a90bea15527b0c36dd77b023d93bdc5e6113ccff92ab2214bfdbaf5a90", "class_name": "RelatedNodeInfo"}}, "text": "# Contents\n\nxvii\n\n# No Preemption\n\n................................................................................337\n\n# Circular Wait\n\n..................................................................................337\n\n# Breaking Mutual Exclusion\n\n............................................................337\n\n# Breaking Lock & Wait\n\n....................................................................338\n\n# Breaking Preemption\n\n......................................................................338\n\n# Breaking Circular Wait\n\n...................................................................338\n\n# Testing Multithreaded Code\n\n.............................................................339\n\n# Tool Support for Testing Thread-Based Code\n\n........................................................342\n\n# Conclusion\n\n..........................................................................................342\n\n# Tutorial: Full Code Examples\n\n..........................................................343\n\n# Client/Server Nonthreaded\n\n.............................................................343\n\n# Client/Server Using Threads\n\n..........................................................346\n\n# Appendix B: org.jfree.date.SerialDate\n\n......................................349\n\n# Appendix C: Cross References of Heuristics\n\n...........................409\n\n# Epilogue\n\n................................................................................................411\n\n# Index\n\n......................................................................................................413", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1596, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da2985b1-99c6-424c-a0d5-49369adda818": {"__data__": {"id_": "da2985b1-99c6-424c-a0d5-49369adda818", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3d268c10-d111-44da-a5b7-36260a32f9e0", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "452c4bdc-050e-4ae2-972a-8976bfc974bf": {"__data__": {"id_": "452c4bdc-050e-4ae2-972a-8976bfc974bf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1a22c53f-a0b1-414a-a8f6-c1f0dc0317e9", "node_type": "4", "metadata": {}, "hash": "3791fd6147163475221178f30cfe67e5c249fa6368c16d06fa306558f5eac8ec", "class_name": "RelatedNodeInfo"}}, "text": "# Foreword\n\nOne of our favorite candies here in Denmark is Ga-Jol, whose strong licorice vapors are a perfect complement to our damp and often chilly weather. Part of the charm of Ga-Jol to us Danes is the wise or witty sayings printed on the flap of every box top. I bought a two-pack of the delicacy this morning and found that it bore this old Danish saw:\n\n\u00c6rlighed i sm\u00e5 ting er ikke nogen lille ting.\n\n\u201cHonesty in small things is not a small thing.\u201d\n\nIt was a good omen consistent with what I already wanted to say here. Small things matter. This is a book about humble concerns whose value is nonetheless far from small.\n\nGod is in the details, said the architect Ludwig mies van der Rohe. This quote recalls contemporary arguments about the role of architecture in software development, and particularly in the Agile world. Bob and I occasionally find ourselves passionately engaged in this dialogue. And yes, mies van der Rohe was attentive to utility and to the timeless forms of building that underlie great architecture. On the other hand, he also personally selected every doorknob for every house he designed. Why? Because small things matter.\n\nIn our ongoing \u201cdebate\u201d on TDD, Bob and I have discovered that we agree that software architecture has an important place in development, though we likely have different visions of exactly what that means. Such quibbles are relatively unimportant, however, because we can accept for granted that responsible professionals give some time to thinking and planning at the outset of a project. The late-1990s notions of design driven only by the tests and the code are long gone. Yet attentiveness to detail is an even more critical foundation of professionalism than is any grand vision. First, it is through practice in the small that professionals gain proficiency and trust for practice in the large. Second, the smallest bit of sloppy construction, of the door that does not close tightly or the slightly crooked tile on the floor, or even the messy desk, completely dispels the charm of the larger whole. That is what clean code is about.\n\nStill, architecture is just one metaphor for software development, and in particular for that part of software that delivers the initial product in the same sense that an architect delivers a pristine building. In these days of Scrum and Agile, the focus is on quickly bringing product to market. We want the factory running at top speed to produce software. These are human factories: thinking, feeling coders who are working from a product backlog or user story to create product. The manufacturing metaphor looms ever strong in such thinking. The production aspects of Japanese auto manufacturing, of an assembly-line world, inspire much of Scrum.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2750, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "057aa515-f7d0-4006-9913-67320b4ea8e9": {"__data__": {"id_": "057aa515-f7d0-4006-9913-67320b4ea8e9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5bd02a5e-5b8d-46bc-9f1f-077c3bf246ec", "node_type": "4", "metadata": {}, "hash": "3fd28b84ccb034a632e455747248caa1ffd3d821657f4dfd534691c620dec78a", "class_name": "RelatedNodeInfo"}}, "text": "# Foreword\n\nYet even in the auto industry, the bulk of the work lies not in manufacturing but in maintenance\u2014or its avoidance. In software, 80% or more of what we do is quaintly called \u201cmaintenance\u201d: the act of repair. Rather than embracing the typical Western focus on producing good software, we should be thinking more like home repairmen in the building industry, or auto mechanics in the automotive field. What does Japanese management have to say about that?\n\nIn about 1951, a quality approach called Total Productive Maintenance (TPM) came on the Japanese scene. Its focus is on maintenance rather than on production. One of the major pillars of TPM is the set of so-called 5S principles. 5S is a set of disciplines\u2014and here I use the term \u201cdiscipline\u201d instructively. These 5S principles are in fact at the foundations of Lean\u2014another buzzword on the Western scene, and an increasingly prominent buzzword in software circles. These principles are not an option. As Uncle Bob relates in his front matter, good software practice requires such discipline: focus, presence of mind, and thinking. It is not always just about doing, about pushing the factory equipment to produce at the optimal velocity. The 5S philosophy comprises these concepts:\n\n- Seiri, or organization (think \u201csort\u201d in English). Knowing where things are\u2014using approaches such as suitable naming\u2014is crucial. You think naming identifiers isn\u2019t important? Read on in the following chapters.\n- Seiton, or tidiness (think \u201csystematize\u201d in English). There is an old American saying: A place for everything, and everything in its place. A piece of code should be where you expect to find it\u2014and, if not, you should re-factor to get it there.\n- Seiso, or cleaning (think \u201cshine\u201d in English): Keep the workplace free of hanging wires, grease, scraps, and waste. What do the authors here say about littering your code with comments and commented-out code lines that capture history or wishes for the future? Get rid of them.\n- Seiketsu, or standardization: The group agrees about how to keep the workplace clean. Do you think this book says anything about having a consistent coding style and set of practices within the group? Where do those standards come from? Read on.\n- Shutsuke, or discipline (self-discipline). This means having the discipline to follow the practices and to frequently reflect on one\u2019s work and be willing to change.\n\nIf you take up the challenge\u2014yes, the challenge\u2014of reading and applying this book, you\u2019ll come to understand and appreciate the last point. Here, we are finally driving to the roots of responsible professionalism in a profession that should be concerned with the life cycle of a product. As we maintain automobiles and other machines under TPM, breakdown maintenance\u2014waiting for bugs to surface\u2014is the exception. Instead, we go up a level: inspect the machines every day and fix wearing parts before they break, or do the equivalent of the proverbial 10,000-mile oil change to forestall wear and tear. In code, refactor mercilessly. You can improve yet one level further, as the TPM movement innovated over 50 years ago: build machines that are more maintainable in the first place. Making your code readable is as important as making it executable. The ultimate practice, introduced in TPM circles around 1960, is to focus on introducing entire new machines or", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3367, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9cc4b6ba-71ae-4b93-bac6-2c22a4ca9ed8": {"__data__": {"id_": "9cc4b6ba-71ae-4b93-bac6-2c22a4ca9ed8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ad9f9ced-3c86-4231-9403-656847cfecdd", "node_type": "4", "metadata": {}, "hash": "a12a25c30766ee3579d395443bc5c2546c367971d23bbb795da5c624f5f3313a", "class_name": "RelatedNodeInfo"}}, "text": "# Foreword\n\nReplacing old ones. As Fred Brooks admonishes us, we should probably re-do major software chunks from scratch every seven years or so to sweep away creeping cruft. Perhaps we should update Brooks\u2019 time constant to an order of weeks, days or hours instead of years. That\u2019s where detail lies.\n\nThere is great power in detail, yet there is something humble and profound about this approach to life, as we might stereotypically expect from any approach that claims Japanese roots. But this is not only an Eastern outlook on life; English and American folk wisdom are full of such admonishments. The Seiton quote from above flowed from the pen of an Ohio minister who literally viewed neatness \u201cas a remedy for every degree of evil.\u201d\n\nHow about Seiso? Cleanliness is next to godliness. As beautiful as a house is, a messy desk robs it of its splendor. How about Shutsuke in these small matters? He who is faithful in little is faithful in much. How about being eager to re-factor at the responsible time, strengthening one\u2019s position for subsequent \u201cbig\u201d decisions, rather than putting it off? A stitch in time saves nine. The early bird catches the worm. Don\u2019t put off until tomorrow what you can do today. (Such was the original sense of the phrase \u201cthe last responsible moment\u201d in Lean until it fell into the hands of software consultants.) How about calibrating the place of small, individual efforts in a grand whole? Mighty oaks from little acorns grow. Or how about integrating simple preventive work into everyday life? An ounce of prevention is worth a pound of cure. An apple a day keeps the doctor away. Clean code honors the deep roots of wisdom beneath our broader culture, or our culture as it once was, or should be, and can be with attentiveness to detail.\n\nEven in the grand architectural literature we find saws that hark back to these supposed details. Think of mies van der Rohe\u2019s doorknobs. That\u2019s seiri. That\u2019s being attentive to every variable name. You should name a variable using the same care with which you name a first-born child.\n\nAs every homeowner knows, such care and ongoing refinement never come to an end. The architect Christopher Alexander\u2014father of patterns and pattern languages\u2014views every act of design itself as a small, local act of repair. And he views the craftsmanship of fine structure to be the sole purview of the architect; the larger forms can be left to patterns and their application by the inhabitants. Design is ever ongoing not only as we add a new room to a house, but as we are attentive to repainting, replacing worn carpets, or upgrading the kitchen sink. Most arts echo analogous sentiments. In our search for others who ascribe God\u2019s home as being in the details, we find ourselves in the good company of the 19th century French author Gustav Flaubert. The French poet Paul Valery advises us that a poem is never done and bears continual rework, and to stop working on it is abandonment. Such preoccupation with detail is common to all endeavors of excellence. So maybe there is little new here, but in reading this book you will be challenged to take up good disciplines that you long ago surrendered to apathy or a desire for spontaneity and just \u201cresponding to change.\u201d\n\nUnfortunately, we usually don\u2019t view such concerns as key cornerstones of the art of programming. We abandon our code early, not because it is done, but because our value system focuses more on outward appearance than on the substance of what we deliver.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0936cab-9a4f-47be-b561-d51a1f1ffc3c": {"__data__": {"id_": "f0936cab-9a4f-47be-b561-d51a1f1ffc3c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ad1c0b89-a961-4650-9467-b6140034e9fe", "node_type": "4", "metadata": {}, "hash": "bbdc38e4344fa7027e1a5df6fcdf88957bb3540293f529f080906b949005f996", "class_name": "RelatedNodeInfo"}}, "text": "# Foreword\n\nThis inattentiveness costs us in the end: A bad penny always shows up. Research, neither in industry nor in academia, humbles itself to the lowly station of keeping code clean. Back in my days working in the Bell Labs Software Production Research organization (Production, indeed!) we had some back-of-the-envelope findings that suggested that consistent indentation style was one of the most statistically significant indicators of low bug density. We want it to be that architecture or programming language or some other high notion should be the cause of quality; as people whose supposed professionalism owes to the mastery of tools and lofty design methods, we feel insulted by the value that those factory-floor machines, the coders, add through the simple consistent application of an indentation style. To quote my own book of 17 years ago, such style distinguishes excellence from mere competence. The Japanese worldview understands the crucial value of the everyday worker and, more so, of the systems of development that owe to the simple, everyday actions of those workers. Quality is the result of a million selfless acts of care\u2014not just of any great method that descends from the heavens. That these acts are simple doesn\u2019t mean that they are simplistic, and it hardly means that they are easy. They are nonetheless the fabric of greatness and, more so, of beauty, in any human endeavor. To ignore them is not yet to be fully human.\n\nOf course, I am still an advocate of thinking at broader scope, and particularly of the value of architectural approaches rooted in deep domain knowledge and software usability. The book isn\u2019t about that\u2014or, at least, it isn\u2019t obviously about that. This book has a subtler message whose profoundness should not be underappreciated. It fits with the current saw of the really code-based people like Peter Sommerlad, Kevlin Henney and Giovanni Asproni. \u201cThe code is the design\u201d and \u201cSimple code\u201d are their mantras. While we must take care to remember that the interface is the program, and that its structures have much to say about our program structure, it is crucial to continuously adopt the humble stance that the design lives in the code. And while rework in the manufacturing metaphor leads to cost, rework in design leads to value. We should view our code as the beautiful articulation of noble efforts of design\u2014design as a process, not a static endpoint. It\u2019s in the code that the architectural metrics of coupling and cohesion play out. If you listen to Larry Constantine describe coupling and cohesion, he speaks in terms of code\u2014not lofty abstract concepts that one might find in UML. Richard Gabriel advises us in his essay, \u201cAbstraction Descant\u201d that abstraction is evil. Code is anti-evil, and clean code is perhaps divine.\n\nGoing back to my little box of Ga-Jol, I think it\u2019s important to note that the Danish wisdom advises us not just to pay attention to small things, but also to be honest in small things. This means being honest to the code, honest to our colleagues about the state of our code and, most of all, being honest with ourselves about our code. Did we Do our Best to \u201cleave the campground cleaner than we found it\u201d? Did we re-factor our code before checking in? These are not peripheral concerns but concerns that lie squarely in the center of Agile values. It is a recommended practice in Scrum that re-factoring be part of the concept of \u201cDone.\u201d Neither architecture nor clean code insist on perfection, only on honesty and doing the best we can. To err is human; to forgive, divine. In Scrum, we make everything visible. We air our dirty laundry. We are honest about the state of our code because", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3692, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b585a0ab-b920-4a44-9ab4-38ecf810d352": {"__data__": {"id_": "b585a0ab-b920-4a44-9ab4-38ecf810d352", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b9bbffe7-3ee9-4955-b789-cf151d2bcc60", "node_type": "4", "metadata": {}, "hash": "1c9bd188d342d73a18e542ea94e18b88afc4b6d439928ecedfbc884266cce5c8", "class_name": "RelatedNodeInfo"}}, "text": "# Foreword\n\ncode is never perfect. We become more fully human, more worthy of the divine, and closer to that greatness in the details.\n\nIn our profession, we desperately need all the help we can get. If a clean shop floor reduces accidents, and well-organized shop tools increase productivity, then I\u2019m all for them. As for this book, it is the best pragmatic application of Lean principles to software I have ever seen in print. I expected no less from this practical little group of thinking individuals that has been striving together for years not only to become better, but also to gift their knowledge to the industry in works such as you now find in your hands. It leaves the world a little better than I found it before Uncle Bob sent me the manuscript.\n\nHaving completed this exercise in lofty insights, I am off to clean my desk.\n\nJames O. Coplien\nM\u00f8rdrup, Denmark", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 874, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "196131fe-4252-4d62-a6cf-ffbf94509cea": {"__data__": {"id_": "196131fe-4252-4d62-a6cf-ffbf94509cea", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6f5b9b4e-8d0f-448b-9bef-cc864f665904", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "641ffb4a-d1af-4bc2-8a78-4ccb6f7b23ea": {"__data__": {"id_": "641ffb4a-d1af-4bc2-8a78-4ccb6f7b23ea", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cf89e281-a52e-491a-8daf-0067f9c31db2", "node_type": "4", "metadata": {}, "hash": "6355a075926d9f6157191022ab69f418d8954695c94eda5c2a924f2f7522b28a", "class_name": "RelatedNodeInfo"}}, "text": "# Introduction\n\n(c) 2008 Focus Shift\n\nReproduced with the kind permission of Thom Holwerda. http://www.osnews.com/story/19266/WTFs_m\n\nWhich door represents your code? Which door represents your team or your company? Why are we in that room? Is this just a normal code review or have we found a stream of horrible problems shortly after going live? Are we debugging in a panic, poring over code that we thought worked? Are customers leaving in droves and managers breathing down\n\nxxv", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f278069-92ba-4a4d-8416-585add7f025a": {"__data__": {"id_": "8f278069-92ba-4a4d-8416-585add7f025a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f72ce39d-643c-4d6e-91c9-a6eef09613ea", "node_type": "4", "metadata": {}, "hash": "8abde3a84175cdbc2469a7ed8c7cb07ebf8425408ff5c3df80cf5649487103c3", "class_name": "RelatedNodeInfo"}}, "text": "# Introduction\n\nour necks? How can we make sure we wind up behind the right door when the going gets tough? The answer is: craftsmanship.\n\nThere are two parts to learning craftsmanship: knowledge and work. You must gain the knowledge of principles, patterns, practices, and heuristics that a craftsman knows, and you must also grind that knowledge into your fingers, eyes, and gut by working hard and practicing.\n\nI can teach you the physics of riding a bicycle. Indeed, the classical mathematics is relatively straightforward. Gravity, friction, angular momentum, center of mass, and so forth, can be demonstrated with less than a page full of equations. Given those formulae I could prove to you that bicycle riding is practical and give you all the knowledge you needed to make it work. And you\u2019d still fall down the first time you climbed on that bike.\n\nCoding is no different. We could write down all the \u201cfeel good\u201d principles of clean code and then trust you to do the work (in other words, let you fall down when you get on the bike), but then what kind of teachers would that make us, and what kind of student would that make you?\n\nNo. That\u2019s not the way this book is going to work.\n\nLearning to write clean code is hard work. It requires more than just the knowledge of principles and patterns. You must sweat over it. You must practice it yourself, and watch yourself fail. You must watch others practice it and fail. You must see them stumble and retrace their steps. You must see them agonize over decisions and see the price they pay for making those decisions the wrong way.\n\nBe prepared to work hard while reading this book. This is not a \u201cfeel good\u201d book that you can read on an airplane and finish before you land. This book will make you work, and work hard. What kind of work will you be doing? You\u2019ll be reading code\u2014lots of code. And you will be challenged to think about what\u2019s right about that code and what\u2019s wrong with it. You\u2019ll be asked to follow along as we take modules apart and put them back together again. This will take time and effort; but we think it will be worth it.\n\nWe have divided this book into three parts. The first several chapters describe the principles, patterns, and practices of writing clean code. There is quite a bit of code in these chapters, and they will be challenging to read. They\u2019ll prepare you for the second section to come. If you put the book down after reading the first section, good luck to you!\n\nThe second part of the book is the harder work. It consists of several case studies of ever-increasing complexity. Each case study is an exercise in cleaning up some code\u2014of transforming code that has some problems into code that has fewer problems. The detail in this section is intense. You will have to flip back and forth between the narrative and the code listings. You will have to analyze and understand the code we are working with and walk through our reasoning for making each change we make. Set aside some time because this should take you days.\n\nThe third part of this book is the payoff. It is a single chapter containing a list of heuristics and smells gathered while creating the case studies. As we walked through and cleaned up the code in the case studies, we documented every reason for our actions as a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3288, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a4aee53-5d7a-4f50-a2bc-b713b7bf14e3": {"__data__": {"id_": "2a4aee53-5d7a-4f50-a2bc-b713b7bf14e3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f7d3b5c-ba36-4d9c-94ed-2f1e3b0ad19b", "node_type": "4", "metadata": {}, "hash": "ee2e5c6b3d972ee9250b3165189553d0f5cc2dca2c40474ef8dd77f0168cfc9a", "class_name": "RelatedNodeInfo"}}, "text": "# Introduction\n\nheuristic or smell. We tried to understand our own reactions to the code we were reading and changing, and worked hard to capture why we felt what we felt and did what we did. The result is a knowledge base that describes the way we think when we write, read, and clean code.\n\nThis knowledge base is of limited value if you don\u2019t do the work of carefully reading through the case studies in the second part of this book. In those case studies we have carefully annotated each change we made with forward references to the heuristics. These forward references appear in square brackets like this: [H22]. This lets you see the context in which those heuristics were applied and written! It is not the heuristics themselves that are so valuable, it is the relationship between those heuristics and the discrete decisions we made while cleaning up the code in the case studies.\n\nTo further help you with those relationships, we have placed a cross-reference at the end of the book that shows the page number for every forward reference. You can use it to look up each place where a certain heuristic was applied.\n\nIf you read the first and third sections and skip over the case studies, then you will have read yet another \u201cfeel good\u201d book about writing good software. But if you take the time to work through the case studies, following every tiny step, every minute decision\u2014if you put yourself in our place, and force yourself to think along the same paths that we thought, then you will gain a much richer understanding of those principles, patterns, practices, and heuristics. They won\u2019t be \u201cfeel good\u201d knowledge any more. They\u2019ll have been ground into your gut, fingers, and heart. They\u2019ll have become part of you in the same way that a bicycle becomes an extension of your will when you have mastered how to ride it.\n\n# Acknowledgments\n\n# Artwork\n\nThank you to my two artists, Jeniffer Kohnke and Angela Brooks. Jennifer is responsible for the stunning and creative pictures at the start of each chapter and also for the portraits of Kent Beck, Ward Cunningham, Bjarne Stroustrup, Ron Jeffries, Grady Booch, Dave Thomas, Michael Feathers, and myself.\n\nAngela is responsible for the clever pictures that adorn the innards of each chapter. She has done quite a few pictures for me over the years, including many of the inside pictures in Agile Software Development: Principles, Patterns, and Practices. She is also my firstborn in whom I am well pleased.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c312d7a1-1d1c-4684-a748-4384e7d37db0": {"__data__": {"id_": "c312d7a1-1d1c-4684-a748-4384e7d37db0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cc017129-6eb9-491b-83de-ba38983a3b99", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd6ffabb-1d46-4f5e-9b7e-6ea5285c659b": {"__data__": {"id_": "bd6ffabb-1d46-4f5e-9b7e-6ea5285c659b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2796cf5a-2555-42e9-b7bd-8ce00b87fc14", "node_type": "4", "metadata": {}, "hash": "4ade83ea1ec71d5eb33813a9c9d4d5e224954fce246983c7fd477f9172f48a73", "class_name": "RelatedNodeInfo"}}, "text": "# On the Cover\n\nThe image on the cover is M104: The Sombrero Galaxy. M104 is located in Virgo and is just under 30 million light-years from us. At its core is a supermassive black hole weighing in at about a billion solar masses.\n\nDoes the image remind you of the explosion of the Klingon power moon Praxis? I vividly remember the scene in Star Trek VI that showed an equatorial ring of debris flying away from that explosion. Since that scene, the equatorial ring has been a common artifact in sci-fi movie explosions. It was even added to the explosion of Alderaan in later editions of the first Star Wars movie.\n\nWhat caused this ring to form around M104? Why does it have such a huge central bulge and such a bright and tiny nucleus? It looks to me as though the central black hole lost its cool and blew a 30,000 light-year hole in the middle of the galaxy. Woe befell any civilizations that might have been in the path of that cosmic disruption.\n\ntion of their mass to energy. E = MC2 Supermassive black holes swallow whole stars for lunch, converting a sizeable fraction of their mass to energy. Is leverage enough, but when M is a stellar mass: Look out! How many stars fell headlong into that maw before the monster was satiated? Could the size of the central void be a hint?\n\nThe image of M104 on the cover is a combination of the famous visible light photograph from Hubble (right), and the recent infrared image from the Spitzer orbiting observatory (below, right). It\u2019s the infrared image that clearly shows us the ring nature of the galaxy. In visible light we only see the front edge of the ring in silhouette. The central bulge obscures the rest of the ring.\n\nBut in the infrared, the hot particles in the ring shine through the central bulge. The two images combined give us a view we\u2019ve not seen before and imply that long ago it was a raging inferno of activity.\n\nCover image: \u00a9 Spitzer Space Telescope\n\nxxix", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1927, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a98b9b6-17e3-4f35-a768-aaa2437cb60f": {"__data__": {"id_": "3a98b9b6-17e3-4f35-a768-aaa2437cb60f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ca266c4e-113e-43d5-9611-f06295838240", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f421d97e-8688-467d-a7d1-918ef9aa3834": {"__data__": {"id_": "f421d97e-8688-467d-a7d1-918ef9aa3834", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3c126f03-965e-46d7-a966-526786046d75", "node_type": "4", "metadata": {}, "hash": "2eae6c92fd4777f1ebc20b66950100d0a51cb746a85809d473577f1c910f1dcb", "class_name": "RelatedNodeInfo"}}, "text": "# Clean Code\n\nYou are reading this book for two reasons. First, you are a programmer. Second, you want to be a better programmer. Good. We need better programmers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 163, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c826acf3-8636-4e08-b778-a4e981b1c885": {"__data__": {"id_": "c826acf3-8636-4e08-b778-a4e981b1c885", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b4e758e8-ffc5-4fe5-beda-563eb996f5f2", "node_type": "4", "metadata": {}, "hash": "e32ad7f387a6a54e3a22f3c6aeec9a3ac88ba48f699b163a1d3673d9683e4cc1", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 1: Clean Code\n\nThis is a book about good programming. It is filled with code. We are going to look at code from every different direction. We\u2019ll look down at it from the top, up at it from the bottom, and through it from the inside out. By the time we are done, we\u2019re going to know a lot about code. What\u2019s more, we\u2019ll be able to tell the difference between good code and bad code. We\u2019ll know how to write good code. And we\u2019ll know how to transform bad code into good code.\n\n# There Will Be Code\n\nOne might argue that a book about code is somehow behind the times\u2014that code is no longer the issue; that we should be concerned about models and requirements instead. Indeed some have suggested that we are close to the end of code. That soon all code will be generated instead of written. That programmers simply won\u2019t be needed because business people will generate programs from specifications.\n\nNonsense! We will never be rid of code, because code represents the details of the requirements. At some level those details cannot be ignored or abstracted; they have to be specified. And specifying requirements in such detail that a machine can execute them is programming. Such a specification is code.\n\nI expect that the level of abstraction of our languages will continue to increase. I also expect that the number of domain-specific languages will continue to grow. This will be a good thing. But it will not eliminate code. Indeed, all the specifications written in these higher level and domain-specific language will be code! It will still need to be rigorous, accurate, and so formal and detailed that a machine can understand and execute it.\n\nThe folks who think that code will one day disappear are like mathematicians who hope one day to discover a mathematics that does not have to be formal. They are hoping that one day we will discover a way to create machines that can do what we want rather than what we say. These machines will have to be able to understand us so well that they can translate vaguely specified needs into perfectly executing programs that precisely meet those needs.\n\nThis will never happen. Not even humans, with all their intuition and creativity, have been able to create successful systems from the vague feelings of their customers. Indeed, if the discipline of requirements specification has taught us anything, it is that well-specified requirements are as formal as code and can act as executable tests of that code!\n\nRemember that code is really the language in which we ultimately express the requirements. We may create languages that are closer to the requirements. We may create tools that help us parse and assemble those requirements into formal structures. But we will never eliminate necessary precision\u2014so there will always be code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2793, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11c0225e-96ca-4d6b-864b-00aaf6167fba": {"__data__": {"id_": "11c0225e-96ca-4d6b-864b-00aaf6167fba", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6f0812d-0866-4b88-b491-9d9c066ee0cd", "node_type": "4", "metadata": {}, "hash": "2f499a9fe160cb79c5c2211e521377a53a5cf037e5aae89a34f5023ae0449955", "class_name": "RelatedNodeInfo"}}, "text": "# Bad Code\n\nI was recently reading the preface to Kent Beck\u2019s book Implementation Patterns.1 He says, \u201c. . . this book is based on a rather fragile premise: that good code matters. . . .\u201d A fragile premise? I disagree! I think that premise is one of the most robust, supported, and overloaded of all the premises in our craft (and I think Kent knows it). We know good code matters because we\u2019ve had to deal for so long with its lack.\n\nI know of one company that, in the late 80s, wrote a killer app. It was very popular, and lots of professionals bought and used it. But then the release cycles began to stretch. Bugs were not repaired from one release to the next. Load times grew and crashes increased. I remember the day I shut the product down in frustration and never used it again. The company went out of business a short time after that.\n\nTwo decades later I met one of the early employees of that company and asked him what had happened. The answer confirmed my fears. They had rushed the product to market and had made a huge mess in the code. As they added more and more features, the code got worse and worse until they simply could not manage it any longer. It was the bad code that brought the company down.\n\nHave you ever been significantly impeded by bad code? If you are a programmer of any experience then you\u2019ve felt this impediment many times. Indeed, we have a name for it. We call it wading. We wade through bad code. We slog through a morass of tangled brambles and hidden pitfalls. We struggle to find our way, hoping for some hint, some clue, of what is going on; but all we see is more and more senseless code.\n\nOf course you have been impeded by bad code. So then\u2014why did you write it?\n\nWere you trying to go fast? Were you in a rush? Probably so. Perhaps you felt that you didn\u2019t have time to do a good job; that your boss would be angry with you if you took the time to clean up your code. Perhaps you were just tired of working on this program and wanted it to be over. Or maybe you looked at the backlog of other stuff that you had promised to get done and realized that you needed to slam this module together so you could move on to the next. We\u2019ve all done it.\n\nWe\u2019ve all looked at the mess we\u2019ve just made and then have chosen to leave it for another day. We\u2019ve all felt the relief of seeing our messy program work and deciding that a\n\n1. [Beck07].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4cbfece1-da10-4430-94f0-950f1aaaafef": {"__data__": {"id_": "4cbfece1-da10-4430-94f0-950f1aaaafef", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d7617009-4e33-432e-a01f-181c598e4248", "node_type": "4", "metadata": {}, "hash": "522a644fb0df73869b2d223930ef5e63eaa9d2b55cf8463e858d4fbe949df7be", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 1: Clean Code\n\nworking mess is better than nothing. We\u2019ve all said we\u2019d go back and clean it up later. Of course, in those days we didn\u2019t know LeBlanc\u2019s law: Later equals never.\n\n# The Total Cost of Owning a Mess\n\nIf you have been a programmer for more than two or three years, you have probably been significantly slowed down by someone else\u2019s messy code. If you have been a programmer for longer than two or three years, you have probably been slowed down by messy code. The degree of the slowdown can be significant. Over the span of a year or two, teams that were moving very fast at the beginning of a project can find themselves moving at a snail\u2019s pace. Every change they make to the code breaks two or three other parts of the code. No change is trivial. Every addition or modification to the system requires that the tangles, twists, and knots be \u201cunderstood\u201d so that more tangles, twists, and knots can be added.\n\nOver time the mess becomes so big and so deep and so tall, they can not clean it up. There is no way at all.\n\nAs the mess builds, the productivity of the team continues to decrease, asymptotically approaching zero. As productivity decreases, management does the only thing they can; they add more staff to the project in hopes of increasing productivity. But that new staff is not versed in the design of the system. They don\u2019t know the difference between a change that matches the design intent and a change that thwarts the design intent. Furthermore, they, and everyone else on the team, are under horrific pressure to increase productivity. So they all make more and more messes, driving the productivity ever further toward zero.\n\n# Figure 1-1\n\nProductivity vs. time", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "22d3b465-de61-45ca-8b36-a43421fe07b7": {"__data__": {"id_": "22d3b465-de61-45ca-8b36-a43421fe07b7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "eb021ee3-d0c1-453a-84ef-e708fc9e23fa", "node_type": "4", "metadata": {}, "hash": "5d94a108a1b31d1a379ca050de3b81aac635965927bbdd6e6c51e0aa885c8d27", "class_name": "RelatedNodeInfo"}}, "text": "# The Total Cost of Owning a Mess\n\n# The Grand Redesign in the Sky\n\nEventually the team rebels. They inform management that they cannot continue to develop in this odious code base. They demand a redesign. Management does not want to expend the resources on a whole new redesign of the project, but they cannot deny that productivity is terrible. Eventually they bend to the demands of the developers and authorize the grand redesign in the sky.\n\nA new tiger team is selected. Everyone wants to be on this team because it\u2019s a green-field project. They get to start over and create something truly beautiful. But only the best and brightest are chosen for the tiger team. Everyone else must continue to maintain the current system.\n\nNow the two teams are in a race. The tiger team must build a new system that does everything that the old system does. Not only that, they have to keep up with the changes that are continuously being made to the old system. Management will not replace the old system until the new system can do everything that the old system does.\n\nThis race can go on for a very long time. I\u2019ve seen it take 10 years. And by the time it\u2019s done, the original members of the tiger team are long gone, and the current members are demanding that the new system be redesigned because it\u2019s such a mess.\n\nIf you have experienced even one small part of the story I just told, then you already know that spending time keeping your code clean is not just cost effective; it\u2019s a matter of professional survival.\n\n# Attitude\n\nHave you ever waded through a mess so grave that it took weeks to do what should have taken hours? Have you seen what should have been a one-line change, made instead in hundreds of different modules? These symptoms are all too common.\n\nWhy does this happen to code? Why does good code rot so quickly into bad code? We have lots of explanations for it. We complain that the requirements changed in ways that thwart the original design. We bemoan the schedules that were too tight to do things right. We blather about stupid managers and intolerant customers and useless marketing types and telephone sanitizers. But the fault, dear Dilbert, is not in our stars, but in ourselves. We are unprofessional.\n\nThis may be a bitter pill to swallow. How could this mess be our fault? What about the requirements? What about the schedule? What about the stupid managers and the useless marketing types? Don\u2019t they bear some of the blame?\n\nNo. The managers and marketers look to us for the information they need to make promises and commitments; and even when they don\u2019t look to us, we should not be shy about telling them what we think. The users look to us to validate the way the requirements will fit into the system. The project managers look to us to help work out the schedule.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2805, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d76b5db4-4965-4488-baae-ea1d108ab655": {"__data__": {"id_": "d76b5db4-4965-4488-baae-ea1d108ab655", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0a046843-5ab8-427b-9c82-97899a3f1204", "node_type": "4", "metadata": {}, "hash": "607bab335ef2ab8f8477124379a90d361f9ce392e1aba772cbcee614d904a140", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 1: Clean Code\n\nare deeply complicit in the planning of the project and share a great deal of the responsi- bility for any failures; especially if those failures have to do with bad code!\n\n\u201cBut wait!\u201d you say. \u201cIf I don\u2019t do what my manager says, I\u2019ll be fired.\u201d Probably not. Most managers want the truth, even when they don\u2019t act like it. Most managers want good code, even when they are obsessing about the schedule. They may defend the schedule and requirements with passion; but that\u2019s their job. It\u2019s your job to defend the code with equal passion.\n\nTo drive this point home, what if you were a doctor and had a patient who demanded that you stop all the silly hand-washing in preparation for surgery because it was taking too much time?2 Clearly the patient is the boss; and yet the doctor should absolutely refuse to comply. Why? Because the doctor knows more than the patient about the risks of dis- ease and infection. It would be unprofessional (never mind criminal) for the doctor to comply.\n\nSo too it is unprofessional for programmers to bend to the will of managers who don\u2019t understand the risks of making messes.\n\n# The Primal Conundrum\n\nProgrammers face a conundrum of basic values. All developers with more than a few years experience know that previous messes slow them down. And yet all developers feel the pressure to make messes in order to meet deadlines. In short, they don\u2019t take the time to go fast!\n\nTrue professionals know that the second part of the conundrum is wrong. You will not make the deadline by making the mess. Indeed, the mess will slow you down instantly, and will force you to miss the deadline. The only way to make the deadline\u2014the only way to go fast\u2014is to keep the code as clean as possible at all times.\n\n# The Art of Clean Code?\n\nLet\u2019s say you believe that messy code is a significant impediment. Let\u2019s say that you accept that the only way to go fast is to keep your code clean. Then you must ask yourself: \u201cHow do I write clean code?\u201d It\u2019s no good trying to write clean code if you don\u2019t know what it means for code to be clean!\n\nThe bad news is that writing clean code is a lot like painting a picture. Most of us know when a picture is painted well or badly. But being able to recognize good art from bad does not mean that we know how to paint. So too being able to recognize clean code from dirty code does not mean that we know how to write clean code!\n\n2. When hand-washing was first recommended to physicians by Ignaz Semmelweis in 1847, it was rejected on the basis that doctors were too busy and wouldn\u2019t have time to wash their hands between patient visits.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2627, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e0b8809-d245-4a9e-823e-b5f11f1453ed": {"__data__": {"id_": "8e0b8809-d245-4a9e-823e-b5f11f1453ed", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf3f73ca-1574-43b6-84d0-0f582c6806a7", "node_type": "4", "metadata": {}, "hash": "df9b44f0c7accd71baef717d74d09fbc383fe9df982a171c235797d259831e9e", "class_name": "RelatedNodeInfo"}}, "text": "# The Total Cost of Owning a Mess\n\nWriting clean code requires the disciplined use of a myriad little techniques applied through a painstakingly acquired sense of \u201ccleanliness.\u201d This \u201ccode-sense\u201d is the key. Some of us are born with it. Some of us have to fight to acquire it. Not only does it let us see whether code is good or bad, but it also shows us the strategy for applying our discipline to transform bad code into clean code.\n\nA programmer without \u201ccode-sense\u201d can look at a messy module and recognize the mess but will have no idea what to do about it. A programmer with \u201ccode-sense\u201d will look at a messy module and see options and variations. The \u201ccode-sense\u201d will help that programmer choose the best variation and guide him or her to plot a sequence of behavior preserving transformations to get from here to there.\n\nIn short, a programmer who writes clean code is an artist who can take a blank screen through a series of transformations until it is an elegantly coded system.\n\n# What Is Clean Code?\n\nThere are probably as many definitions as there are programmers. So I asked some very well-known and deeply experienced programmers what they thought.\n\n# Bjarne Stroustrup, inventor of C++ and author of The C++ Programming Language\n\nI like my code to be elegant and efficient. The logic should be straightforward to make it hard for bugs to hide, the dependencies minimal to ease maintenance, error handling complete according to an articulated strategy, and performance close to optimal so as not to tempt people to make the code messy with unprincipled optimizations. Clean code does one thing well.\n\nQuite a word! The dictionary in my MacBook\u00ae provides the following definitions: pleasingly graceful and stylish in appearance or manner; pleasingly ingenious and simple. Notice the emphasis on the word \u201cpleasing.\u201d Apparently Bjarne thinks that clean code is pleasing to read. Reading it should make you smile the way a well-crafted music box or well-designed car would.\n\nBjarne also mentions efficiency\u2014twice. Perhaps this should not surprise us coming from the inventor of C++; but I think there\u2019s more to it than the sheer desire for speed. Wasted cycles are inelegant, they are not pleasing. And now note the word that Bjarne uses.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91d056a4-5bc6-4f3c-a0a7-93b16fc04e25": {"__data__": {"id_": "91d056a4-5bc6-4f3c-a0a7-93b16fc04e25", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f4807ea-416b-4904-99bf-65d91415dbf7", "node_type": "4", "metadata": {}, "hash": "469d968bbe19ff154fd162934f2ab6fb34ce556eb4928590c7c2d1ab36f8decc", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 1: Clean Code\n\nto describe the consequence of that inelegance. He uses the word \u201ctempt.\u201d There is a deep truth here. Bad code tempts the mess to grow! When others change bad code, they tend to make it worse.\n\nphor of broken windows. A building with broken windows looks like nobody cares about it. So other people stop caring. They allow more windows to become broken. Eventually they actively break them. They despoil the facade with graffiti and allow garbage to collect. One broken window starts the process toward decay.\n\nBjarne also mentions that error handing should be complete. This goes to the discipline of paying attention to details. Abbreviated error handling is just one way that programmers gloss over details. Memory leaks are another, race conditions still another. Inconsistent naming yet another. The upshot is that clean code exhibits close attention to detail.\n\nBjarne closes with the assertion that clean code does one thing well. It is no accident that there are so many principles of software design that can be boiled down to this simple admonition. Writer after writer has tried to communicate this thought. Bad code tries to do too much, it has muddled intent and ambiguity of purpose. Clean code is focused. Each function, each class, each module exposes a single-minded attitude that remains entirely undistracted, and unpolluted, by the surrounding details.\n\nGrady Booch, author of Object Oriented Analysis and Design with Applications\n\nClean code is simple and direct. Clean code reads like well-written prose. Clean code never obscures the designer\u2019s intent but rather is full of crisp abstractions and straightforward lines of control.\n\nGrady makes some of the same points as Bjarne, but he takes a readability perspective. I especially like his view that clean code should read like well-written prose. Think back on a really good book that you\u2019ve read. Remember how the words disappeared to be replaced by images! It was like watching a movie, wasn\u2019t it? Better! You saw the characters, you heard the sounds, you experienced the pathos and the humor.\n\nReading clean code will never be quite like reading Lord of the Rings. Still, the literary metaphor is not a bad one. Like a good novel, clean code should clearly expose the tensions in the problem to be solved. It should build those tensions to a climax and then give\n\n3. http://www.pragmaticprogrammer.com/booksellers/2004-12.html", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5f7a56e-ec41-4658-b466-b0e340084449": {"__data__": {"id_": "c5f7a56e-ec41-4658-b466-b0e340084449", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2daf754d-4d3a-4f5b-86b7-206b2ec4f84e", "node_type": "4", "metadata": {}, "hash": "c39b934724ed6b2a17e1f595cd1d94748d557c91b650598b3ba715489219274d", "class_name": "RelatedNodeInfo"}}, "text": "# The Total Cost of Owning a Mess\n\nthe reader that \u201cAha! Of course!\u201d as the issues and tensions are resolved in the revelation of an obvious solution.\n\nI find Grady\u2019s use of the phrase \u201ccrisp abstraction\u201d to be a fascinating oxymoron! After all the word \u201ccrisp\u201d is nearly a synonym for \u201cconcrete.\u201d My MacBook\u2019s dictionary holds the following definition of \u201ccrisp\u201d: briskly decisive and matter-of-fact, without hesitation or unnecessary detail. Despite this seeming juxtaposition of meaning, the words carry a powerful message. Our code should be matter-of-fact as opposed to speculative. It should contain only what is necessary. Our readers should perceive us to have been decisive.\n\n# \u201cBig\u201d Dave Thomas, founder of OTI, godfather of the Eclipse strategy\n\nClean code can be read, and enhanced by a developer other than its original author. It has unit and acceptance tests. It has meaningful names. It provides one way rather than many ways for doing one thing. It has minimal dependencies, which are explicitly defined, and provides a clear and minimal API. Code should be literate since depending on the language, not all necessary information can be expressed clearly in code alone.\n\nBig Dave shares Grady\u2019s desire for readability, but with an important twist. Dave asserts that clean code makes it easy for other people to enhance it. This may seem obvious, but it cannot be overemphasized. There is, after all, a difference between code that is easy to read and code that is easy to change.\n\nDave ties cleanliness to tests! Ten years ago this would have raised a lot of eyebrows. But the discipline of Test Driven Development has made a profound impact upon our industry and has become one of our most fundamental disciplines. Dave is right. Code, without tests, is not clean. No matter how elegant it is, no matter how readable and accessible, if it hath not tests, it be unclean.\n\nDave uses the word minimal twice. Apparently he values code that is small, rather than code that is large. Indeed, this has been a common refrain throughout software literature since its inception. Smaller is better.\n\nprogramming.4 The upshot is that the code should be composed in such a form as to make it readable by humans.\n\n4.  [Knuth92].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c421d2d-5eaf-4904-9fe5-041892be888a": {"__data__": {"id_": "0c421d2d-5eaf-4904-9fe5-041892be888a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b753db42-87df-4063-a41e-aef6170e3892", "node_type": "4", "metadata": {}, "hash": "b9c1aa78387cd061ddca10df2dd1acb265dd4dd766d75c7e81d86c25f3c67f60", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 1: Clean Code\n\nMichael Feathers, author of Working Effectively with Legacy Code\n\nI could list all of the qualities that I notice in clean code, but there is one overarching quality that leads to all of them. Clean code always looks like it was written by someone who cares. There is nothing obvious that you can do to make it better. All of those things were thought about by the code\u2019s author, and if you try to imagine improvements, you\u2019re led back to where you are, sitting in appreciation of the code someone left for you\u2014code left by someone who cares deeply about the craft.\n\nOne word: care. That\u2019s really the topic of this book. Perhaps an appropriate subtitle would be How to Care for Code.\n\nMichael hit it on the head. Clean code is code that has been taken care of. Someone has taken the time to keep it simple and orderly. They have paid appropriate attention to details. They have cared.\n\nRon Jeffries, author of Extreme Programming Installed and Extreme Programming Adventures in C#\n\nRon began his career programming in Fortran at the Strategic Air Command and has written code in almost every language and on almost every machine. It pays to consider his words carefully.\n\nIn recent years I begin, and nearly end, with Beck\u2019s rules of simple code. In priority order, simple code:\n\n- Runs all the tests;\n- Contains no duplication;\n- Expresses all the design ideas that are in the system;\n- Minimizes the number of entities such as classes, methods, functions, and the like.\n\nOf these, I focus mostly on duplication. When the same thing is done over and over, it\u2019s a sign that there is an idea in our mind that is not well represented in the code. I try to figure out what it is. Then I try to express that idea more clearly.\n\nExpressiveness to me includes meaningful names, and I am likely to change the names of things several times before I settle in. With modern coding tools such as Eclipse, renaming is quite inexpensive, so it doesn\u2019t trouble me to change. Expressiveness goes...", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2008, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32332606-5189-4448-bef2-9ccb1dd0c5ba": {"__data__": {"id_": "32332606-5189-4448-bef2-9ccb1dd0c5ba", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "18e2c49b-f4ab-425e-b95e-fe31962a2dc7", "node_type": "4", "metadata": {}, "hash": "58ff2e01010cdf46ca99b488d0bcd24b585bea56c6153634573c596ee06c1efb", "class_name": "RelatedNodeInfo"}}, "text": "# The Total Cost of Owning a Mess\n\nbeyond names, however. I also look at whether an object or method is doing more than one thing. If it\u2019s an object, it probably needs to be broken into two or more objects. If it\u2019s a method, I will always use the Extract Method refactoring on it, resulting in one method that says more clearly what it does, and some submethods saying how it is done.\n\nDuplication and expressiveness take me a very long way into what I consider clean code, and improving dirty code with just these two things in mind can make a huge difference. There is, however, one other thing that I\u2019m aware of doing, which is a bit harder to explain.\n\nAfter years of doing this work, it seems to me that all programs are made up of very similar elements. One example is \u201cfind things in a collection.\u201d Whether we have a database of employee records, or a hash map of keys and values, or an array of items of some kind, we often find ourselves wanting a particular item from that collection. When I find that happening, I will often wrap the particular implementation in a more abstract method or class. That gives me a couple of interesting advantages.\n\nI can implement the functionality now with something simple, say a hash map, but since now all the references to that search are covered by my little abstraction, I can change the implementation any time I want. I can go forward quickly while preserving my ability to change later.\n\nIn addition, the collection abstraction often calls my attention to what\u2019s \u201creally\u201d going on, and keeps me from running down the path of implementing arbitrary collection behavior when all I really need is a few fairly simple ways of finding what I want.\n\nReduced duplication, high expressiveness, and early building of simple abstractions. That\u2019s what makes clean code for me.\n\nHere, in a few short paragraphs, Ron has summarized the contents of this book. No duplication, one thing, expressiveness, tiny abstractions. Everything is there.\n\nWard Cunningham, inventor of Wiki, inventor of Fit, coinventor of eXtreme Programming. Motive force behind Design Patterns. Smalltalk and OO thought leader. The godfather of all those who care about code.\n\nYou know you are working on clean code when each routine you read turns out to be pretty much what you expected. You can call it beautiful code when the code also makes it look like the language was made for the problem.\n\nStatements like this are characteristic of Ward. You read it, nod your head, and then go on to the next topic. It sounds so reasonable, so obvious, that it barely registers as something profound. You might think it was pretty much what you expected. But let\u2019s take a closer look.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2690, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a0c20bde-4697-4c20-85f0-9539a0fd3130": {"__data__": {"id_": "a0c20bde-4697-4c20-85f0-9539a0fd3130", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "177a7f78-a4dd-4254-b67f-2e15e5cde805", "node_type": "4", "metadata": {}, "hash": "a8fafefd10cc42eb8612ba3d415233925cccf5737f16d5eb33bb52af0424e711", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 1: Clean Code\n\n\u201c. . . pretty much what you expected.\u201d When was the last time you saw a module that was pretty much what you expected? Isn\u2019t it more likely that the modules you look at will be puzzling, complicated, tangled? Isn\u2019t misdirection the rule? Aren\u2019t you used to flailing about trying to grab and hold the threads of reasoning that spew forth from the whole system and weave their way through the module you are reading? When was the last time you read through some code and nodded your head the way you might have nodded your head at Ward\u2019s statement?\n\nWard expects that when you read clean code you won\u2019t be surprised at all. Indeed, you won\u2019t even expend much effort. You will read it, and it will be pretty much what you expected. It will be obvious, simple, and compelling. Each module will set the stage for the next. Each tells you how the next will be written. Programs that are that clean are so profoundly well written that you don\u2019t even notice it. The designer makes it look ridiculously simple like all exceptional designs.\n\nAnd what about Ward\u2019s notion of beauty? We\u2019ve all railed against the fact that our languages weren\u2019t designed for our problems. But Ward\u2019s statement puts the onus back on us. He says that beautiful code makes the language look like it was made for the problem! So it\u2019s our responsibility to make the language look simple! Language bigots everywhere, beware! It is not the language that makes programs appear simple. It is the programmer that makes the language appear simple!\n\n# Schools of Thought\n\nWhat about me (Uncle Bob)? What do I think clean code is? This book will tell you, in hideous detail, what I and my compatriots think about clean code. We will tell you what we think makes a clean variable name, a clean function, a clean class, etc. We will present these opinions as absolutes, and we will not apologize for our stridence. To us, at this point in our careers, they are absolutes. They are our school of thought about clean code.\n\nMartial artists do not all agree about the best martial art, or the best technique within a martial art. Often master martial artists will form their own schools of thought and gather students to learn from them. So we see Gracie Jiu Jitsu, founded and taught by the Gracie family in Brazil. We see Hakkoryu Jiu Jitsu, founded and taught by Okuyama Ryuho in Tokyo. We see Jeet Kune Do, founded and taught by Bruce Lee in the United States.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2442, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9b54a71-b6fb-43e9-8aa4-3ac233c9dbdf": {"__data__": {"id_": "d9b54a71-b6fb-43e9-8aa4-3ac233c9dbdf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c184216a-01e5-409e-b418-4ec2beadd0fe", "node_type": "4", "metadata": {}, "hash": "b6e354c69b24443da522c4847658f9a3cdb6db2c28ca876482b5645f1e110290", "class_name": "RelatedNodeInfo"}}, "text": "# We Are Authors\n\nStudents of these approaches immerse themselves in the teachings of the founder. They dedicate themselves to learn what that particular master teaches, often to the exclusion of any other master\u2019s teaching. Later, as the students grow in their art, they may become the student of a different master so they can broaden their knowledge and practice. Some eventually go on to refine their skills, discovering new techniques and founding their own schools.\n\nNone of these different schools is absolutely right. Yet within a particular school we act as though the teachings and techniques are right. After all, there is a right way to practice Hakkoryu Jiu Jitsu, or Jeet Kune Do. But this rightness within a school does not invalidate the teachings of a different school.\n\nConsider this book a description of the Object Mentor School of Clean Code. The techniques and teachings within are the way that we practice our art. We are willing to claim that if you follow these teachings, you will enjoy the benefits that we have enjoyed, and you will learn to write code that is clean and professional. But don\u2019t make the mistake of thinking that we are somehow \u201cright\u201d in any absolute sense. There are other schools and other masters that have just as much claim to professionalism as we. It would behoove you to learn from them as well.\n\nIndeed, many of the recommendations in this book are controversial. You will probably not agree with all of them. You might violently disagree with some of them. That\u2019s fine. We can\u2019t claim final authority. On the other hand, the recommendations in this book are things that we have thought long and hard about. We have learned them through decades of experience and repeated trial and error. So whether you agree or disagree, it would be a shame if you did not see, and respect, our point of view.\n\n# We Are Authors\n\nThe @author field of a Javadoc tells us who we are. We are authors. And one thing about authors is that they have readers. Indeed, authors are responsible for communicating well with their readers. The next time you write a line of code, remember you are an author, writing for readers who will judge your effort.\n\nYou might ask: How much is code really read? Doesn\u2019t most of the effort go into writing it?\n\nHave you ever played back an edit session? In the 80s and 90s we had editors like Emacs that kept track of every keystroke. You could work for an hour and then play back your whole edit session like a high-speed movie. When I did this, the results were fascinating.\n\nThe vast majority of the playback was scrolling and navigating to other modules!\n\nBob enters the module.\n\nHe scrolls down to the function needing change.\n\nHe pauses, considering his options.\n\nOh, he\u2019s scrolling up to the top of the module to check the initialization of a variable.\n\nNow he scrolls back down and begins to type.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2870, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "489a958a-34e4-489f-aa1b-a186f7788754": {"__data__": {"id_": "489a958a-34e4-489f-aa1b-a186f7788754", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "181ec876-e228-4fc5-804e-d39fb195fd62", "node_type": "4", "metadata": {}, "hash": "8476c7a7f78289e2818d25e8f0bcbb62e377cc40c112d83dd3141ab8e22a0ea1", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 1: Clean Code\n\nOoops, he\u2019s erasing what he typed!\n\nHe types it again.\n\nHe erases it again!\n\nHe types half of something else but then erases that!\n\nHe scrolls down to another function that calls the function he\u2019s changing to see how it is called.\n\nHe scrolls back up and types the same code he just erased.\n\nHe pauses.\n\nHe erases that code again!\n\nHe pops up another window and looks at a subclass. Is that function overridden?\n\nYou get the drift. Indeed, the ratio of time spent reading vs. writing is well over 10:1. We are constantly reading old code as part of the effort to write new code.\n\nBecause this ratio is so high, we want the reading of code to be easy, even if it makes the writing harder. Of course there\u2019s no way to write code without reading it, so making it easy to read actually makes it easier to write.\n\nThere is no escape from this logic. You cannot write code if you cannot read the surrounding code. The code you are trying to write today will be hard or easy to write depending on how hard or easy the surrounding code is to read. So if you want to go fast, if you want to get done quickly, if you want your code to be easy to write, make it easy to read.\n\n# The Boy Scout Rule\n\nIt\u2019s not enough to write the code well. The code has to be kept clean over time. We\u2019ve all seen code rot and degrade as time passes. So we must take an active role in preventing this degradation.\n\nThe Boy Scouts of America have a simple rule that we can apply to our profession.\n\nLeave the campground cleaner than you found it.5\n\nIf we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot. The cleanup doesn\u2019t have to be something big. Change one variable name for the better, break up one function that\u2019s a little too large, eliminate one small bit of duplication, clean up one composite if statement.\n\nCan you imagine working on a project where the code simply got better as time passed? Do you believe that any other option is professional? Indeed, isn\u2019t continuous improvement an intrinsic part of professionalism?\n\n5. This was adapted from Robert Stephenson Smyth Baden-Powell\u2019s farewell message to the Scouts: \u201cTry and leave this world a little better than you found it . . .\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96b47de9-42a9-4525-9652-d62d182f5efa": {"__data__": {"id_": "96b47de9-42a9-4525-9652-d62d182f5efa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5257f577-289f-4647-aa6e-1452a72eb79a", "node_type": "4", "metadata": {}, "hash": "1c5011ed139cd0fd31c5061ef30aab393be2fa413aad1952e9147034a78999e2", "class_name": "RelatedNodeInfo"}}, "text": "# Bibliography\n\n15\n\n# Prequel and Principles\n\nIn many ways this book is a \u201cprequel\u201d to a book I wrote in 2002 entitled Agile Software Development: Principles, Patterns, and Practices (PPP). The PPP book concerns itself with the principles of object-oriented design, and many of the practices used by professional developers. If you have not read PPP, then you may find that it continues the story told by this book. If you have already read it, then you\u2019ll find many of the sentiments of that book echoed in this one at the level of code.\n\nIn this book you will find sporadic references to various principles of design. These include the Single Responsibility Principle (SRP), the Open Closed Principle (OCP), and the Dependency Inversion Principle (DIP) among others. These principles are described in depth in PPP.\n\n# Conclusion\n\nBooks on art don\u2019t promise to make you an artist. All they can do is give you some of the tools, techniques, and thought processes that other artists have used. So too this book cannot promise to make you a good programmer. It cannot promise to give you \u201ccode-sense.\u201d All it can do is show you the thought processes of good programmers and the tricks, techniques, and tools that they use.\n\nJust like a book on art, this book will be full of details. There will be lots of code. You\u2019ll see good code and you\u2019ll see bad code. You\u2019ll see bad code transformed into good code. You\u2019ll see lists of heuristics, disciplines, and techniques. You\u2019ll see example after example. After that, it\u2019s up to you.\n\nRemember the old joke about the concert violinist who got lost on his way to a performance? He stopped an old man on the corner and asked him how to get to Carnegie Hall. The old man looked at the violinist and the violin tucked under his arm, and said: \u201cPractice, son. Practice!\u201d\n\n# Bibliography\n\n|[Beck07]|Implementation Patterns, Kent Beck, Addison-Wesley, 2007.|\n|---|---|\n|[Knuth92]|Literate Programming, Donald E. Knuth, Center for the Study of Language and Information, Leland Stanford Junior University, 1992.|", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2046, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12128c5b-1244-4dd1-948f-55e5aed44f69": {"__data__": {"id_": "12128c5b-1244-4dd1-948f-55e5aed44f69", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f3d390bb-d139-4dbc-8424-d37ede41a03c", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b654461a-13ea-4346-9e0a-085bc461b50b": {"__data__": {"id_": "b654461a-13ea-4346-9e0a-085bc461b50b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6c0642f6-2001-49b0-b1da-e64b27053a62", "node_type": "4", "metadata": {}, "hash": "6bc0bebb03305379ca8dbbf2fc948903d3a783119e5cc28c384cd2c36f612681", "class_name": "RelatedNodeInfo"}}, "text": "# Meaningful Names\n\n# by Tim Ottinger\n\n# Introduction\n\nNames are everywhere in software. We name our variables, our functions, our arguments, classes, and packages. We name our source files and the directories that contain them. We name our jar files and war files and ear files. We name and name and name. Because we do", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6bf80d4-9661-491f-b795-5dbb8611bc7b": {"__data__": {"id_": "d6bf80d4-9661-491f-b795-5dbb8611bc7b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e85178e8-cb49-4ab7-8689-f52473bcc995", "node_type": "4", "metadata": {}, "hash": "6868c0e87074cc6b0353477f802f7eac98f215484c9789838bd5849bbb9b6794", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 2: Meaningful Names\n\nso much of it, we\u2019d better do it well. What follows are some simple rules for creating good names.\n\n# Use Intention-Revealing Names\n\nIt is easy to say that names should reveal intent. What we want to impress upon you is that we are serious about this. Choosing good names takes time but saves more than it takes. So take care with your names and change them when you find better ones. Everyone who reads your code (including you) will be happier if you do.\n\nThe name of a variable, function, or class, should answer all the big questions. It should tell you why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent.\n\nint d;    // elapsed time in days\nThe name d reveals nothing. It does not evoke a sense of elapsed time, nor of days. We should choose a name that specifies what is being measured and the unit of that measurement:\n\nint elapsedTimeInDays;\nint daysSinceCreation;\nint daysSinceModification;\nint fileAgeInDays;\n\nChoosing names that reveal intent can make it much easier to understand and change code. What is the purpose of this code?\n\npublic List<int[]> getThem() {\nList<int[]> list1 = new ArrayList<int[]>();\nfor (int[] x : theList)\nif (x[0] == 4)\nlist1.add(x);\nreturn list1;\n}\n\nWhy is it hard to tell what this code is doing? There are no complex expressions. Spacing and indentation are reasonable. There are only three variables and two constants mentioned. There aren\u2019t even any fancy classes or polymorphic methods, just a list of arrays (or so it seems).\n\nThe problem isn\u2019t the simplicity of the code but the implicity of the code (to coin a phrase): the degree to which the context is not explicit in the code itself. The code implicitly requires that we know the answers to questions such as:\n\n1. What kinds of things are in theList?\n2. What is the significance of the zeroth subscript of an item in theList?\n3. What is the significance of the value 4?\n4. How would I use the list being returned?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b001ed2b-1c9d-4a23-9285-69b21166897e": {"__data__": {"id_": "b001ed2b-1c9d-4a23-9285-69b21166897e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "829bced3-c1f2-43bc-92fb-38e3307f2f3f", "node_type": "4", "metadata": {}, "hash": "f8ec81d2212e9554a539467d2758cad1814fc4c5f1cdf984077cc958fd200b37", "class_name": "RelatedNodeInfo"}}, "text": "# Avoid Disinformation\n\nThe answers to these questions are not present in the code sample, but they could have been. Say that we\u2019re working in a mine sweeper game. We find that the board is a list of cells called theList. Let\u2019s rename that to gameBoard.\n\nEach cell on the board is represented by a simple array. We further find that the zeroth subscript is the location of a status value and that a status value of 4 means \u201cflagged.\u201d Just by giving these concepts names we can improve the code considerably:\n\npublic List<int[]> getFlaggedCells() {\nList<int[]> flaggedCells = new ArrayList<int[]>();\nfor (int[] cell : gameBoard)\nif (cell[STATUS_VALUE] == FLAGGED)\nflaggedCells.add(cell);\nreturn flaggedCells;\n}\nNotice that the simplicity of the code has not changed. It still has exactly the same number of operators and constants, with exactly the same number of nesting levels. But the code has become much more explicit.\n\nWe can go further and write a simple class for cells instead of using an array of ints. It can include an intention-revealing function (call it isFlagged) to hide the magic numbers. It results in a new version of the function:\n\npublic List<Cell> getFlaggedCells() {\nList<Cell> flaggedCells = new ArrayList<Cell>();\nfor (Cell cell : gameBoard)\nif (cell.isFlagged())\nflaggedCells.add(cell);\nreturn flaggedCells;\n}\nWith these simple name changes, it\u2019s not difficult to understand what\u2019s going on. This is the power of choosing good names.\n\n# Avoid Disinformation\n\nProgrammers must avoid leaving false clues that obscure the meaning of code. We should avoid words whose entrenched meanings vary from our intended meaning. For example, hp, aix, and sco would be poor variable names because they are the names of Unix platforms or variants. Even if you are coding a hypotenuse and hp looks like a good abbreviation, it could be disinformative.\n\nDo not refer to a grouping of accounts as an accountList unless it\u2019s actually a List. The word list means something specific to programmers. If the container holding theList, it may lead to false conclusions.1\n\nSo accountGroup or bunchOfAccounts or just plain accounts would be better.\n\n1. As we\u2019ll see later on, even if the container is a List, it\u2019s probably better not to encode the container type into the name.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2277, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "42290184-daf4-4e9c-842a-cdbfd3a77974": {"__data__": {"id_": "42290184-daf4-4e9c-842a-cdbfd3a77974", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "386a0e8f-64ec-479f-9ee6-a4f4bd6537ed", "node_type": "4", "metadata": {}, "hash": "361a91792c7cab36cfa9c84e20f59426bc709a658b94501f8c2b9064fbabc7ec", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 2: Meaningful Names\n\nBeware of using names which vary in small ways. How long does it take to spot the subtle difference between a XYZControllerForEfficientHandlingOfStrings in one module and, somewhere a little more distant, XYZControllerForEfficientStorageOfStrings? The words have frightfully similar shapes.\n\nSpelling similar concepts similarly is information. Using inconsistent spellings is dis-information. With modern Java environments we enjoy automatic code completion. We write a few characters of a name and press some hotkey combination (if that) and are rewarded with a list of possible completions for that name. It is very helpful if names for very similar things sort together alphabetically and if the differences are very obvious, because the developer is likely to pick an object by name without seeing your copious comments or even the list of methods supplied by that class.\n\nA truly awful example of disinformative names would be the use of lower-case l or uppercase O as variable names, especially in combination. The problem, of course, is that they look almost entirely like the constants one and zero, respectively.\n\nint a = l;\nif (O == l)\na = O1;\nelsel = 01;\nThe reader may think this a contrivance, but we have examined code where such things were abundant. In one case the author of the code suggested using a different font so that the differences were more obvious, a solution that would have to be passed down to all future developers as oral tradition or in a written document. The problem is conquered with finality and without creating new work products by a simple renaming.\n\n# Make Meaningful Distinctions\n\nProgrammers create problems for themselves when they write code solely to satisfy a compiler or interpreter. For example, because you can\u2019t use the same name to refer to two different things in the same scope, you might be tempted to change one name in an arbitrary way. Sometimes this is done by misspelling one, leading to the surprising situation where correcting spelling errors leads to an inability to compile.2\n\nIt is not sufficient to add number series or noise words, even though the compiler is satisfied. If names must be different, then they should also mean something different.\n\nConsider, for example, the truly hideous practice of creating a variable named klass just because the name class was used for something else.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2389, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e889f6b-b42a-4fda-900b-3e17ea950b7e": {"__data__": {"id_": "8e889f6b-b42a-4fda-900b-3e17ea950b7e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "632c4dd1-7773-4864-b24f-7c34610c32ae", "node_type": "4", "metadata": {}, "hash": "c83db562b0eaa24ae0d2052836bd94841cb00f564d2eeef56692bc3562dbdf27", "class_name": "RelatedNodeInfo"}}, "text": "# Use Pronounceable Names\n\nNumber-series naming (a1, a2, .. aN) is the opposite of intentional naming. Such names are not disinformative\u2014they are noninformative; they provide no clue to the author\u2019s intention. Consider:\n\npublic static void copyChars(char a1[], char a2[]) {\nfor (int i = 0; i &lt; a1.length; i++) {a2[i] = a1[i];\n}\n}\nThis function reads much better when source and destination are used for the argument names.\n\nNoise words are another meaningless distinction. Imagine that you have a Product class. If you have another called ProductInfo or ProductData, you have made the names different without making them mean anything different. Info and Data are indistinct noise words like a, an, and the.\n\nNote that there is nothing wrong with using prefix conventions like a and the so long as they make a meaningful distinction. For example you might use a for all local variables and the for all function arguments.3 The problem comes in when you decide to call a variable theZork because you already have another variable named zork.\n\nNoise words are redundant. The word variable should never appear in a variable name. The word table should never appear in a table name. How is NameString better than Name? Would a Name ever be a floating point number? If so, it breaks an earlier rule about disinformation. Imagine finding one class named Customer and another named CustomerObject. What should you understand as the distinction? Which one will represent the best path to a customer\u2019s payment history?\n\nThere is an application we know of where this is illustrated. we\u2019ve changed the names to protect the guilty, but here\u2019s the exact form of the error:\n\ngetActiveAccount();\ngetActiveAccounts();\ngetActiveAccountInfo();\nHow are the programmers in this project supposed to know which of these functions to call?\n\nIn the absence of specific conventions, the variable moneyAmount is indistinguishable from money, customerInfo is indistinguishable from customer, accountData is indistinguishable from account, and theMessage is indistinguishable from message. Distinguish names in such a way that the reader knows what the differences offer.\n\n# Use Pronounceable Names\n\nHumans are good at words. A significant part of our brains is dedicated to the concept of words. And words are, by definition, pronounceable. It would be a shame not to take\n\n3. Uncle Bob used to do this in C++ but has given up the practice because modern IDEs make it unnecessary.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6b7e307-eeec-40e9-8f69-83e0b7f068dc": {"__data__": {"id_": "c6b7e307-eeec-40e9-8f69-83e0b7f068dc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "40f45d5c-e60f-4b20-9265-0f4306d35f27", "node_type": "4", "metadata": {}, "hash": "345ed853fef88142a2389016e49179aa07db451ff69629841980d092870e5a27", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 2: Meaningful Names\n\nadvantage of that huge portion of our brains that has evolved to deal with spoken lan-\n\nguage. So make your names pronounceable.\n\nIf you can\u2019t pronounce it, you can\u2019t discuss it without sounding like an idiot. \u201cWell, over here on the bee cee arr three cee enn tee we have a pee ess zee kyew int, see?\u201d This matters because programming is a social activity.\n\nA company I know has genymdhms (generation date, year, month, day, hour, minute, and second) so they walked around saying \u201cgen why emm dee aich emm ess\u201d. I have an annoying habit of pronouncing everything as written, so I started saying \u201cgen-yah-mudda-hims.\u201d It later was being called this by a host of designers and analysts, and we still sounded silly. But we were in on the joke, so it was fun. Fun or not, we were tolerating poor naming. New developers had to have the variables explained to them, and then they spoke about it in silly made-up words instead of using proper English terms. Compare\n\nclass DtaRcrd102 {\nprivate Date genymdhms;\nprivate Date modymdhms;\nprivate final String pszqint = \"102\";\n};/* ... */\n\nto\n\nclass Customer {\nprivate Date generationTimestamp;\nprivate Date modificationTimestamp;;\nprivate final String recordId = \"102\";\n};/* ... */\n\nIntelligent conversation is now possible: \u201cHey, Mikey, take a look at this record! The gen-\n\neration timestamp is set to tomorrow\u2019s date! How can that be?\u201d\n\n# Use Searchable Names\n\nSingle-letter names and numeric constants have a particular problem in that they are not easy to locate across a body of text.\n\nOne might easily grep for MAX_CLASSES_PER_STUDENT, but the number 7 could be more troublesome. Searches may turn up the digit as part of file names, other constant defini-\n\ntions, and in various expressions where the value is used with different intent. It is even worse when a constant is a long number and someone might have transposed digits, thereby creating a bug while simultaneously evading the programmer\u2019s search.\n\nLikewise, the name e is a poor choice for any variable for which a programmer might need to search. It is the most common letter in the English language and likely to show up in every passage of text in every program. In this regard, longer names trump shorter names, and any searchable name trumps a constant in code.\n\nMy personal preference is that single-letter names can ONLY be used as local vari-\n\nables inside short methods. The length of a name should correspond to the size of its scope.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4ca1b0a-500b-4476-9a83-3276567bd392": {"__data__": {"id_": "d4ca1b0a-500b-4476-9a83-3276567bd392", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6b2711c8-4963-4ad7-9f84-6520e8d477eb", "node_type": "4", "metadata": {}, "hash": "21490426ce7ec27a01954b57c41ff17fa31d55cbaab96de59f4ec20aaa4b8c51", "class_name": "RelatedNodeInfo"}}, "text": "# Avoid Encodings\n\n[N5]. If a variable or constant might be seen or used in multiple places in a body of code, it is imperative to give it a search-friendly name. Once again compare\n\nfor (int j=0; j<34; j++) {s += (t[j]*4)/5;}\n\nto\n\nint realDaysPerIdealDay = 4;\nconst int WORK_DAYS_PER_WEEK = 5;\nint sum = 0;\nfor (int j=0; j < NUMBER_OF_TASKS; j++) {\nint realTaskDays = taskEstimate[j] * realDaysPerIdealDay;\nint realTaskWeeks = (realdays / WORK_DAYS_PER_WEEK);\nsum += realTaskWeeks;\n}\n\nNote that sum, above, is not a particularly useful name but at least is searchable. The intentionally named code makes for a longer function, but consider how much easier it will be to find WORK_DAYS_PER_WEEK than to find all the places where 5 was used and filter the list down to just the instances with the intended meaning.\n\n# Avoid Encodings\n\nWe have enough encodings to deal with without adding more to our burden. Encoding type or scope information into names simply adds an extra burden of deciphering. It hardly seems reasonable to require each new employee to learn yet another encoding \u201clanguage\u201d in addition to learning the (usually considerable) body of code that they\u2019ll be working in. It is an unnecessary mental burden when trying to solve a problem. Encoded names are seldom pronounceable and are easy to mis-type.\n\n# Hungarian Notation\n\nIn days of old, when we worked in name-length-challenged languages, we violated this rule out of necessity, and with regret. Fortran forced encodings by making the first letter a code for the type. Early versions of BASIC allowed only a letter plus one digit. Hungarian Notation (HN) took this to a whole new level.\n\nHN was considered to be pretty important back in the Windows C API, when everything was an integer handle or a long pointer or a void pointer, or one of several implementations of \u201cstring\u201d (with different uses and attributes). The compiler did not check types in those days, so the programmers needed a crutch to help them remember the types.\n\nIn modern languages we have much richer type systems, and the compilers remember and enforce the types. What\u2019s more, there is a trend toward smaller classes and shorter functions so that people can usually see the point of declaration of each variable they\u2019re using.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23bd8f2f-c6a5-40b9-8bc0-b1ad880e7c3a": {"__data__": {"id_": "23bd8f2f-c6a5-40b9-8bc0-b1ad880e7c3a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "05204725-89af-40b6-939f-1036b943b279", "node_type": "4", "metadata": {}, "hash": "18793b5e15ca50c4a8b3d4f05c094059b278c9fdb24b860aefa53e12ee2d30d7", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 2: Meaningful Names\n\nJava programmers don\u2019t need type encoding. Objects are strongly typed, and editing environments have advanced such that they detect a type error long before you can run a compile! So nowadays HN and other forms of type encoding are simply impediments. They make it harder to change the name or type of a variable, function, or class. They make it harder to read the code. And they create the possibility that the encoding system will mislead the reader.\n\nPhoneNumber phoneString;\n// name not changed when type changed!\n\n# Member Prefixes\n\nYou also don\u2019t need to prefix member variables with m_ anymore. Your classes and functions should be small enough that you don\u2019t need them. And you should be using an editing environment that highlights or colorizes members to make them distinct.\n\npublic    class Part {\nprivate String m_dsc; // The textual description\nvoid   setName(String name) {\nm_dsc = name;\n}\n}\n_________________________________\npublic    class Part {\nString description;\nvoid   setDescription(String description) {\nthis.description = description;\n}\n}\nBesides, people quickly learn to ignore the prefix (or suffix) to see the meaningful part of the name. The more we read the code, the less we see the prefixes. Eventually the prefixes become unseen clutter and a marker of older code.\n\n# Interfaces and Implementations\n\nThese are sometimes a special case for encodings. For example, say you are building an ABSTRACT FACTORY for the creation of shapes. This factory will be an interface and will be implemented by a concrete class. What should you name them? IShapeFactory and ShapeFactory? I prefer to leave interfaces unadorned. The preceding I, so common in today\u2019s legacy wads, is a distraction at best and too much information at worst. I don\u2019t want my users knowing that I\u2019m handing them an interface. I just want them to know that it\u2019s a ShapeFactory. So if I must encode either the interface or the implementation, I choose the implementation. Calling it ShapeFactoryImp, or even the hideous CShapeFactory, is preferable to encoding the interface.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2098, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b06276b-ebf4-4f56-9780-bdd18b72de14": {"__data__": {"id_": "8b06276b-ebf4-4f56-9780-bdd18b72de14", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ab2b811a-9134-4cc1-a78e-6a25150b8ef6", "node_type": "4", "metadata": {}, "hash": "0f21e0578465196a227e0cc8d454a34cf74c4d96a08c73bff1be51d73aa65e15", "class_name": "RelatedNodeInfo"}}, "text": "# Method Names\n\n# Avoid Mental Mapping\n\nReaders shouldn\u2019t have to mentally translate your names into other names they already know. This problem generally arises from a choice to use neither problem domain terms nor solution domain terms.\n\nThis is a problem with single-letter variable names. Certainly a loop counter may be named i or j or k (though never l!) if its scope is very small and no other names can conflict with it. This is because those single-letter names for loop counters are traditional. However, in most other contexts a single-letter name is a poor choice; it\u2019s just a placeholder that the reader must mentally map to the actual concept. There can be no worse reason for using the name c than because a and b were already taken.\n\nIn general programmers are pretty smart people. Smart people sometimes like to show off their smarts by demonstrating their mental juggling abilities. After all, if you can reliably remember that r is the lower-cased version of the url with the host and scheme removed, then you must clearly be very smart.\n\nOne difference between a smart programmer and a professional programmer is that the professional understands that clarity is king. Professionals use their powers for good and write code that others can understand.\n\n# Class Names\n\nClasses and objects should have noun or noun phrase names like Customer, WikiPage, Account, and AddressParser. Avoid words like Manager, Processor, Data, or Info in the name of a class. A class name should not be a verb.\n\n# Method Names\n\nMethods should have verb or verb phrase names like postPayment, deletePage, or save. Accessors, mutators, and predicates should be named for their value and prefixed with get, set, and is according to the javabean standard.4\n\nstring name = employee.getName();\ncustomer.setName(\"mike\");\nif (paycheck.isPosted())...\nWhen constructors are overloaded, use static factory methods with names that describe the arguments. For example,\n\nComplex fulcrumPoint = Complex.FromRealNumber(23.0);\nis generally better than\n\nComplex fulcrumPoint = new Complex(23.0);\nConsider enforcing their use by making the corresponding constructors private.\n\n4. http://java.sun.com/products/javabeans/docs/spec.html", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2212, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05872280-e21f-4981-bbbd-1f25592546a3": {"__data__": {"id_": "05872280-e21f-4981-bbbd-1f25592546a3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7220c50f-5d88-45ec-8b10-9df96de543dd", "node_type": "4", "metadata": {}, "hash": "69484db8e800dcbabaa260f7dcb23d663456aa218d8b59c3c5cd078ea3203122", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 2: Meaningful Names\n\n# Don\u2019t Be Cute\n\nIf names are too clever, they will be memorable only to people who share the author\u2019s sense of humor, and only as long as these people remember the joke. Will they know what the function named HolyHandGrenade is supposed to do? Sure, it\u2019s cute, but maybe in this case DeleteItems might be a better name. Choose clarity over entertainment value.\n\nCuteness in code often appears in the form of colloquialisms or slang. For example, don\u2019t use the name whack() to mean kill(). Don\u2019t tell little culture-dependent jokes like eatMyShorts() to mean abort().\n\nSay what you mean. Mean what you say.\n\n# Pick One Word per Concept\n\nPick one word for one abstract concept and stick with it. For instance, it\u2019s confusing to have fetch, retrieve, and get as equivalent methods of different classes. How do you remember which method name goes with which class? Sadly, you often have to remember which company, group, or individual wrote the library or class in order to remember which term was used. Otherwise, you spend an awful lot of time browsing through headers and previous code samples.\n\nModern editing environments like Eclipse and IntelliJ provide context-sensitive clues, such as the list of methods you can call on a given object. But note that the list doesn\u2019t usually give you the comments you wrote around your function names and parameter lists. You are lucky if it gives the parameter names from function declarations. The function names have to stand alone, and they have to be consistent in order for you to pick the correct method without any additional exploration.\n\nLikewise, it\u2019s confusing to have a controller and a manager and a driver in the same code base. What is the essential difference between a DeviceManager and a Protocol-Controller? Why are both not controllers or both not managers? Are they both Drivers really? The name leads you to expect two objects that have very different type as well as having different classes.\n\nA consistent lexicon is a great boon to the programmers who must use your code.\n\n# Don\u2019t Pun\n\nAvoid using the same word for two purposes. Using the same term for two different ideas is essentially a pun.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2192, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61714b55-fcbe-4deb-8bb1-5e5db11a251f": {"__data__": {"id_": "61714b55-fcbe-4deb-8bb1-5e5db11a251f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2fe4195-c69f-40ee-998c-482f53041309", "node_type": "4", "metadata": {}, "hash": "ba3b45ac28eff46383573bdfaa3fb7108aeba54aee70b58d3d58ce5bbf360b2e", "class_name": "RelatedNodeInfo"}}, "text": "# Add Meaningful Context\n\nIf you follow the \u201cone word per concept\u201d rule, you could end up with many classes that have, for example, an add method. As long as the parameter lists and return values of the various add methods are semantically equivalent, all is well.\n\nHowever one might decide to use the word add for \u201cconsistency\u201d when he or she is not in fact adding in the same sense. Let\u2019s say we have many classes where add will create a new value by adding or concatenating two existing values. Now let\u2019s say we are writing a new class that has a method that puts its single parameter into a collection. Should we call this method add? It might seem consistent because we have so many other add methods, but in this case, the semantics are different, so we should use a name like insert or append instead. To call the new method add would be a pun.\n\nOur goal, as authors, is to make our code as easy as possible to understand. We want our code to be a quick skim, not an intense study. We want to use the popular paperback model whereby the author is responsible for making himself clear and not the academic model where it is the scholar\u2019s job to dig the meaning out of the paper.\n\n# Use Solution Domain Names\n\nRemember that the people who read your code will be programmers. So go ahead and use computer science (CS) terms, algorithm names, pattern names, math terms, and so forth. It is not wise to draw every name from the problem domain because we don\u2019t want our coworkers to have to run back and forth to the customer asking what every name means when they already know the concept by a different name.\n\nThe name AccountVisitor means a great deal to a programmer who is familiar with the VISITOR pattern. What programmer would not know what a JobQueue was? There are lots of very technical things that programmers have to do. Choosing technical names for those things is usually the most appropriate course.\n\n# Use Problem Domain Names\n\nWhen there is no \u201cprogrammer-eese\u201d for what you\u2019re doing, use the name from the problem domain. At least the programmer who maintains your code can ask a domain expert what it means.\n\nSeparating solution and problem domain concepts is part of the job of a good programmer and designer. The code that has more to do with problem domain concepts should have names drawn from the problem domain.\n\n# Add Meaningful Context\n\nThere are a few names which are meaningful in and of themselves\u2014most are not. Instead, you need to place names in context for your reader by enclosing them in well-named classes, functions, or namespaces. When all else fails, then prefixing the name may be necessary as a last resort.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2650, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40eef337-d053-47bd-a894-91e49b327fbb": {"__data__": {"id_": "40eef337-d053-47bd-a894-91e49b327fbb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9f1dfaa4-39d6-4cb4-8314-c9a3f0e2414b", "node_type": "4", "metadata": {}, "hash": "28b12002dcaa2f7e9e588507d6633065204ae3807238ac4ec36fa21b4a481ab3", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 2: Meaningful Names\n\nImagine that you have variables named firstName, lastName, street, houseNumber, city, state, and zipcode. Taken together it\u2019s pretty clear that they form an address. But what if you just saw the state variable being used alone in a method? Would you automatically infer that it was part of an address?\n\nYou can add context by using prefixes: addrFirstName, addrLastName, addrState, and so on. At least readers will understand that these variables are part of a larger structure. Of course, a better solution is to create a class named Address. Then, even the compiler knows that the variables belong to a bigger concept.\n\nConsider the method in Listing 2-1. Do the variables need a more meaningful context? The function name provides only part of the context; the algorithm provides the rest. Once you read through the function, you see that the three variables, number, verb, and pluralModifier, are part of the \u201cguess statistics\u201d message. Unfortunately, the context must be inferred. When you first look at the method, the meanings of the variables are opaque.\n\n# Listing 2-1\n\nVariables with unclear context.\n\nprivate void printGuessStatistics(char candidate, int count) {\nString number;\nString verb;\nString pluralModifier;\nif (count == 0) {\nnumber = \"no\";\nverb = \"are\";\npluralModifier = \"s\";\n} else if (count == 1) {\nnumber = \"1\";\nverb = \"is\";\npluralModifier = \"\";\n} else {\nnumber = Integer.toString(count);\nverb = \"are\";\npluralModifier = \"s\";\n}\nString guessMessage = String.format(\"There %s %s %s%s\", verb, number, candidate, pluralModifier);\nprint(guessMessage);\n}\n\nThe function is a bit too long and the variables are used throughout. To split the function into smaller pieces we need to create a GuessStatisticsMessage class and make the three variables fields of this class. This provides a clear context for the three variables. They are definitively part of the GuessStatisticsMessage. The improvement of context also allows the algorithm to be made much cleaner by breaking it into many smaller functions. (See Listing 2-2.)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2066, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "014e93b4-52eb-4fcc-9be0-6743b1bc7324": {"__data__": {"id_": "014e93b4-52eb-4fcc-9be0-6743b1bc7324", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c81fb79e-fa03-4623-b4dd-3b66c8d99f34", "node_type": "4", "metadata": {}, "hash": "a85c0eaef1bba568daf4284e1104c15a3fb36afaea2517f642ec5cbba7d80a7f", "class_name": "RelatedNodeInfo"}}, "text": "# Don\u2019t Add Gratuitous Context\n\n29\n\n# Listing 2-2\n\nVariables have a context.\n\npublic class GuessStatisticsMessage {\nprivate String number;\nprivate String verb;\nprivate String pluralModifier;\npublic String make(char candidate, int count) {\ncreatePluralDependentMessageParts(count);\nreturn String.format(\"There %s %s %s%s\",\nverb, number, candidate, pluralModifier );\n}\nprivate void createPluralDependentMessageParts(int count) {\nif thereAreNoLetters();(count == 0) {\n} else if (count == 1) {thereIsOneLetter();\n} else {thereAreManyLetters(count);\n}\n}\nprivate void thereAreManyLetters(int count) {\nnumber = Integer.toString(count);\nverb = \"are\";\npluralModifier = \"s\";\n}\nprivate void thereIsOneLetter() {\nnumber = \"1\";\nverb = \"is\";\npluralModifier = \"\";\n}\nprivate void thereAreNoLetters() {\nnumber = \"no\";\nverb = \"are\";\npluralModifier = \"s\";\n}\n}\n\n# Don\u2019t Add Gratuitous Context\n\nIn an imaginary application called \u201cGas Station Deluxe,\u201d it is a bad idea to prefix every class with GSD. Frankly, you are working against your tools. You type G and press the completion key and are rewarded with a mile-long list of every class in the system. Is that wise? Why make it hard for the IDE to help you?\n\nLikewise, say you invented a MailingAddress class in GSD\u2019s accounting module, and you named it GSDAccountAddress. Later, you need a mailing address for your customer contact application. Do you use GSDAccountAddress? Does it sound like the right name? Ten of 17 characters are redundant or irrelevant.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1492, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e740443a-7273-4fdd-8769-3d0bcfc4a878": {"__data__": {"id_": "e740443a-7273-4fdd-8769-3d0bcfc4a878", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1e351f9b-0751-4d08-925a-b8d31cb0b459", "node_type": "4", "metadata": {}, "hash": "4db0ea074a4b41d665c24a07dcb835d67962df72546df7d78d2b81058c757336", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 2: Meaningful Names\n\nShorter names are generally better than longer ones, so long as they are clear. Add no more context to a name than is necessary.\n\nThe names accountAddress and customerAddress are fine names for instances of the class Address but could be poor names for classes. Address is a fine name for a class. If I need to differentiate between MAC addresses, port addresses, and Web addresses, I might consider PostalAddress, MAC, and URI. The resulting names are more precise, which is the point of all naming.\n\n# Final Words\n\nThe hardest thing about choosing good names is that it requires good descriptive skills and a shared cultural background. This is a teaching issue rather than a technical, business, or management issue. As a result many people in this field don\u2019t learn to do it very well.\n\nPeople are also afraid of renaming things for fear that some other developers will object. We do not share that fear and find that we are actually grateful when names change (for the better). Most of the time we don\u2019t really memorize the names of classes and methods. We use the modern tools to deal with details like that so we can focus on whether the code reads like paragraphs and sentences, or at least like tables and data structure (a sentence isn\u2019t always the best way to display data). You will probably end up surprising someone when you rename, just like you might with any other code improvement. Don\u2019t let it stop you in your tracks.\n\nFollow some of these rules and see whether you don\u2019t improve the readability of your code. If you are maintaining someone else\u2019s code, use refactoring tools to help resolve these problems. It will pay off in the short term and continue to pay in the long run.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1729, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24dfebc2-3b46-4b4a-a056-b886ceeb4b21": {"__data__": {"id_": "24dfebc2-3b46-4b4a-a056-b886ceeb4b21", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0fd7efd7-c004-42d3-bf0f-852f6fa85f2b", "node_type": "4", "metadata": {}, "hash": "8a7ca61605688a4b70db2f4e92d2887d311db18a4ff9c6df2a20ce9ace7a5b92", "class_name": "RelatedNodeInfo"}}, "text": "# Functions\n\nIn the early days of programming we composed our systems of routines and subroutines. Then, in the era of Fortran and PL/1 we composed our systems of programs, subprograms, and functions. Nowadays only the function survives from those early days. Functions are the first line of organization in any program. Writing them well is the topic of this chapter.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 368, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6f99af6-ae92-4479-b733-6e9290ed4080": {"__data__": {"id_": "c6f99af6-ae92-4479-b733-6e9290ed4080", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "176bd1e5-ef37-47ee-aead-5c13208adca4", "node_type": "4", "metadata": {}, "hash": "5e839e2fd413476afbf13ef2605ed0223b3f89a122305c9bb24af69a61eefb10", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\nConsider the code in Listing 3-1. It\u2019s hard to find a long function in FitNesse,1 but after a bit of searching I came across this one. Not only is it long, but it\u2019s got duplicated code, lots of odd strings, and many strange and inobvious data types and APIs. See how much sense you can make of it in the next three minutes.\n\n# Listing 3-1\n\nHtmlUtil.java (FitNesse 20070619)\n\npublic static String testableHtml(PageData pageData,\nboolean includeSuiteSetup\n) throws Exception {\nWikiPage wikiPage = pageData.getWikiPage();\nStringBuffer buffer = new StringBuffer();\nif (includeSuiteSetup) {\nif (pageData.hasAttribute(\"Test\")) {\nWikiPage suiteSetup = PageCrawlerImpl.getInheritedPage(\nSuiteResponder.SUITE_SETUP_NAME, wikiPage\n);\nif (suiteSetup != null) {\nWikiPagePath pagePath = suiteSetup.getPageCrawler().getFullPath(suiteSetup);\nString pagePathName = PathParser.render(pagePath);\nbuffer.append(\"!include -setup .\").append(pagePathName)\n.append(\"\\n\");\n}\n}\nWikiPage setup = PageCrawlerImpl.getInheritedPage(\"SetUp\", wikiPage);\nif (setup != null) {\nWikiPagePath setupPath = wikiPage.getPageCrawler().getFullPath(setup);\nString setupPathName = PathParser.render(setupPath);\nbuffer.append(\"!include -setup .\").append(setupPathName)\n.append(\"\\n\");\n}\n}\nbuffer.append(pageData.getContent());\nif (pageData.hasAttribute(\"Test\")) {\nWikiPage teardown = PageCrawlerImpl.getInheritedPage(\"TearDown\", wikiPage);\nif (teardown != null) {\nWikiPagePath tearDownPath = wikiPage.getPageCrawler().getFullPath(teardown);\nString tearDownPathName = PathParser.render(tearDownPath);\nbuffer.append(\"\\n\").append(\"!include -teardown .\")\n.append(tearDownPathName)\n.append(\"\\n\");\n}\n}\n\n1. An open-source testing tool. www.fitnesse.org", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1724, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e249ad4b-db17-4109-a770-0695bfcff43b": {"__data__": {"id_": "e249ad4b-db17-4109-a770-0695bfcff43b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "923ad0da-023f-4746-a71b-fb4797a3966f", "node_type": "4", "metadata": {}, "hash": "8cc53193684dc5e21ae6bd635d34789955328bfa6bd518d7661b51ad4dccc76d", "class_name": "RelatedNodeInfo"}}, "text": "# Functions\n\n# Listing 3-1 (continued)\n\nHtmlUtil.java (FitNesse 20070619)\nif (includeSuiteSetup) {\nWikiPage suiteTeardown = PageCrawlerImpl.getInheritedPage(SuiteResponder.SUITE_TEARDOWN_NAME, wikiPage);\nif (suiteTeardown != null) {\nWikiPagePath pagePath = suiteTeardown.getPageCrawler().getFullPath(suiteTeardown);\nString pagePathName = PathParser.render(pagePath);\nbuffer.append(\"!include -teardown .\").append(pagePathName).append(\"\\n\");\n}\n}\npageData.setContent(buffer.toString());\nreturn pageData.getHtml();\n\nDo you understand the function after three minutes of study? Probably not. There\u2019s too much going on in there at too many different levels of abstraction. There are strange strings and odd function calls mixed in with doubly nested if statements controlled by flags.\n\nHowever, with just a few simple method extractions, some renaming, and a little restructuring, I was able to capture the intent of the function in the nine lines of Listing 3-2. See whether you can understand that in the next 3 minutes.\n\n# Listing 3-2\n\nHtmlUtil.java (refactored)\npublic static String renderPageWithSetupsAndTeardowns(PageData pageData, boolean isSuite) throws Exception {\nboolean isTestPage = pageData.hasAttribute(\"Test\");\nif (isTestPage) {\nWikiPage testPage = pageData.getWikiPage();\nStringBuffer newPageContent = new StringBuffer();\nincludeSetupPages(testPage, newPageContent, isSuite);\nnewPageContent.append(pageData.getContent());\nincludeTeardownPages(testPage, newPageContent, isSuite);\npageData.setContent(newPageContent.toString());\n}\nreturn pageData.getHtml();\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1568, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee98a5ed-3f1e-4a48-a166-0d00524fdf65": {"__data__": {"id_": "ee98a5ed-3f1e-4a48-a166-0d00524fdf65", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "813af12d-03eb-4008-9759-dd0351de5b8a", "node_type": "4", "metadata": {}, "hash": "e57be3ece9bbdb5f7d7c82ea3f338ca830265773413adc93893c2b0b5d8e58fb", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\nUnless you are a student of FitNesse, you probably don\u2019t understand all the details. Still, you probably understand that this function performs the inclusion of some setup and teardown pages into a test page and then renders that page into HTML. If you are familiar with JUnit,2 you probably realize that this function belongs to some kind of Web-based testing framework. And, of course, that is correct. Divining that information from Listing 3-2 is pretty easy, but it\u2019s pretty well obscured by Listing 3-1.\n\nSo what is it that makes a function like Listing 3-2 easy to read and understand? How can we make a function communicate its intent? What attributes can we give our functions that will allow a casual reader to intuit the kind of program they live inside?\n\n# Small!\n\nThe first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that. This is not an assertion that I can justify. I can\u2019t provide any references to research that shows that very small functions are better. What I can tell you is that for nearly four decades I have written functions of all different sizes. I\u2019ve written several nasty 3,000-line abominations. I\u2019ve written scads of functions in the 100 to 300 line range. And I\u2019ve written functions that were 20 to 30 lines long. What this experience has taught me, through long trial and error, is that functions should be very small.\n\nIn the eighties we used to say that a function should be no bigger than a screen-full. Of course we said that at a time when VT100 screens were 24 lines by 80 columns, and our editors used 4 lines for administrative purposes. Nowadays with a cranked-down font and a nice big monitor, you can fit 150 characters on a line and a 100 lines or more on a screen. Lines should not be 150 characters long. Functions should not be 100 lines long. Functions should hardly ever be 20 lines long.\n\nHow short should a function be? In 1999 I went to visit Kent Beck at his home in Oregon. We sat down and did some programming together. At one point he showed me a cute little Java/Swing program that he called Sparkle. It produced a visual effect on the screen very similar to the magic wand of the fairy godmother in the movie Cinderella. As you moved the mouse, the sparkles would drip from the cursor with a satisfying scintillation, falling to the bottom of the window through a simulated gravitational field. When Kent showed me the code, I was struck by how small all the functions were. I was used to functions in Swing programs that took up miles of vertical space. Every function in this program was just two, or three, or four lines long. Each was transparently obvious. Each told a story. And each led you to the next in a compelling order. That\u2019s how short your functions should be!3\n\n2. An open-source unit-testing tool for Java. www.junit.org\n\n3. I asked Kent whether he still had a copy, but he was unable to find one. I searched all my old computers too, but to no avail. All that is left now is my memory of that program.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5cae16c-59f4-4dcb-b1ec-8956958be84e": {"__data__": {"id_": "d5cae16c-59f4-4dcb-b1ec-8956958be84e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2c81484-d2b2-4ee4-bf20-6bd2c584649f", "node_type": "4", "metadata": {}, "hash": "0d8c2b5f96c787b58a51113ea1105ea550c6a8e5c07eba6237cb8d9143fbc284", "class_name": "RelatedNodeInfo"}}, "text": "# Do One Thing\n\nHow short should your functions be? They should usually be shorter than Listing 3-2! Indeed, Listing 3-2 should really be shortened to Listing 3-3.\n\n# Listing 3-3\n\nHtmlUtil.java (re-refactored)\n\npublic static String renderPageWithSetupsAndTeardowns(\nPageData pageData, boolean isSuite) throws Exception {\nif includeSetupAndTeardownPages(pageData, isSuite);(isTestPage(pageData))\nreturn pageData.getHtml();\n}\n\n# Blocks and Indenting\n\nThis implies that the blocks within if statements, else statements, while statements, and so on should be one line long. Probably that line should be a function call. Not only does this keep the enclosing function small, but it also adds documentary value because the function called within the block can have a nicely descriptive name.\n\nThis also implies that functions should not be large enough to hold nested structures. Therefore, the indent level of a function should not be greater than one or two. This, of course, makes the functions easier to read and understand.\n\n# Do One Thing\n\nIt should be very clear that Listing 3-1 is doing lots more than one thing. It\u2019s creating buffers, fetching pages, searching for inherited pages, rendering paths, appending arcane strings, and generating HTML, among other things. Listing 3-1 is very busy doing lots of different things. On the other hand, Listing 3-3 is doing one simple thing. It\u2019s including setups and teardowns into test pages.\n\nThe following advice has appeared in one form or another for 30 years or more.\n\nFUNCTIONS SHOULD DO ONE THING. THEY SHOULD DO IT WELL. THEY SHOULD DO IT ONLY.\n\nThe problem with this statement is that it is hard to know what \u201cone thing\u201d is. Does Listing 3-3 do one thing? It\u2019s easy to make the case that it\u2019s doing three things:\n\n1. Determining whether the page is a test page.\n2. If so, including setups and teardowns.\n3. Rendering the page in HTML.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1888, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a6eb1bc-31e0-4367-a79d-e8f7fd70aaf6": {"__data__": {"id_": "3a6eb1bc-31e0-4367-a79d-e8f7fd70aaf6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ceffbeec-91af-4bb9-b96f-e3887e270b05", "node_type": "4", "metadata": {}, "hash": "1246e583c12e5256f6731186caac4898df29541a81d611b3da02e940de2cb89c", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\nSo which is it? Is the function doing one thing or three things? Notice that the three steps of the function are one level of abstraction below the stated name of the function. We can describe the function by describing it as a brief TO paragraph:\n\nTO RenderPageWithSetupsAndTeardowns, we check to see whether the page is a test page and if so, we include the setups and teardowns. In either case we render the page in HTML.\n\nIf a function does only those steps that are one level below the stated name of the function, then the function is doing one thing. After all, the reason we write functions is to decompose a larger concept (in other words, the name of the function) into a set of steps at the next level of abstraction.\n\nIt should be very clear that Listing 3-1 contains steps at many different levels of abstraction. So it is clearly doing more than one thing. Even Listing 3-2 has two levels of abstraction, as proved by our ability to shrink it down. But it would be very hard to meaningfully shrink Listing 3-3. We could extract the if statement into a function named includeSetupsAndTeardownsIfTestPage, but that simply restates the code without changing the level of abstraction.\n\nSo, another way to know that a function is doing more than \u201cone thing\u201d is if you can extract another function from it with a name that is not merely a restatement of its implementation [G34].\n\n# Sections within Functions\n\nLook at Listing 4-7 on page 71. Notice that the generatePrimes function is divided into sections such as declarations, initializations, and sieve. This is an obvious symptom of doing more than one thing. Functions that do one thing cannot be reasonably divided into sections.\n\n# One Level of Abstraction per Function\n\nIn order to make sure our functions are doing \u201cone thing,\u201d we need to make sure that the statements within our function are all at the same level of abstraction. It is easy to see how Listing 3-1 violates this rule. There are concepts in there that are at a very high level of abstraction, such as getHtml(); others that are at an intermediate level of abstraction, such as: String pagePathName = PathParser.render(pagePath); and still others that are remarkably low level, such as: .append(\"\\n\").\n\nMixing levels of abstraction within a function is always confusing. Readers may not be able to tell whether a particular expression is an essential concept or a detail. Worse,\n\n# Footnote\n\n4. The LOGO language used the keyword \u201cTO\u201d in the same way that Ruby and Python use \u201cdef.\u201d So every function began with the word \u201cTO.\u201d This had an interesting effect on the way functions were designed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2649, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc9fb91b-e3ab-4a85-8d6b-d7de88910b9c": {"__data__": {"id_": "bc9fb91b-e3ab-4a85-8d6b-d7de88910b9c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c71c2253-051c-4134-b3bc-38034913fdfa", "node_type": "4", "metadata": {}, "hash": "f902c540701451a11c139f413f07afe6aa582abbf034f3ee49916d68f1aa0f02", "class_name": "RelatedNodeInfo"}}, "text": "# Switch Statements\n\nlike broken windows, once details are mixed with essential concepts, more and more details tend to accrete within the function.\n\n# Reading Code from Top to Bottom: The Stepdown Rule\n\nWe want the code to read like a top-down narrative. We want every function to be followed by those at the next level of abstraction so that we can read the program, descending one level of abstraction at a time as we read down the list of functions. I call this The Step-down Rule.\n\nTo say this differently, we want to be able to read the program as though it were a set of TO paragraphs, each of which is describing the current level of abstraction and referencing subsequent TO paragraphs at the next level down.\n\nTo include the setups and teardowns, we include setups, then we include the test page content, and then we include the teardowns.\n\nTo include the setups, we include the suite setup if this is a suite, then we include the regular setup.\n\nTo include the suite setup, we search the parent hierarchy for the \u201cSuiteSetUp\u201d page and add an include statement with the path of that page.\n\nTo search the parent...\n\nIt turns out to be very difficult for programmers to learn to follow this rule and write functions that stay at a single level of abstraction. But learning this trick is also very important. It is the key to keeping functions short and making sure they do \u201cone thing.\u201d Making the code read like a top-down set of TO paragraphs is an effective technique for keeping the abstraction level consistent.\n\nTake a look at Listing 3-7 at the end of this chapter. It shows the whole testableHtml function refactored according to the principles described here. Notice how each function introduces the next, and each function remains at a consistent level of abstraction.\n\n# Switch Statements\n\nIt\u2019s hard to make a small switch statement. Even a switch statement with only two cases is larger than I\u2019d like a single block or function to be. It\u2019s also hard to make a switch statement that does one thing. By their nature, switch statements always do N things. Unfortunately we can\u2019t always avoid switch statements, but we can make sure that each switch statement is buried in a low-level class and is never repeated. We do this, of course, with polymorphism.\n\n5.  [KP78], p. 37.\n\n6.  And, of course, I include if/else chains in this.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2345, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "146c47e8-2e2c-43d4-8296-b315db068a02": {"__data__": {"id_": "146c47e8-2e2c-43d4-8296-b315db068a02", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "004103bd-da0c-4e66-9a80-4004789b6d8b", "node_type": "4", "metadata": {}, "hash": "5532e2837d2d3d3015f2565af8cddbb9f22e8c29eb81c14c0420ede1e6d7e165", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\nConsider Listing 3-4. It shows just one of the operations that might depend on the type of employee.\n\n# Listing 3-4\n\nPayroll.java\n\npublic              Money calculatePay(Employee e)\nthrows              InvalidEmployeeType {\nswitch (e.type) {\ncase COMMISSIONED:\nreturn calculateCommissionedPay(e);\ncase HOURLY:\nreturn calculateHourlyPay(e);\ncase SALARIED:\nreturn calculateSalariedPay(e);\ndefault:\nthrow new InvalidEmployeeType(e.type);\n}\n}\n\nThere are several problems with this function. First, it\u2019s large, and when new employee types are added, it will grow. Second, it very clearly does more than one thing. Third, it violates the Single Responsibility Principle7 (SRP) because there is more than one reason for it to change. Fourth, it violates the Open Closed Principle8 (OCP) because it must change whenever new types are added. But possibly the worst problem with this function is that there are an unlimited number of other functions that will have the same structure. For example we could have isPayday(Employee e, Date date), or deliverPay(Employee e, Money pay), or a host of others. All of which would have the same deleterious structure.\n\nThe solution to this problem (see Listing 3-5) is to bury the switch statement in the basement of an ABSTRACT FACTORY9, and never let anyone see it. The factory will use the switch statement to create appropriate instances of the derivatives of Employee, and the various functions, such as calculatePay, isPayday, and deliverPay, will be dispatched polymorphically through the Employee interface.\n\nMy general rule for switch statements is that they can be tolerated if they appear only once, are used to create polymorphic objects, and are hidden behind an inheritance.\n\n7. http://en.wikipedia.org/wiki/Single_responsibility_principle\n\nb. http://www.objectmentor.com/resources/articles/srp.pdf\n\n8. http://en.wikipedia.org/wiki/Open/closed_principle\n\nb. http://www.objectmentor.com/resources/articles/ocp.pdf\n\n9. [GOF].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0decbf09-ee2b-4319-8289-530fd171b8d0": {"__data__": {"id_": "0decbf09-ee2b-4319-8289-530fd171b8d0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "12e9ffce-bf9c-4bcf-b425-be6a36225461", "node_type": "4", "metadata": {}, "hash": "4307e6cde5cad4683553ef7371f9736ab6ed5fc8a24a82641cf798e7ebc04e41", "class_name": "RelatedNodeInfo"}}, "text": "# Use Descriptive Names\n\n# Listing 3-5\n\n# Employee and Factory\n\npublic abstract class Employee {\npublic abstract boolean isPayday();\npublic abstract Money calculatePay();\npublic abstract void deliverPay(Money pay);\n}\n\npublic interface EmployeeFactory {\npublic Employee makeEmployee(EmployeeRecord r) throws InvalidEmployeeType;\n}\n\npublic class EmployeeFactoryImpl implements EmployeeFactory {\npublic Employee makeEmployee(EmployeeRecord r) throws InvalidEmployeeType {\nswitch (r.type) {\ncase COMMISSIONED:\nreturn new CommissionedEmployee(r);\ncase HOURLY:\nreturn new HourlyEmployee(r);\ncase SALARIED:\nreturn new SalariedEmployee(r);\ndefault:\nthrow new InvalidEmployeeType(r.type);\n}\n}\n}\n\nrelationship so that the rest of the system can\u2019t see them [G23]. Of course every circumstance is unique, and there are times when I violate one or more parts of that rule.\n\nIn Listing 3-7 I changed the name of our example function from testableHtml to SetupTeardownIncluder.render. This is a far better name because it better describes what the function does. I also gave each of the private methods an equally descriptive name such as isTestable or includeSetupAndTeardownPages. It is hard to overestimate the value of good names. Remember Ward\u2019s principle: \u201cYou know you are working on clean code when each routine turns out to be pretty much what you expected.\u201d Half the battle to achieving that principle is choosing good names for small functions that do one thing.\n\nThe smaller and more focused a function is, the easier it is to choose a descriptive name. Don\u2019t be afraid to make a name long. A long descriptive name is better than a short enigmatic name. A long descriptive name is better than a long descriptive comment. Use a naming convention that allows multiple words to be easily read in the function names, and then make use of those multiple words to give the function a name that says what it does.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1903, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3eaf3ec7-a8fe-4c5b-8cbe-553cce0707d8": {"__data__": {"id_": "3eaf3ec7-a8fe-4c5b-8cbe-553cce0707d8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "670691da-1af7-4a7e-8eaf-303497c79377", "node_type": "4", "metadata": {}, "hash": "0e5566c7c07e2984a003d1b556c2ac19d7f7103fa375c55145e89d20b891927a", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\nDon\u2019t be afraid to spend time choosing a name. Indeed, you should try several different names and read the code with each in place. Modern IDEs like Eclipse or IntelliJ make it trivial to change names. Use one of those IDEs and experiment with different names until you find one that is as descriptive as you can make it.\n\nChoosing descriptive names will clarify the design of the module in your mind and help you to improve it. It is not at all uncommon that hunting for a good name results in a favorable restructuring of the code.\n\nBe consistent in your names. Use the same phrases, nouns, and verbs in the function names you choose for your modules. Consider, for example, the names includeSetupAndTeardownPages, includeSetupPages, includeSuiteSetupPage, and includeSetupPage. The similar phraseology in those names allows the sequence to tell a story. Indeed, if I showed you just the sequence above, you\u2019d ask yourself: \u201cWhat happened to includeTeardownPages, includeSuiteTeardownPage, and includeTeardownPage?\u201d How\u2019s that for being \u201c. . . pretty much what you expected.\u201d\n\n# Function Arguments\n\nThe ideal number of arguments for a function is zero (niladic). Next comes one (monadic), followed closely by two (dyadic). Three arguments (triadic) should be avoided where possible. More than three (polyadic) requires very special justification\u2014and then shouldn\u2019t be used anyway.\n\nArguments are hard. They take a lot of conceptual power. That\u2019s why I got rid of almost all of them from the example. Consider, for instance, the StringBuffer in the example. We could have passed it around as an argument rather than making it an instance variable, but then our readers would have had to interpret it each time they saw it. When you are reading the story told by the module, includeSetupPage() is easier to understand than includeSetupPageInto(newPageContent). The argument is at a different level of abstraction than the function name and forces you to know a detail (in other words, StringBuffer) that isn\u2019t particularly important at that point.\n\nArguments are even harder from a testing point of view. Imagine the difficulty of writing all the test cases to ensure that all the various combinations of arguments work properly. If there are no arguments, this is trivial. If there\u2019s one argument, it\u2019s not too hard. With two arguments the problem gets a bit more challenging. With more than two arguments, testing every combination of appropriate values can be daunting.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2496, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d820291-7456-429a-a591-4a541f2fe340": {"__data__": {"id_": "2d820291-7456-429a-a591-4a541f2fe340", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "46173870-5ae4-4ae0-8d4a-09c3effe2ca5", "node_type": "4", "metadata": {}, "hash": "7a40b1faed65807dabd47d0700320dc466e5500da96c3b678d92cb3c8c884477", "class_name": "RelatedNodeInfo"}}, "text": "# Function Arguments\n\nOutput arguments are harder to understand than input arguments. When we read a function, we are used to the idea of information going in to the function through arguments and out through the return value. We don\u2019t usually expect information to be going out through the arguments. So output arguments often cause us to do a double-take.\n\nOne input argument is the next best thing to no arguments. SetupTeardownIncluder.render(pageData) is pretty easy to understand. Clearly we are going to render the data in the pageData object.\n\n# Common Monadic Forms\n\nThere are two very common reasons to pass a single argument into a function. You may be asking a question about that argument, as in boolean fileExists(\"MyFile\"). Or you may be operating on that argument, transforming it into something else and returning it. For example, InputStream fileOpen(\"MyFile\") transforms a file name String into an InputStream return value. These two uses are what readers expect when they see a function. You should choose names that make the distinction clear, and always use the two forms in a consistent context. (See Command Query Separation below.)\n\nA somewhat less common, but still very useful form for a single argument function, is an event. In this form there is an input argument but no output argument. The overall program is meant to interpret the function call as an event and use the argument to alter the state of the system, for example, void passwordAttemptFailedNtimes(int attempts). Use this form with care. It should be very clear to the reader that this is an event. Choose names and contexts carefully.\n\nTry to avoid any monadic functions that don\u2019t follow these forms, for example, void includeSetupPageInto(StringBuffer pageText). Using an output argument instead of a return value for a transformation is confusing. If a function is going to transform its input argument, the transformation should appear as the return value. Indeed, StringBuffer transform(StringBuffer in) is better than void transform-(StringBuffer out), even if the implementation in the first case simply returns the input argument. At least it still follows the form of a transformation.\n\n# Flag Arguments\n\nFlag arguments are ugly. Passing a boolean into a function is a truly terrible practice. It immediately complicates the signature of the method, loudly proclaiming that this function does more than one thing. It does one thing if the flag is true and another if the flag is false!\n\nIn Listing 3-7 we had no choice because the callers were already passing that flag in, and I wanted to limit the scope of refactoring to the function and below. Still, the method call render(true) is just plain confusing to a poor reader. Mousing over the call and seeing render(boolean isSuite) helps a little, but not that much. We should have split the function into two: renderForSuite() and renderForSingleTest().", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2908, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b3ecda9-f2b1-4a9f-b6eb-957bb72380a3": {"__data__": {"id_": "8b3ecda9-f2b1-4a9f-b6eb-957bb72380a3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9600eabe-14f3-4a6a-b7b6-ae0f158c1794", "node_type": "4", "metadata": {}, "hash": "607d8fefe265bf1b5b28fb5343a47c1080ed1055481530dd16d82395f58dca34", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\n# Dyadic Functions\n\nA function with two arguments is harder to understand than a monadic function. For example, writeField(name) is easier to understand than writeField(output-Stream, name). Though the meaning of both is clear, the first glides past the eye, easily depositing its meaning. The second requires a short pause until we learn to ignore the first parameter. And that, of course, eventually results in problems because we should never ignore any part of code. The parts we ignore are where the bugs will hide.\n\nThere are times, of course, where two arguments are appropriate. For example, Point p = new Point(0,0); is perfectly reasonable. Cartesian points naturally take two arguments. Indeed, we\u2019d be very surprised to see new Point(0). However, the two arguments in this case are ordered components of a single value! Whereas output-Stream and name have neither a natural cohesion, nor a natural ordering.\n\nEven obvious dyadic functions like assertEquals(expected, actual) are problematic. How many times have you put the actual where the expected should be? The two arguments have no natural ordering. The expected, actual ordering is a convention that requires practice to learn.\n\nDyads aren\u2019t evil, and you will certainly have to write them. However, you should be aware that they come at a cost and should take advantage of what mechanisms may be available to you to convert them into monads. For example, you might make the writeField method a member of outputStream so that you can say outputStream.writeField(name). Or you might make the outputStream a member variable of the current class so that you don\u2019t have to pass it. Or you might extract a new class like FieldWriter that takes the outputStream in its constructor and has a write method.\n\n# Triads\n\nFunctions that take three arguments are significantly harder to understand than dyads. The issues of ordering, pausing, and ignoring are more than doubled. I suggest you think very carefully before creating a triad.\n\nFor example, consider the common overload of assertEquals that takes three arguments: assertEquals(message, expected, actual). How many times have you read the message and thought it was the expected? I have stumbled and paused over that particular triad many times. In fact, every time I see it, I do a double-take and then learn to ignore the message.\n\nOn the other hand, here is a triad that is not quite so insidious: assertEquals(1.0, amount, .001). Although this still requires a double-take, it\u2019s one that\u2019s worth taking. It\u2019s always good to be reminded that equality of floating point values is a relative thing.\n\n10. I just finished refactoring a module that used the dyadic form. I was able to make the outputStream a field of the class and convert all the writeField calls to the monadic form. The result was much cleaner.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af83d168-1a9e-4679-9a50-93adbc0893aa": {"__data__": {"id_": "af83d168-1a9e-4679-9a50-93adbc0893aa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2e835c08-7ce7-4684-a11b-16299b20f791", "node_type": "4", "metadata": {}, "hash": "33020b03f2063b4ddce0c6f8262ff0e68b20453777198e1d88c3af38aaa1debd", "class_name": "RelatedNodeInfo"}}, "text": "# Function Arguments\n\n# Argument Objects\n\nWhen a function seems to need more than two or three arguments, it is likely that some of those arguments ought to be wrapped into a class of their own. Consider, for example, the difference between the two following declarations:\n\nCircle makeCircle(double x, double y, double radius);\nCircle makeCircle(Point center, double radius);\n\nReducing the number of arguments by creating objects out of them may seem like cheating, but it\u2019s not. When groups of variables are passed together, the way x and y are in the example above, they are likely part of a concept that deserves a name of its own.\n\n# Argument Lists\n\nSometimes we want to pass a variable number of arguments into a function. Consider, for example, the String.format method:\n\nString.format(\"%s worked %.2f hours.\", name, hours);\n\nIf the variable arguments are all treated identically, as they are in the example above, then they are equivalent to a single argument of type List. By that reasoning, String.format is actually dyadic. Indeed, the declaration of String.format as shown below is clearly dyadic.\n\npublic String format(String format, Object... args)\n\nSo all the same rules apply. Functions that take variable arguments can be monads, dyads, or even triads. But it would be a mistake to give them more arguments than that.\n\nvoid monad(Integer... args);\nvoid dyad(String name, Integer... args);\nvoid triad(String name, int count, Integer... args);\n\n# Verbs and Keywords\n\nChoosing good names for a function can go a long way toward explaining the intent of the function and the order and intent of the arguments. In the case of a monad, the function and argument should form a very nice verb/noun pair. For example, write(name) is very evocative. Whatever this \u201cname\u201d thing is, it is being \u201cwritten.\u201d An even better name might be writeField(name), which tells us that the \u201cname\u201d thing is a \u201cfield.\u201d\n\nThis last is an example of the keyword form of a function name. Using this form we encode the names of the arguments into the function name. For example, assertEquals might be better written as assertExpectedEqualsActual(expected, actual). This strongly mitigates the problem of having to remember the ordering of the arguments.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cbd7e16d-9c19-4672-8223-247e7d2c95f4": {"__data__": {"id_": "cbd7e16d-9c19-4672-8223-247e7d2c95f4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1eac3ece-fb94-4721-a205-5c11b6da8905", "node_type": "4", "metadata": {}, "hash": "6deb000ccc32e99ca37071af505205c075e0c2bfa913f40b1c14fdb33dee9191", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\nHave No Side Effects\n\nSide effects are lies. Your function promises to do one thing, but it also does other hidden things. Sometimes it will make unexpected changes to the variables of its own class. Sometimes it will make them to the parameters passed into the function or to system globals. In either case they are devious and damaging mistruths that often result in strange temporal couplings and order dependencies.\n\nConsider, for example, the seemingly innocuous function in Listing 3-6. This function uses a standard algorithm to match a userName to a password. It returns true if they match and false if anything goes wrong. But it also has a side effect. Can you spot it?\n\n# Listing 3-6\n\nUserValidator.java\n\npublic class UserValidator {\nprivate Cryptographer cryptographer;\n\npublic boolean checkPassword(String userName, String password) {\nUser user = UserGateway.findByName(userName);\nif (user != User.NULL) {\nString codedPhrase = user.getPhraseEncodedByPassword();\nString phrase = cryptographer.decrypt(codedPhrase, password);\nif (\"Valid Password\".equals(phrase)) {\nSession.initialize();\nreturn true;\n}\n}\nreturn false;\n}\n}\n\nThe side effect is the call to Session.initialize(), of course. The checkPassword function, by its name, says that it checks the password. The name does not imply that it initializes the session. So a caller who believes what the name of the function says runs the risk of erasing the existing session data when he or she decides to check the validity of the user.\n\nThis side effect creates a temporal coupling. That is, checkPassword can only be called at certain times (in other words, when it is safe to initialize the session). If it is called out of order, session data may be inadvertently lost. Temporal couplings are confusing, especially when hidden as a side effect. If you must have a temporal coupling, you should make it clear in the name of the function. In this case we might rename the function checkPasswordAndInitializeSession, though that certainly violates \u201cDo one thing.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "225f78b1-73d2-4b98-85eb-96b7d3859b47": {"__data__": {"id_": "225f78b1-73d2-4b98-85eb-96b7d3859b47", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0c03699-ef6b-41be-bce9-ba88c27984ae", "node_type": "4", "metadata": {}, "hash": "d6c99dac4527c6f1460c520eaa19b6ea1021a9366d79cccf42cb0515379b97c9", "class_name": "RelatedNodeInfo"}}, "text": "# Command Query Separation\n\n# Output Arguments\n\nArguments are most naturally interpreted as inputs to a function. If you have been programming for more than a few years, I\u2019m sure you\u2019ve done a double-take on an argument that was actually an output rather than an input. For example:\n\nappendFooter(s);\nDoes this function append s as the footer to something? Or does it append some footer to s? Is s an input or an output? It doesn\u2019t take long to look at the function signature and see:\n\npublic void appendFooter(StringBuffer report)\nThis clarifies the issue, but only at the expense of checking the declaration of the function. Anything that forces you to check the function signature is equivalent to a double-take. It\u2019s a cognitive break and should be avoided.\n\nIn the days before object oriented programming it was sometimes necessary to have output arguments. However, much of the need for output arguments disappears in OO languages because this is intended to act as an output argument. In other words, it would be better for appendFooter to be invoked as:\n\nreport.appendFooter();\nIn general output arguments should be avoided. If your function must change the state of something, have it change the state of its owning object.\n\n# Command Query Separation\n\nFunctions should either do something or answer something, but not both. Either your function should change the state of an object, or it should return some information about that object. Doing both often leads to confusion. Consider, for example, the following function:\n\npublic boolean set(String attribute, String value);\nThis function sets the value of a named attribute and returns true if it is successful and false if no such attribute exists. This leads to odd statements like this:\n\nif (set(\"username\", \"unclebob\"))...\nImagine this from the point of view of the reader. What does it mean? Is it asking whether the \u201cusername\u201d attribute was previously set to \u201cunclebob\u201d? Or is it asking whether the \u201cusername\u201d attribute was successfully set to \u201cunclebob\u201d? It\u2019s hard to infer the meaning from the call because it\u2019s not clear whether the word \u201cset\u201d is a verb or an adjective.\n\nThe author intended set to be a verb, but in the context of the if statement it feels like an adjective. So the statement reads as \u201cIf the username attribute was previously set to unclebob\u201d and not \u201cset the username attribute to unclebob and if that worked then. . . .\u201d We", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2415, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad3fada0-46f9-4615-9334-bae6c63c3c76": {"__data__": {"id_": "ad3fada0-46f9-4615-9334-bae6c63c3c76", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d2f14d70-ac9e-433b-9135-598d8ee0d05b", "node_type": "4", "metadata": {}, "hash": "3fd2f717988211c1926c6bd0c0095feefae97d20bba3b3e680433eba466c8190", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\ncould try to resolve this by renaming the set function to setAndCheckIfExists, but that doesn\u2019t much help the readability of the if statement. The real solution is to separate the command from the query so that the ambiguity cannot occur.\n\nif (attributeExists(\"username\")) {\nsetAttribute(\"username\", \"unclebob\");\n...\n}\n\n# Prefer Exceptions to Returning Error Codes\n\nReturning error codes from command functions is a subtle violation of command query separation. It promotes commands being used as expressions in the predicates of if statements.\n\nif (deletePage(page) == E_OK)\n\nThis does not suffer from verb/adjective confusion but does lead to deeply nested structures. When you return an error code, you create the problem that the caller must deal with the error immediately.\n\nif (deletePage(page) == E_OK) {\nif (registry.deleteReference(page.name) == E_OK) {\nif logger.log(\"page deleted\");(configKeys.deleteKey(page.name.makeKey()) == E_OK){\n} else {\nlogger.log(\"configKey not deleted\");\n}\n} else {\nlogger.log(\"deleteReference from registry failed\");\n}\n} else {\nlogger.log(\"delete failed\");\nreturn E_ERROR;\n}\n\nOn the other hand, if you use exceptions instead of returned error codes, then the error processing code can be separated from the happy path code and can be simplified:\n\ntry {\ndeletePage(page);\nregistry.deleteReference(page.name);\nconfigKeys.deleteKey(page.name.makeKey());\n}\ncatch (Exception e) {\nlogger.log(e.getMessage());\n}\n\n# Extract Try/Catch Blocks\n\nTry/catch blocks are ugly in their own right. They confuse the structure of the code and mix error processing with normal processing. So it is better to extract the bodies of the try and catch blocks out into functions of their own.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1728, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eebb379e-b1a8-424d-878e-6199f178f4ee": {"__data__": {"id_": "eebb379e-b1a8-424d-878e-6199f178f4ee", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "54aff9d7-30e0-418a-9163-0f3af7f7c4f6", "node_type": "4", "metadata": {}, "hash": "64af7a2aa5320371201fb2a4ea51220398c1f18ba5e4ee180135c4189657b6fd", "class_name": "RelatedNodeInfo"}}, "text": "# Prefer Exceptions to Returning Error Codes\n\npublic void delete(Page page) {try {\n\ndeletePageAndAllReferences(page);\n\n} catch (Exception e) {logError(e);}\n\n}\n\nprivate void deletePageAndAllReferences(Page page) throws Exception {\n\ndeletePage(page);\n\nregistry.deleteReference(page.name);\n\nconfigKeys.deleteKey(page.name.makeKey());\n\n}\n\nprivate void logError(Exception e) {logger.log(e.getMessage());}\n\nIn the above, the delete function is all about error processing. It is easy to understand and then ignore. The deletePageAndAllReferences function is all about the processes of fully deleting a page. Error handling can be ignored. This provides a nice separation that makes the code easier to understand and modify.\n\n# Error Handling Is One Thing\n\nFunctions should do one thing. Error handling is one thing. Thus, a function that handles errors should do nothing else. This implies (as in the example above) that if the keyword try exists in a function, it should be the very first word in the function and that there should be nothing after the catch/finally blocks.\n\n# The Error.java Dependency Magnet\n\nReturning error codes usually implies that there is some class or enum in which all the error codes are defined.\n\npublic enum Error {\n\nOK,\n\nINVALID,\n\nNO_SUCH,\n\nLOCKED,\n\nOUT_OF_RESOURCES,\n\nWAITING_FOR_EVENT;\n\n}\n\nClasses like this are a dependency magnet; many other classes must import and use them. Thus, when the Error enum changes, all those other classes need to be recompiled and redeployed.11 This puts a negative pressure on the Error class. Programmers don\u2019t want\n\n11. Those who felt that they could get away without recompiling and redeploying have been found\u2014and dealt with.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1689, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5ae41f7-e338-4baf-863c-601d32317223": {"__data__": {"id_": "b5ae41f7-e338-4baf-863c-601d32317223", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f39da648-ebd1-4c28-8159-9a91852f37cd", "node_type": "4", "metadata": {}, "hash": "3594432ca7cd07ffef1c1973249f1dc5d28a521f15f913ee726704ef9ff797f7", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\nto add new errors because then they have to rebuild and redeploy everything. So they reuse old error codes instead of adding new ones. the exception class. They can be added without forcing any recompilation or redeployment.12 When you use exceptions rather than error codes, then new exceptions are derivatives of the exception class.\n\n# Don\u2019t Repeat Yourself\n\nLook back at Listing 3-1 carefully and you will notice that there is an algorithm that gets repeated four times, once for each of the SetUp, SuiteSetUp, TearDown, and SuiteTearDown cases. It\u2019s not easy to spot this duplication because the four instances are intermixed with other code and aren\u2019t uniformly duplicated. Still, the duplication is a problem because it bloats the code and will require four-fold modification should the algorithm ever have to change. It is also a four-fold opportunity for an error of omission.\n\nThis duplication was remedied by the include method in Listing 3-7. Read through that code again and notice how the readability of the whole module is enhanced by the reduction of that duplication.\n\nDuplication may be the root of all evil in software. Many principles and practices have been created for the purpose of controlling or eliminating it. Consider, for example, that all of Codd\u2019s database normal forms serve to eliminate duplication in data. Consider also how object-oriented programming serves to concentrate code into base classes that would otherwise be redundant. Structured programming, Aspect Oriented Programming, Component Oriented Programming, are all, in part, strategies for eliminating duplication. It would appear that since the invention of the subroutine, innovations in software development have been an ongoing attempt to eliminate duplication from our source code.\n\n# Structured Programming\n\nSome programmers follow Edsger Dijkstra\u2019s rules of structured programming.14 Dijkstra said that every function, and every block within a function, should have one entry and one exit. Following these rules means that there should only be one return statement in a function, no break or continue statements in a loop, and never, ever, any goto statements.\n\n12. This is an example of the Open Closed Principle (OCP) [PPP02].\n\n13. The DRY principle. [PRAG].\n\n14. [SP72].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2299, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91c28aa2-beb6-4df8-b076-87ff1e59ee52": {"__data__": {"id_": "91c28aa2-beb6-4df8-b076-87ff1e59ee52", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "93050b94-e078-4e05-a9aa-02f79c8abdb0", "node_type": "4", "metadata": {}, "hash": "2109adef5c9fc28018a3d30c8f7a125fa9250338720105fe7215d905d373da93", "class_name": "RelatedNodeInfo"}}, "text": "# Conclusion\n\nWhile we are sympathetic to the goals and disciplines of structured programming, those rules serve little benefit when functions are very small. It is only in larger functions that such rules provide significant benefit.\n\nSo if you keep your functions small, then the occasional multiple return, break, or continue statement does no harm and can sometimes even be more expressive than the single-entry, single-exit rule. On the other hand, goto only makes sense in large functions, so it should be avoided.\n\n# How Do You Write Functions Like This?\n\nWriting software is like any other kind of writing. When you write a paper or an article, you get your thoughts down first, then you massage it until it reads well. The first draft might be clumsy and disorganized, so you wordsmith it and restructure it and refine it until it reads the way you want it to read.\n\nWhen I write functions, they come out long and complicated. They have lots of indenting and nested loops. They have long argument lists. The names are arbitrary, and there is duplicated code. But I also have a suite of unit tests that cover every one of those clumsy lines of code.\n\nSo then I massage and refine that code, splitting out functions, changing names, eliminating duplication. I shrink the methods and reorder them. Sometimes I break out whole classes, all the while keeping the tests passing.\n\nIn the end, I wind up with functions that follow the rules I\u2019ve laid down in this chapter. I don\u2019t write them that way to start. I don\u2019t think anyone could.\n\n# Conclusion\n\nEvery system is built from a domain-specific language designed by the programmers to describe that system. Functions are the verbs of that language, and classes are the nouns. This is not some throwback to the hideous old notion that the nouns and verbs in a requirements document are the first guess of the classes and functions of a system. Rather, this is a much older truth. The art of programming is, and has always been, the art of language design.\n\nMaster programmers think of systems as stories to be told rather than programs to be written. They use the facilities of their chosen programming language to construct a much richer and more expressive language that can be used to tell that story. Part of that domain-specific language is the hierarchy of functions that describe all the actions that take place within that system. In an artful act of recursion those actions are written to use the very domain-specific language they define to tell their own small part of the story.\n\nThis chapter has been about the mechanics of writing functions well. If you follow the rules herein, your functions will be short, well named, and nicely organized. But", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2714, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10468574-c4e4-44e7-b364-d36567ece64f": {"__data__": {"id_": "10468574-c4e4-44e7-b364-d36567ece64f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "49916695-9d7b-49df-bada-5f3dadb8c7ff", "node_type": "4", "metadata": {}, "hash": "8eeb2383647fd8c4d843941a11dbdd6c2177d6020c73e04cffe30463888b7bfb", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\nnever forget that your real goal is to tell the story of the system, and that the functions you write need to fit cleanly together into a clear and precise language to help you with that telling.\n\n# SetupTeardownIncluder\n\nListing 3-7\nSetupTeardownIncluder.java\npackage fitnesse.html;\nimport fitnesse.responders.run.SuiteResponder;\nimport fitnesse.wiki.*;\npublic class SetupTeardownIncluder {\nprivate PageData pageData;\nprivate boolean isSuite;\nprivate WikiPage testPage;\nprivate StringBuffer newPageContent;\nprivate PageCrawler pageCrawler;\n\npublic static String render(PageData pageData) throws Exception {\nreturn render(pageData, false);\n}\npublic static String render(PageData pageData, boolean isSuite) throws Exception {\nreturn new SetupTeardownIncluder(pageData).render(isSuite);\n}\nprivate SetupTeardownIncluder(PageData pageData) {\nthis.pageData = pageData;\ntestPage = pageData.getWikiPage();\npageCrawler = testPage.getPageCrawler();\nnewPageContent = new StringBuffer();\n}\nprivate String render(boolean isSuite) throws Exception {\nthis.isSuite = isSuite;\nif includeSetupAndTeardownPages();(isTestPage())\nreturn pageData.getHtml();\n}\nprivate boolean isTestPage() throws Exception {\nreturn pageData.hasAttribute(\"Test\");\n}\nprivate void includeSetupAndTeardownPages() throws Exception {\nincludeSetupPages();\nincludePageContent();\nincludeTeardownPages();\nupdatePageContent();\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1403, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e0f799b-3b04-4118-bd58-a1401a098f84": {"__data__": {"id_": "7e0f799b-3b04-4118-bd58-a1401a098f84", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c90dc745-ba15-402e-b8f9-9ae178e9d9d8", "node_type": "4", "metadata": {}, "hash": "a14486e705daa25fd59ef181771620d4198cd076f2ce3dca94a2eef904bff3c8", "class_name": "RelatedNodeInfo"}}, "text": "# SetupTeardownIncluder\n\n# Listing 3-7 (continued)\n\n# SetupTeardownIncluder.java\n\nprivate void includeSetupPages() throws Exception {\nif includeSuiteSetupPage();(isSuite)\nincludeSetupPage();\n}\nprivate void includeSuiteSetupPage() throws Exception {\ninclude(SuiteResponder.SUITE_SETUP_NAME, \"-setup\");\n}\nprivate void includeSetupPage() throws Exception {\ninclude(\"SetUp\", \"-setup\");\n}\nprivate void includePageContent() throws Exception {\nnewPageContent.append(pageData.getContent());\n}\nprivate void includeTeardownPages() throws Exception {\nincludeTeardownPage();\nif includeSuiteTeardownPage();(isSuite)\n}\nprivate void includeTeardownPage() throws Exception {\ninclude(\"TearDown\", \"-teardown\");\n}\nprivate void includeSuiteTeardownPage() throws Exception {\ninclude(SuiteResponder.SUITE_TEARDOWN_NAME, \"-teardown\");\n}\nprivate void updatePageContent() throws Exception {\npageData.setContent(newPageContent.toString());\n}\nprivate void include(String pageName, String arg) throws Exception {\nWikiPage inheritedPage = findInheritedPage(pageName);\nif String pagePathName = getPathNameForPage(inheritedPage);(inheritedPage != null) {\nbuildIncludeDirective(pagePathName, arg);\n}\n}\nprivate WikiPage findInheritedPage(String pageName) throws Exception {\nreturn PageCrawlerImpl.getInheritedPage(pageName, testPage);\n}\nprivate String getPathNameForPage(WikiPage page) throws Exception {\nWikiPagePath pagePath = pageCrawler.getFullPath(page);\nreturn PathParser.render(pagePath);\n}\nprivate void buildIncludeDirective(String pagePathName, String arg) {\nnewPageContent.append(\"\\n!include \")", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1571, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac91eba3-2021-45c9-98e8-083b51af108b": {"__data__": {"id_": "ac91eba3-2021-45c9-98e8-083b51af108b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cfebe566-186c-4760-b71a-7a5e37d02e67", "node_type": "4", "metadata": {}, "hash": "04eb87971a62fa11be8c5f140514c42e6f40a85009a2d53d472d1da216359c3d", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 3: Functions\n\n# Listing 3-7 (continued)\n\nSetupTeardownIncluder.java\n.append(arg)\n.append(\" .\")\n.append(pagePathName)\n.append(\"\\n\");\n}\n\n# Bibliography\n\n- [KP78]: Kernighan and Plaugher, The Elements of Programming Style, 2d. ed., McGraw-Hill, 1978.\n- [PPP02]: Robert C. Martin, Agile Software Development: Principles, Patterns, and Practices, Prentice Hall, 2002.\n- [GOF]: Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al., Addison-Wesley, 1996.\n- [PRAG]: The Pragmatic Programmer, Andrew Hunt, Dave Thomas, Addison-Wesley, 2000.\n- [SP72]: Structured Programming, O.-J. Dahl, E. W. Dijkstra, C. A. R. Hoare, Academic Press, London, 1972.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 673, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df9e6cc1-17a8-4367-958a-39a15efbec2f": {"__data__": {"id_": "df9e6cc1-17a8-4367-958a-39a15efbec2f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9db335d0-4728-472e-a920-628afe85bc1a", "node_type": "4", "metadata": {}, "hash": "2f48a4a6a1b2c8df07c1a00ea2af5b979cb2fecc4b7f8b97d27a779cf266e364", "class_name": "RelatedNodeInfo"}}, "text": "# Comments\n\n\u201cDon\u2019t comment bad code\u2014rewrite it.\u201d\n\n\u2014Brian W. Kernighan and P. J. Plaugher1\n\nNothing can be quite so helpful as a well-placed comment. Nothing can clutter up a module more than frivolous dogmatic comments. Nothing can be quite so damaging as an old crufty comment that propagates lies and misinformation.\n\nComments are not like Schindler\u2019s List. They are not \u201cpure good.\u201d Indeed, comments are, at best, a necessary evil. If our programming languages were expressive enough, or if\n\n1. [KP78], p. 144.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 513, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c606c85-bab4-44bd-a232-dcce6ec56f72": {"__data__": {"id_": "7c606c85-bab4-44bd-a232-dcce6ec56f72", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8527c9b-5002-421e-9c35-2b57e6f34bcf", "node_type": "4", "metadata": {}, "hash": "ba017b67dde09df4817dfa4137f9af3975dcb791b637ee27a338175d30f14921", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\nwe had the talent to subtly wield those languages to express our intent, we would not need comments very much\u2014perhaps not at all.\n\nThe proper use of comments is to compensate for our failure to express ourself in code. Note that I used the word failure. I meant it. Comments are always failures. We must have them because we cannot always figure out how to express ourselves without them, but their use is not a cause for celebration.\n\nSo when you find yourself in a position where you need to write a comment, think it through and see whether there isn\u2019t some way to turn the tables and express yourself in code. Every time you express yourself in code, you should pat yourself on the back. Every time you write a comment, you should grimace and feel the failure of your ability of expression.\n\nWhy am I so down on comments? Because they lie. Not always, and not intentionally, but too often. The older a comment is, and the farther away it is from the code it describes, the more likely it is to be just plain wrong. The reason is simple. Programmers can\u2019t realistically maintain them.\n\nCode changes and evolves. Chunks of it move from here to there. Those chunks bifurcate and reproduce and come together again to form chimeras. Unfortunately the comments don\u2019t always follow them\u2014can\u2019t always follow them. And all too often the comments get separated from the code they describe and become orphaned blurbs of ever-decreasing accuracy. For example, look what has happened to this comment and the line it was intended to describe:\n\nMockRequest request;\nprivate final String HTTP_DATE_REGEXP =\n\"[SMTWF][a-z]{2}\\\\,\\\\s[0-9]{2}\\\\s[JFMASOND][a-z]{2}\\\\s\"+\n\"[0-9]{4}\\\\s[0-9]{2}\\\\:[0-9]{2}\\\\:[0-9]{2}\\\\sGMT\";\nprivate Response response;\nprivate FitNesseContext context;\nprivate FileResponder responder;\nprivate Locale saveLocale;\n// Example: \"Tue, 02 Apr 2003 22:18:49 GMT\"\n\nOther instance variables that were probably added later were interposed between the HTTP_DATE_REGEXP constant and it\u2019s explanatory comment.\n\nIt is possible to make the point that programmers should be disciplined enough to keep the comments in a high state of repair, relevance, and accuracy. I agree, they should. But I would rather that energy go toward making the code so clear and expressive that it does not need the comments in the first place.\n\nInaccurate comments are far worse than no comments at all. They delude and mislead. They set expectations that will never be fulfilled. They lay down old rules that need not, or should not, be followed any longer.\n\nTruth can only be found in one place: the code. Only the code can truly tell you what it does. It is the only source of truly accurate information. Therefore, though comments are sometimes necessary, we will expend significant energy to minimize them.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2809, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "471bd6be-d6ef-41b2-9ca6-2b80207ff410": {"__data__": {"id_": "471bd6be-d6ef-41b2-9ca6-2b80207ff410", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f2760dbf-f3cf-446b-94ff-16f231899bd8", "node_type": "4", "metadata": {}, "hash": "938e322d294d96aeeead8c2c9ef07547728ad19cf39453eaf060d77fa1e88a18", "class_name": "RelatedNodeInfo"}}, "text": "# Good Comments\n\nComments Do Not Make Up for Bad Code\n\nOne of the more common motivations for writing comments is bad code. We write a module and we know it is confusing and disorganized. We know it\u2019s a mess. So we say to ourselves, \u201cOoh, I\u2019d better comment that!\u201d No! You\u2019d better clean it!\n\nClear and expressive code with few comments is far superior to cluttered and complex code with lots of comments. Rather than spend your time writing the comments that explain the mess you\u2019ve made, spend it cleaning that mess.\n\n# Explain Yourself in Code\n\nThere are certainly times when code makes a poor vehicle for explanation. Unfortunately, many programmers have taken this to mean that code is seldom, if ever, a good means for explanation. This is patently false. Which would you rather see? This:\n\n// Check to see if the employee is eligible for full benefits\nif ((employee.flags & HOURLY_FLAG) &&(employee.age > 65))\n\nOr this?\n\nif (employee.isEligibleForFullBenefits())\n\nIt takes only a few seconds of thought to explain most of your intent in code. In many cases it\u2019s simply a matter of creating a function that says the same thing as the comment you want to write.\n\n# Good Comments\n\nSome comments are necessary or beneficial. We\u2019ll look at a few that I consider worthy of the bits they consume. Keep in mind, however, that the only truly good comment is the comment you found a way not to write.\n\n# Legal Comments\n\nSometimes our corporate coding standards force us to write certain comments for legal reasons. For example, copyright and authorship statements are necessary and reasonable things to put into a comment at the start of each source file.\n\nHere, for example, is the standard comment header that we put at the beginning of every source file in FitNesse. I am happy to say that our IDE hides this comment from acting as clutter by automatically collapsing it.\n\n// Copyright (C) 2003,2004,2005 by Object Mentor, Inc. All rights reserved.\n// Released under the terms of the GNU General Public License version 2 or later.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2030, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84b49567-c626-4b89-b5fc-7b0139cfdcc9": {"__data__": {"id_": "84b49567-c626-4b89-b5fc-7b0139cfdcc9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e0987405-a52e-4138-9a79-12eadeb1ffac", "node_type": "4", "metadata": {}, "hash": "06c647ab3b5724fe080c8c4f4b6b65d9f12d5e6f997fccb113a87f01d5d77c3e", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\nComments like this should not be contracts or legal tomes. Where possible, refer to a standard license or other external document rather than putting all the terms and conditions into the comment.\n\n# Informative Comments\n\nIt is sometimes useful to provide basic information with a comment. For example, consider this comment that explains the return value of an abstract method:\n\n// Returns an instance of the Responder being tested.\nprotected abstract Responder responderInstance();\nA comment like this can sometimes be useful, but it is better to use the name of the function to convey the information where possible. For example, in this case the comment could be made redundant by renaming the function: responderBeingTested.\n\nHere\u2019s a case that\u2019s a bit better:\n\n//  format matched kk:mm:ss EEE,            MMM dd, yyyy\nPattern timeMatcher = Pattern.compile(\"\\\\d*:\\\\d*:\\\\d* \\\\w*, \\\\w* \\\\d*, \\\\d*\");\nIn this case the comment lets us know that the regular expression is intended to match a time and date that were formatted with the SimpleDateFormat.format function using the specified format string. Still, it might have been better, and clearer, if this code had been moved to a special class that converted the formats of dates and times. Then the comment would likely have been superfluous.\n\n# Explanation of Intent\n\nSometimes a comment goes beyond just useful information about the implementation and provides the intent behind a decision. In the following case we see an interesting decision documented by a comment. When comparing two objects, the author decided that he wanted to sort objects of his class higher than objects of any other.\n\npublic int compareTo(Object o)\n{  if(o instanceof WikiPagePath)\n{  WikiPagePath p = (WikiPagePath) o;\nString compressedName = StringUtil.join(names, \"\");\nString compressedArgumentName = StringUtil.join(p.names, \"\");\nreturn compressedName.compareTo(compressedArgumentName);\n}\nreturn 1;    // we are greater because we are the right type.\n}\nHere\u2019s an even better example. You might not agree with the programmer\u2019s solution to the problem, but at least you know what he was trying to do.\n\npublic void testConcurrentAddWidgets() throws Exception {\nWidgetBuilder widgetBuilder =new WidgetBuilder(new Class[]{BoldWidget.class});", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2296, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7100307-d031-456b-96e0-a232b373fda0": {"__data__": {"id_": "e7100307-d031-456b-96e0-a232b373fda0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c194c1c7-df20-41f0-bdc7-f0f7acc90c2e", "node_type": "4", "metadata": {}, "hash": "da4e39ba071a855cf611fbc4f765bec5876cf30c15b55e304154763d9e44b8a4", "class_name": "RelatedNodeInfo"}}, "text": "# Good Comments\n\nString text = \"'''bold text'''\";\n\nParentWidget parent = new BoldWidget(new MockWidgetRoot(), \"'''bold text'''\");\n\nAtomicBoolean failFlag = new AtomicBoolean();\n\nfailFlag.set(false);\n\nfor (int i = 0; i < 25000; i++) {\n\nWidgetBuilderThread widgetBuilderThread = new WidgetBuilderThread(widgetBuilder, text, parent, failFlag);\n\nThread thread = new Thread(widgetBuilderThread);\n\nthread.start();\n\n}\n\nassertEquals(false, failFlag.get());\n\n# Clarification\n\nSometimes it is just helpful to translate the meaning of some obscure argument or return value into something that\u2019s readable. In general it is better to find a way to make that argument or return value clear in its own right; but when it's part of the standard library, or in code that you cannot alter, then a helpful clarifying comment can be useful.\n\npublic void testCompareTo() throws Exception {\nWikiPagePath a = PathParser.parse(\"PageA\");\nWikiPagePath ab = PathParser.parse(\"PageA.PageB\");\nWikiPagePath b = PathParser.parse(\"PageB\");\nWikiPagePath aa = PathParser.parse(\"PageA.PageA\");\nWikiPagePath bb = PathParser.parse(\"PageB.PageB\");\nWikiPagePath ba = PathParser.parse(\"PageB.PageA\");\nassertTrue(a.compareTo(a) == 0);                 // a == a\nassertTrue(a.compareTo(b) != 0);                 // a != b\nassertTrue(ab.compareTo(ab) == 0);               // ab == ab\nassertTrue(a.compareTo(b) == -1);                // a < b\nassertTrue(aa.compareTo(ab) == -1); // aa < ab\nassertTrue(ba.compareTo(bb) == -1); // ba < bb\nassertTrue(b.compareTo(a) == 1);                 // b > a\nassertTrue(ab.compareTo(aa) == 1);               // ab > aa\nassertTrue(bb.compareTo(ba) == 1);               // bb > ba\n}\n\nThere is a substantial risk, of course, that a clarifying comment is incorrect. Go through the previous example and see how difficult it is to verify that they are correct. This explains both why the clarification is necessary and why it\u2019s risky. So before writing comments like this, take care that there is no better way, and then take even more care that they are accurate.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2049, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fab76254-3ec2-40b5-9e94-9690347d37c6": {"__data__": {"id_": "fab76254-3ec2-40b5-9e94-9690347d37c6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "52db4253-9d84-443d-8fc0-2aecbec1ca4d", "node_type": "4", "metadata": {}, "hash": "3fc4603e4229d92eed3e3336e2cdf87e6e370079651f66c428ac322eff72caa1", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\n# Warning of Consequences\n\nSometimes it is useful to warn other programmers about certain consequences. For example, here is a comment that explains why a particular test case is turned off:\n\n// Don't run unless you\n// have some time to kill.\npublic void _testWithReallyBigFile()\n{  writeLinesToFile(10000000);\nresponse.setBody(testFile);\nresponse.readyToSend(this);\nString responseString = output.toString();\nassertSubString(\"Content-Length: 1000000000\", responseString);\nassertTrue(bytesSent > 1000000000);\n}\n\nNowadays, of course, we\u2019d turn off the test case by using the @Ignore attribute with an appropriate explanatory string. @Ignore(\"Takes too long to run\"). But back in the days before JUnit 4, putting an underscore in front of the method name was a common convention. The comment, while flippant, makes the point pretty well.\n\nHere\u2019s another, more poignant example:\n\npublic static SimpleDateFormat makeStandardHttpDateFormat()\n{  //SimpleDateFormat is not thread safe,\n//so we need to create each instance independently.\nSimpleDateFormat df = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\ndf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\nreturn df;\n}\n\nYou might complain that there are better ways to solve this problem. I might agree with you. But the comment, as given here, is perfectly reasonable. It will prevent some overly eager programmer from using a static initializer in the name of efficiency.\n\n# TODO Comments\n\nIt is sometimes reasonable to leave \u201cTo do\u201d notes in the form of //TODO comments. In the following case, the TODO comment explains why the function has a degenerate implementation and what that function\u2019s future should be.\n\n//TODO-MdM these are not needed\n// We expect this to go away when we do the checkout model\nprotected VersionInfo makeVersion() throws Exception\n{  return null;\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1845, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3333456-f3ad-481e-aeb4-0f5c9a7b8ef0": {"__data__": {"id_": "c3333456-f3ad-481e-aeb4-0f5c9a7b8ef0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6f0600a8-ab8f-4ca4-bfba-47660401cd3a", "node_type": "4", "metadata": {}, "hash": "bd927a6ceb3025619ad32f558ed190df27c0147c189625895e937f816ec2c4f8", "class_name": "RelatedNodeInfo"}}, "text": "# Bad Comments\n\nTODOs are jobs that the programmer thinks should be done, but for some reason can\u2019t do at the moment. It might be a reminder to delete a deprecated feature or a plea for someone else to look at a problem. It might be a request for someone else to think of a better name or a reminder to make a change that is dependent on a planned event. Whatever else a TODO might be, it is not an excuse to leave bad code in the system.\n\nNowadays, most good IDEs provide special gestures and features to locate all the TODO comments, so it\u2019s not likely that they will get lost. Still, you don\u2019t want your code to be littered with TODOs. So scan through them regularly and eliminate the ones you can.\n\n# Amplification\n\nA comment may be used to amplify the importance of something that may otherwise seem inconsequential.\n\nString listItemContent = match.group(3).trim();\n// the trim is real important. It removes the starting\n// spaces that could cause the item to be recognized\n// as another list.\nnew ListItemWidget(this, listItemContent, this.level + 1);\nreturn buildList(text.substring(match.end()));\n\n# Javadocs in Public APIs\n\nThere is nothing quite so helpful and satisfying as a well-described public API. The javadocs for the standard Java library are a case in point. It would be difficult, at best, to write Java programs without them.\n\nIf you are writing a public API, then you should certainly write good javadocs for it. But keep in mind the rest of the advice in this chapter. Javadocs can be just as misleading, nonlocal, and dishonest as any other kind of comment.\n\n# Bad Comments\n\nMost comments fall into this category. Usually they are crutches or excuses for poor code or justifications for insufficient decisions, amounting to little more than the programmer talking to himself.\n\n# Mumbling\n\nPlopping in a comment just because you feel you should or because the process requires it, is a hack. If you decide to write a comment, then spend the time necessary to make sure it is the best comment you can write.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2029, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4d109c4-8aae-480f-b5f2-b323e3856845": {"__data__": {"id_": "f4d109c4-8aae-480f-b5f2-b323e3856845", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53bd4853-e1e1-4036-b094-5631df681b40", "node_type": "4", "metadata": {}, "hash": "64fc82f37ce9bcb4db133650f2a08971f9675e0c6d985fcc1ba6039686be53ad", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\nHere, for example, is a case I found in FitNesse, where a comment might indeed have been useful. But the author was in a hurry or just not paying much attention. His mumbling left behind an enigma:\n\npublic void loadProperties()\n{  try\n{ String propertiesPath = propertiesLocation + \"/\" + PROPERTIES_FILE;\nFileInputStream propertiesStream = new FileInputStream(propertiesPath);\n}loadedProperties.load(propertiesStream);\ncatch(IOException e)\n{  // No properties files means all defaults are loaded\n}\n}\n\nWhat does that comment in the catch block mean? Clearly it meant something to the author, but the meaning does not come through all that well. Apparently, if we get an IOException, it means that there was no properties file; and in that case all the defaults are loaded. But who loads all the defaults? Were they loaded before the call to loadProperties.load? Or did loadProperties.load catch the exception, load the defaults, and then pass the exception on for us to ignore? Or did loadProperties.load load all the defaults before attempting to load the file? Was the author trying to comfort himself about the fact that he was leaving the catch block empty? Or\u2014and this is the scary possibility\u2014was the author trying to tell himself to come back here later and write the code that would load the defaults?\n\nOur only recourse is to examine the code in other parts of the system to find out what\u2019s going on. Any comment that forces you to look in another module for the meaning of that comment has failed to communicate to you and is not worth the bits it consumes.\n\n# Redundant Comments\n\nListing 4-1 shows a simple function with a header comment that is completely redundant. The comment probably takes longer to read than the code itself.\n\n# Listing 4-1\n\nwaitForClose\n// Utility method that returns when this.closed is true. Throws an exception\n// if the timeout is reached.\npublic synchronized void waitForClose(final long timeoutMillis)\nthrows Exception\n{  if(!closed)\n{  wait(timeoutMillis);\nif(!closed)throw new Exception(\"MockResponseSender could not be closed\");\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2098, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1e158d1-e15c-41c6-aca6-5fb7285880bf": {"__data__": {"id_": "d1e158d1-e15c-41c6-aca6-5fb7285880bf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2b06a8ec-c863-4e57-9a96-a8f7a893ea22", "node_type": "4", "metadata": {}, "hash": "efaa041cf6a5a0e420bd718ec6001a4d1b42a6f8f40bfedcab8f6e79f80cd40b", "class_name": "RelatedNodeInfo"}}, "text": "# Bad Comments\n\nWhat purpose does this comment serve? It\u2019s certainly not more informative than the code. It does not justify the code, or provide intent or rationale. It is not easier to read than the code. Indeed, it is less precise than the code and entices the reader to accept that lack of precision in lieu of true understanding. It is rather like a gladhanding used-car salesman assuring you that you don\u2019t need to look under the hood.\n\nNow consider the legion of useless and redundant javadocs in Listing 4-2 taken from Tomcat. These comments serve only to clutter and obscure the code. They serve no documentary purpose at all. To make matters worse, I only showed you the first few. There are many more in this module.\n\n# Listing 4-2\n\n# ContainerBase.java (Tomcat)\n\npublic    abstract class ContainerBase\nimplements Container, Lifecycle, Pipeline,\nMBeanRegistration, Serializable {\n/*** The processor delay for this component.\n*/\nprotected int backgroundProcessorDelay = -1;\n\n/*** The lifecycle event support for this component.\n*/\nprotected LifecycleSupport lifecycle =new LifecycleSupport(this);\n\n/*** The container event listeners for this Container.\n*/\nprotected ArrayList listeners = new ArrayList();\n\n/*** The Loader implementation with which this Container is\n* associated.\n*/\nprotected Loader loader = null;\n\n/**\n* The Logger implementation with which this Container is\n* associated.\n*/\nprotected Log logger = null;\n\n/*** Associated logger name.\n*/\nprotected String logName = null;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a824b90-5eee-491a-b5c4-a717cd09e27f": {"__data__": {"id_": "6a824b90-5eee-491a-b5c4-a717cd09e27f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9c7e8fb-02b2-49d8-8c2b-a56d1010d872", "node_type": "4", "metadata": {}, "hash": "8e69a9f5792b90fe700d852c2b2260bda66b1cb0702e4a725eb0d1ba0f59ed04", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\n# Listing 4-2 (continued)\n\nContainerBase.java (Tomcat)\n/*** The Manager implementation with which this Container is\n* associated.\n*/\nprotected Manager manager = null;\n\n/*** The cluster with which this Container is associated.\n*/\nprotected Cluster cluster = null;\n\n/*** The human-readable name of this Container.\n*/\nprotected String name = null;\n\n/*** The parent Container to which this Container is a child.\n*/\nprotected Container parent = null;\n\n/*** The parent class loader to be configured when we install a\n* Loader.\n*/\nprotected ClassLoader parentClassLoader = null;\n\n/*** The Pipeline object with which this Container is\n* associated.\n*/\nprotected Pipeline pipeline = new StandardPipeline(this);\n\n/*** The Realm with which this Container is associated.\n*/\nprotected Realm realm = null;\n\n/*** The resources DirContext object with which this Container\n* is associated.\n*/\nprotected DirContext resources = null;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 937, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d4227ac-ab54-408a-b072-d4db28184974": {"__data__": {"id_": "7d4227ac-ab54-408a-b072-d4db28184974", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9660f39-b3b4-49db-954c-b857cc6f0f40", "node_type": "4", "metadata": {}, "hash": "8c9f6c0c8a58989f5fab1ef0110b0310ba85dae6d7e0de1e96f42441e5b72b70", "class_name": "RelatedNodeInfo"}}, "text": "# Bad Comments\n\n# Misleading Comments\n\nSometimes, with all the best intentions, a programmer makes a statement in his comments that isn\u2019t precise enough to be accurate. Consider for another moment the badly redundant but also subtly misleading comment we saw in Listing 4-1.\n\nDid you discover how the comment was misleading? The method does not return when this.closed becomes true. It returns if this.closed is true; otherwise, it waits for a blind time-out and then throws an exception if this.closed is still not true.\n\nThis subtle bit of misinformation, couched in a comment that is harder to read than the body of the code, could cause another programmer to blithely call this function in the expectation that it will return as soon as this.closed becomes true. That poor programmer would then find himself in a debugging session trying to figure out why his code executed so slowly.\n\n# Mandated Comments\n\nIt is just plain silly to have a rule that says that every function must have a javadoc, or every variable must have a comment. Comments like this just clutter up the code, propagate lies, and lend to general confusion and disorganization.\n\nFor example, required javadocs for every function lead to abominations such as Listing 4-3. This clutter adds nothing and serves only to obfuscate the code and create the potential for lies and misdirection.\n\n# Listing 4-3\n\n/***\n* @param title The title of the CD\n* @param author The author of the CD\n* @param tracks The number of tracks on the CD\n* @param durationInMinutes The duration of the CD in minutes\n*/\npublic void addCD(String title, String author,\nCD cd = new CD(); int tracks, int durationInMinutes) {\ncd.title = title;\ncd.author = author;\ncd.tracks = tracks;\ncd.duration = duration;\ncdList.add(cd);\n}\n\n# Journal Comments\n\nSometimes people add a comment to the start of a module every time they edit it. These comments accumulate as a kind of journal, or log, of every change that has ever been made. I have seen some modules with dozens of pages of these run-on journal entries.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2043, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2c32ab1-65e0-4fdc-bbfb-9120a986703f": {"__data__": {"id_": "f2c32ab1-65e0-4fdc-bbfb-9120a986703f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b27a1f4e-35ad-4bb4-af7e-7c86c2790ef1", "node_type": "4", "metadata": {}, "hash": "9c15903bb301a2befe07ddc2ea7282bfd87d638d193dc8ac130ce040c7962a15", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\n# Changes (from 11-Oct-2001)\n\n- 11-Oct-2001 : Re-organised the class and moved it to new package com.jrefinery.date (DG);\n- 05-Nov-2001 : Added a getDescription() method, and eliminated NotableDate class (DG);\n- 12-Nov-2001 : IBD requires setDescription() method, now that NotableDate class is gone (DG); Changed getPreviousDayOfWeek(), getFollowingDayOfWeek() and getNearestDayOfWeek() to correct bugs (DG);\n- 05-Dec-2001 : Fixed bug in SpreadsheetDate class (DG);\n- 29-May-2002 : Moved the month constants into a separate interface (MonthConstants) (DG);\n- 27-Aug-2002 : Fixed bug in addMonths() method, thanks to N???levka Petr (DG);\n- 03-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n- 13-Mar-2003 : Implemented Serializable (DG);\n- 29-May-2003 : Fixed bug in addMonths method (DG);\n- 04-Sep-2003 : Implemented Comparable. Updated the isInRange javadocs (DG);\n- 05-Jan-2005 : Fixed bug in addYears() method (1096282) (DG);\n\nLong ago there was a good reason to create and maintain these log entries at the start of every module. We didn\u2019t have source code control systems that did it for us. Nowadays, however, these long journals are just more clutter to obfuscate the module. They should be completely removed.\n\n# Noise Comments\n\nSometimes you see comments that are nothing but noise. They restate the obvious and provide no new information.\n\n/*** Default constructor.\n*/\nprotected AnnualDateRule() {\n}\n\nNo, really? Or how about this:\n\n/** The day of the month. */private int dayOfMonth;\n\nAnd then there\u2019s this paragon of redundancy:\n\n/*** Returns the day of the month.\n*\n* @return the day of the month.\n*/\npublic int getDayOfMonth() {\nreturn dayOfMonth;\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1691, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "189d0ca4-3521-4a78-b955-7946396cbdf4": {"__data__": {"id_": "189d0ca4-3521-4a78-b955-7946396cbdf4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e326d52c-8e18-4e7f-9586-d6cd8c90bfa7", "node_type": "4", "metadata": {}, "hash": "4f492eed1bb0b85439b4e4cf86e079e0d2509f4019f9b36ed3d8cef57e7288f3", "class_name": "RelatedNodeInfo"}}, "text": "# Bad Comments\n\nThese comments are so noisy that we learn to ignore them. As we read through code, our eyes simply skip over them. Eventually the comments begin to lie as the code around them changes.\n\nThe first comment in Listing 4-4 seems appropriate.2 It explains why the catch block is being ignored. But the second comment is pure noise. Apparently the programmer was just so frustrated with writing try/catch blocks in this function that he needed to vent.\n\n# Listing 4-4\n\nprivate void startSending()\n{\ntry\n{\ndoSending();\n}\ncatch(SocketException e)\n{\n// normal. someone stopped the request.\n}\ncatch(Exception e)\n{\ntry\n{\nresponse.add(ErrorResponder.makeExceptionString(e));\nresponse.closeAll();\n}\ncatch(Exception e1)\n{\n//Give me a break!\n}\n}\n}\n\nRather than venting in a worthless and noisy comment, the programmer should have recognized that his frustration could be resolved by improving the structure of his code. He should have redirected his energy to extracting that last try/catch block into a separate function, as shown in Listing 4-5.\n\n# Listing 4-5\n\nprivate void startSending()\n{\ntry\n{\ndoSending();\n}\n}\n\n2 The current trend for IDEs to check spelling in comments will be a balm for those of us who read a lot of code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25f01218-a3dc-4e61-ada5-64fbcada32d9": {"__data__": {"id_": "25f01218-a3dc-4e61-ada5-64fbcada32d9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d20a1274-cdb3-484d-aa5c-304940004d14", "node_type": "4", "metadata": {}, "hash": "001fc15a5da9f6324ef863a035f5516c5760a8fdff4b9113385714f23555669b", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\n# Listing 4-5 (continued)\n\nstartSending (refactored)\ncatch(SocketException e)\n{  // normal. someone stopped the request.\n}\ncatch(Exception e)\n{  addExceptionAndCloseResponse(e);\n}\n\nprivate void addExceptionAndCloseResponse(Exception e)\n{  try\n{  response.add(ErrorResponder.makeExceptionString(e));\nresponse.closeAll();\n}\ncatch(Exception e1)\n{\n}\n}\n\nReplace the temptation to create noise with the determination to clean your code. You\u2019ll find it makes you a better and happier programmer.\n\n# Scary Noise\n\nJavadocs can also be noisy. What purpose do the following Javadocs (from a well-known open-source library) serve? Answer: nothing. They are just redundant noisy comments written out of some misplaced desire to provide documentation.\n\n/** The name. */\nprivate String name;\n/** The version. */\nprivate String version;\n/** The licenceName. */\nprivate String licenceName;\n/** The version. */\nprivate String info;\n\nRead these comments again more carefully. Do you see the cut-paste error? If authors aren\u2019t paying attention when comments are written (or pasted), why should readers be expected to profit from them?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1137, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "241cda35-f1f0-4b74-8232-605992efd8a3": {"__data__": {"id_": "241cda35-f1f0-4b74-8232-605992efd8a3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ee74f456-c6a2-4829-bb5f-65e62ac7dd35", "node_type": "4", "metadata": {}, "hash": "becd90dbadd115e2ebf32a4459ae89c485607a8f43ed556b1b583b324bb9e2eb", "class_name": "RelatedNodeInfo"}}, "text": "# Bad Comments\n\n# Don\u2019t Use a Comment When You Can Use a Function or a Variable\n\nConsider the following stretch of code:\n\n// does the module from the global list &lt;mod&gt; depend on the\n// subsystem we are part of?\nif (smodule.getDependSubsystems().contains(subSysMod.getSubSystem()))\n\nThis could be rephrased without the comment as\n\nArrayList moduleDependees = smodule.getDependSubsystems();\nString    ourSubSystem = subSysMod.getSubSystem();\nif (moduleDependees.contains(ourSubSystem))\n\nThe author of the original code may have written the comment first (unlikely) and then\nwritten the code to fulfill the comment. However, the author should then have refactored\nthe code, as I did, so that the comment could be removed.\n\n# Position Markers\n\nSometimes programmers like to mark a particular position in a source file. For example, I\nrecently found this in a program I was looking through:\n\n// Actions //////////////////////////////////\n\nThere are rare times when it makes sense to gather certain functions together beneath a\nbanner like this. But in general they are clutter that should be eliminated\u2014especially the\nnoisy train of slashes at the end.\n\nThink of it this way. A banner is startling and obvious if you don\u2019t see banners very\noften. So use them very sparingly, and only when the benefit is significant. If you overuse\nbanners, they\u2019ll fall into the background noise and be ignored.\n\n# Closing Brace Comments\n\nSometimes programmers will put special comments on closing braces, as in Listing 4-6.\nAlthough this might make sense for long functions with deeply nested structures, it serves\nonly to clutter the kind of small and encapsulated functions that we prefer. So if you find\nyourself wanting to mark your closing braces, try to shorten your functions instead.\n\n# Listing 4-6\n\nwc.java\npublic    class wc {\npublic static void main(String[] args) {\nBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\nString line;\nint lineCount = 0;\nint charCount = 0;\nint wordCount = 0;\ntry {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e75a3e95-e160-43e8-932f-ac4521d2e70a": {"__data__": {"id_": "e75a3e95-e160-43e8-932f-ac4521d2e70a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "85f3d880-c9ae-4e6e-a7b1-121123bdf14e", "node_type": "4", "metadata": {}, "hash": "90c49733f066bc081ac0698ef3c49bb6fe7a1b15fbbd54f23869ec9a5610a584", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\nListing 4-6 (continued)\nwc.java\nwhile ((line = in.readLine()) != null) {\nlineCount++;\ncharCount += line.length();\nString words[] = line.split(\"\\\\W\");\nwordCount += words.length;\n} //while\nSystem.out.println(\"wordCount = \" + wordCount);\nSystem.out.println(\"lineCount = \" + lineCount);\nSystem.out.println(\"charCount = \" + charCount);\n} // try\ncatch (IOException e) {\nSystem.err.println(\"Error:\" + e.getMessage());\n} //catch\n} //main\n}\n\n# Attributions and Bylines\n\n/* Added by Rick */\nSource code control systems are very good at remembering who added what, when.\nThere is no need to pollute the code with little bylines. You might think that such comments would be useful in order to help others know who to talk to about the code. But the reality is that they tend to stay around for years and years, getting less and less accurate and relevant.\nAgain, the source code control system is a better place for this kind of information.\n\n# Commented-Out Code\n\nFew practices are as odious as commenting-out code. Don\u2019t do this!\n\nInputStreamResponse response = new InputStreamResponse();\nresponse.setBody(formatter.getResultStream(), formatter.getByteCount());\n//    InputStream resultsStream = formatter.getResultStream();\n//    StreamReader reader = new StreamReader(resultsStream);\n//    response.setContent(reader.read(formatter.getByteCount()));\n\nOthers who see that commented-out code won\u2019t have the courage to delete it. They\u2019ll think it is there for a reason and is too important to delete. So commented-out code gathers like dregs at the bottom of a bad bottle of wine.\n\nConsider this from apache commons:\n\nthis.bytePos = writeBytes(pngIdBytes, 0);\n//hdrPos = bytePos;\nwriteHeader();\nwriteResolution();\n//dataPos = bytePos;\nif (writeImageData()) {\nwriteEnd();\nthis.pngBytes = resizeByteArray(this.pngBytes, this.maxPos);\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1845, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "844f3e85-fdf1-4ec0-ae9c-77072429fe40": {"__data__": {"id_": "844f3e85-fdf1-4ec0-ae9c-77072429fe40", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "571b071c-a310-4eac-84cd-52948f04c910", "node_type": "4", "metadata": {}, "hash": "061a04b0aa032cee31eb22540f3a5ab8562bf4b398979a286ef8031004f917cc", "class_name": "RelatedNodeInfo"}}, "text": "# Bad Comments\n\nelse {this.pngBytes = null;}\n\nreturn this.pngBytes;\n\nWhy are those two lines of code commented? Are they important? Were they left as reminders for some imminent change? Or are they just cruft that someone commented-out years ago and has simply not bothered to clean up.\n\nThere was a time, back in the sixties, when commenting-out code might have been useful. But we\u2019ve had good source code control systems for a very long time now. Those systems will remember the code for us. We don\u2019t have to comment it out any more. Just delete the code. We won\u2019t lose it. Promise.\n\n# HTML Comments\n\nHTML in source code comments is an abomination, as you can tell by reading the code below. It makes the comments hard to read in the one place where they should be easy to read\u2014the editor/IDE. If comments are going to be extracted by some tool (like Javadoc) to appear in a Web page, then it should be the responsibility of that tool, and not the programmer, to adorn the comments with appropriate HTML.\n\n/*** Task to run fit tests.\n* This task runs fitnesse tests and publishes the results.\n*\n*\n* Usage:\n* &lt;taskdef name=&quot;execute-fitnesse-tests&quot;\n*       classname=&quot;fitnesse.ant.ExecuteFitnesseTestsTask&quot;\n*       classpathref=&quot;classpath&quot; /&gt;\n* OR\n* &lt;taskdef classpathref=&quot;classpath&quot;\n*                  resource=&quot;tasks.properties&quot; /&gt;\n*\n* &lt;execute-fitnesse-tests\n*       suitepage=&quot;FitNesse.SuiteAcceptanceTests&quot;\n*       fitnesseport=&quot;8082&quot;\n*       resultsdir=&quot;${results.dir}&quot;\n*       resultshtmlpage=&quot;fit-results.html&quot;\n*       classpathref=&quot;classpath&quot; /&gt;\n*\n*/\n\n# Nonlocal Information\n\nIf you must write a comment, then make sure it describes the code it appears near. Don\u2019t offer systemwide information in the context of a local comment. Consider, for example, the javadoc comment below. Aside from the fact that it is horribly redundant, it also offers information about the default port. And yet the function has absolutely no control over what that default is. The comment is not describing the function, but some other, far distant part of the system. Of course there is no guarantee that this comment will be changed when the code containing the default is changed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2288, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7c7b346-4c38-45fd-b379-88dcaa1c4cba": {"__data__": {"id_": "c7c7b346-4c38-45fd-b379-88dcaa1c4cba", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b443310a-4f93-40f2-b7fb-04e488b2c072", "node_type": "4", "metadata": {}, "hash": "0dc21c4c4789beedfb6cb93f1ea3cab29a4e7ae810188b6d506aed8765cd5a5a", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\n/*** Port on which fitnesse would run. Defaults to **8082**.\n\n* @param fitnessePort\n\n*/\n\npublic void setFitnessePort(int fitnessePort)\n{\nthis.fitnessePort = fitnessePort;\n}\n\n# Too Much Information\n\nDon\u2019t put interesting historical discussions or irrelevant descriptions of details into your comments. The comment below was extracted from a module designed to test that a function could encode and decode base64. Other than the RFC number, someone reading this code has no need for the arcane information contained in the comment.\n\n/*  RFC   2045 - Multipurpose Internet Mail Extensions (MIME)\nPart One: Format of Internet Message Bodies\nsection 6.8.       Base64 Content-Transfer-Encoding\nThe encoding process represents 24-bit groups of input bits as output\nstrings of 4 encoded characters. Proceeding from left to right, a\n24-bit input group is formed by concatenating 3 8-bit input groups.\nThese 24 bits are then treated as 4 concatenated 6-bit groups, each\nof which is translated into a single digit in the base64 alphabet.\nWhen encoding a bit stream via the base64 encoding, the bit stream\nmust be presumed to be ordered with the most-significant-bit first.\nThat is, the first bit in the stream will be the high-order bit in\nthe first 8-bit byte, and the eighth bit will be the low-order bit in\nthe first 8-bit byte, and so on.\n*/\n\n# Inobvious Connection\n\nThe connection between a comment and the code it describes should be obvious. If you are going to the trouble to write a comment, then at least you\u2019d like the reader to be able to look at the comment and the code and understand what the comment is talking about.\n\nConsider, for example, this comment drawn from apache commons:\n\n/** start with an array that is big enough to hold all the pixels\n* (plus filter bytes), and an extra 200 bytes for header info\n*/\nthis.pngBytes = new byte[((this.width + 1) * this.height * 3) + 200];\n\nWhat is a filter byte? Does it relate to the +1? Or to the *3? Both? Is a pixel a byte? Why 200? The purpose of a comment is to explain code that does not explain itself. It is a pity when a comment needs its own explanation.\n\n# Function Headers\n\nShort functions don\u2019t need much description. A well-chosen name for a small function that does one thing is usually better than a comment header.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2306, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ddb2a544-a164-413d-b857-ee82a481a5f4": {"__data__": {"id_": "ddb2a544-a164-413d-b857-ee82a481a5f4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "10bb00df-702d-4ceb-975c-ab679dee4e14", "node_type": "4", "metadata": {}, "hash": "a885f7840a3e9a278611fdd359572c7b3d0ad137c28e8e4a571140d5ba43949b", "class_name": "RelatedNodeInfo"}}, "text": "# Bad Comments\n\n# Javadocs in Nonpublic Code\n\nAs useful as javadocs are for public APIs, they are anathema to code that is not intended for public consumption. Generating javadoc pages for the classes and functions inside a system is not generally useful, and the extra formality of the javadoc comments amounts to little more than cruft and distraction.\n\n# Example\n\nI wrote the module in Listing 4-7 for the first XP Immersion. It was intended to be an example of bad coding and commenting style. Kent Beck then refactored this code into a much more pleasant form in front of several dozen enthusiastic students. Later I adapted the example for my book Agile Software Development, Principles, Patterns, and Practices and the first of my Craftsman articles published in Software Development magazine.\n\nWhat I find fascinating about this module is that there was a time when many of us would have considered it \u201cwell documented.\u201d Now we see it as a small mess. See how many different comment problems you can find.\n\n# Listing 4-7\n\n# GeneratePrimes.java\n\n/*** This class Generates prime numbers up to a user specified\n* maximum.      The algorithm used is the Sieve of Eratosthenes.\n*\n* Eratosthenes of Cyrene, b. c. 276 BC, Cyrene, Libya --\n* d. c. 194, Alexandria.           The first man to calculate the\n* circumference of the Earth.             Also known for working on\n* calendars with leap years and ran the library at Alexandria.\n*\n* The   algorithm is quite simple.            Given an array of integers\n* starting at 2.        Cross out all multiples of 2.             Find the next\n* uncrossed integer, and cross out all of its multiples.\n* Repeat untilyou have passed the square root of the maximum\n* value.\n*\n* @author Alphonse\n* @version 13 Feb 2002 atp\n*/\nimport    java.util.*;\npublic    class GeneratePrimes\n{ /*** @param maxValue is the generation limit.\n*/\npublic static int[] generatePrimes(int maxValue)\n{ if   (maxValue >= 2) // the only valid case\n{ // declarationsint s = maxValue + 1; // size of array\nboolean[] f = new boolean[s];\nint i;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2062, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "835f644f-447f-4c66-bc09-67d39d3e086d": {"__data__": {"id_": "835f644f-447f-4c66-bc09-67d39d3e086d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7a315e4f-d594-44ed-a1cb-c30e91739750", "node_type": "4", "metadata": {}, "hash": "9e500897c89cfe5f74d7022fce6813d43ad1e53377bf482d0a326d7d2f5a7531", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\n# Listing 4-7 (continued)\n\nGeneratePrimes.java\n// initialize array to true.\nfor (i = 0; i < s; i++) f[i] = true;\n// get rid of known non-primes\nf[0] = f[1] = false;\n// sieve\nint j;\nfor (i = 2; i < Math.sqrt(s) + 1; i++) {\nif (f[i]) // if i is uncrossed, cross its multiples.\n{\nfor (j = 2 * i; j < s; j += i) f[j] = false; // multiple is not prime\n}\n}\n// how many primes are there?\nint count = 0;\nfor (i = 0; i < s; i++) {\nif (f[i]) count++; // bump count.\n}\nint[] primes = new int[count];\n// move the primes into the result\nfor (i = 0, j = 0; i < s; i++) {\nif (f[i])                     // if prime\nprimes[j++] = i;\n}\nreturn primes;       // return the primes\n}\nelse // maxValue < 2 return new int[0]; // return null array if bad input.\n}\n}\n\n# In Listing 4-8 you can see a refactored version of the same module.\n\nNote that the use of comments is significantly restrained. There are just two comments in the whole module. Both comments are explanatory in nature.\n\n# Listing 4-8\n\nPrimeGenerator.java (refactored)\n/*** This class Generates prime numbers up to a user specified\n* maximum. The algorithm used is the Sieve of Eratosthenes.\n* Given an array of integers starting at 2:\n* Find the first uncrossed integer, and cross out all its", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1258, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5ef895c-dc9f-48fc-8fb1-e606c181ecce": {"__data__": {"id_": "d5ef895c-dc9f-48fc-8fb1-e606c181ecce", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ffc8f1ed-00a7-428f-b1a2-dbebe437b11e", "node_type": "4", "metadata": {}, "hash": "e57edfc37e62a3611f4586c20b2fa7f2f8f1f5ec31886c9f71b48a61a84b6922", "class_name": "RelatedNodeInfo"}}, "text": "# Bad Comments\n\n# Listing 4-8 (continued)\n\n# PrimeGenerator.java (refactored)\n\n* multiples.       Repeat until there are no more multiples\n* in the array.\n\npublic class PrimeGenerator {\nprivate static boolean[] crossedOut;\nprivate static int[] result;\n\npublic static int[] generatePrimes(int maxValue) {\nif (maxValue < 2) return new int[0];\nelse {\nuncrossIntegersUpTo(maxValue);\ncrossOutMultiples();\nputUncrossedIntegersIntoResult();\nreturn result;\n}\n}\n\nprivate static void uncrossIntegersUpTo(int maxValue) {\ncrossedOut = new boolean[maxValue + 1];\nfor (int i = 2; i < crossedOut.length; i++)\ncrossedOut[i] = false;\n}\n\nprivate static void crossOutMultiples() {\nint limit = determineIterationLimit();\nfor (int i = 2; i <= limit; i++)\nif (notCrossed(i))\ncrossOutMultiplesOf(i);\n}\n\nprivate static int determineIterationLimit() {\n// Every multiple in the array has a prime factor that\n// is less than or equal to the root of the array size,\n// so we don't have to cross out multiples of numbers\n// larger than that root.\ndouble iterationLimit = Math.sqrt(crossedOut.length);\nreturn (int) iterationLimit;\n}\n\nprivate static void crossOutMultiplesOf(int i) {\nfor (int multiple = 2 * i; multiple < crossedOut.length; multiple += i)\ncrossedOut[multiple] = true;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1257, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af16708a-ecc6-4adb-bf54-e24a578803a7": {"__data__": {"id_": "af16708a-ecc6-4adb-bf54-e24a578803a7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bd2b71fa-97c3-4bbd-a68e-ffbe9f811f6d", "node_type": "4", "metadata": {}, "hash": "e9cf114e2c3ab01e4e128b4788e219baa5c7e8a89fc5c3195f6a1a9d06faa5a5", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 4: Comments\n\n# Listing 4-8 (continued)\n\nPrimeGenerator.java (refactored)\nprivate static boolean notCrossed(int i)\n{ return crossedOut[i] == false;\n}\nprivate static void putUncrossedIntegersIntoResult()\n{ result = new int[numberOfUncrossedIntegers()];\nfor (int j = 0, i = 2; i < crossedOut.length; i++)\nif (notCrossed(i))result[j++] = i;\n}\nprivate static int numberOfUncrossedIntegers()\n{ int count = 0;for (int i = 2; i < crossedOut.length; i++)\nif (notCrossed(i))count++;\n\nreturn count;\n}\n\nIt is easy to argue that the first comment is redundant because it reads very much like the generatePrimes function itself. Still, I think the comment serves to ease the reader into the algorithm, so I\u2019m inclined to leave it.\n\nThe second argument is almost certainly necessary. It explains the rationale behind the use of the square root as the loop limit. I could find no simple variable name, nor any different coding structure that made this point clear. On the other hand, the use of the square root might be a conceit. Am I really saving that much time by limiting the iteration to the square root? Could the calculation of the square root take more time than I\u2019m saving?\n\nIt\u2019s worth thinking about. Using the square root as the iteration limit satisfies the old C and assembly language hacker in me, but I\u2019m not convinced it\u2019s worth the time and effort that everyone else will expend to understand it.\n\n# Bibliography\n\n[KP78]: Kernighan and Plaugher, The Elements of Programming Style, 2d. ed., McGraw-Hill, 1978.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1520, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e5d97c0e-f7b6-4eb2-8924-f95401e538e5": {"__data__": {"id_": "e5d97c0e-f7b6-4eb2-8924-f95401e538e5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0f43862d-bc29-4102-9fb5-7602315cd86b", "node_type": "4", "metadata": {}, "hash": "1871f86777348118edffbf3a4e3ad8588891c31a7ce5b01d5cf3b51ee55614c2", "class_name": "RelatedNodeInfo"}}, "text": "# Formatting\n\nWhen people look under the hood, we want them to be impressed with the neatness, consistency, and attention to detail that they perceive. We want them to be struck by the orderliness. We want their eyebrows to rise as they scroll through the modules. We want them to perceive that professionals have been at work. If instead they see a scrambled mass of code that looks like it was written by a bevy of drunken sailors, then they are likely to conclude that the same inattention to detail pervades every other aspect of the project.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 546, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17d0af34-8e8c-47ef-acc8-27e908e551ad": {"__data__": {"id_": "17d0af34-8e8c-47ef-acc8-27e908e551ad", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "81f67177-d6d1-45df-9ff3-acb6bbd0d302", "node_type": "4", "metadata": {}, "hash": "709395f2a69f3efed6a386d1a23b448d861081bfb00a579b70abb79e0a57046d", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 5: Formatting\n\nYou should take care that your code is nicely formatted. You should choose a set of simple rules that govern the format of your code, and then you should consistently apply those rules. If you are working on a team, then the team should agree to a single set of formatting rules and all members should comply. It helps to have an automated tool that can apply those formatting rules for you.\n\n# The Purpose of Formatting\n\nFirst of all, let\u2019s be clear. Code formatting is important. It is too important to ignore and it is too important to treat religiously. Code formatting is about communication, and communication is the professional developer\u2019s first order of business.\n\nPerhaps you thought that \u201cgetting it working\u201d was the first order of business for a professional developer. I hope by now, however, that this book has disabused you of that idea. The functionality that you create today has a good chance of changing in the next release, but the readability of your code will have a profound effect on all the changes that will ever be made. The coding style and readability set precedents that continue to affect maintainability and extensibility long after the original code has been changed beyond recognition. Your style and discipline survives, even though your code does not.\n\nSo what are the formatting issues that help us to communicate best?\n\n# Vertical Formatting\n\nLet\u2019s start with vertical size. How big should a source file be? In Java, file size is closely related to class size. We\u2019ll talk about class size when we talk about classes. For the moment let\u2019s just consider file size.\n\nHow big are most Java source files? It turns out that there is a huge range of sizes and some remarkable differences in style. Figure 5-1 shows some of those differences.\n\nSeven different projects are depicted. Junit, FitNesse, testNG, Time and Money, JDepend, Ant, and Tomcat. The lines through the boxes show the minimum and maximum file lengths in each project. The box shows approximately one-third (one standard deviation1) of the files. The middle of the box is the mean. So the average file size in the FitNesse project is about 65 lines, and about one-third of the files are between 40 and 100+ lines. The largest file in FitNesse is about 400 lines and the smallest is 6 lines. Note that this is a log scale, so the small difference in vertical position implies a very large difference in absolute size.\n\n1. The box shows sigma/2 above and below the mean. Yes, I know that the file length distribution is not normal, and so the standard deviation is not mathematically precise. But we\u2019re not trying for precision here. We\u2019re just trying to get a feel.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2687, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36008bfe-7cb3-40fb-b914-df9eec7a85f7": {"__data__": {"id_": "36008bfe-7cb3-40fb-b914-df9eec7a85f7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6b7491cd-e336-479f-a652-d9b5faecb704", "node_type": "4", "metadata": {}, "hash": "ea42bc43d1becd791694343da5f715709becf57dd57671106103652cc6b325d9", "class_name": "RelatedNodeInfo"}}, "text": "# Vertical Formatting\n\n# Figure 5-1\n\nFile length distributions LOG scale (box height = sigma)\n\nJunit, FitNesse, and Time and Money are composed of relatively small files. None are over 500 lines and most of those files are less than 200 lines. Tomcat and Ant, on the other hand, have some files that are several thousand lines long and close to half are over 200 lines.\n\nWhat does that mean to us? It appears to be possible to build significant systems (FitNesse is close to 50,000 lines) out of files that are typically 200 lines long, with an upper limit of 500. Although this should not be a hard and fast rule, it should be considered very desirable. Small files are usually easier to understand than large files are.\n\n# The Newspaper Metaphor\n\nThink of a well-written newspaper article. You read it vertically. At the top you expect a headline that will tell you what the story is about and allows you to decide whether it is something you want to read. The first paragraph gives you a synopsis of the whole story, hiding all the details while giving you the broad-brush concepts. As you continue downward, the details increase until you have all the dates, names, quotes, claims, and other minutia.\n\nWe would like a source file to be like a newspaper article. The name should be simple but explanatory. The name, by itself, should be sufficient to tell us whether we are in the right module or not. The topmost parts of the source file should provide the high-level", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "500fcaf7-ef28-428c-8952-b7e152530a57": {"__data__": {"id_": "500fcaf7-ef28-428c-8952-b7e152530a57", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "11e8bc8c-8b5c-4137-93bf-d5bb2190c667", "node_type": "4", "metadata": {}, "hash": "6142174fdd27a3d0cbddeab0c0d38dc2504752f6858717b71a209cd0f2f36afc", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 5: Formatting\n\nconcepts and algorithms. Detail should increase as we move downward, until at the end we find the lowest level functions and details in the source file.\n\nA newspaper is composed of many articles; most are very small. Some are a bit larger. Very few contain as much text as a page can hold. This makes the newspaper usable. If the newspaper were just one long story containing a disorganized agglomeration of facts, dates, and names, then we simply would not read it.\n\n# Vertical Openness Between Concepts\n\nNearly all code is read left to right and top to bottom. Each line represents an expression or a clause, and each group of lines represents a complete thought. Those thoughts should be separated from each other with blank lines.\n\nConsider, for example, Listing 5-1. There are blank lines that separate the package declaration, the import(s), and each of the functions. This extremely simple rule has a profound effect on the visual layout of the code. Each blank line is a visual cue that identifies a new and separate concept. As you scan down the listing, your eye is drawn to the first line that follows a blank line.\n\n# Listing 5-1\n\nBoldWidget.java\n\npackage fitnesse.wikitext.widgets;\nimport java.util.regex.*;\npublic class BoldWidget extends ParentWidget {\npublic static final String REGEXP = \"'''.+?'''\";\nprivate static final Pattern pattern = Pattern.compile(\"'''(.+?)'''\",\nPattern.MULTILINE + Pattern.DOTALL);\npublic BoldWidget(ParentWidget parent, String text) throws Exception {\nsuper(parent);\nMatcher match = pattern.matcher(text);\nmatch.find();\naddChildWidgets(match.group(1));\n}\npublic String render() throws Exception {\nStringBuffer html = new StringBuffer(\"\");\nhtml.append(childHtml()).append(\"\");\nreturn html.toString();\n}\n}\n\nTaking those blank lines out, as in Listing 5-2, has a remarkably obscuring effect on the readability of the code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1887, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75f48f55-93d5-4c7e-95d0-44a10fa9904d": {"__data__": {"id_": "75f48f55-93d5-4c7e-95d0-44a10fa9904d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9a4cfe53-ffe1-4560-89ae-27e94dd16801", "node_type": "4", "metadata": {}, "hash": "cb89e24a1c68460c12618c7f57926e6661be7c85910a667af7c2b6c3e08c6500", "class_name": "RelatedNodeInfo"}}, "text": "# Vertical Formatting\n\n# Listing 5-2\n\nBoldWidget.java\npackage fitnesse.wikitext.widgets;\nimport java.util.regex.*;\npublic class BoldWidget extends ParentWidget {\npublic static final String REGEXP = \"'''.+?'''\";\nprivate static final Pattern pattern = Pattern.compile(\"'''(.+?)'''\",\nPattern.MULTILINE + Pattern.DOTALL);\npublic BoldWidget(ParentWidget parent, String text) throws Exception {\nsuper(parent);\nMatcher match = pattern.matcher(text);\nmatch.find();\naddChildWidgets(match.group(1));\n}\npublic String render() throws Exception {\nStringBuffer html = new StringBuffer(\"\");\nhtml.append(childHtml()).append(\"\");\nreturn html.toString();\n}\n}\n\nThis effect is even more pronounced when you unfocus your eyes. In the first example the different groupings of lines pop out at you, whereas the second example looks like a muddle. The difference between these two listings is a bit of vertical openness.\n\n# Vertical Density\n\nIf openness separates concepts, then vertical density implies close association. So lines of code that are tightly related should appear vertically dense. Notice how the useless comments in Listing 5-3 break the close association of the two instance variables.\n\n# Listing 5-3\n\npublic class ReporterConfig {\n/*** The class name of the reporter listener\n*/\nprivate String m_className;\n/*** The properties of the reporter listener\n*/\nprivate List<Property> m_properties = new ArrayList<Property>();\npublic void addProperty(Property property) {\nm_properties.add(property);\n}\n}\n\nListing 5-4 is much easier to read. It fits in an \u201ceye-full,\u201d or at least it does for me. I can look at it and see that this is a class with two variables and a method, without having to move my head or eyes much. The previous listing forces me to use much more eye and head motion to achieve the same level of comprehension.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1817, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c07422f-f740-4286-b5fc-c866487f55b9": {"__data__": {"id_": "3c07422f-f740-4286-b5fc-c866487f55b9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ca0db829-8805-471d-a5c2-6fd6cbc8078a", "node_type": "4", "metadata": {}, "hash": "4dc3eb3eb0932921b7522377e46dfd4285e9e30a4d84351bed0a1b8426b9d6d1", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 5: Formatting\n\n# Listing 5-4\n\npublic class ReporterConfig {\nprivate String m_className;\nprivate List<Property> m_properties = new ArrayList<Property>();\n\npublic void addProperty(Property property) {\nm_properties.add(property);\n}\n}\n\n# Vertical Distance\n\nHave you ever chased your tail through a class, hopping from one function to the next, scrolling up and down the source file, trying to divine how the functions relate and operate, only to get lost in a rat\u2019s nest of confusion? Have you ever hunted up the chain of inheritance for the definition of a variable or function? This is frustrating because you are trying to understand what the system does, but you are spending your time and mental energy on trying to locate and remember where the pieces are.\n\nConcepts that are closely related should be kept vertically close to each other [G10]. Clearly this rule doesn\u2019t work for concepts that belong in separate files. But then closely related concepts should not be separated into different files unless you have a very good reason. Indeed, this is one of the reasons that protected variables should be avoided.\n\nFor those concepts that are so closely related that they belong in the same source file, their vertical separation should be a measure of how important each is to the understandability of the other. We want to avoid forcing our readers to hop around through our source files and classes.\n\n# Variable Declarations\n\nVariables should be declared as close to their usage as possible. Because our functions are very short, local variables should appear at the top of each function, as in this longish function from Junit4.3.1.\n\nprivate static void readPreferences() {\nInputStream is = null;\ntry {\nis = new FileInputStream(getPreferencesFile());\nsetPreferences(new Properties(getPreferences()));\ngetPreferences().load(is);\n} catch (IOException e) {\ntry {\nif (is != null) is.close();\n} catch (IOException e1) {\n}\n}\n}\n\nControl variables for loops should usually be declared within the loop statement, as in this cute little function from the same source.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2073, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bd3eb75-d412-49f6-a906-83334f8ef17b": {"__data__": {"id_": "0bd3eb75-d412-49f6-a906-83334f8ef17b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0137af98-7e46-448c-9167-349760428b08", "node_type": "4", "metadata": {}, "hash": "8cbf250173ff099ddd2642080f7e506beec31de12b703007c0f6ce0b45fc105f", "class_name": "RelatedNodeInfo"}}, "text": "# Vertical Formatting\n\npublic int countTestCases() {\nint count= 0;\nfor (Test each : tests)\ncount += each.countTestCases();\nreturn count;\n}\n\nIn rare cases a variable might be declared at the top of a block or just before a loop in a long-ish function. You can see such a variable in this snippet from the midst of a very long function in TestNG.\n\nfor (XmlTest test : m_suite.getTests()) {\nTestRunner tr = m_runnerFactory.newTestRunner(this, test);\ntr.addListener(m_textReporter);\nm_testRunners.add(tr);\ninvoker = tr.getInvoker();\nfor (ITestNGMethod m : tr.getBeforeSuiteMethods()) {\nbeforeSuiteMethods.put(m.getMethod(), m);\n}\nfor (ITestNGMethod m : tr.getAfterSuiteMethods()) {\nafterSuiteMethods.put(m.getMethod(), m);\n}\n}\n\nInstance variables, on the other hand, should be declared at the top of the class. This should not increase the vertical distance of these variables, because in a well-designed class, they are used by many, if not all, of the methods of the class.\n\nThere have been many debates over where instance variables should go. In C++ we commonly practiced the so-called scissors rule, which put all the instance variables at the bottom. The common convention in Java, however, is to put them all at the top of the class. I see no reason to follow any other convention. The important thing is for the instance variables to be declared in one well-known place. Everybody should know where to go to see the declarations.\n\nConsider, for example, the strange case of the TestSuite class in JUnit 4.3.1. I have greatly attenuated this class to make the point. If you look about halfway down the listing, you will see two instance variables declared there. It would be hard to hide them in a better place. Someone reading this code would have to stumble across the declarations by accident (as I did).\n\npublic class TestSuite implements Test {\nstatic public Test createTest(Class<? extends TestCase> theClass, String name) {\n...\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1941, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "edfb05f0-2ca7-427b-b38e-4293ea0c6c67": {"__data__": {"id_": "edfb05f0-2ca7-427b-b38e-4293ea0c6c67", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "78bacbc2-bcb1-4156-a428-a3b4adb1db70", "node_type": "4", "metadata": {}, "hash": "65293bf9a67fba1e3ea98f866aea603ae5046d4d6add1c4b16acfd88615cc36f", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 5: Formatting\n\npublic static Constructor<? extends TestCase>\ngetTestConstructor(Class<? extends TestCase> theClass)\nthrows NoSuchMethodException {...\n}\npublic static Test warning(final String message) {\n...\n}\nprivate static String exceptionToString(Throwable t) {\n...\n}\nprivate String fName;\nprivate Vector<Test> fTests= new Vector<Test>(10);\npublic TestSuite() {\n}\npublic TestSuite(final Class<? extends TestCase> theClass) {\n...\n}\npublic TestSuite(Class<? extends TestCase>                   theClass, String name) {\n...\n}\n... ... ... ... ...\n\n# Dependent Functions\n\nIf one function calls another, they should be vertically close, and the caller should be above the callee, if at all possible. This gives the program a natural flow. If the convention is followed reliably, readers will be able to trust that function definitions will follow shortly after their use. Consider, for example, the snippet from FitNesse in Listing 5-5. Notice how the topmost function calls those below it and how they in turn call those below them. This makes it easy to find the called functions and greatly enhances the readability of the whole module.\n\n# Listing 5-5\n\n# WikiPageResponder.java\n\npublic    class WikiPageResponder implements SecureResponder {\nprotected WikiPage page;\nprotected PageData pageData;\nprotected String pageTitle;\nprotected Request request;\nprotected PageCrawler crawler;\npublic Response makeResponse(FitNesseContext context, Request request)\nthrows Exception {\nString pageName = getPageNameOrDefault(request, \"FrontPage\");", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1542, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b151c28-70a2-4632-b05a-9896e093fa0a": {"__data__": {"id_": "5b151c28-70a2-4632-b05a-9896e093fa0a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b33622c4-5f9c-4b27-ab0a-8007add8120a", "node_type": "4", "metadata": {}, "hash": "72c18d88b5f9992802500a6978cb9bf1565a45e252547b1434d4ef77a4398ba5", "class_name": "RelatedNodeInfo"}}, "text": "# Vertical Formatting\n\n# Listing 5-5 (continued)\n\n# WikiPageResponder.java\n\nloadPage(pageName, context);\nif return notFoundResponse(context, request);(page == null)\nelsereturn makePageResponse(context);\n}\nprivate String getPageNameOrDefault(Request request, String defaultPageName)\n{\nString pageName = request.getResource();\nif pageName = defaultPageName;(StringUtil.isBlank(pageName))\nreturn pageName;\n}\nprotected void loadPage(String resource, FitNesseContext context)\nthrows Exception {\nWikiPagePath path = PathParser.parse(resource);\ncrawler = context.root.getPageCrawler();\ncrawler.setDeadEndStrategy(new VirtualEnabledPageCrawler());\npage = crawler.getPage(context.root, path);\nif pageData = page.getData();(page != null)\n}\nprivate Response notFoundResponse(FitNesseContext context, Request request)\nthrows Exception {\nreturn new NotFoundResponder().makeResponse(context, request);\n}\nprivate SimpleResponse makePageResponse(FitNesseContext context)\nthrows Exception {\npageTitle = PathParser.render(crawler.getFullPath(page));\nString html = makeHtml(context);\nSimpleResponse response = new SimpleResponse();\nresponse.setMaxAge(0);\nresponse.setContent(html);\nreturn response;\n}\n...\n\nAs an aside, this snippet provides a nice example of keeping constants at the appropriate level [G35]. The \"FrontPage\" constant could have been buried in the getPageNameOrDefault function, but that would have hidden a well-known and expected constant in an inappropriately low-level function. It was better to pass that constant down from the place where it makes sense to know it to the place that actually uses it.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1603, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29b3a83b-4da1-4d4b-bb78-77b18dfe533c": {"__data__": {"id_": "29b3a83b-4da1-4d4b-bb78-77b18dfe533c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "321e99a4-6c1c-4c76-a457-6a528e445ad9", "node_type": "4", "metadata": {}, "hash": "345a824281ff5696204e49216f7a4cffbd7609e55d9cee258069a3308d5d1628", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 5: Formatting\n\n# Conceptual Affinity\n\nCertain bits of code want to be near other bits. They have a certain conceptual affinity. The stronger that affinity, the less vertical distance there should be between them.\n\nAs we have seen, this affinity might be based on a direct dependence, such as one function calling another, or a function using a variable. But there are other possible causes of affinity. Affinity might be caused because a group of functions perform a similar operation. Consider this snippet of code from Junit 4.3.1:\n\npublic class Assert {\nstatic public void assertTrue(String message, boolean condition) {\nif fail(message);(!condition)\n}\nstatic public void assertTrue(boolean condition) {\nassertTrue(null, condition);\n}\nstatic public void assertFalse(String message, boolean condition) {\nassertTrue(message, !condition);\n}\nstatic public void assertFalse(boolean condition) {\nassertFalse(null, condition);\n}\n...\n}\n\nThese functions have a strong conceptual affinity because they share a common naming scheme and perform variations of the same basic task. The fact that they call each other is secondary. Even if they didn\u2019t, they would still want to be close together.\n\n# Vertical Ordering\n\nIn general we want function call dependencies to point in the downward direction. That is, a function that is called should be below a function that does the calling.2 This creates a nice flow down the source code module from high level to low level.\n\nAs in newspaper articles, we expect the most important concepts to come first, and we expect them to be expressed with the least amount of polluting detail. We expect the low-level details to come last. This allows us to skim source files, getting the gist from the\n\n2 This is the exact opposite of languages like Pascal, C, and C++ that enforce functions to be defined, or at least declared, before they are used.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1883, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b176278f-1af1-4ae7-91bb-42fad0dbf716": {"__data__": {"id_": "b176278f-1af1-4ae7-91bb-42fad0dbf716", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8dcda919-bcdd-4d0e-80af-596b5a267512", "node_type": "4", "metadata": {}, "hash": "c5103f866c503b804bd2e68ef6e1536ab9df9ffbf651d0ab1ec3da99442e15bd", "class_name": "RelatedNodeInfo"}}, "text": "# Horizontal Formatting\n\nHow wide should a line be? To answer that, let\u2019s look at how wide lines are in typical programs. Again, we examine the seven different projects. Figure 5-2 shows the distribution of line lengths of all seven projects. The regularity is impressive, especially right around 45 characters. Indeed, every size from 20 to 60 represents about 1 percent of the total number of lines. That\u2019s 40 percent! Perhaps another 30 percent are less than 10 characters wide. Remember this is a log scale, so the linear appearance of the drop-off above 80 characters is really very significant. Programmers clearly prefer short lines.\n\n# Figure 5-2\n\nJava line width distribution\n\nThis suggests that we should strive to keep our lines short. The old Hollerith limit of 80 is a bit arbitrary, and I\u2019m not opposed to lines edging out to 100 or even 120. But beyond that is probably just careless.\n\nI used to follow the rule that you should never have to scroll to the right. But monitors are too wide for that nowadays, and younger programmers can shrink the font so small.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1076, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e24781ee-a5a7-42ea-8e3e-71748215d076": {"__data__": {"id_": "e24781ee-a5a7-42ea-8e3e-71748215d076", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "26c3d0e9-f115-4c3e-a05b-4258ca854214", "node_type": "4", "metadata": {}, "hash": "0be6a21153c3914a7ddeb6a49e4aa1329380f87c62a142bb7f52ce4fca8e673d", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 5: Formatting\n\nthat they can get 200 characters across the screen. Don\u2019t do that. I personally set my limit at 120.\n\n# Horizontal Openness and Density\n\nWe use horizontal white space to associate things that are strongly related and disassociate things that are more weakly related. Consider the following function:\n\nprivate void measureLine(String line) {\nlineCount++;\nint lineSize = line.length();\ntotalChars += lineSize;\nlineWidthHistogram.addLine(lineSize, lineCount);\nrecordWidestLine(lineSize);\n}\n\nI surrounded the assignment operators with white space to accentuate them. Assignment statements have two distinct and major elements: the left side and the right side. The spaces make that separation obvious.\n\nOn the other hand, I didn\u2019t put spaces between the function names and the opening parenthesis. This is because the function and its arguments are closely related. Separating them makes them appear disjoined instead of conjoined. I separate arguments within the function call parenthesis to accentuate the comma and show that the arguments are separate.\n\nAnother use for white space is to accentuate the precedence of operators.\n\npublic class Quadratic {\npublic static double root1(double a, double b, double c) {\ndouble determinant = determinant(a, b, c);\nreturn (-b + Math.sqrt(determinant)) / (2*a);\n}\npublic static double root2(int a, int b, int c) {\ndouble determinant = determinant(a, b, c);\nreturn (-b - Math.sqrt(determinant)) / (2*a);\n}\nprivate static double determinant(double a, double b, double c) {\nreturn b*b - 4*a*c;\n}\n}\n\nNotice how nicely the equations read. The factors have no white space between them because they are high precedence. The terms are separated by white space because addition and subtraction are lower precedence.\n\nUnfortunately, most tools for reformatting code are blind to the precedence of operators and impose the same spacing throughout. So subtle spacings like those shown above tend to get lost after you reformat the code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1988, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c657eaf-84f1-4c9e-a0bc-8b97e12e607a": {"__data__": {"id_": "4c657eaf-84f1-4c9e-a0bc-8b97e12e607a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3e628e7b-9a34-48be-b0f0-5ad3fcbe94b0", "node_type": "4", "metadata": {}, "hash": "7e77572c5995a3cc4ef616ce6e198bdb4417a78a28a17382967fca3b12736dae", "class_name": "RelatedNodeInfo"}}, "text": "# Horizontal Formatting\n\n# Horizontal Alignment\n\nWhen I was an assembly language programmer,3 I used horizontal alignment to accentuate certain structures. When I started coding in C, C++, and eventually Java, I continued to try to line up all the variable names in a set of declarations, or all the rvalues in a set of assignment statements. My code might have looked like this:\n\npublic    class FitNesseExpediter implements ResponseSender\n{  private        Socket                 socket;\nprivate        InputStream            input;\nprivate        OutputStream           output;\nprivate        Request                request;\nprivate        Response               response;\nprivate        FitNesseContext context;\nprotected long                        requestParsingTimeLimit;\nprivate        long                   requestProgress;\nprivate        long                   requestParsingDeadline;\nprivate        boolean                hasError;\npublic FitNesseExpediter(Socket                            s,\nFitNesseContext context) throws Exception\n{   this.context =                       context;\nsocket =                             s;\ninput =                              s.getInputStream();\noutput =                             s.getOutputStream();\nrequestParsingTimeLimit = 10000;\n}\n\nI have found, however, that this kind of alignment is not useful. The alignment seems to emphasize the wrong things and leads my eye away from the true intent. For example, in the list of declarations above you are tempted to read down the list of variable names without looking at their types. Likewise, in the list of assignment statements you are tempted to look down the list of rvalues without ever seeing the assignment operator. To make matters worse, automatic reformatting tools usually eliminate this kind of alignment.\n\nSo, in the end, I don\u2019t do this kind of thing anymore. Nowadays I prefer unaligned declarations and assignments, as shown below, because they point out an important deficiency. If I have long lists that need to be aligned, the problem is the length of the lists, not the lack of alignment. The length of the list of declarations in FitNesseExpediter below suggests that this class should be split up.\n\npublic    class FitNesseExpediter implements ResponseSender\n{  private Socket socket;\nprivate InputStream input;\nprivate OutputStream output;\nprivate Request request;\n\n3.  Who am I kidding? I still am an assembly language programmer. You can take the boy away from the metal, but you can\u2019t take the metal out of the boy!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2542, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af55ae02-fbe3-45d5-8c55-330767d238bc": {"__data__": {"id_": "af55ae02-fbe3-45d5-8c55-330767d238bc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e0da973f-01ab-4c4f-a947-7b40b5219b32", "node_type": "4", "metadata": {}, "hash": "bfbfc15462b5240c40340e889ab6c0c7731ec749a3b97a4e7ff05e7cee291406", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 5: Formatting\n\nprivate Response response;\nprivate FitNesseContext context;\nprotected long requestParsingTimeLimit;\nprivate long requestProgress;\nprivate long requestParsingDeadline;\nprivate boolean hasError;\n\npublic FitNesseExpediter(Socket s, FitNesseContext context) throws Exception {\nthis.context = context;\nsocket = s;\ninput = s.getInputStream();\noutput = s.getOutputStream();\nrequestParsingTimeLimit = 10000;\n}\n\n# Indentation\n\nA source file is a hierarchy rather like an outline. There is information that pertains to the file as a whole, to the individual classes within the file, to the methods within the classes, to the blocks within the methods, and recursively to the blocks within the blocks. Each level of this hierarchy is a scope into which names can be declared and in which declarations and executable statements are interpreted.\n\nTo make this hierarchy of scopes visible, we indent the lines of source code in proportion to their position in the hierarchy. Statements at the level of the file, such as most class declarations, are not indented at all. Methods within a class are indented one level to the right of the class. Implementations of those methods are implemented one level to the right of the method declaration. Block implementations are implemented one level to the right of their containing block, and so on.\n\nProgrammers rely heavily on this indentation scheme. They visually line up lines on the left to see what scope they appear in. This allows them to quickly hop over scopes, such as implementations of if or while statements, that are not relevant to their current situation. They scan the left for new method declarations, new variables, and even new classes. Without indentation, programs would be virtually unreadable by humans.\n\nConsider the following programs that are syntactically and semantically identical:\n\npublic class FitNesseServer implements SocketServer {\nprivate FitNesseContext context;\n\npublic FitNesseServer(FitNesseContext context) {\nthis.context = context;\n}\n\npublic void serve(Socket s) {\nserve(s, 10000);\n}\n\npublic void serve(Socket s, long requestTimeout) {\ntry {\nFitNesseExpediter sender = new FitNesseExpediter(s, context);\nsender.setRequestParsingTimeLimit(requestTimeout);\nsender.start();\n} catch(Exception e) {\ne.printStackTrace();\n}\n}\n}\n\n-----\n\npublic class FitNesseServer implements SocketServer {\nprivate FitNesseContext context;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2411, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6cf0c576-72da-4e0f-a3f7-071fe5f713c9": {"__data__": {"id_": "6cf0c576-72da-4e0f-a3f7-071fe5f713c9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "75290870-f1dc-443e-be2c-fa9c0e5f7bcb", "node_type": "4", "metadata": {}, "hash": "073892fb03ff5378f097d70aedae2e57a3524cc8c3ea860bef560d54e503b1d9", "class_name": "RelatedNodeInfo"}}, "text": "# Horizontal Formatting\n\npublic FitNesseServer(FitNesseContext context) {\nthis.context = context;\n}\npublic void serve(Socket s) {serve(s, 10000);\n}\npublic void serve(Socket s, long requestTimeout) {\ntry {FitNesseExpediter sender = new FitNesseExpediter(s, context);\nsender.setRequestParsingTimeLimit(requestTimeout);\nsender.start();\n}\ncatch (Exception e) {e.printStackTrace();\n}\n}\n}\n\nYour eye can rapidly discern the structure of the indented file. You can almost instantly spot the variables, constructors, accessors, and methods. It takes just a few seconds to realize that this is some kind of simple front end to a socket, with a time-out. The unindented version, however, is virtually impenetrable without intense study.\n\n# Breaking Indentation\n\nIt is sometimes tempting to break the indentation rule for short if statements, short while loops, or short functions. Whenever I have succumbed to this temptation, I have almost always gone back and put the indentation back in. So I avoid collapsing scopes down to one line like this:\n\npublic class CommentWidget extends TextWidget\n{  public static final String REGEXP = \"^#[^\\r\\n]*(?:(?:\\r\\n)|\\n|\\r)?\";\npublic CommentWidget(ParentWidget parent, String text){super(parent, text);}\npublic String render() throws Exception {return \"\"; }\n}\n\nI prefer to expand and indent the scopes instead, like this:\n\npublic class CommentWidget extends TextWidget {\npublic static final String REGEXP = \"^#[^\\r\\n]*(?:(?:\\r\\n)|\\n|\\r)?\";\npublic CommentWidget(ParentWidget parent, String text) {\nsuper(parent, text);\n}\npublic String render() throws Exception {return \"\";\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1604, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dfa97452-3007-4300-ab3c-6417540ada2e": {"__data__": {"id_": "dfa97452-3007-4300-ab3c-6417540ada2e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5f3cd516-ecb6-4888-89f7-13af4b0df74d", "node_type": "4", "metadata": {}, "hash": "8f7e58045b2897ad6537a37043e977df67be811eef8bb8f4c8cc9b8472922761", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 5: Formatting\n\n# Dummy Scopes\n\nSometimes the body of a while or for statement is a dummy, as shown below. I don\u2019t like these kinds of structures and try to avoid them. When I can\u2019t avoid them, I make sure that the dummy body is properly indented and surrounded by braces. I can\u2019t tell you how many times I\u2019ve been fooled by a semicolon silently sitting at the end of a while loop on the same line. Unless you make that semicolon visible by indenting it on it\u2019s own line, it\u2019s just too hard to see.\n\nwhile (dis.read(buf, 0, readBufferSize) != -1)\n;\n\n# Team Rules\n\nThe title of this section is a play on words. Every programmer has his own favorite formatting rules, but if he works in a team, then the team rules.\n\nA team of developers should agree upon a single formatting style, and then every member of that team should use that style. We want the software to have a consistent style. We don\u2019t want it to appear to have been written by a bunch of disagreeing individuals.\n\nWhen I started the FitNesse project back in 2002, I sat down with the team to work out a coding style. This took about 10 minutes. We decided where we\u2019d put our braces, what our indent size would be, how we would name classes, variables, and methods, and so forth. Then we encoded those rules into the code formatter of our IDE and have stuck with them ever since. These were not the rules that I prefer; they were rules decided by the team. As a member of that team I followed them when writing code in the FitNesse project.\n\nRemember, a good software system is composed of a set of documents that read nicely. They need to have a consistent and smooth style. The reader needs to be able to trust that the formatting gestures he or she has seen in one source file will mean the same thing in others. The last thing we want to do is add more complexity to the source code by writing it in a jumble of different individual styles.\n\n# Uncle Bob\u2019s Formatting Rules\n\nThe rules I use personally are very simple and are illustrated by the code in Listing 5-6. Consider this an example of how code makes the best coding standard document.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84b0c7a5-8ff6-4897-b606-cc7bc770592d": {"__data__": {"id_": "84b0c7a5-8ff6-4897-b606-cc7bc770592d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3ce2a25b-3cde-4aa2-86d0-4be2dbbc22ca", "node_type": "4", "metadata": {}, "hash": "d631e64380cfd84ee3ddec2480f798e98bb509864f5c16d9f46ac0f5ac0ebc2f", "class_name": "RelatedNodeInfo"}}, "text": "# Uncle Bob\u2019s Formatting Rules\n\n# Listing 5-6\n\n# CodeAnalyzer.java\n\npublic class CodeAnalyzer implements JavaFileAnalysis {\nprivate int lineCount;\nprivate int maxLineWidth;\nprivate int widestLineNumber;\nprivate LineWidthHistogram lineWidthHistogram;\nprivate int totalChars;\n\npublic CodeAnalyzer() {\nlineWidthHistogram = new LineWidthHistogram();\n}\n\npublic static List<File> findJavaFiles(File parentDirectory) {\nList<File> files = new ArrayList<File>();\nfindJavaFiles(parentDirectory, files);\nreturn files;\n}\n\nprivate static void findJavaFiles(File parentDirectory, List<File> files) {\nfor (File file : parentDirectory.listFiles()) {\nif (file.getName().endsWith(\".java\"))\nfiles.add(file);\nelse if (file.isDirectory())\nfindJavaFiles(file, files);\n}\n}\n\npublic void analyzeFile(File javaFile) throws Exception {\nBufferedReader br = new BufferedReader(new FileReader(javaFile));\nString line;\nwhile ((line = br.readLine()) != null)\nmeasureLine(line);\n}\n\nprivate void measureLine(String line) {\nlineCount++;\nint lineSize = line.length();\ntotalChars += lineSize;\nlineWidthHistogram.addLine(lineSize, lineCount);\nrecordWidestLine(lineSize);\n}\n\nprivate void recordWidestLine(int lineSize) {\nif (lineSize > maxLineWidth) {\nmaxLineWidth = lineSize;\nwidestLineNumber = lineCount;\n}\n}\n\npublic int getLineCount() {\nreturn lineCount;\n}\n\npublic int getMaxLineWidth() {\nreturn maxLineWidth;\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1375, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d58b6ef9-2b06-48aa-b98a-573e1e00c309": {"__data__": {"id_": "d58b6ef9-2b06-48aa-b98a-573e1e00c309", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f4d65f6-4127-4109-909a-59e1fe2e0861", "node_type": "4", "metadata": {}, "hash": "8c3b3fd83394bbe420c92c7ba4ad3e8fc5b6ac3a2a94590441fe4d07700a91ad", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 5: Formatting\n\n# Listing 5-6 (continued)\n\npublic int getWidestLineNumber() {return widestLineNumber;\n}\npublic LineWidthHistogram getLineWidthHistogram() {\nreturn lineWidthHistogram;\n}\npublic double getMeanLineWidth() {return (double)totalChars/lineCount;\n}\npublic int getMedianLineWidth() {Integer[] sortedWidths = getSortedWidths();\nint cumulativeLineCount = 0;\nfor (int width : sortedWidths) {cumulativeLineCount += lineCountForWidth(width);\nif (cumulativeLineCount > lineCount/2)return width;\n}\nthrow new Error(\"Cannot get here\");\n}\nprivate int lineCountForWidth(int width) {\nreturn lineWidthHistogram.getLinesforWidth(width).size();\n}\nprivate Integer[] getSortedWidths() {Set<Integer> widths = lineWidthHistogram.getWidths();\nInteger[] sortedWidths = (widths.toArray(new Integer[0]));\nArrays.sort(sortedWidths);\nreturn sortedWidths;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 850, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7d2e7e5-7cf5-4080-b1b8-8246deeca572": {"__data__": {"id_": "a7d2e7e5-7cf5-4080-b1b8-8246deeca572", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "372d1996-de06-426e-a430-a6b6cad0476a", "node_type": "4", "metadata": {}, "hash": "bbe24c6c00299db819ee8aae1cc0124910441a4065a7e02aba30d4b2cddcd07c", "class_name": "RelatedNodeInfo"}}, "text": "# 6 Objects and Data Structures\n\nThere is a reason that we keep our variables private. We don\u2019t want anyone else to depend on them. We want to keep the freedom to change their type or implementation on a whim or an impulse. Why, then, do so many programmers automatically add getters and setters to their objects, exposing their private variables as if they were public?\n\n# Data Abstraction\n\nConsider the difference between Listing 6-1 and Listing 6-2. Both represent the data of a point on the Cartesian plane. And yet one exposes its implementation and the other completely hides it.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 585, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c561f292-db90-4ed9-a7a2-d7c8705e00ce": {"__data__": {"id_": "c561f292-db90-4ed9-a7a2-d7c8705e00ce", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "29a96a0d-8aa9-4fa9-812d-839eba70911a", "node_type": "4", "metadata": {}, "hash": "dbb2166d8c52cccefaa30fda25e5999d167b2f336864d49a3157a82696e2751c", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 6: Objects and Data Structures\n\n# Listing 6-1\n\n# Concrete Point\n\npublic    class Point {\npublic double x;\npublic double y;\n}\n\n# Listing 6-2\n\n# Abstract Point\n\npublic    interface Point {\ndouble getX();\ndouble getY();\nvoid   setCartesian(double x, double y);\ndouble getR();\ndouble getTheta();\nvoid   setPolar(double r, double theta);\n}\n\nThe beautiful thing about Listing 6-2 is that there is no way you can tell whether the implementation is in rectangular or polar coordinates. It might be neither! And yet the interface still unmistakably represents a data structure.\n\nBut it represents more than just a data structure. The methods enforce an access policy. You can read the individual coordinates independently, but you must set the coordinates together as an atomic operation.\n\nListing 6-1, on the other hand, is very clearly implemented in rectangular coordinates, and it forces us to manipulate those coordinates independently. This exposes implementation. Indeed, it would expose implementation even if the variables were private and we were using single variable getters and setters.\n\nHiding implementation is not just a matter of putting a layer of functions between the variables. Hiding implementation is about abstractions! A class does not simply push its variables out through getters and setters. Rather it exposes abstract interfaces that allow its users to manipulate the essence of the data, without having to know its implementation.\n\nConsider Listing 6-3 and Listing 6-4. The first uses concrete terms to communicate the fuel level of a vehicle, whereas the second does so with the abstraction of percentage. In the concrete case you can be pretty sure that these are just accessors of variables. In the abstract case you have no clue at all about the form of the data.\n\n# Listing 6-3\n\n# Concrete Vehicle\n\npublic    interface Vehicle {\ndouble getFuelTankCapacityInGallons();\ndouble getGallonsOfGasoline();\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1936, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79463e93-cedf-4c23-8710-92d8d0159ea9": {"__data__": {"id_": "79463e93-cedf-4c23-8710-92d8d0159ea9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "07e6cd1d-6d63-45dd-8b7d-fd48c734ab62", "node_type": "4", "metadata": {}, "hash": "7d4417f525d3f30946402f41e24bcb49000198d7055b61e690dd30106aeada70", "class_name": "RelatedNodeInfo"}}, "text": "# Data/Object Anti-Symmetry\n\n# Listing 6-4\n\npublic interface Vehicle {\ndouble getPercentFuelRemaining();\n}\n\nIn both of the above cases the second option is preferable. We do not want to expose the details of our data. Rather we want to express our data in abstract terms. This is not merely accomplished by using interfaces and/or getters and setters. Serious thought needs to be put into the best way to represent the data that an object contains. The worst option is to blithely add getters and setters.\n\n# Data/Object Anti-Symmetry\n\nThese two examples show the difference between objects and data structures. Objects hide their data behind abstractions and expose functions that operate on that data. Data structures expose their data and have no meaningful functions. Go back and read that again. Notice the complimentary nature of the two definitions. They are virtual opposites. This difference may seem trivial, but it has far-reaching implications.\n\nConsider, for example, the procedural shape example in Listing 6-5. The Geometry class operates on the three shape classes. The shape classes are simple data structures without any behavior. All the behavior is in the Geometry class.\n\n# Listing 6-5\n\npublic class Square {\npublic Point topLeft;\npublic double side;\n}\npublic class Rectangle {\npublic Point topLeft;\npublic double height;\npublic double width;\n}\npublic class Circle {\npublic Point center;\npublic double radius;\n}\npublic class Geometry {\npublic final double PI = 3.141592653589793;\n\npublic double area(Object shape) throws NoSuchShapeException {\nif (shape instanceof Square) {\nSquare s = (Square)shape;\nreturn s.side * s.side;\n}\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1651, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c39eb48b-6ece-4c6f-9c37-c69a118de154": {"__data__": {"id_": "c39eb48b-6ece-4c6f-9c37-c69a118de154", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dff9e31a-5d34-4e92-b210-db7da99093fc", "node_type": "4", "metadata": {}, "hash": "09493d5b077507967513c845ebab4029a63d2400f7df33748ca95e9b3d52cc17", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 6: Objects and Data Structures\n\n# Listing 6-5 (continued)\n\nProcedural Shape\nelse if (shape instanceof Rectangle) {\nRectangle r = (Rectangle)shape;\nreturn r.height * r.width;\n}\nelse if (shape instanceof Circle) {\nCircle c = (Circle)shape;\nreturn PI * c.radius * c.radius;\n}\nthrow new NoSuchShapeException();\n}\n\nObject-oriented programmers might wrinkle their noses at this and complain that it is procedural\u2014and they\u2019d be right. But the sneer may not be warranted. Consider what would happen if a perimeter() function were added to Geometry. The shape classes would be unaffected! Any other classes that depended upon the shapes would also be unaffected! On the other hand, if I add a new shape, I must change all the functions in Geometry to deal with it. Again, read that over. Notice that the two conditions are diametrically opposed.\n\nNow consider the object-oriented solution in Listing 6-6. Here the area() method is polymorphic. No Geometry class is necessary. So if I add a new shape, none of the existing functions are affected, but if I add a new function all of the shapes must be changed!1\n\n# Listing 6-6\n\nPolymorphic Shapes\npublic class Square implements Shape {\nprivate Point topLeft;\nprivate double side;\npublic double area() {return side*side;}\n}\npublic class Rectangle implements Shape {\nprivate Point topLeft;\nprivate double height;\nprivate double width;\npublic double area() {return height * width;}\n}\n\n1 There are ways around this that are well known to experienced object-oriented designers: VISITOR, or dual-dispatch, for example. But these techniques carry costs of their own and generally return the structure to that of a procedural program.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1675, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6d1f671-0a4a-4324-8c29-5895503611b7": {"__data__": {"id_": "a6d1f671-0a4a-4324-8c29-5895503611b7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ebb9d183-cfcd-4342-9716-afddeaa1302e", "node_type": "4", "metadata": {}, "hash": "4386f7e42901f30de068aafea37fa3649e33f2d56cd9c272f7cf4d2033643491", "class_name": "RelatedNodeInfo"}}, "text": "# The Law of Demeter\n\nListing 6-6 (continued)\n\n# Polymorphic Shapes\n\npublic class Circle implements Shape {\nprivate Point center;\nprivate double radius;\npublic final double PI = 3.141592653589793;\npublic double area() {return PI * radius * radius;}\n}\n\nAgain, we see the complimentary nature of these two definitions; they are virtual opposites! This exposes the fundamental dichotomy between objects and data structures:\n\nProcedural code (code using data structures) makes it easy to add new functions without changing the existing data structures. OO code, on the other hand, makes it easy to add new classes without changing existing functions.\n\nThe complement is also true:\n\nProcedural code makes it hard to add new data structures because all the functions must change. OO code makes it hard to add new functions because all the classes must change.\n\nSo, the things that are hard for OO are easy for procedures, and the things that are hard for procedures are easy for OO!\n\nIn any complex system there are going to be times when we want to add new data types rather than new functions. For these cases objects and OO are most appropriate. On the other hand, there will also be times when we\u2019ll want to add new functions as opposed to data types. In that case procedural code and data structures will be more appropriate.\n\nMature programmers know that the idea that everything is an object is a myth. Sometimes you really do want simple data structures with procedures operating on them.\n\n# The Law of Demeter\n\nThere is a well-known heuristic called the Law of Demeter2 that says a module should not know about the innards of the objects it manipulates. As we saw in the last section, objects hide their data and expose operations. This means that an object should not expose its internal structure through accessors because to do so is to expose, rather than to hide, its internal structure.\n\nMore precisely, the Law of Demeter says that a method f of a class C should only call the methods of these:\n\n- C\n- An object created by f\n\n2. http://en.wikipedia.org/wiki/Law_of_Demeter", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2082, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6622d65e-1e2f-490c-827c-fea83ee1e280": {"__data__": {"id_": "6622d65e-1e2f-490c-827c-fea83ee1e280", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "431f2daa-f594-4600-b8e8-e0734771e623", "node_type": "4", "metadata": {}, "hash": "5c28a9e4a730b98c36bd0571f0d8d1fbfcc361a62b3d26809ea38885a8b61b13", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 6: Objects and Data Structures\n\n\u2022 An object passed as an argument to f\n\n\u2022 An object held in an instance variable of C\n\nThe method should not invoke methods on objects that are returned by any of the allowed functions. In other words, talk to friends, not to strangers.\n\nThe following code3 appears to violate the Law of Demeter (among other things) because it calls the getScratchDir() function on the return value of getOptions() and then calls getAbsolutePath() on the return value of getScratchDir().\n\nfinal String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();\n\n# Train Wrecks\n\nThis kind of code is often called a train wreck because it looks like a bunch of coupled train cars. Chains of calls like this are generally considered to be sloppy style and should be avoided [G36]. It is usually best to split them up as follows:\n\nOptions opts = ctxt.getOptions();\n\nFile scratchDir = opts.getScratchDir();\n\nfinal String outputDir = scratchDir.getAbsolutePath();\n\nAre these two snippets of code violations of the Law of Demeter? Certainly the containing module knows that the ctxt object contains options, which contain a scratch directory, which has an absolute path. That\u2019s a lot of knowledge for one function to know. The calling function knows how to navigate through a lot of different objects.\n\nWhether this is a violation of Demeter depends on whether or not ctxt, Options, and ScratchDir are objects or data structures. If they are objects, then their internal structure should be hidden rather than exposed, and so knowledge of their innards is a clear violation of the Law of Demeter. On the other hand, if ctxt, Options, and ScratchDir are just data structures with no behavior, then they naturally expose their internal structure, and so Demeter does not apply.\n\nThe use of accessor functions confuses the issue. If the code had been written as follows, then we probably wouldn\u2019t be asking about Demeter violations.\n\nfinal String outputDir = ctxt.options.scratchDir.absolutePath;\n\nThis issue would be a lot less confusing if data structures simply had public variables and no functions, whereas objects had private variables and public functions. However,\n\n3. Found somewhere in the apache framework.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2239, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "803713a0-3968-42c5-b39e-38a2546ebfbe": {"__data__": {"id_": "803713a0-3968-42c5-b39e-38a2546ebfbe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b9a1e04-0615-4171-8829-ed2e9e54065c", "node_type": "4", "metadata": {}, "hash": "4d510205b589c4c446174ce2fcbef084d32b7851c6b03ba48c69bd2c5f42aaab", "class_name": "RelatedNodeInfo"}}, "text": "# The Law of Demeter\n\nthere are frameworks and standards (e.g., \u201cbeans\u201d) that demand that even simple data structures have accessors and mutators.\n\n# Hybrids\n\nThis confusion sometimes leads to unfortunate hybrid structures that are half object and half data structure. They have functions that do significant things, and they also have either public variables or public accessors and mutators that, for all intents and purposes, make the private variables public, tempting other external functions to use those variables the way a procedural program would use a data structure.4\n\nSuch hybrids make it hard to add new functions but also make it hard to add new data structures. They are the worst of both worlds. Avoid creating them. They are indicative of a muddled design whose authors are unsure of\u2014or worse, ignorant of\u2014whether they need protection from functions or types.\n\n# Hiding Structure\n\nWhat if ctxt, options, and scratchDir are objects with real behavior? Then, because objects are supposed to hide their internal structure, we should not be able to navigate through them. How then would we get the absolute path of the scratch directory?\n\nctxt.getAbsolutePathOfScratchDirectoryOption(); or ctx.getScratchDirectoryOption().getAbsolutePath()\n\nThe first option could lead to an explosion of methods in the ctxt object. The second presumes that getScratchDirectoryOption() returns a data structure, not an object. Neither option feels good.\n\nIf ctxt is an object, we should be telling it to do something; we should not be asking it about its internals. So why did we want the absolute path of the scratch directory? What were we going to do with it? Consider this code from (many lines farther down in) the same module:\n\nString outFile = outputDir + \"/\" + className.replace('.', '/') + \".class\";\n\nFileOutputStream fout = new FileOutputStream(outFile);\n\nBufferedOutputStream bos = new BufferedOutputStream(fout);\n\nThe admixture of different levels of detail [G34][G6] is a bit troubling. Dots, slashes, file extensions, and File objects should not be so carelessly mixed together, and mixed with the enclosing code. Ignoring that, however, we see that the intent of getting the absolute path of the scratch directory was to create a scratch file of a given name.\n\n4. This is sometimes called Feature Envy from [Refactoring].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2332, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c052e3b-4b34-4668-99f0-38d67db95935": {"__data__": {"id_": "6c052e3b-4b34-4668-99f0-38d67db95935", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "91a542e5-0019-4902-8741-69c75eed8b25", "node_type": "4", "metadata": {}, "hash": "05733d5e73d33ad825edff56d094d5cfd727e259cacce93f62f8b54cf84bc12f", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 6: Objects and Data Structures\n\nSo, what if we told the ctxt object to do this?\n\nBufferedOutputStream bos = ctxt.createScratchFileStream(classFileName);\nThat seems like a reasonable thing for an object to do! This allows ctxt to hide its internals and prevents the current function from having to violate the Law of Demeter by navigating through objects it shouldn\u2019t know about.\n\n# Data Transfer Objects\n\nThe quintessential form of a data structure is a class with public variables and no functions. This is sometimes called a data transfer object, or DTO. DTOs are very useful structures, especially when communicating with databases or parsing messages from sockets, and so on. They often become the first in a series of translation stages that convert raw data in a database into objects in the application code.\n\nSomewhat more common is the \u201cbean\u201d form shown in Listing 6-7. Beans have private variables manipulated by getters and setters. The quasi-encapsulation of beans seems to make some OO purists feel better but usually provides no other benefit.\n\n# Listing 6-7\n\n# address.java\n\npublic class Address {\nprivate String street;\nprivate String streetExtra;\nprivate String city;\nprivate String state;\nprivate String zip;\npublic Address(String street, String streetExtra,String city, String state, String zip) {\nthis.street = street;\nthis.streetExtra = streetExtra;\nthis.city = city;\nthis.state = state;\nthis.zip = zip;\n}\npublic String getStreet() {return street;}\npublic String getStreetExtra() {return streetExtra;}\npublic String getCity() {return city;}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3044002f-abf0-4ebd-ac21-f9ffea7a52c4": {"__data__": {"id_": "3044002f-abf0-4ebd-ac21-f9ffea7a52c4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3cbe5a0-fab5-4a33-bb62-0dd43731453b", "node_type": "4", "metadata": {}, "hash": "aa1c76eeaf3648301da07c4cf9b2555b876d67e3a7cb062ce451122523f84e31", "class_name": "RelatedNodeInfo"}}, "text": "# Bibliography\n\n101\n\n# Listing 6-7 (continued)\n\naddress.java\npublic String getState() {return state;\n}\npublic String getZip() {return zip;\n}\n\n# Active Record\n\nActive Records are special forms of DTOs. They are data structures with public (or bean-accessed) variables; but they typically have navigational methods like save and find. Typically these Active Records are direct translations from database tables, or other data sources.\n\nUnfortunately we often find that developers try to treat these data structures as though they were objects by putting business rule methods in them. This is awkward because it creates a hybrid between a data structure and an object.\n\nThe solution, of course, is to treat the Active Record as a data structure and to create separate objects that contain the business rules and that hide their internal data (which are probably just instances of the Active Record).\n\n# Conclusion\n\nObjects expose behavior and hide data. This makes it easy to add new kinds of objects without changing existing behaviors. It also makes it hard to add new behaviors to existing objects. Data structures expose data and have no significant behavior. This makes it easy to add new behaviors to existing data structures but makes it hard to add new data structures to existing functions.\n\nIn any given system we will sometimes want the flexibility to add new data types, and so we prefer objects for that part of the system. Other times we will want the flexibility to add new behaviors, and so in that part of the system we prefer data types and procedures. Good software developers understand these issues without prejudice and choose the approach that is best for the job at hand.\n\n# Bibliography\n\n[Refactoring]: Refactoring: Improving the Design of Existing Code, Martin Fowler et al., Addison-Wesley, 1999.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1821, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "71bfc9e5-9ae3-4dea-93f4-b83860251771": {"__data__": {"id_": "71bfc9e5-9ae3-4dea-93f4-b83860251771", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "94854d01-4bfa-455c-bdd4-4a009a2d89bd", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ae9eac2-b2b8-44b7-9db7-d3db0853d180": {"__data__": {"id_": "5ae9eac2-b2b8-44b7-9db7-d3db0853d180", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19d6beb9-c634-497d-beea-109a48d6890d", "node_type": "4", "metadata": {}, "hash": "b0d90cb64724900b3a45d7fd937b321edcfe1241e9472f107d4a2f4cee5297ce", "class_name": "RelatedNodeInfo"}}, "text": "# Error Handling\n\n# by Michael Feathers\n\nIt might seem odd to have a section about error handling in a book about clean code. Error handling is just one of those things that we all have to do when we program. Input can be abnormal and devices can fail. In short, things can go wrong, and when they do, we as programmers are responsible for making sure that our code does what it needs to do.\n\nThe connection to clean code, however, should be clear. Many code bases are completely dominated by error handling. When I say dominated, I don\u2019t mean that error handling is all that they do. I mean that it is nearly impossible to see what the code does because of all of the scattered error handling. Error handling is important, but if it obscures logic, it\u2019s wrong.\n\nIn this chapter I\u2019ll outline a number of techniques and considerations that you can use to write code that is both clean and robust\u2014code that handles errors with grace and style.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 941, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "037586cb-4709-4132-b37f-e0f69b7665b7": {"__data__": {"id_": "037586cb-4709-4132-b37f-e0f69b7665b7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e3c51dd3-04c3-47e1-8192-db54d888af92", "node_type": "4", "metadata": {}, "hash": "b2666e5adc5971d78217426237f1bfdf84a5318582ea68e970ccfd2de28969af", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 7: Error Handling\n\n# Use Exceptions Rather Than Return Codes\n\nBack in the distant past there were many languages that didn\u2019t have exceptions. In those languages the techniques for handling and reporting errors were limited. You either set an error flag or returned an error code that the caller could check. The code in Listing 7-1 illustrates these approaches.\n\n# Listing 7-1\n\nDeviceController.java\n\npublic class DeviceController {\n...\npublic void sendShutDown() {\nDeviceHandle handle = getHandle(DEV1);\n// Check the state of the device\nif (handle != DeviceHandle.INVALID) {\nretrieveDeviceRecord(handle);\n// If not suspended, shut down\nif (record.getStatus() != DEVICE_SUSPENDED) {\npauseDevice(handle);\nclearDeviceWorkQueue(handle);\ncloseDevice(handle);\n} else {\nlogger.log(\"Device suspended. Unable to shut down\");\n}\n} else {\nlogger.log(\"Invalid handle for: \" + DEV1.toString());\n}\n}\n...\n}\n\nThe problem with these approaches is that they clutter the caller. The caller must check for errors immediately after the call. Unfortunately, it\u2019s easy to forget. For this reason it is better to throw an exception when you encounter an error. The calling code is cleaner. Its logic is not obscured by error handling.\n\n# Listing 7-2\n\nDeviceController.java (with exceptions)\n\npublic class DeviceController {\n...\npublic void sendShutDown() {\ntry {\ntryToShutDown();\n} catch (DeviceShutDownError e) {\nlogger.log(e);\n}\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1420, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4b3115e-043d-48e8-bac1-d121bcaa65c4": {"__data__": {"id_": "f4b3115e-043d-48e8-bac1-d121bcaa65c4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d4790dfc-1083-4506-abdc-c6d40bf9241f", "node_type": "4", "metadata": {}, "hash": "d0867499fb5dadb120060e637750498ec8a3ceeefa873f22bb88328eb26a86c5", "class_name": "RelatedNodeInfo"}}, "text": "# Write Your Try-Catch-Finally Statement First\n\nListing 7-2 (continued)\n\n# DeviceController.java (with exceptions)\n\nprivate void tryToShutDown() throws DeviceShutDownError {\nDeviceHandle handle = getHandle(DEV1);\nDeviceRecord record = retrieveDeviceRecord(handle);\npauseDevice(handle);\nclearDeviceWorkQueue(handle);\ncloseDevice(handle);\n}\nprivate DeviceHandle getHandle(DeviceID id) {\n...\nthrow new DeviceShutDownError(\"Invalid handle for: \" + id.toString());\n...\n}\n...\n\nNotice how much cleaner it is. This isn\u2019t just a matter of aesthetics. The code is better because two concerns that were tangled, the algorithm for device shutdown and error handling, are now separated. You can look at each of those concerns and understand them independently.\n\n# Write Your Try-Catch-Finally Statement First\n\nOne of the most interesting things about exceptions is that they define a scope within your program. When you execute code in the try portion of a try-catch-finally statement, you are stating that execution can abort at any point and then resume at the catch.\n\nIn a way, try blocks are like transactions. Your catch has to leave your program in a consistent state, no matter what happens in the try. For this reason it is good practice to start with a try-catch-finally statement when you are writing code that could throw exceptions. This helps you define what the user of that code should expect, no matter what goes wrong with the code that is executed in the try.\n\nLet\u2019s look at an example. We need to write some code that accesses a file and reads some serialized objects.\n\nWe start with a unit test that shows that we\u2019ll get an exception when the file doesn\u2019t exist:\n\n@Test(expected = StorageException.class)\npublic void retrieveSectionShouldThrowOnInvalidFileName() {\nsectionStore.retrieveSection(\"invalid - file\");\n}\n\nThe test drives us to create this stub:\n\npublic List<RecordedGrip> retrieveSection(String sectionName) {\n// dummy return until we have a real implementation\nreturn new ArrayList<RecordedGrip>();\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2019, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5b177f1-e2a1-4ae7-8d18-181ff29c69e9": {"__data__": {"id_": "c5b177f1-e2a1-4ae7-8d18-181ff29c69e9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "479799ab-7d82-4297-a293-c918a11f68cf", "node_type": "4", "metadata": {}, "hash": "fd537a3e8d0fd9290976078bfb828326fe6ccf5d79fe52263459a7aff0e31126", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 7: Error Handling\n\nOur test fails because it doesn\u2019t throw an exception. Next, we change our implementation so that it attempts to access an invalid file. This operation throws an exception:\n\npublic try {List<RecordedGrip> retrieveSection(String sectionName) {\nFileInputStream stream = new FileInputStream(sectionName)\n} catch (Exception e) {throw new StorageException(\"retrieval error\", e);\n}\nreturn new ArrayList<RecordedGrip>();\n\nOur test passes now because we\u2019ve caught the exception. At this point, we can refactor. We can narrow the type of the exception we catch to match the type that is actually thrown from the FileInputStream constructor: FileNotFoundException:\n\npublic try {List<RecordedGrip> retrieveSection(String sectionName) {\nFileInputStream stream = new FileInputStream(sectionName);\nstream.close();\n} catch (FileNotFoundException e) {throw new StorageException(\"retrieval error\u201d, e);\n}\nreturn new ArrayList<RecordedGrip>();\n\nNow that we\u2019ve defined the scope with a try-catch structure, we can use TDD to build up the rest of the logic that we need. That logic will be added between the creation of the FileInputStream and the close, and can pretend that nothing goes wrong.\n\nTry to write tests that force exceptions, and then add behavior to your handler to satisfy your tests. This will cause you to build the transaction scope of the try block first and will help you maintain the transaction nature of that scope.\n\n# Use Unchecked Exceptions\n\nThe debate is over. For years Java programmers have debated over the benefits and liabilities of checked exceptions. When checked exceptions were introduced in the first version of Java, they seemed like a great idea. The signature of every method would list all of the exceptions that it could pass to its caller. Moreover, these exceptions were part of the type of the method. Your code literally wouldn\u2019t compile if the signature didn\u2019t match what your code could do.\n\nAt the time, we thought that checked exceptions were a great idea; and yes, they can yield some benefit. However, it is clear now that they aren\u2019t necessary for the production of robust software. C# doesn\u2019t have checked exceptions, and despite valiant attempts, C++ doesn\u2019t either. Neither do Python or Ruby. Yet it is possible to write robust software in all of these languages. Because that is the case, we have to decide\u2014really\u2014whether checked exceptions are worth their price.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2427, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fc3a558-29f3-4166-9f59-f4ba4f8d9253": {"__data__": {"id_": "8fc3a558-29f3-4166-9f59-f4ba4f8d9253", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "011a7eb2-2844-431e-91da-a45974adb667", "node_type": "4", "metadata": {}, "hash": "66743ad26c671d9db8e2e8b3777e8ec7213b0c43126df3173792a7118d6cf34a", "class_name": "RelatedNodeInfo"}}, "text": "# Define Exception Classes in Terms of a Caller\u2019s Needs\n\nWhat price? The price of checked exceptions is an Open/Closed Principle1 violation. If you throw a checked exception from a method in your code and the catch is three levels above, you must declare that exception in the signature of each method between you and the catch. This means that a change at a low level of the software can force signature changes on many higher levels. The changed modules must be rebuilt and redeployed, even though nothing they care about changed.\n\nConsider the calling hierarchy of a large system. Functions at the top call functions below them, which call more functions below them, ad infinitum. Now let\u2019s say one of the lowest level functions is modified in such a way that it must throw an exception. If that exception is checked, then the function signature must add a throws clause. But this means that every function that calls our modified function must also be modified either to catch the new exception or to append the appropriate throws clause to its signature. Ad infinitum. The net result is a cascade of changes that work their way from the lowest levels of the software to the highest! Encapsulation is broken because all functions in the path of a throw must know about details of that low-level exception. Given that the purpose of exceptions is to allow you to handle errors at a distance, it is a shame that checked exceptions break encapsulation in this way.\n\nChecked exceptions can sometimes be useful if you are writing a critical library: You must catch them. But in general application development the dependency costs outweigh the benefits.\n\n# Provide Context with Exceptions\n\nEach exception that you throw should provide enough context to determine the source and location of an error. In Java, you can get a stack trace from any exception; however, a stack trace can\u2019t tell you the intent of the operation that failed.\n\nCreate informative error messages and pass them along with your exceptions. Mention the operation that failed and the type of failure. If you are logging in your application, pass along enough information to be able to log the error in your catch.\n\n# Define Exception Classes in Terms of a Caller\u2019s Needs\n\nThere are many ways to classify errors. We can classify them by their source: Did they come from one component or another? Or their type: Are they device failures, network failures, or programming errors? However, when we define exception classes in an application, our most important concern should be how they are caught.\n\n1. [Martin].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9546141b-09b5-483a-b84d-1e6ef3142cb0": {"__data__": {"id_": "9546141b-09b5-483a-b84d-1e6ef3142cb0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "eca1e77c-4f7f-46ca-aa8d-553e52ad8b61", "node_type": "4", "metadata": {}, "hash": "87f3ea1ebc87861ea8a4d223a0b9e6cd1654728d267a2328266c5aabc8d23224", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 7: Error Handling\n\nLet\u2019s look at an example of poor exception classification. Here is a try-catch-finally statement for a third-party library call. It covers all of the exceptions that the calls can throw:\n\nACMEPort port = new ACMEPort(12);\ntry {\nport.open();\n} catch (DeviceResponseException e) {\nreportPortError(e);\nlogger.log(\"Device response exception\", e);\n} catch (ATM1212UnlockedException e) {\nreportPortError(e);\nlogger.log(\"Unlock exception\", e);\n} catch (GMXError e) {\nreportPortError(e);\nlogger.log(\"Device response exception\");\n} finally {\n\u2026\n}\n\nThat statement contains a lot of duplication, and we shouldn\u2019t be surprised. In most exception handling situations, the work that we do is relatively standard regardless of the actual cause. We have to record an error and make sure that we can proceed.\n\nIn this case, because we know that the work that we are doing is roughly the same regardless of the exception, we can simplify our code considerably by wrapping the API that we are calling and making sure that it returns a common exception type:\n\nLocalPort port = new LocalPort(12);\ntry {\nport.open();\n} catch (PortDeviceFailure e) {\nreportError(e);\nlogger.log(e.getMessage(), e);\n} finally {\n\u2026\n}\n\nOur LocalPort class is just a simple wrapper that catches and translates exceptions thrown by the ACMEPort class:\n\npublic class LocalPort {\nprivate ACMEPort innerPort;\npublic LocalPort(int portNumber) {\ninnerPort = new ACMEPort(portNumber);\n}\npublic void open() {\ntry {\ninnerPort.open();\n} catch (DeviceResponseException e) {\nthrow new PortDeviceFailure(e);\n} catch (ATM1212UnlockedException e) {\nthrow new PortDeviceFailure(e);\n} catch (GMXError e) {\n\u2026\n}\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34705267-76d4-404d-8f1d-707368fed4bc": {"__data__": {"id_": "34705267-76d4-404d-8f1d-707368fed4bc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4bbfbd84-2c41-4d7b-879e-bd7045aa5bf8", "node_type": "4", "metadata": {}, "hash": "edd7d970a048c513a15fca8696df3670d69163ed1af960a7cc380ae6cab77219", "class_name": "RelatedNodeInfo"}}, "text": "# Define the Normal Flow\n\nthrow new PortDeviceFailure(e);\n\nWrappers like the one we defined for ACMEPort can be very useful. In fact, wrapping third-party APIs is a best practice. When you wrap a third-party API, you minimize your dependencies upon it: You can choose to move to a different library in the future without much penalty. Wrapping also makes it easier to mock out third-party calls when you are testing your own code.\n\nOne final advantage of wrapping is that you aren\u2019t tied to a particular vendor\u2019s API design choices. You can define an API that you feel comfortable with. In the preceding example, we defined a single exception type for port device failure and found that we could write much cleaner code.\n\nOften a single exception class is fine for a particular area of code. The information sent with the exception can distinguish the errors. Use different classes only if there are times when you want to catch one exception and allow the other one to pass through.\n\n# Define the Normal Flow\n\nIf you follow the advice in the preceding sections, you\u2019ll end up with a good amount of separation between your business logic and your error handling. The bulk of your code will start to look like a clean unadorned algorithm. However, the process of doing this pushes error detection to the edges of your program. You wrap external APIs so that you can throw your own exceptions, and you define a handler above your code so that you can deal with any aborted computation. Most of the time this is a great approach, but there are some times when you may not want to abort.\n\nLet\u2019s take a look at an example. Here is some awkward code that sums expenses in a billing application:\n\ntry {\nMealExpenses expenses = expenseReportDAO.getMeals(employee.getID());\nm_total += expenses.getTotal();\n} catch(MealExpensesNotFound e) {\nm_total += getMealPerDiem();\n}\n\nIn this business, if meals are expensed, they become part of the total. If they aren\u2019t, the employee gets a meal per diem amount for that day. The exception clutters the logic. Wouldn\u2019t it be better if we didn\u2019t have to deal with the special case? If we didn\u2019t, our code would look much simpler. It would look like this:\n\nMealExpenses expenses = expenseReportDAO.getMeals(employee.getID());\nm_total += expenses.getTotal();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2285, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "000a83bc-3b81-46a3-8a5a-74f6771da929": {"__data__": {"id_": "000a83bc-3b81-46a3-8a5a-74f6771da929", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9ed6479c-2835-4ef2-829d-e0a75ef0b6f0", "node_type": "4", "metadata": {}, "hash": "06ead3047751ddcb012919ea4317566ecd908a35e1aaf464151e7718f5829637", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 7: Error Handling\n\nCan we make the code that simple? It turns out that we can. We can change the ExpenseReportDAO so that it always returns a MealExpense object. If there are no meal expenses, it returns a MealExpense object that returns the per diem as its total:\n\npublic class PerDiemMealExpenses implements MealExpenses {\npublic int getTotal() {// return the per diem default\n}\n}\nThis is called the SPECIAL CASE PATTERN [Fowler]. You create a class or configure an object so that it handles a special case for you. When you do, the client code doesn\u2019t have to deal with exceptional behavior. That behavior is encapsulated in the special case object.\n\n# Don\u2019t Return Null\n\nI think that any discussion about error handling should include mention of the things we do that invite errors. The first on the list is returning null. I can\u2019t begin to count the number of applications I\u2019ve seen in which nearly every other line was a check for null. Here is some example code:\n\npublic void registerItem(Item item) {\nif (ItemRegistry registry = persistentStore.getItemRegistry(); (item != null)) {\nif (registry != null) {\nItem existing = registry.getItem(item.getID());\nif (existing.getBillingPeriod().hasRetailOwner()) {\nexisting.register(item);\n}\n}\n}\n}\nIf you work in a code base with code like this, it might not look all that bad to you, but it is bad! When we return null, we are essentially creating work for ourselves and foisting problems upon our callers. All it takes is one missing null check to send an application spinning out of control.\n\nDid you notice the fact that there wasn\u2019t a null check in the second line of that nested if statement? What would have happened at runtime if persistentStore were null? We would have had a NullPointerException at runtime, and either someone is catching NullPointerException at the top level or they are not. Either way it\u2019s bad. What exactly should you do in response to a NullPointerException thrown from the depths of your application?\n\nIt\u2019s easy to say that the problem with the code above is that it is missing a null check, but in actuality, the problem is that it has too many. If you are tempted to return null from a method, consider throwing an exception or returning a SPECIAL CASE object instead. If you are calling a null-returning method from a third-party API, consider wrapping that method with a method that either throws an exception or returns a special case object.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2439, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27f4fe41-104a-44c6-829e-a9f14834f2a8": {"__data__": {"id_": "27f4fe41-104a-44c6-829e-a9f14834f2a8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d8ac74df-e1ec-4a78-9d40-694767d6b21a", "node_type": "4", "metadata": {}, "hash": "2e4508d8489c0db93d3d904aaea35ea1fe804c655e97f4093058fddd254154cd", "class_name": "RelatedNodeInfo"}}, "text": "# Don\u2019t Pass Null\n\nIn many cases, special case objects are an easy remedy. Imagine that you have code like this:\n\nList<Employee> employees = getEmployees();\nif (employees != null) {\nfor(Employee e : employees) {\ntotalPay += e.getPay();\n}\n}\n\nRight now, getEmployees can return null, but does it have to? If we change getEmployee so that it returns an empty list, we can clean up the code:\n\nList<Employee> employees = getEmployees();\nfor(Employee e : employees) {\ntotalPay += e.getPay();\n}\n\nFortunately, Java has Collections.emptyList(), and it returns a predefined immutable list that we can use for this purpose:\n\npublic List<Employee> getEmployees() {\nif( .. there are no employees .. ) return Collections.emptyList();\n}\n\nIf you code this way, you will minimize the chance of NullPointerExceptions and your code will be cleaner.\n\n# Don\u2019t Pass Null\n\nReturning null from methods is bad, but passing null into methods is worse. Unless you are working with an API which expects you to pass null, you should avoid passing null in your code whenever possible.\n\nLet\u2019s look at an example to see why. Here is a simple method which calculates a metric for two points:\n\npublic class MetricsCalculator {\npublic double xProjection(Point p1, Point p2) {\nreturn (p2.x \u2013 p1.x) * 1.5;\n}\n\u2026\n}\n\nWhat happens when someone passes null as an argument?\n\ncalculator.xProjection(null, new Point(12, 13));\n\nWe\u2019ll get a NullPointerException, of course.\n\nHow can we fix it? We could create a new exception type and throw it:\n\npublic class MetricsCalculator {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1530, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "afcd8498-985d-4636-a683-d0f3e9b1d3db": {"__data__": {"id_": "afcd8498-985d-4636-a683-d0f3e9b1d3db", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "16a0cf89-e092-4225-9cd7-e321acac1554", "node_type": "4", "metadata": {}, "hash": "3e64f0babf43eb013381362cc9e3b84827022a2ca55036078bc4346ad7d4e0f4", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 7: Error Handling\n\npublic double xProjection(Point p1, Point p2) {\nif (p1 == null || p2 == null) {\nthrow InvalidArgumentException(\n\"Invalid argument for MetricsCalculator.xProjection\");\n}\nreturn (p2.x \u2013 p1.x) * 1.5;\n}\n\nIs this better? It might be a little better than a null pointer exception, but remember, we have to define a handler for InvalidArgumentException. What should the handler do? Is there any good course of action?\n\nThere is another alternative. We could use a set of assertions:\n\npublic class MetricsCalculator {\npublic double xProjection(Point p1, Point p2) {\nassert p1 != null : \"p1 should not be null\";\nassert p2 != null : \"p2 should not be null\";\nreturn (p2.x \u2013 p1.x) * 1.5;\n}\n}\n\nIt\u2019s good documentation, but it doesn\u2019t solve the problem. If someone passes null, we\u2019ll still have a runtime error.\n\nIn most programming languages there is no good way to deal with a null that is passed by a caller accidentally. Because this is the case, the rational approach is to forbid passing null by default. When you do, you can code with the knowledge that a null in an argument list is an indication of a problem, and end up with far fewer careless mistakes.\n\n# Conclusion\n\nClean code is readable, but it must also be robust. These are not conflicting goals. We can write robust clean code if we see error handling as a separate concern, something that is viewable independently of our main logic. To the degree that we are able to do that, we can reason about it independently, and we can make great strides in the maintainability of our code.\n\n# Bibliography\n\n[Martin]: Agile Software Development: Principles, Patterns, and Practices, Robert C. Martin, Prentice Hall, 2002.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1695, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3bc74ce6-fff7-42b4-8611-aba0dca9aedf": {"__data__": {"id_": "3bc74ce6-fff7-42b4-8611-aba0dca9aedf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "134a497a-cfe0-43c5-a48e-420144c08973", "node_type": "4", "metadata": {}, "hash": "37b1c10f51ee5b92ee328924712875638795a3fcb748c74d6ac7de6dc502426a", "class_name": "RelatedNodeInfo"}}, "text": "# Boundaries\n\n# by James Grenning\n\nWe seldom control all the software in our systems. Sometimes we buy third-party packages or use open source. Other times we depend on teams in our own company to produce components or subsystems for us. Somehow we must cleanly integrate this foreign code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 290, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d5b9ef2-98ee-4d09-b3ee-85d80c6415d1": {"__data__": {"id_": "2d5b9ef2-98ee-4d09-b3ee-85d80c6415d1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a545d0f9-0fcd-4d2d-9fe6-04ae256d4c96", "node_type": "4", "metadata": {}, "hash": "0076fe966c4afa3d0cb4d4eb9d3b8274eacfb20716f79cbe9a7f0a45b1ad18cb", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 8: Boundaries\n\nwith our own. In this chapter we look at practices and techniques to keep the boundaries of our software clean.\n\n# Using Third-Party Code\n\nThere is a natural tension between the provider of an interface and the user of an interface. Providers of third-party packages and frameworks strive for broad applicability so they can work in many environments and appeal to a wide audience. Users, on the other hand, want an interface that is focused on their particular needs. This tension can cause problems at the boundaries of our systems.\n\nLet\u2019s look at java.util.Map as an example. As you can see by examining Figure 8-1, Maps have a very broad interface with plenty of capabilities. Certainly this power and flexibility is useful, but it can also be a liability. For instance, our application might build up a Map and pass it around. Our intention might be that none of the recipients of our Map delete anything in the map. But right there at the top of the list is the clear() method. Any user of the Map has the power to clear it. Or maybe our design convention is that only particular types of objects can be stored in the Map, but Maps do not reliably constrain the types of objects placed within them. Any determined user can add items of any type to any Map.\n\n|\u2022 clear() void|\u2013 Map|\n|---|---|\n|\u2022 containsKey(Object key) boolean|\u2013 Map|\n|\u2022 containsValue(Object value) boolean|\u2013 Map|\n|\u2022 entrySet() Set|\u2013 Map|\n|\u2022 equals(Object o) boolean|\u2013 Map|\n|\u2022 get(Object key) Object|\u2013 Map|\n|\u2022 getClass() Class<? extends Object>|\u2013 Object|\n|\u2022 hashCode() int|\u2013 Map|\n|\u2022 isEmpty() boolean|\u2013 Map|\n|\u2022 keySet() Set|\u2013 Map|\n|\u2022 notify() void|\u2013 Object|\n|\u2022 notifyAll() void|\u2013 Object|\n|\u2022 put(Object key, Object value) Object|\u2013 Map|\n|\u2022 putAll(Map t) void|\u2013 Map|\n|\u2022 remove(Object key) Object|\u2013 Map|\n|\u2022 size() int|\u2013 Map|\n|\u2022 toString() String|\u2013 Object|\n|\u2022 values() Collection|\u2013 Map|\n|\u2022 wait() void|\u2013 Object|\n|\u2022 wait(long timeout) void|\u2013 Object|\n|\u2022 wait(long timeout, int nanos) void|\u2013 Object|\n\nIf our application needs a Map of Sensors, you might find the sensors set up like this:\n\nMap sensors = new HashMap();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2106, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d8275205-b75e-4273-82e6-cd50f87dd643": {"__data__": {"id_": "d8275205-b75e-4273-82e6-cd50f87dd643", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5e5e4196-561a-4c8f-95ae-aa82d5505471", "node_type": "4", "metadata": {}, "hash": "4a45cdb4bc0254ab09afb2cd896e19c8cd66f23c3f17f551347c0607817df368", "class_name": "RelatedNodeInfo"}}, "text": "# Using Third-Party Code\n\nThen, when some other part of the code needs to access the sensor, you see this code:\n\nSensor s = (Sensor)sensors.get(sensorId);\n\nWe don\u2019t just see it once, but over and over again throughout the code. The client of this code carries the responsibility of getting an Object from the Map and casting it to the right type. This works, but it\u2019s not clean code. Also, this code does not tell its story as well as it could. The readability of this code can be greatly improved by using generics, as shown below:\n\nMap<Sensor> sensors = new HashMap<Sensor>();\n...    Sensor s = sensors.get(sensorId);\n\nHowever, this doesn\u2019t solve the problem that Map<Sensor> provides more capability than we need or want.\n\nPassing an instance of Map<Sensor> liberally around the system means that there will be a lot of places to fix if the interface to Map ever changes. You might think such a change to be unlikely, but remember that it changed when generics support was added in Java 5. Indeed, we\u2019ve seen systems that are inhibited from using generics because of the sheer magnitude of changes needed to make up for the liberal use of Maps.\n\nA cleaner way to use Map might look like the following. No user of Sensors would care one bit if generics were used or not. That choice has become (and always should be) an implementation detail.\n\npublic class Sensors {\nprivate Map sensors = new HashMap();\npublic Sensor getById(String id) {return (Sensor) sensors.get(id);}\n//snip\n}\n\nThe interface at the boundary (Map) is hidden. It is able to evolve with very little impact on the rest of the application. The use of generics is no longer a big issue because the casting and type management is handled inside the Sensors class.\n\nThis interface is also tailored and constrained to meet the needs of the application. It results in code that is easier to understand and harder to misuse. The Sensors class can enforce design and business rules.\n\nWe are not suggesting that every use of Map be encapsulated in this form. Rather, we are advising you not to pass Maps (or any other interface at a boundary) around your system. If you use a boundary interface like Map, keep it inside the class, or close family of classes, where it is used. Avoid returning it from, or accepting it as an argument to, public APIs.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2309, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5bec92b5-ef8d-4ba7-96b4-adc2c39fafaf": {"__data__": {"id_": "5bec92b5-ef8d-4ba7-96b4-adc2c39fafaf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fd6c5776-8c62-4d7c-990d-c4321538235f", "node_type": "4", "metadata": {}, "hash": "f8345e0b0f76790919b94c860532de11a77d32f1ef189c3b9302a772cc088957", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 8: Boundaries\n\n# Exploring and Learning Boundaries\n\nThird-party code helps us get more functionality delivered in less time. Where do we start when we want to utilize some third-party package? It\u2019s not our job to test the third-party code, but it may be in our best interest to write tests for the third-party code we use.\n\nSuppose it is not clear how to use our third-party library. We might spend a day or two (or more) reading the documentation and deciding how we are going to use it. Then we might write our code to use the third-party code and see whether it does what we think. We would not be surprised to find ourselves bogged down in long debugging sessions trying to figure out whether the bugs we are experiencing are in our code or theirs.\n\nLearning the third-party code is hard. Integrating the third-party code is hard too. Doing both at the same time is doubly hard. What if we took a different approach? Instead of experimenting and trying out the new stuff in our production code, we could write some tests to explore our understanding of the third-party code. Jim Newkirk calls such tests learning tests.1\n\nIn learning tests we call the third-party API, as we expect to use it in our application. We\u2019re essentially doing controlled experiments that check our understanding of that API. The tests focus on what we want out of the API.\n\n# Learning log4j\n\nLet\u2019s say we want to use the apache log4j package rather than our own custom-built logger. We download it and open the introductory documentation page. Without too much reading we write our first test case, expecting it to write \u201chello\u201d to the console.\n\n@Test\npublic void testLogCreate() {\nLogger logger = Logger.getLogger(\"MyLogger\");\nlogger.info(\"hello\");\n}\n\nWhen we run it, the logger produces an error that tells us we need something called an Appender. After a little more reading we find that there is a ConsoleAppender. So we create a ConsoleAppender and see whether we have unlocked the secrets of logging to the console.\n\n@Test\npublic void testLogAddAppender() {\nLogger logger = Logger.getLogger(\"MyLogger\");\nConsoleAppender appender = new ConsoleAppender();\nlogger.addAppender(appender);\nlogger.info(\"hello\");\n}\n\n1.  [BeckTDD], pp. 136\u2013137.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b769dbae-0aa1-41a9-a2b9-51f207915fa2": {"__data__": {"id_": "b769dbae-0aa1-41a9-a2b9-51f207915fa2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9d56d754-a5cb-4b13-ac5d-13a4ffacd7eb", "node_type": "4", "metadata": {}, "hash": "f3097e9aa14747d4aef15a30da47c49fdb8ebc1423c4d8de127fdc08c5bf78b2", "class_name": "RelatedNodeInfo"}}, "text": "# Learning log4j\n\nThis time we find that the Appender has no output stream. Odd\u2014it seems logical that it\u2019d have one. After a little help from Google, we try the following:\n\n@Test\npublic void testLogAddAppender() {\nLogger logger = Logger.getLogger(\"MyLogger\");\nlogger.removeAllAppenders();\nlogger.addAppender(new ConsoleAppender(new PatternLayout(\"%p %t %m%n\"),\nConsoleAppender.SYSTEM_OUT));\nlogger.info(\"hello\");\n}\n\nThat worked; a log message that includes \u201chello\u201d came out on the console! It seems odd that we have to tell the ConsoleAppender that it writes to the console.\n\nInterestingly enough, when we remove the ConsoleAppender.SystemOut argument, we see that \u201chello\u201d is still printed. But when we take out the PatternLayout, it once again complains about the lack of an output stream. This is very strange behavior.\n\nLooking a little more carefully at the documentation, we see that the default ConsoleAppender constructor is \u201cunconfigured,\u201d which does not seem too obvious or useful. This feels like a bug, or at least an inconsistency, in log4j.\n\nA bit more googling, reading, and testing, and we eventually wind up with Listing 8-1. We\u2019ve discovered a great deal about the way that log4j works, and we\u2019ve encoded that knowledge into a set of simple unit tests.\n\n# Listing 8-1\n\n# LogTest.java\n\npublic class LogTest {\nprivate Logger logger;\n\n@Before\npublic void initialize() {\nlogger = Logger.getLogger(\"logger\");\nlogger.removeAllAppenders();\nLogger.getRootLogger().removeAllAppenders();\n}\n\n@Test\npublic void basicLogger() {\nBasicConfigurator.configure();\nlogger.info(\"basicLogger\");\n}\n\n@Test\npublic void addAppenderWithStream() {\nlogger.addAppender(new ConsoleAppender(new PatternLayout(\"%p %t %m%n\"),\nConsoleAppender.SYSTEM_OUT));\nlogger.info(\"addAppenderWithStream\");\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7694cb2b-ff7f-43ed-b3c2-d0adf1909a9b": {"__data__": {"id_": "7694cb2b-ff7f-43ed-b3c2-d0adf1909a9b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fd0d5124-f4ea-42d5-b2a2-0b6ae9e53cbb", "node_type": "4", "metadata": {}, "hash": "158594dedd17c2317ac73c531ccc7b8b0abea821ed50b3eb537dce8d676d2f98", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 8: Boundaries\n\n# Listing 8-1 (continued)\n\nLogTest.java\n@Test\npublic void addAppenderWithoutStream() {\nlogger.addAppender(new ConsoleAppender(new PatternLayout(\"%p %t %m%n\")));\nlogger.info(\"addAppenderWithoutStream\");\n}\n\nNow we know how to get a simple console logger initialized, and we can encapsulate that knowledge into our own logger class so that the rest of our application is isolated from the log4j boundary interface.\n\n# Learning Tests Are Better Than Free\n\nThe learning tests end up costing nothing. We had to learn the API anyway, and writing those tests was an easy and isolated way to get that knowledge. The learning tests were precise experiments that helped increase our understanding.\n\nNot only are learning tests free, they have a positive return on investment. When there are new releases of the third-party package, we run the learning tests to see whether there are behavioral differences.\n\nLearning tests verify that the third-party packages we are using work the way we expect them to. Once integrated, there are no guarantees that the third-party code will stay compatible with our needs. The original authors will have pressures to change their code to meet new needs of their own. They will fix bugs and add new capabilities. With each release comes new risk. If the third-party package changes in some way incompatible with our tests, we will find out right away.\n\nWhether you need the learning provided by the learning tests or not, a clean boundary should be supported by a set of outbound tests that exercise the interface the same way the production code does. Without these boundary tests to ease the migration, we might be tempted to stay with the old version longer than we should.\n\n# Using Code That Does Not Yet Exist\n\nThere is another kind of boundary, one that separates the known from the unknown. There are often places in the code where our knowledge seems to drop off the edge. Sometimes what is on the other side of the boundary is unknowable (at least right now). Sometimes we choose to look no farther than the boundary.\n\nA number of years back I was part of a team developing software for a radio communications system. There was a subsystem, the \u201cTransmitter,\u201d that we knew little about, and the people responsible for the subsystem had not gotten to the point of defining their interface. We did not want to be blocked, so we started our work far away from the unknown part of the code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2444, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ba35e27-837c-40cd-8133-2092a06457f9": {"__data__": {"id_": "7ba35e27-837c-40cd-8133-2092a06457f9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dae28d8e-7b67-4218-a48d-9a97969cbefe", "node_type": "4", "metadata": {}, "hash": "60c9bcb2588352339680936e95d5d437a8526ccca57709c3be1d4523d4dd8e18", "class_name": "RelatedNodeInfo"}}, "text": "# Using Code That Does Not Yet Exist\n\nWe had a pretty good idea of where our world ended and the new world began. As we worked, we sometimes bumped up against this boundary. Though mists and clouds of ignorance obscured our view beyond the boundary, our work made us aware of what we wanted the boundary interface to be. We wanted to tell the transmitter something like this:\n\nKey the transmitter on the provided frequency and emit an analog representation of the data coming from this stream.\n\nWe had no idea how that would be done because the API had not been designed yet. So we decided to work out the details later. To keep from being blocked, we defined our own interface. We called it something catchy, like Transmitter. We gave it a method called transmit that took a frequency and a data stream. This was the interface we wished we had.\n\nOne good thing about writing the interface we wish we had is that it\u2019s under our control. This helps keep client code more readable and focused on what it is trying to accomplish.\n\nIn Figure 8-2, you can see that we insulated the CommunicationsController classes from the transmitter API (which was out of our control and undefined). By using our own application specific interface, we kept our CommunicationsController code clean and expressive. Once the transmitter API was defined, we wrote the bridge the gap. The ADAPTER encapsulated the interaction with the API and provides a TransmitterAdapter to a single place to change when the API evolves.\n\n# Figure 8-2\n\nPredicting the transmitter\n\nThis design also gives us a very convenient seam in the code for testing. Using a suitable FakeTransmitter, we can test the CommunicationsController classes. We can also create boundary tests once we have the TransmitterAPI that make sure we are using the API correctly.\n\n2. See the Adapter pattern in [GOF].\n\n3. See more about seams in [WELC].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1886, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2793d7b-f19c-4af7-aed5-b6390c037272": {"__data__": {"id_": "c2793d7b-f19c-4af7-aed5-b6390c037272", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "525e1717-2340-4802-a7b8-73bae0616679", "node_type": "4", "metadata": {}, "hash": "6c12aaad64702d4d5e9a15982df43f80456c5be43f9e5be1c3ffb1e8202ff3ff", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 8: Boundaries\n\n# Clean Boundaries\n\nInteresting things happen at boundaries. Change is one of those things. Good software designs accommodate change without huge investments and rework. When we use code that is out of our control, special care must be taken to protect our investment and make sure future change is not too costly.\n\nCode at the boundaries needs clear separation and tests that define expectations. We should avoid letting too much of our code know about the third-party particulars. It\u2019s better to depend on something you control than on something you don\u2019t control, lest it end up controlling you.\n\nWe manage third-party boundaries by having very few places in the code that refer to them. We may wrap them as we did with Map, or we may use an ADAPTER to convert from our perfect interface to the provided interface. Either way our code speaks to us better, promotes internally consistent usage across the boundary, and has fewer maintenance points when the third-party code changes.\n\n# Bibliography\n\n- [BeckTDD]: Test Driven Development, Kent Beck, Addison-Wesley, 2003.\n- [GOF]: Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al., Addison-Wesley, 1996.\n- [WELC]: Working Effectively with Legacy Code, Addison-Wesley, 2004.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1276, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08d2bb1b-9bfc-44a0-aa29-9e36b05f21a8": {"__data__": {"id_": "08d2bb1b-9bfc-44a0-aa29-9e36b05f21a8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ea733736-961f-4673-80b9-c955290b3c9f", "node_type": "4", "metadata": {}, "hash": "294cbae535a82d5ffa3ca81f2ff448b489889b7040ef79ed53f124171eca959f", "class_name": "RelatedNodeInfo"}}, "text": "# Unit Tests\n\nOur profession has come a long way in the last ten years. In 1997 no one had heard of Test Driven Development. For the vast majority of us, unit tests were short bits of throw-away code that we wrote to make sure our programs \u201cworked.\u201d We would painstakingly write our classes and methods, and then we would concoct some ad hoc code to test them. Typically this would involve some kind of simple driver program that would allow us to manually interact with the program we had written.\n\nI remember writing a C++ program for an embedded real-time system back in the mid-90s. The program was a simple timer with the following signature:\n\nvoid Timer::ScheduleCommand(Command* theCommand, int milliseconds)\nThe idea was simple; the execute method of the Command would be executed in a new thread after the specified number of milliseconds. The problem was, how to test it.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 881, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "023eaa90-d79c-4e91-8164-0694ae3c8397": {"__data__": {"id_": "023eaa90-d79c-4e91-8164-0694ae3c8397", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1a2b9bd4-041d-4f10-833c-79ec891c049c", "node_type": "4", "metadata": {}, "hash": "01d076c481c60c821ff91695e7d293c5e7438e96d217ab4dd7f0842bbcb3ae4a", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 9: Unit Tests\n\nI cobbled together a simple driver program that listened to the keyboard. Every time a character was typed, it would schedule a command that would type the same character five seconds later. Then I tapped out a rhythmic melody on the keyboard and waited for that melody to replay on the screen five seconds later.\n\n\u201cI . . . want-a-girl . . . just . . . like-the-girl-who-marr . . . ied . . . dear . . . old . . . dad.\u201d\n\nI actually sang that melody while typing the \u201c.\u201d key, and then I sang it again as the dots appeared on the screen.\n\nThat was my test! Once I saw it work and demonstrated it to my colleagues, I threw the test code away.\n\nAs I said, our profession has come a long way. Nowadays I would write a test that made sure that every nook and cranny of that code worked as I expected it to. I would isolate my code from the operating system rather than just calling the standard timing functions. I would mock out those timing functions so that I had absolute control over the time. I would schedule commands that set boolean flags, and then I would step the time forward, watching those flags and ensuring that they went from false to true just as I changed the time to the right value.\n\nOnce I got a suite of tests to pass, I would make sure that those tests were convenient to run for anyone else who needed to work with the code. I would ensure that the tests and the code were checked in together into the same source package.\n\nYes, we\u2019ve come a long way; but we have farther to go. The Agile and TDD movements have encouraged many programmers to write automated unit tests, and more are joining their ranks every day. But in the mad rush to add testing to our discipline, many programmers have missed some of the more subtle, and important, points of writing good tests.\n\n# The Three Laws of TDD\n\nBy now everyone knows that TDD asks us to write unit tests first, before we write production code. But that rule is just the tip of the iceberg. Consider the following three laws:1\n\n1. You may not write production code until you have written a failing unit test.\n2. You may not write more of a unit test than is sufficient to fail, and not compiling is failing.\n3. You may not write more production code than is sufficient to pass the currently failing test.\n\n1.  Professionalism and Test-Driven Development, Robert C. Martin, Object Mentor, IEEE Software, May/June 2007 (Vol. 24, No. 3)  pp. 32\u201336\n\nhttp://doi.ieeecomputersociety.org/10.1109/MS.2007.85", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2490, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "359eea17-c49e-4f9c-b6e2-f8d88f7cfffa": {"__data__": {"id_": "359eea17-c49e-4f9c-b6e2-f8d88f7cfffa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e4b7e8bd-1f4a-49aa-ad66-afe5b99a8a15", "node_type": "4", "metadata": {}, "hash": "2c914cd8ec2e713a167be4b1b8b1adb3f60c355fdfc926afdda05cff33ee3408", "class_name": "RelatedNodeInfo"}}, "text": "# Keeping Tests Clean\n\nThese three laws lock you into a cycle that is perhaps thirty seconds long. The tests and the production code are written together, with the tests just a few seconds ahead of the production code.\n\nIf we work this way, we will write dozens of tests every day, hundreds of tests every month, and thousands of tests every year. If we work this way, those tests will cover virtually all of our production code. The sheer bulk of those tests, which can rival the size of the production code itself, can present a daunting management problem.\n\n# Keeping Tests Clean\n\nSome years back I was asked to coach a team who had explicitly decided that their test code should not be maintained to the same standards of quality as their production code. They gave each other license to break the rules in their unit tests. \u201cQuick and dirty\u201d was the watchword. Their variables did not have to be well named, their test functions did not need to be short and descriptive. Their test code did not need to be well designed and thoughtfully partitioned. So long as the test code worked, and so long as it covered the production code, it was good enough.\n\nSome of you reading this might sympathize with that decision. Perhaps, long in the past, you wrote tests of the kind that I wrote for that Timer class. It\u2019s a huge step from writing that kind of throw-away test, to writing a suite of automated unit tests. So, like the team I was coaching, you might decide that having dirty tests is better than having no tests.\n\nWhat this team did not realize was that having dirty tests is equivalent to, if not worse than, having no tests. The problem is that tests must change as the production code evolves. The dirtier the tests, the harder they are to change. The more tangled the test code, the more likely it is that you will spend more time cramming new tests into the suite than it takes to write the new production code. As you modify the production code, old tests start to fail, and the mess in the test code makes it hard to get those tests to pass again. So the tests become viewed as an ever-increasing liability.\n\nFrom release to release the cost of maintaining my team\u2019s test suite rose. Eventually it became the single biggest complaint among the developers. When managers asked why their estimates were getting so large, the developers blamed the tests. In the end they were forced to discard the test suite entirely.\n\nBut, without a test suite they lost the ability to make sure that changes to their code base worked as expected. Without a test suite they could not ensure that changes to one part of their system did not break other parts of their system. So their defect rate began to rise. As the number of unintended defects rose, they started to fear making changes. They stopped cleaning their production code because they feared the changes would do more harm than good. Their production code began to rot. In the end they were left with no tests, tangled and bug-riddled production code, frustrated customers, and the feeling that their testing effort had failed them.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3089, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ef94be8-4a43-4215-a770-71197dbc400b": {"__data__": {"id_": "6ef94be8-4a43-4215-a770-71197dbc400b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1ba24ca6-3fcb-4fa0-8df3-de166d139c19", "node_type": "4", "metadata": {}, "hash": "69b227475c826d7ea28c05e1126b9e8e242e46218ccb5b10c207ac99f13754fc", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 9: Unit Tests\n\nIn a way they were right. Their testing effort had failed them. But it was their decision to allow the tests to be messy that was the seed of that failure. Had they kept their tests clean, their testing effort would not have failed. I can say this with some certainty because I have participated in, and coached, many teams who have been successful with clean unit tests.\n\nThe moral of the story is simple: Test code is just as important as production code. It is not a second-class citizen. It requires thought, design, and care. It must be kept as clean as production code.\n\n# Tests Enable the -ilities\n\nIf you don\u2019t keep your tests clean, you will lose them. And without them, you lose the very thing that keeps your production code flexible. Yes, you read that correctly. It is unit tests that keep our code flexible, maintainable, and reusable. The reason is simple. If you have tests, you do not fear making changes to the code! Without tests every change is a possible bug. No matter how flexible your architecture is, no matter how nicely partitioned your design, without tests you will be reluctant to make changes because of the fear that you will introduce undetected bugs.\n\nBut with tests that fear virtually disappears. The higher your test coverage, the less your fear. You can make changes with near impunity to code that has a less than stellar architecture and a tangled and opaque design. Indeed, you can improve that architecture and design without fear!\n\nSo having an automated suite of unit tests that cover the production code is the key to keeping your design and architecture as clean as possible. Tests enable all the -ilities, because tests enable change.\n\nSo if your tests are dirty, then your ability to change your code is hampered, and you begin to lose the ability to improve the structure of that code. The dirtier your tests, the dirtier your code becomes. Eventually you lose the tests, and your code rots.\n\n# Clean Tests\n\nWhat makes a clean test? Three things. Readability, readability, and readability. Readability is perhaps even more important in unit tests than it is in production code. What makes tests readable? The same thing that makes all code readable: clarity, simplicity, and density of expression. In a test you want to say a lot with as few expressions as possible.\n\nConsider the code from FitNesse in Listing 9-1. These three tests are difficult to understand and can certainly be improved. First, there is a terrible amount of duplicate code in the repeated calls to addPage and assertSubString. More importantly, this code is just loaded with details that interfere with the expressiveness of the test.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2680, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2c78001-925d-4f0e-b3c1-f3ace47545a5": {"__data__": {"id_": "d2c78001-925d-4f0e-b3c1-f3ace47545a5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "99fdf391-62ab-49a4-be8d-6eb1b6046c1e", "node_type": "4", "metadata": {}, "hash": "bf1d53e81ab311490029ea705e514b8b88e5f648fcce7036945150eae27abcd6", "class_name": "RelatedNodeInfo"}}, "text": "# Clean Tests\n\n# Listing 9-1\n\n# SerializedPageResponderTest.java\n\npublic void testGetPageHieratchyAsXml() throws Exception\n{\ncrawler.addPage(root, PathParser.parse(\"PageOne\"));\ncrawler.addPage(root, PathParser.parse(\"PageOne.ChildOne\"));\ncrawler.addPage(root, PathParser.parse(\"PageTwo\"));\nrequest.setResource(\"root\");\nrequest.addInput(\"type\", \"pages\");\nResponder responder = new SerializedPageResponder();\nSimpleResponse response =\n(SimpleResponse) responder.makeResponse(new FitNesseContext(root), request);\nString xml = response.getContent();\nassertEquals(\"text/xml\", response.getContentType());\nassertSubString(\"<name>PageOne</name>\", xml);\nassertSubString(\"<name>PageTwo</name>\", xml);\nassertSubString(\"<name>ChildOne</name>\", xml);\n}\n\npublic void testGetPageHieratchyAsXmlDoesntContainSymbolicLinks() throws Exception\n{\nWikiPage pageOne = crawler.addPage(root, PathParser.parse(\"PageOne\"));\ncrawler.addPage(root, PathParser.parse(\"PageOne.ChildOne\"));\ncrawler.addPage(root, PathParser.parse(\"PageTwo\"));\nPageData data = pageOne.getData();\nWikiPageProperties properties = data.getProperties();\nWikiPageProperty symLinks = properties.set(SymbolicPage.PROPERTY_NAME);\nsymLinks.set(\"SymPage\", \"PageTwo\");\npageOne.commit(data);\nrequest.setResource(\"root\");\nrequest.addInput(\"type\", \"pages\");\nResponder responder = new SerializedPageResponder();\nSimpleResponse response =\n(SimpleResponse) responder.makeResponse(new FitNesseContext(root), request);\nString xml = response.getContent();\nassertEquals(\"text/xml\", response.getContentType());\nassertSubString(\"<name>PageOne</name>\", xml);\nassertSubString(\"<name>PageTwo</name>\", xml);\nassertSubString(\"<name>ChildOne</name>\", xml);\nassertNotSubString(\"SymPage\", xml);\n}\n\npublic void testGetDataAsHtml() throws Exception\n{\ncrawler.addPage(root, PathParser.parse(\"TestPageOne\"), \"test page\");\nrequest.setResource(\"TestPageOne\");\nrequest.addInput(\"type\", \"data\");", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1905, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73b0ea8f-ad0d-464a-b02e-010ca41d9525": {"__data__": {"id_": "73b0ea8f-ad0d-464a-b02e-010ca41d9525", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7313fa5-9ed9-469f-9c40-c462b82d2265", "node_type": "4", "metadata": {}, "hash": "cc6e82a74015f6865bcb58df6c529615ba783e898124aed320029e18d7b18195", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 9: Unit Tests\n\n# Listing 9-1 (continued)\n\nSerializedPageResponderTest.java\nResponder responder = new SerializedPageResponder();\nSimpleResponse response =(SimpleResponse) responder.makeResponse(\nnew FitNesseContext(root), request);\nString xml = response.getContent();\nassertEquals(\"text/xml\", response.getContentType());\nassertSubString(\"test page\", xml);\nassertSubString(\"<Test\", xml);\n\nFor example, look at the PathParser calls. They transform strings into PagePath instances used by the crawlers. This transformation is completely irrelevant to the test at hand and serves only to obfuscate the intent. The details surrounding the creation of the responder and the gathering and casting of the response are also just noise. Then there\u2019s the ham-handed way that the request URL is built from a resource and an argument. (I helped write this code, so I feel free to roundly criticize it.)\n\nIn the end, this code was not designed to be read. The poor reader is inundated with a swarm of details that must be understood before the tests make any real sense.\n\nNow consider the improved tests in Listing 9-2. These tests do the exact same thing, but they have been refactored into a much cleaner and more explanatory form.\n\n# Listing 9-2\n\nSerializedPageResponderTest.java (refactored)\npublic void testGetPageHierarchyAsXml() throws Exception {\nmakePages(\"PageOne\", \"PageOne.ChildOne\", \"PageTwo\");\nsubmitRequest(\"root\", \"type:pages\");\nassertResponseIsXML();\nassertResponseContains(\n);\"<name>PageOne</name>\", \"<name>PageTwo</name>\", \"<name>ChildOne</name>\"\n}\npublic void testSymbolicLinksAreNotInXmlPageHierarchy() throws Exception {\nWikiPage page = makePage(\"PageOne\");\nmakePages(\"PageOne.ChildOne\", \"PageTwo\");\naddLinkTo(page, \"PageTwo\", \"SymPage\");\nsubmitRequest(\"root\", \"type:pages\");\nassertResponseIsXML();\nassertResponseContains(\n);\"<name>PageOne</name>\", \"<name>PageTwo</name>\", \"<name>ChildOne</name>\"\nassertResponseDoesNotContain(\"SymPage\");\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1956, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5f68a09-4f90-402c-b906-cd1e67cf92dd": {"__data__": {"id_": "a5f68a09-4f90-402c-b906-cd1e67cf92dd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f911e384-1de4-4463-a2b2-c3770d0b8ecd", "node_type": "4", "metadata": {}, "hash": "054d0ec527664cbb1dee1b7c2eea37c5ca301f5674cb4fc42631a555ca655b8f", "class_name": "RelatedNodeInfo"}}, "text": "# Clean Tests\n\nListing 9-2 (continued)\n\nSerializedPageResponderTest.java (refactored)\npublic void testGetDataAsXml() throws Exception {\nmakePageWithContent(\"TestPageOne\", \"test page\");\nsubmitRequest(\"TestPageOne\", \"type:data\");\nassertResponseIsXML();\nassertResponseContains(\"test page\", \"<Test\");\n}\n\nThe BUILD -OPERATE -CHECK 2 pattern is made obvious by the structure of these tests. Each of the tests is clearly split into three parts. The first part builds up the test data, the second part operates on that test data, and the third part checks that the operation yielded the expected results.\n\nNotice that the vast majority of annoying detail has been eliminated. The tests get right to the point and use only the data types and functions that they truly need. Anyone who reads these tests should be able to work out what they do very quickly, without being misled or overwhelmed by details.\n\n# Domain-Specific Testing Language\n\nThe tests in Listing 9-2 demonstrate the technique of building a domain-specific language for your tests. Rather than using the APIs that programmers use to manipulate the system, we build up a set of functions and utilities that make use of those APIs and that make the tests more convenient to write and easier to read. These functions and utilities become a specialized API used by the tests. They are a testing language that programmers use to help themselves to write their tests and to help those who must read those tests later on.\n\nThis testing API is not designed up front; rather it evolves from the continued refactoring of test code that has gotten too tainted by obfuscating detail. Just as you saw me refactor Listing 9-1 into Listing 9-2, so too will disciplined developers refactor their test code into more succinct and expressive forms.\n\n# A Dual Standard\n\nIn one sense the team I mentioned at the beginning of this chapter had things right. The code within the testing API does have a different set of engineering standards than production code. It must still be simple, succinct, and expressive, but it need not be as efficient as production code. After all, it runs in a test environment, not a production environment, and those two environments have very different needs.\n\n2. http://fitnesse.org/FitNesse.AcceptanceTestPatterns", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2282, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f63714a-6143-4a85-b106-cdbf4669728e": {"__data__": {"id_": "9f63714a-6143-4a85-b106-cdbf4669728e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6470e424-1054-4318-83cd-28f48714cb5e", "node_type": "4", "metadata": {}, "hash": "4fe789fcb313cec605bd933f5d103121843e7743a120c49a0c6cc3923c749992", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 9: Unit Tests\n\nConsider the test in Listing 9-3. I wrote this test as part of an environment control system I was prototyping. Without going into the details you can tell that this test checks that the low temperature alarm, the heater, and the blower are all turned on when the temperature is \u201cway too cold.\u201d\n\n# Listing 9-3\n\nEnvironmentControllerTest.java\n\n@Test\npublic void turnOnLoTempAlarmAtThreashold() throws Exception {\nhw.setTemp(WAY_TOO_COLD);\ncontroller.tic();\nassertTrue(hw.heaterState());\nassertTrue(hw.blowerState());\nassertFalse(hw.coolerState());\nassertFalse(hw.hiTempAlarm());\nassertTrue(hw.loTempAlarm());\n}\n\nThere are, of course, lots of details here. For example, what is that tic function all about? In fact, I\u2019d rather you not worry about that while reading this test. I\u2019d rather you just worry about whether you agree that the end state of the system is consistent with the temperature being \u201cway too cold.\u201d\n\nNotice, as you read the test, that your eye needs to bounce back and forth between the name of the state being checked, and the sense of the state being checked. You see heaterState, and then your eyes glissade left to assertTrue. You see coolerState and your eyes must track left to assertFalse. This is tedious and unreliable. It makes the test hard to read.\n\nI improved the reading of this test greatly by transforming it into Listing 9-4.\n\n# Listing 9-4\n\nEnvironmentControllerTest.java (refactored)\n\n@Test\npublic void turnOnLoTempAlarmAtThreshold() throws Exception {\nwayTooCold();\nassertEquals(\"HBchL\", hw.getState());\n}\n\nOf course I hid the detail of the tic function by creating a wayTooCold function. But the thing to note is the strange string in the assertEquals. Upper case means \u201con,\u201d lower case means \u201coff,\u201d and the letters are always in the following order: {heater, blower, cooler, hi-temp-alarm, lo-temp-alarm}.\n\nEven though this is close to a violation of the rule about mental mapping,3 it seems appropriate in this case. Notice, once you know the meaning, your eyes glide across.\n\n3. \u201cAvoid Mental Mapping\u201d on page 25.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2078, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "652da2b9-4af8-4d9e-a35b-c3b16a0526a1": {"__data__": {"id_": "652da2b9-4af8-4d9e-a35b-c3b16a0526a1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9a5532e6-8ee2-4669-b2de-2e9786ee34c1", "node_type": "4", "metadata": {}, "hash": "ff251e4c6ee253db4f6110bb514cf91143b183a7901308671e83c2391afb85b6", "class_name": "RelatedNodeInfo"}}, "text": "# Clean Tests\n\nthat string and you can quickly interpret the results. Reading the test becomes almost a pleasure. Just take a look at Listing 9-5 and see how easy it is to understand these tests.\n\n# Listing 9-5\n\nEnvironmentControllerTest.java (bigger selection)\n\n@Test\npublic void turnOnCoolerAndBlowerIfTooHot() throws Exception {\ntooHot();\nassertEquals(\"hBChl\", hw.getState());\n}\n@Test\npublic void turnOnHeaterAndBlowerIfTooCold() throws Exception {\ntooCold();\nassertEquals(\"HBchl\", hw.getState());\n}\n@Test\npublic void turnOnHiTempAlarmAtThreshold() throws Exception {\nwayTooHot();\nassertEquals(\"hBCHl\", hw.getState());\n}\n@Test\npublic void turnOnLoTempAlarmAtThreshold() throws Exception {\nwayTooCold();\nassertEquals(\"HBchL\", hw.getState());\n}\n\nThe getState function is shown in Listing 9-6. Notice that this is not very efficient code. To make it efficient, I probably should have used a StringBuffer.\n\n# Listing 9-6\n\nMockControlHardware.java\n\npublic String getState() {\nString state = \"\";\nstate += heater ? \"H\" : \"h\";\nstate += blower ? \"B\" : \"b\";\nstate += cooler ? \"C\" : \"c\";\nstate += hiTempAlarm ? \"H\" : \"h\";\nstate += loTempAlarm ? \"L\" : \"l\";\nreturn state;\n}\n\nStringBuffers are a bit ugly. Even in production code I will avoid them if the cost is small; and you could argue that the cost of the code in Listing 9-6 is very small. However, this application is clearly an embedded real-time system, and it is likely that computer and memory resources are very constrained. The test environment, however, is not likely to be constrained at all.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1546, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5d29cee-f5e2-436c-8f4c-c9d597aac62a": {"__data__": {"id_": "a5d29cee-f5e2-436c-8f4c-c9d597aac62a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6796bd05-9825-4805-88da-f469b7a2eb4b", "node_type": "4", "metadata": {}, "hash": "0000adaae2c9619c5c94eee12a3928d3f741e96c3fc5f760d365e4efaeaeca27", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 9: Unit Tests\n\nThat is the nature of the dual standard. There are things that you might never do in a production environment that are perfectly fine in a test environment. Usually they involve issues of memory or CPU efficiency. But they never involve issues of cleanliness.\n\n# One Assert per Test\n\nThere is a school of thought4 that says that every test function in a JUnit test should have one and only one assert statement. This rule may seem draconian, but the advantage can be seen in Listing 9-5. Those tests come to a single conclusion that is quick and easy to understand.\n\nBut what about Listing 9-2? It seems unreasonable that we could somehow easily merge the assertion that the output is XML and that it contains certain substrings. However, we can break the test into two separate tests, each with its own particular assertion, as shown in Listing 9-7.\n\n# Listing 9-7\n\nSerializedPageResponderTest.java (Single Assert)\n\npublic void testGetPageHierarchyAsXml() throws Exception {\ngivenPages(\"PageOne\", \"PageOne.ChildOne\", \"PageTwo\");\nwhenRequestIsIssued(\"root\", \"type:pages\");\nthenResponseShouldBeXML();\n}\n\npublic void testGetPageHierarchyHasRightTags() throws Exception {\ngivenPages(\"PageOne\", \"PageOne.ChildOne\", \"PageTwo\");\nwhenRequestIsIssued(\"root\", \"type:pages\");\nthenResponseShouldContain(\n\"<name>PageOne</name>\",\n\"<name>PageTwo</name>\",\n\"<name>ChildOne</name>\"\n);\n}\n\nNotice that I have changed the names of the functions to use the common given-when- convention. This makes the tests even easier to read. Unfortunately, splitting the tests as shown results in a lot of duplicate code.\n\nWe can eliminate the duplication by using the TEMPLATE METHOD6 pattern and putting the given/when parts in the base class, and the then parts in different derivatives. Or we could create a completely separate test class and put the given and when parts in the @Before function, and the when parts in each @Test function. But this seems like too much mechanism for such a minor issue. In the end, I prefer the multiple asserts in Listing 9-2.\n\n4. See Dave Astel\u2019s blog entry: http://www.artima.com/weblogs/viewpost.jsp?thread=35578\n\n5. [RSpec].\n\n6. [GOF].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92c7fd55-3af9-42ce-b58b-98265abab806": {"__data__": {"id_": "92c7fd55-3af9-42ce-b58b-98265abab806", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2961fc4e-0518-4599-84b9-bd6f8c876968", "node_type": "4", "metadata": {}, "hash": "ebcf43d2bb3d0e50825c0ae1c6a8e1767a4cb4c80bd4152de5ff78652283341c", "class_name": "RelatedNodeInfo"}}, "text": "# One Assert per Test\n\nI think the single assert rule is a good guideline. I usually try to create a domain-specific testing language that supports it, as in Listing 9-5. But I am not afraid to put more than one assert in a test. I think the best thing we can say is that the number of asserts in a test ought to be minimized.\n\n# Single Concept per Test\n\nPerhaps a better rule is that we want to test a single concept in each test function. We don\u2019t want long test functions that go testing one miscellaneous thing after another. Listing 9-8 is an example of such a test. This test should be split up into three independent tests because it tests three independent things. Merging them all together into the same function forces the reader to figure out why each section is there and what is being tested by that section.\n\n# Listing 9-8\n\n/**Miscellaneous tests for the addMonths() method.\n*\n*/\npublic void testAddMonths() {\nSerialDate d1 = SerialDate.createInstance(31, 5, 2004);\nSerialDate d2 = SerialDate.addMonths(1, d1);\nassertEquals(30, d2.getDayOfMonth());\nassertEquals(6, d2.getMonth());\nassertEquals(2004, d2.getYYYY());\nSerialDate d3 = SerialDate.addMonths(2, d1);\nassertEquals(31, d3.getDayOfMonth());\nassertEquals(7, d3.getMonth());\nassertEquals(2004, d3.getYYYY());\nSerialDate d4 = SerialDate.addMonths(1, SerialDate.addMonths(1, d1));\nassertEquals(30, d4.getDayOfMonth());\nassertEquals(7, d4.getMonth());\nassertEquals(2004, d4.getYYYY());\n}\n\nThe three test functions probably ought to be like this:\n\n- Given the last day of a month with 31 days (like May):\n1. When you add one month, such that the last day of that month is the 30th (like June), then the date should be the 30th of that month, not the 31st.\n2. When you add two months to that date, such that the final month has 31 days, then the date should be the 31st.\n\n7. \u201cKeep to the code!\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1858, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "014f1d3d-3179-4c94-9564-b82481e197c4": {"__data__": {"id_": "014f1d3d-3179-4c94-9564-b82481e197c4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "14bb8349-c701-4922-88a7-42b750c52736", "node_type": "4", "metadata": {}, "hash": "24dc5f4262f86733a31d43e08c02d05cd56e0e561b24d09fa71e68280709955d", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 9: Unit Tests\n\n\u2022 Given the last day of a month with 30 days in it (like June):\n\n1. When you add one month such that the last day of that month has 31 days, then the date should be the 30th, not the 31st.\n\nStated like this, you can see that there is a general rule hiding amidst the miscellaneous tests. When you increment the month, the date can be no greater than the last day of the month. This implies that incrementing the month on February 28th should yield March 28th. That test is missing and would be a useful test to write.\n\nSo it\u2019s not the multiple asserts in each section of Listing 9-8 that causes the problem. Rather it is the fact that there is more than one concept being tested. So probably the best rule is that you should minimize the number of asserts per concept and test just one concept per test function.\n\n# F.I.R.S.T.\n\nClean tests follow five other rules that form the above acronym:\n\n# Fast\n\nTests should be fast. They should run quickly. When tests run slow, you won\u2019t want to run them frequently. If you don\u2019t run them frequently, you won\u2019t find problems early enough to fix them easily. You won\u2019t feel as free to clean up the code. Eventually the code will begin to rot.\n\n# Independent\n\nTests should not depend on each other. One test should not set up the conditions for the next test. You should be able to run each test independently and run the tests in any order you like. When tests depend on each other, then the first one to fail causes a cascade of downstream failures, making diagnosis difficult and hiding downstream defects.\n\n# Repeatable\n\nTests should be repeatable in any environment. You should be able to run the tests in the production environment, in the QA environment, and on your laptop while riding home on the train without a network. If your tests aren\u2019t repeatable in any environment, then you\u2019ll always have an excuse for why they fail. You\u2019ll also find yourself unable to run the tests when the environment isn\u2019t available.\n\n# Self-Validating\n\nThe tests should have a boolean output. Either they pass or fail. You should not have to read through a log file to tell whether the tests pass. You should not have to manually compare two different text files to see whether the tests pass. If the tests aren\u2019t self-validating, then failure can become subjective and running the tests can require a long manual evaluation.\n\n8. Object Mentor Training Materials.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be83846e-4a96-4089-aac2-f12cc8237783": {"__data__": {"id_": "be83846e-4a96-4089-aac2-f12cc8237783", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a279150a-5ee4-49ff-8d54-e91bde64c680", "node_type": "4", "metadata": {}, "hash": "0d210da508ed3cb09ce411a22eb48b8b4632eef2733801ae3c2a13435c09e26d", "class_name": "RelatedNodeInfo"}}, "text": "# Bibliography\n\n133\n\n# Timely\n\nThe tests need to be written in a timely fashion. Unit tests should be written just before the production code that makes them pass. If you write tests after the production code, then you may find the production code to be hard to test. You may decide that some production code is too hard to test. You may not design the production code to be testable.\n\n# Conclusion\n\nWe have barely scratched the surface of this topic. Indeed, I think an entire book could be written about clean tests. Tests are as important to the health of a project as the production code is. Perhaps they are even more important, because tests preserve and enhance the flexibility, maintainability, and reusability of the production code. So keep your tests constantly clean. Work to make them expressive and succinct. Invent testing APIs that act as domain-specific language that helps you write the tests.\n\nIf you let the tests rot, then your code will rot too. Keep your tests clean.\n\n# Bibliography\n\n|[RSpec]|RSpec: Behavior Driven Development for Ruby Programmers, Aslak Helles\u00f8y, David Chelimsky, Pragmatic Bookshelf, 2008.|\n|---|---|\n|[GOF]|Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al., Addison-Wesley, 1996.|", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe40715f-aaf4-4068-8abb-b8c20416ea60": {"__data__": {"id_": "fe40715f-aaf4-4068-8abb-b8c20416ea60", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "03e363ed-81bf-4396-867a-1d796205441d", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "103edf06-464f-4bbc-bfb7-4d6f90606a98": {"__data__": {"id_": "103edf06-464f-4bbc-bfb7-4d6f90606a98", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1b97ac2c-8a5c-4122-9a5e-abcef4078c2b", "node_type": "4", "metadata": {}, "hash": "7000d0b67309865ed72537d55b9bd5d871aaf866944a7b6bedea2bb51c213115", "class_name": "RelatedNodeInfo"}}, "text": "# 10 Classes with Jeff Langr\n\nSo far in this book we have focused on how to write lines and blocks of code well. We have delved into proper composition of functions and how they interrelate. But for all the attention to the expressiveness of code statements and the functions they comprise, we still don\u2019t have clean code until we\u2019ve paid attention to higher levels of code organization. Let\u2019s talk about clean classes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6583aff1-129b-44a5-83a7-d504e1d3f904": {"__data__": {"id_": "6583aff1-129b-44a5-83a7-d504e1d3f904", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "143586cb-816c-45b3-84ba-c063d4d9f506", "node_type": "4", "metadata": {}, "hash": "975cc8d3a0484b3f63fb9cff22d4880e41102cc08b3049363f56f4100208f2b7", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 10: Classes\n\n# Class Organization\n\nFollowing the standard Java convention, a class should begin with a list of variables. Public static constants, if any, should come first. Then private static variables, followed by private instance variables. There is seldom a good reason to have a public variable.\n\nPublic functions should follow the list of variables. We like to put the private utilities called by a public function right after the public function itself. This follows the stepdown rule and helps the program read like a newspaper article.\n\n# Encapsulation\n\nWe like to keep our variables and utility functions private, but we\u2019re not fanatic about it. Sometimes we need to make a variable or utility function protected so that it can be accessed by a test. For us, tests rule. If a test in the same package needs to call a function or access a variable, we\u2019ll make it protected or package scope. However, we\u2019ll first look for a way to maintain privacy. Loosening encapsulation is always a last resort.\n\n# Classes Should Be Small!\n\nThe first rule of classes is that they should be small. The second rule of classes is that they should be smaller than that. No, we\u2019re not going to repeat the exact same text from the Functions chapter. But as with functions, smaller is the primary rule when it comes to designing classes. As with functions, our immediate question is always \u201cHow small?\u201d\n\nDifferent measure. We count responsibilities. With functions we measured size by counting physical lines. With classes we use a different measure.\n\n# Listing 10-1\n\n# Too Many Responsibilities\n\npublic class SuperDashboard extends JFrame implements MetaDataUser\npublic String getCustomizerLanguagePath()\npublic void setSystemConfigPath(String systemConfigPath)\npublic String getSystemConfigDocument()\npublic void setSystemConfigDocument(String systemConfigDocument)\npublic boolean getGuruState()\npublic boolean getNoviceState()\npublic boolean getOpenSourceState()\npublic void showObject(MetaObject object)\npublic void showProgress(String s)\n\n1. [RDD].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2051, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a21ed45-c5c4-444b-940d-484b92226f3f": {"__data__": {"id_": "4a21ed45-c5c4-444b-940d-484b92226f3f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "99ad6c3b-5e13-4103-965a-e8fd2891ba40", "node_type": "4", "metadata": {}, "hash": "e015bcdce9aa9e2690c5de1a3f5cc91392f1cec3917638c49dbd2b48b54bb305", "class_name": "RelatedNodeInfo"}}, "text": "# Classes Should Be Small!\n\n# Listing 10-1 (continued)\n\n# Too Many Responsibilities\n\npublic boolean isMetadataDirty()\npublic void setIsMetadataDirty(boolean isMetadataDirty)\npublic Component getLastFocusedComponent()\npublic void setLastFocused(Component lastFocused)\npublic void setMouseSelectState(boolean isMouseSelected)\npublic boolean isMouseSelected()\npublic LanguageManager getLanguageManager()\npublic Project getProject()\npublic Project getFirstProject()\npublic Project getLastProject()\npublic String getNewProjectName()\npublic void setComponentSizes(Dimension dim)\npublic String getCurrentDir()\npublic void setCurrentDir(String newDir)\npublic void updateStatus(int dotPos, int markPos)\npublic Class[] getDataBaseClasses()\npublic MetadataFeeder getMetadataFeeder()\npublic void addProject(Project project)\npublic boolean setCurrentProject(Project project)\npublic boolean removeProject(Project project)\npublic MetaProjectHeader getProgramMetadata()\npublic void resetDashboard()\npublic Project loadProject(String fileName, String projectName)\npublic void setCanSaveMetadata(boolean canSave)\npublic MetaObject getSelectedObject()\npublic void deselectObjects()\npublic void setProject(Project project)\npublic void editorAction(String actionName, ActionEvent event)\npublic void setMode(int mode)\npublic FileManager getFileManager()\npublic void setFileManager(FileManager fileManager)\npublic ConfigManager getConfigManager()\npublic void setConfigManager(ConfigManager configManager)\npublic ClassLoader getClassLoader()\npublic void setClassLoader(ClassLoader classLoader)\npublic Properties getProps()\npublic String getUserHome()\npublic String getBaseDir()\npublic int getMajorVersionNumber()\npublic int getMinorVersionNumber()\npublic int getBuildNumber()\npublic MetaObject pasting(MetaObject target, MetaObject pasted, MetaProject project)\npublic void processMenuItems(MetaObject metaObject)\npublic void processMenuSeparators(MetaObject metaObject)\npublic void processTabPages(MetaObject metaObject)\npublic void processPlacement(MetaObject object)\npublic void processCreateLayout(MetaObject object)\npublic void updateDisplayLayer(MetaObject object, int layerIndex)\npublic void propertyEditedRepaint(MetaObject object)\npublic void processDeleteObject(MetaObject object)\npublic boolean getAttachedToDesigner()\npublic void processProjectChangedState(boolean hasProjectChanged)\npublic void processObjectNameChanged(MetaObject object)\npublic void runProject()", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "776a5a0e-110f-445f-bcef-889107df3b97": {"__data__": {"id_": "776a5a0e-110f-445f-bcef-889107df3b97", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1127571b-bb0a-4ad4-abeb-86fce034675f", "node_type": "4", "metadata": {}, "hash": "9f577be9e7c2f3d4b9835b37b40af46786b8182e749c97462ee825939f82cf82", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 10: Classes\n\n# Listing 10-1 (continued)\n\nToo Many Responsibilities\n\npublic void setAllowDragging(boolean allowDragging)\npublic boolean allowDragging()\npublic boolean isCustomizing()\npublic void setTitle(String title)\npublic IdeMenuBar getIdeMenuBar()\npublic void showHelper(MetaObject metaObject, String propertyName)\n// ... many non-public methods follow ...\n\nBut what if SuperDashboard contained only the methods shown in Listing 10-2?\n\n# Listing 10-2\n\nSmall Enough?\n\npublic class SuperDashboard extends JFrame implements MetaDataUser\npublic Component getLastFocusedComponent()\npublic void setLastFocused(Component lastFocused)\npublic int getMajorVersionNumber()\npublic int getMinorVersionNumber()\npublic int getBuildNumber()\n\nFive methods isn\u2019t too much, is it? In this case it is because despite its small number of methods, SuperDashboard has too many responsibilities.\n\nThe name of a class should describe what responsibilities it fulfills. In fact, naming is probably the first way of helping determine class size. If we cannot derive a concise name for a class, then it\u2019s likely too large. The more ambiguous the class name, the more likely it has too many responsibilities. For example, class names including weasel words like Processor or Manager or Super often hint at unfortunate aggregation of responsibilities.\n\nWe should also be able to write a brief description of the class in about 25 words, without using the words \u201cif,\u201d \u201cand,\u201d \u201cor,\u201d or \u201cbut.\u201d How would we describe the SuperDashboard? \u201cThe SuperDashboard provides access to the component that last held the focus, and it also allows us to track the version and build numbers.\u201d The first \u201cand\u201d is a hint that SuperDashboard has too many responsibilities.\n\n# The Single Responsibility Principle\n\nThe Single Responsibility Principle (SRP)2 states that a class or module should have one, and only one, reason to change. This principle gives us both a definition of responsibility, and a guidelines for class size. Classes should have one responsibility\u2014one reason to change.\n\n2. You can read much more about this principle in [PPP].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2108, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "471566c2-4b1c-4d57-93c8-30291e6f15d6": {"__data__": {"id_": "471566c2-4b1c-4d57-93c8-30291e6f15d6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0b8fd5d3-af03-4891-81f9-b22fa7134deb", "node_type": "4", "metadata": {}, "hash": "019febad84574e347e6e261165d2a469de7ad97342281cadb4212362198d2318", "class_name": "RelatedNodeInfo"}}, "text": "# Classes Should Be Small!\n\nThe seemingly small SuperDashboard class in Listing 10-2 has two reasons to change. First, it tracks version information that would seemingly need to be updated every time the software gets shipped. Second, it manages Java Swing components (it is a derivative of JFrame, the Swing representation of a top-level GUI window). No doubt we\u2019ll want to update the version number if we change any of the Swing code, but the converse isn\u2019t necessarily true: We might change the version information based on changes to other code in the system.\n\nTrying to identify responsibilities (reasons to change) often helps us recognize and create better abstractions in our code. We can easily extract all three SuperDashboard methods that deal with version information into a separate class named Version. (See Listing 10-3.) The Version class is a construct that has a high potential for reuse in other applications!\n\n# Listing 10-3\n\n# A single-responsibility class\n\npublic class Version {\npublic int getMajorVersionNumber()\npublic int getMinorVersionNumber()\npublic int getBuildNumber()\n}\n\nSRP is one of the more important concepts in OO design. It\u2019s also one of the simpler concepts to understand and adhere to. Yet oddly, SRP is often the most abused class design principle. We regularly encounter classes that do far too many things. Why?\n\nGetting software to work and making software clean are two very different activities. Most of us have limited room in our heads, so we focus on getting our code to work more than organization and cleanliness. This is wholly appropriate. Maintaining a separation of concerns is just as important in our programming activities as it is in our programs.\n\nThe problem is that too many of us think that we are done once the program works. We fail to switch to the other concern of organization and cleanliness. We move on to the next problem rather than going back and breaking the overstuffed classes into decoupled units with single responsibilities.\n\nAt the same time, many developers fear that a large number of small, single-purpose classes makes it more difficult to understand the bigger picture. They are concerned that they must navigate from class to class in order to figure out how a larger piece of work gets accomplished.\n\nHowever, a system with many small classes has no more moving parts than a system with a few large classes. There is just as much to learn in the system with a few large classes. So the question is: Do you want your tools organized into toolboxes with many small drawers each containing well-defined and well-labeled components? Or do you want a few drawers that you just toss everything into?\n\nEvery sizable system will contain a large amount of logic and complexity. The primary goal in managing such complexity is to organize it so that a developer knows where...", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2853, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d4a8e36-07f5-4d81-a943-fa8e5bb978bd": {"__data__": {"id_": "9d4a8e36-07f5-4d81-a943-fa8e5bb978bd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "55f3aad0-5a41-4220-a3db-a6b126edbdde", "node_type": "4", "metadata": {}, "hash": "ea7e795623c5ff6284450f5be8b71163af027efde4fbc513c17424875d7870e0", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 10: Classes\n\nto look to find things and need only understand the directly affected complexity at any given time. In contrast, a system with larger, multipurpose classes always hampers us by insisting we wade through lots of things we don\u2019t need to know right now.\n\nTo restate the former points for emphasis: We want our systems to be composed of many small classes, not a few large ones. Each small class encapsulates a single responsibility, has a single reason to change, and collaborates with a few others to achieve the desired system behaviors.\n\n# Cohesion\n\nClasses should have a small number of instance variables. Each of the methods of a class should manipulate one or more of those variables. In general the more variables a method manipulates the more cohesive that method is to its class. A class in which each variable is used by each method is maximally cohesive.\n\nIn general it is neither advisable nor possible to create such maximally cohesive classes; on the other hand, we would like cohesion to be high. When cohesion is high, it means that the methods and variables of the class are co-dependent and hang together as a logical whole.\n\nConsider the implementation of a Stack in Listing 10-4. This is a very cohesive class. Of the three methods only size() fails to use both the variables.\n\n# Listing 10-4\n\nStack.java A cohesive class.\n\npublic class Stack {\nprivate int topOfStack = 0;\nList<Integer> elements = new LinkedList<Integer>();\npublic int size() {return topOfStack;}\npublic void push(int element) {\ntopOfStack++;\nelements.add(element);\n}\npublic int pop() throws PoppedWhenEmpty {\nif (topOfStack == 0) throw new PoppedWhenEmpty();\nint element = elements.get(--topOfStack);\nelements.remove(topOfStack);\nreturn element;\n}\n}\n\nThe strategy of keeping functions small and keeping parameter lists short can sometimes lead to a proliferation of instance variables that are used by a subset of methods. When this happens, it almost always means that there is at least one other class trying to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2022, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f92aaac2-9fc6-4bd5-9d70-5af59e75ca7f": {"__data__": {"id_": "f92aaac2-9fc6-4bd5-9d70-5af59e75ca7f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1d2bf1fb-cbd9-4a6f-b6a7-d7f17dd0f688", "node_type": "4", "metadata": {}, "hash": "f61e0964525d84007847ff092568f6a318a18b16bd6167a634dafb9d579f6571", "class_name": "RelatedNodeInfo"}}, "text": "# Classes Should Be Small!\n\nget out of the larger class. You should try to separate the variables and methods into two or more classes such that the new classes are more cohesive.\n\n# Maintaining Cohesion Results in Many Small Classes\n\nJust the act of breaking large functions into smaller functions causes a proliferation of classes. Consider a large function with many variables declared within it. Let\u2019s say you want to extract one small part of that function into a separate function. However, the code you want to extract uses four of the variables declared in the function. Must you pass all four of those variables into the new function as arguments?\n\nNot at all! If we promoted those four variables to instance variables of the class, then we could extract the code without passing any variables at all. It would be easy to break the function up into small pieces.\n\nUnfortunately, this also means that our classes lose cohesion because they accumulate more and more instance variables that exist solely to allow a few functions to share them. But wait! If there are a few functions that want to share certain variables, doesn\u2019t that make them a class in their own right? Of course it does. When classes lose cohesion, split them!\n\nSo breaking a large function into many smaller functions often gives us the opportunity to split several smaller classes out as well. This gives our program a much better organization and a more transparent structure.\n\nKnuth\u2019s wonderful book *Literate Programming*.3 Listing 10-5 shows a translation into Java of Knuth\u2019s PrintPrimes program. To be fair to Knuth, this is not the program as he wrote it but rather as it was output by his WEB tool. I\u2019m using it because it makes a great starting place for breaking up a big function into many smaller functions and classes.\n\n# Listing 10-5\n\n# PrintPrimes.java\n\npackage literatePrimes;\npublic class PrintPrimes {\npublic static void main(String[] args) {\nfinal int M = 1000;\nfinal int RR = 50;\nfinal int CC = 4;\nfinal int WW = 10;\nfinal int ORDMAX = 30;\nint P[] = new int[M + 1];\nint PAGENUMBER;\nint PAGEOFFSET;\nint ROWOFFSET;\nint C;\n}\n}\n\n3.  [Knuth92].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2137, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "390b4f0f-2248-4042-9108-a97eeabc6931": {"__data__": {"id_": "390b4f0f-2248-4042-9108-a97eeabc6931", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bce5cfce-567c-4fac-862e-923ef324b5ea", "node_type": "4", "metadata": {}, "hash": "49563abaa387c2c5330cb4a8645295f79181fe5f1e0dffdafcd1bec793712c9d", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 10: Classes\n\n# Listing 10-5 (continued)\n\n# PrintPrimes.java\n\nint J;\nint K;\nboolean JPRIME;\nint ORD;\nint SQUARE;\nint N;\nint MULT[] = new int[ORDMAX + 1];\nJ = 1;\nK = 1;\nP[1] = 2;\nORD = 2;\nSQUARE = 9;\nwhile (K < M) {\ndo {\nJ = J + 2;\nif (J == SQUARE) {\nORD = ORD + 1;\nSQUARE = P[ORD] * P[ORD];\nMULT[ORD - 1] = J;\n}\nN = 2;\nJPRIME = true;\nwhile (N < ORD && JPRIME) {\nwhile (MULT[N] < J)\nMULT[N] = MULT[N] + P[N] + P[N];\nif (MULT[N] == J)\nJPRIME = false;\nN = N + 1;\n}\n} while (!JPRIME);\nK = K + 1;\nP[K] = J;\n}\n{\nPAGENUMBER = 1;\nPAGEOFFSET = 1;\nwhile (PAGEOFFSET <= M) {\nSystem.out.println(\"The First \" + M + \" Prime Numbers --- Page \" + PAGENUMBER);\nSystem.out.println(\"\");\nfor (ROWOFFSET = PAGEOFFSET; ROWOFFSET < PAGEOFFSET + RR; ROWOFFSET++) {\nfor (C = 0; C < CC; C++)\nif (ROWOFFSET + C * RR <= M)\nSystem.out.format(\"%10d\", P[ROWOFFSET + C * RR]);\nSystem.out.println(\"\");\n}\nSystem.out.println(\"\\f\");\nPAGENUMBER = PAGENUMBER + 1;\nPAGEOFFSET = PAGEOFFSET + RR * CC;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 973, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f8def8f-1f5a-4aad-ac12-a894b98b221b": {"__data__": {"id_": "1f8def8f-1f5a-4aad-ac12-a894b98b221b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1d28c199-0fdf-4a72-a3f9-169a76281026", "node_type": "4", "metadata": {}, "hash": "458edb7e03e9de3fd906c0c8905654cbbfadd36dc4bd6ecba5f8c776d4cd3184", "class_name": "RelatedNodeInfo"}}, "text": "# Classes Should Be Small!\n\nThis program, written as a single function, is a mess. It has a deeply indented structure, a plethora of odd variables, and a tightly coupled structure. At the very least, the one big function should be split up into a few smaller functions.\n\nListing 10-6 through Listing 10-8 show the result of splitting the code in Listing 10-5 into smaller classes and functions, and choosing meaningful names for those classes, functions, and variables.\n\n# Listing 10-6\n\n# PrimePrinter.java (refactored)\n\npackage literatePrimes;\npublic class PrimePrinter {\npublic static void main(String[] args) {\nfinal int NUMBER_OF_PRIMES = 1000;\nint[] primes = PrimeGenerator.generate(NUMBER_OF_PRIMES);\nfinal int ROWS_PER_PAGE = 50;\nfinal int COLUMNS_PER_PAGE = 4;\nRowColumnPagePrinter tablePrinter = new RowColumnPagePrinter(ROWS_PER_PAGE,\nCOLUMNS_PER_PAGE,\n\"The First \" + NUMBER_OF_PRIMES + \" Prime Numbers\");\ntablePrinter.print(primes);\n}\n}\n\n# Listing 10-7\n\n# RowColumnPagePrinter.java\n\npackage literatePrimes;\nimport java.io.PrintStream;\npublic class RowColumnPagePrinter {\nprivate int rowsPerPage;\nprivate int columnsPerPage;\nprivate int numbersPerPage;\nprivate String pageHeader;\nprivate PrintStream printStream;\npublic RowColumnPagePrinter(int rowsPerPage, int columnsPerPage,\nString pageHeader) {\nthis.rowsPerPage = rowsPerPage;\nthis.columnsPerPage = columnsPerPage;\nthis.pageHeader = pageHeader;\nnumbersPerPage = rowsPerPage * columnsPerPage;\nprintStream = System.out;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1485, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33206ee2-6832-4eae-8f31-832600b84f82": {"__data__": {"id_": "33206ee2-6832-4eae-8f31-832600b84f82", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "957e781f-4df4-4be3-9bef-57bab432902c", "node_type": "4", "metadata": {}, "hash": "99a6478b11fa71e2d0303c4b01fb1ee58e7c9834cb1d84b8ad3a1b3058f842f8", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 10: Classes\n\n# Listing 10-7 (continued)\n\n# RowColumnPagePrinter.java\n\npublic void print(int data[]) {\nint pageNumber = 1;\nfor (int firstIndexOnPage = 0; firstIndexOnPage < data.length; firstIndexOnPage += numbersPerPage) {\nint lastIndexOnPage = Math.min(firstIndexOnPage + numbersPerPage - 1, data.length - 1);\nprintPageHeader(pageHeader, pageNumber);\nprintPage(firstIndexOnPage, lastIndexOnPage, data);\nprintStream.println(\"\\f\");\npageNumber++;\n}\n}\n\nprivate void printPage(int firstIndexOnPage, int lastIndexOnPage, int[] data) {\nint firstIndexOfLastRowOnPage = firstIndexOnPage + rowsPerPage - 1;\nfor (int firstIndexInRow = firstIndexOnPage; firstIndexInRow <= firstIndexOfLastRowOnPage; firstIndexInRow++) {\nprintRow(firstIndexInRow, lastIndexOnPage, data);\nprintStream.println(\"\");\n}\n}\n\nprivate void printRow(int firstIndexInRow, int lastIndexOnPage, int[] data) {\nfor (int column = 0; column < columnsPerPage; column++) {\nint index = firstIndexInRow + column * rowsPerPage;\nif (index <= lastIndexOnPage) printStream.format(\"%10d\", data[index]);\n}\n}\n\nprivate void printPageHeader(String pageHeader, int pageNumber) {\nprintStream.println(pageHeader + \" --- Page \" + pageNumber);\nprintStream.println(\"\");\n}\n\npublic void setOutput(PrintStream printStream) {\nthis.printStream = printStream;\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1301, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bce96abe-7364-4c07-a7af-f2ffe3de5ca5": {"__data__": {"id_": "bce96abe-7364-4c07-a7af-f2ffe3de5ca5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4560894e-d5f4-49a5-987c-10846caaedfd", "node_type": "4", "metadata": {}, "hash": "4f20348ba6fb3f5bcd7dcf799279c730c21451ff2075078c3f61e63097dc036f", "class_name": "RelatedNodeInfo"}}, "text": "# Classes Should Be Small!\n\n# Listing 10-8\n\n# PrimeGenerator.java\n\npackage literatePrimes;\nimport java.util.ArrayList;\n\npublic class PrimeGenerator {\nprivate static int[] primes;\nprivate static ArrayList<Integer> multiplesOfPrimeFactors;\n\nprotected static int[] generate(int n) {\nprimes = new int[n];\nmultiplesOfPrimeFactors = new ArrayList<Integer>();\nset2AsFirstPrime();\ncheckOddNumbersForSubsequentPrimes();\nreturn primes;\n}\n\nprivate static void set2AsFirstPrime() {\nprimes[0] = 2;\nmultiplesOfPrimeFactors.add(2);\n}\n\nprivate static void checkOddNumbersForSubsequentPrimes() {\nint primeIndex = 1;\nfor (int candidate = 3; primeIndex < primes.length; candidate += 2) {\nif (isPrime(candidate)) primes[primeIndex++] = candidate;\n}\n}\n\nprivate static boolean isPrime(int candidate) {\nif (multiplesOfPrimeFactors.add(candidate); (isLeastRelevantMultipleOfNextLargerPrimeFactor(candidate))) {\nreturn false;\n}\nreturn isNotMultipleOfAnyPreviousPrimeFactor(candidate);\n}\n\nprivate static boolean isLeastRelevantMultipleOfNextLargerPrimeFactor(int candidate) {\nint nextLargerPrimeFactor = primes[multiplesOfPrimeFactors.size()];\nint leastRelevantMultiple = nextLargerPrimeFactor * nextLargerPrimeFactor;\nreturn candidate == leastRelevantMultiple;\n}\n\nprivate static boolean isNotMultipleOfAnyPreviousPrimeFactor(int candidate) {\nfor (int n = 1; n < multiplesOfPrimeFactors.size(); n++) {\nif (isMultipleOfNthPrimeFactor(candidate, n))\nreturn false;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1439, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ac2d11d-1b4a-4409-b26f-caf0175ab750": {"__data__": {"id_": "2ac2d11d-1b4a-4409-b26f-caf0175ab750", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fccfddb5-c36b-4cba-aca8-3ab5e83174ac", "node_type": "4", "metadata": {}, "hash": "bed204c77207652bc039200da34a8a773264287431a7a0f962e81c573f6fc3cb", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 10: Classes\n\n# Listing 10-8 (continued)\n\nPrimeGenerator.java\nreturn true;\n}\nprivate static boolean\nisMultipleOfNthPrimeFactor(int candidate, int n) {\nreturn candidate == smallestOddNthMultipleNotLessThanCandidate(candidate, n);\n}\nprivate static int\nsmallestOddNthMultipleNotLessThanCandidate(int candidate, int n) {\nint multiple = multiplesOfPrimeFactors.get(n);\nwhile (multiple < candidate) multiple += 2 * primes[n];\nmultiplesOfPrimeFactors.set(n, multiple);\nreturn multiple;\n}\n}\n\nThe first thing you might notice is that the program got a lot longer. It went from a little over one page to nearly three pages in length. There are several reasons for this growth. First, the refactored program uses longer, more descriptive variable names. Second, the refactored program uses function and class declarations as a way to add commentary to the code. Third, we used whitespace and formatting techniques to keep the program readable.\n\nNotice how the program has been split into three main responsibilities. The main program is contained in the PrimePrinter class all by itself. Its responsibility is to handle the execution environment. It will change if the method of invocation changes. For example, if this program were converted to a SOAP service, this is the class that would be affected.\n\nThe RowColumnPagePrinter knows all about how to format a list of numbers into pages with a certain number of rows and columns. If the formatting of the output needed changing, then this is the class that would be affected.\n\nThe PrimeGenerator class knows how to generate a list of prime numbers. Notice that it is not meant to be instantiated as an object. The class is just a useful scope in which its variables can be declared and kept hidden. This class will change if the algorithm for computing prime numbers changes.\n\nThis was not a rewrite! We did not start over from scratch and write the program over again. Indeed, if you look closely at the two different programs, you\u2019ll see that they use the same algorithm and mechanics to get their work done.\n\nThe change was made by writing a test suite that verified the precise behavior of the first program. Then a myriad of tiny little changes were made, one at a time. After each change the program was executed to ensure that the behavior had not changed. One tiny step after another, the first program was cleaned up and transformed into the second.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41cb553f-adce-440b-9e1d-2ecfbf26d6e4": {"__data__": {"id_": "41cb553f-adce-440b-9e1d-2ecfbf26d6e4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b3344f3c-d2f2-4e6f-bafe-9185c2af83a6", "node_type": "4", "metadata": {}, "hash": "63684962e719c84c6801c7436b7ad21a6c54aa900c4b00a0c17edf73f6228df1", "class_name": "RelatedNodeInfo"}}, "text": "# Organizing for Change\n\nFor most systems, change is continual. Every change subjects us to the risk that the remainder of the system no longer works as intended. In a clean system we organize our classes so as to reduce the risk of change.\n\nThe Sql class in Listing 10-9 is used to generate properly formed SQL strings given appropriate metadata. It\u2019s a work in progress and, as such, doesn\u2019t yet support SQL functionality like update statements. When the time comes for the Sql class to support an update statement, we\u2019ll have to \u201copen up\u201d this class to make modifications. The problem with opening a class is that it introduces risk. Any modifications to the class have the potential of breaking other code in the class. It must be fully retested.\n\n# Listing 10-9\n\n# A class that must be opened for change\n\npublic class Sql {\npublic Sql(String table, Column[] columns)\npublic String create()\npublic String insert(Object[] fields)\npublic String selectAll()\npublic String findByKey(String keyColumn, String keyValue)\npublic String select(Column column, String pattern)\npublic String select(Criteria criteria)\npublic String preparedInsert()\nprivate String columnList(Column[] columns)\nprivate String valuesList(Object[] fields, final Column[] columns)\nprivate String selectWithCriteria(String criteria)\nprivate String placeholderList(Column[] columns)\n}\n\nThe Sql class must change when we add a new type of statement. It also must change when we alter the details of a single statement type\u2014for example, if we need to modify the select functionality to support subselects. These two reasons to change mean that the Sql class violates the SRP.\n\nWe can spot this SRP violation from a simple organizational standpoint. The method outline of Sql shows that there are private methods, such as selectWithCriteria, that appear to relate only to select statements.\n\nPrivate method behavior that applies only to a small subset of a class can be a useful heuristic for spotting potential areas for improvement. However, the primary spur for taking action should be system change itself. If the Sql class is deemed logically complete, then we need not worry about separating the responsibilities. If we won\u2019t need update functionality for the foreseeable future, then we should leave Sql alone. But as soon as we find ourselves opening up a class, we should consider fixing our design.\n\nWhat if we considered a solution like that in Listing 10-10? Each public interface method defined in the previous Sql from Listing 10-9 is refactored out to its own derivative of the Sql class. Note that the private methods, such as valuesList, move directly where", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2640, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9bc6afe3-8760-46d7-afac-9def0ae20f0b": {"__data__": {"id_": "9bc6afe3-8760-46d7-afac-9def0ae20f0b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "26ac80d7-4e9a-4f94-8a8d-7647eab4d960", "node_type": "4", "metadata": {}, "hash": "978eec9dae528d86d85e802ae56ac5d0fec6ccb4fb247fa7acad17157a372e0d", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 10: Classes\n\nthey are needed. The common private behavior is isolated to a pair of utility classes, Where and ColumnList.\n\n# Listing 10-10\n\n# A set of closed classes\n\nabstract public class Sql {\npublic Sql(String table, Column[] columns)\nabstract public String generate();\n}\npublic class CreateSql extends Sql {\npublic CreateSql(String table, Column[] columns)\n@Override public String generate()\n}\npublic class SelectSql extends Sql {\npublic SelectSql(String table, Column[] columns)\n@Override public String generate()\n}\npublic class InsertSql extends Sql {\npublic InsertSql(String table, Column[] columns, Object[] fields)\n@Override public String generate()\nprivate String valuesList(Object[] fields, final Column[] columns)\n}\npublic class SelectWithCriteriaSql extends Sql {\npublic SelectWithCriteriaSql(String table, Column[] columns, Criteria criteria)\n@Override public String generate()\n}\npublic class SelectWithMatchSql extends Sql {\npublic SelectWithMatchSql(String table, Column[] columns, Column column, String pattern)\n@Override public String generate()\n}\npublic class FindByKeySql extends Sql {\npublic FindByKeySql(String table, Column[] columns, String keyColumn, String keyValue)\n@Override public String generate()\n}\npublic class PreparedInsertSql extends Sql {\npublic PreparedInsertSql(String table, Column[] columns)\n@Override public String generate() {\nprivate String placeholderList(Column[] columns)\n}\npublic class Where {\npublic Where(String criteria)\npublic String generate()\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1507, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c876f86a-8e62-4a91-9d52-e122a499be56": {"__data__": {"id_": "c876f86a-8e62-4a91-9d52-e122a499be56", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a366c28f-bf78-4bc8-a2a4-6d61ca1e8faf", "node_type": "4", "metadata": {}, "hash": "989a560d808a16daef8427a63fb93bad6c756e1f45c74fcf22e16b6436ae5ce0", "class_name": "RelatedNodeInfo"}}, "text": "# Organizing for Change\n\n# Listing 10-10 (continued)\n\nA set of closed classes\npublic class ColumnList {\npublic ColumnList(Column[] columns)\npublic String generate()\n}\n\nThe code in each class becomes excruciatingly simple. Our required comprehension time to understand any class decreases to almost nothing. The risk that one function could break another becomes vanishingly small. From a test standpoint, it becomes an easier task to prove all bits of logic in this solution, as the classes are all isolated from one another.\n\nEqually important, when it\u2019s time to add the update statements, none of the existing classes need change! We code the logic to build update statements in a new subclass of Sql named UpdateSql. No other code in the system will break because of this change.\n\nOur restructured Sql logic represents the best of all worlds. It supports the SRP. It also supports another key OO class design principle known as the Open-Closed Principle, or OCP:4 Classes should be open for extension but closed for modification. Our restructured Sql class is open to allow new functionality via subclassing, but we can make this change while keeping every other class closed. We simply drop our UpdateSql class in place.\n\nWe want to structure our systems so that we muck with as little as possible when we update them with new or changed features. In an ideal system, we incorporate new features by extending the system, not by making modifications to existing code.\n\n# Isolating from Change\n\nNeeds will change, therefore code will change. We learned in OO 101 that there are concrete classes, which contain implementation details (code), and abstract classes, which represent concepts only. A client class depending upon concrete details is at risk when those details change. We can introduce interfaces and abstract classes to help isolate the impact of those details.\n\nDependencies upon concrete details create challenges for testing our system. If we\u2019re building a Portfolio class and it depends upon an external TokyoStockExchange API to derive the portfolio\u2019s value, our test cases are impacted by the volatility of such a lookup. It\u2019s hard to write a test when we get a different answer every five minutes!\n\nInstead of designing Portfolio so that it directly depends upon TokyoStockExchange, we create an interface, StockExchange, that declares a single method:\n\npublic interface StockExchange {\nMoney currentPrice(String symbol);\n}\n\n4. [PPP].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2454, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8647c29f-9296-40d1-891c-d67f320c2f46": {"__data__": {"id_": "8647c29f-9296-40d1-891c-d67f320c2f46", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "abf31dac-182f-4c25-a6b5-f4999680ea21", "node_type": "4", "metadata": {}, "hash": "fc1a8df157867c779fb4c6b1d0a049b9ac2f20d92c9b543df2f79db11a14397c", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 10: Classes\n\nWe design TokyoStockExchange to implement this interface. We also make sure that the constructor of Portfolio takes a StockExchange reference as an argument:\n\npublic    Portfolio {\nprivate StockExchange exchange;\npublic Portfolio(StockExchange exchange) {this.exchange = exchange;\n}\n// ...\n}\nNow our test can create a testable implementation of the StockExchange interface that emulates the TokyoStockExchange. This test implementation will fix the current value for any symbol we use in testing. If our test demonstrates purchasing five shares of Microsoft for our portfolio, we code the test implementation to always return $100 per share of Microsoft. Our test implementation of the StockExchange interface reduces to a simple table lookup. We can then write a test that expects $500 for our overall portfolio value.\n\npublic    class PortfolioTest {\nprivate FixedStockExchangeStub exchange;\nprivate Portfolio portfolio;\n@Before\nprotected void setUp() throws Exception {exchange = new FixedStockExchangeStub();\nexchange.fix(\"MSFT\", 100);\nportfolio = new Portfolio(exchange);\n}\n@Test\npublic void GivenFiveMSFTTotalShouldBe500() throws Exception {\nportfolio.add(5, \"MSFT\");\nAssert.assertEquals(500, portfolio.value());\n}\n}\nIf a system is decoupled enough to be tested in this way, it will also be more flexible and promote more reuse. The lack of coupling means that the elements of our system are better isolated from each other and from change. This isolation makes it easier to understand each element of the system.\n\nBy minimizing coupling in this way, our classes adhere to another class design principle known as the Dependency Inversion Principle (DIP). In essence, the DIP says that our classes should depend upon abstractions, not on concrete details.\n\nInstead of being dependent upon the implementation details of the TokyoStockExchange class, our Portfolio class is now dependent upon the StockExchange interface. The StockExchange interface represents the abstract concept of asking for the current price of a symbol. This abstraction isolates all of the specific details of obtaining such a price, including from where that price is obtained.\n\n5. [PPP].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2189, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9df8e144-0ddb-46aa-8909-6ee8f1db80a0": {"__data__": {"id_": "9df8e144-0ddb-46aa-8909-6ee8f1db80a0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6388febd-7e90-41e8-89ab-88acd38b9b66", "node_type": "4", "metadata": {}, "hash": "9a6c5b9858673b2a0bbd234328fba130bbd2eae9985b4f6ed66e327340976b06", "class_name": "RelatedNodeInfo"}}, "text": "# Bibliography\n\n|[RDD]|Object Design: Roles, Responsibilities, and Collaborations, Rebecca Wirfs-Brock et al., Addison-Wesley, 2002.|\n|---|---|\n|[PPP]|Agile Software Development: Principles, Patterns, and Practices, Robert C. Martin, Prentice Hall, 2002.|\n|[Knuth92]|Literate Programming, Donald E. Knuth, Center for the Study of Language and Information, Leland Stanford Junior University, 1992.|", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 397, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c265a3de-1eb5-4683-9144-1d3d9ca2c586": {"__data__": {"id_": "c265a3de-1eb5-4683-9144-1d3d9ca2c586", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "026c914a-29f3-4643-b33a-554615d6a766", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ce2b5e8-6f4a-44c6-9c17-4ba13a903ed3": {"__data__": {"id_": "0ce2b5e8-6f4a-44c6-9c17-4ba13a903ed3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3db0d810-6c2f-40e2-bef8-0435f7085900", "node_type": "4", "metadata": {}, "hash": "936151d3a4d89e7964e7e28b455e33e849eeb4f1a5f5aa4eff3e44554ed43f88", "class_name": "RelatedNodeInfo"}}, "text": "# 11 Systems\n\nby Dr. Kevin Dean Wampler\n\n\u201cComplexity kills. It sucks the life out of developers, it makes products difficult to plan, build, and test.\u201d\n\n\u2014Ray Ozzie, CTO, Microsoft Corporation\n\n153", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 196, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0031574b-17f1-4ae6-8475-38e1f11b46b1": {"__data__": {"id_": "0031574b-17f1-4ae6-8475-38e1f11b46b1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "586b4fed-44e7-4286-ac9c-27428b49190a", "node_type": "4", "metadata": {}, "hash": "79220a1dacf93ab5edb1c420c1847f9f4cf7f0065588d210022a601eaa8cb0bf", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 11: Systems\n\n# How Would You Build a City?\n\nCould you manage all the details yourself? Probably not. Even managing an existing city is too much for one person. Yet, cities work (most of the time). They work because cities have teams of people who manage particular parts of the city, the water systems, power systems, traffic, law enforcement, building codes, and so forth. Some of those people are responsible for the big picture, while others focus on the details.\n\nCities also work because they have evolved appropriate levels of abstraction and modularity that make it possible for individuals and the \u201ccomponents\u201d they manage to work effectively, even without understanding the big picture.\n\nAlthough software teams are often organized like that too, the systems they work on often don\u2019t have the same separation of concerns and levels of abstraction. Clean code helps us achieve this at the lower levels of abstraction. In this chapter let us consider how to stay clean at higher levels of abstraction, the system level.\n\n# Separate Constructing a System from Using It\n\nFirst, consider that construction is a very different process from use. As I write this, there is a new hotel under construction that I see out my window in Chicago. Today it is a bare concrete box with a construction crane and elevator bolted to the outside. The busy people there all wear hard hats and work clothes. In a year or so the hotel will be finished. The crane and elevator will be gone. The building will be clean, encased in glass window walls and attractive paint. The people working and staying there will look a lot different too.\n\nSoftware systems should separate the startup process, when the application objects are constructed and the dependencies are \u201cwired\u201d together, from the runtime logic that takes over after startup.\n\nThe startup process is a concern that any application must address. It is the first concern that we will examine in this chapter. The separation of concerns is one of the oldest and most important design techniques in our craft.\n\nUnfortunately, most applications don\u2019t separate this concern. The code for the startup process is ad hoc and it is mixed in with the runtime logic. Here is a typical example:\n\npublic Service getService() {\nif (service == null) service = new MyServiceImpl(...); // Good enough default for most cases?\nreturn service;\n}\nThis is the LAZY INITIALIZATION /EVALUATION idiom, and it has several merits. We don\u2019t incur the overhead of construction unless we actually use the object, and our startup times can be faster as a result. We also ensure that null is never returned.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2629, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87390136-8361-4438-be09-efd5a44c9786": {"__data__": {"id_": "87390136-8361-4438-be09-efd5a44c9786", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fff026bd-77c1-4cf5-9a58-ae3c99319c9e", "node_type": "4", "metadata": {}, "hash": "1de4e7461e7595bc686fe2af4c55dbde339612222bd5e29413aa82c92a023794", "class_name": "RelatedNodeInfo"}}, "text": "# Separate Constructing a System from Using It\n\nHowever, we now have a hard-coded dependency on MyServiceImpl and everything its constructor requires (which I have elided). We can\u2019t compile without resolving these dependencies, even if we never actually use an object of this type at runtime! Make sure that an appropriate TEST DOUBLE 1 or MOCK OBJECT gets assigned to the service field before this method is called during unit testing. Because we have construction logic mixed in with normal runtime processing, we should test all execution paths (for example, the null test and its block). Having both of these responsibilities means that the method is doing more than one thing, so we are breaking the Single Responsibility Principle in a small way.\n\nPerhaps worst of all, we do not know whether MyServiceImpl is the right object in all cases. I implied as much in the comment. Why does the class with this method have to know the global context? Can we ever really know the right object to use here? Is it even possible for one type to be right for all possible contexts?\n\nOne occurrence of LAZY -INITIALIZATION isn\u2019t a serious problem, of course. However, there are normally many instances of little setup idioms like this in applications. Hence, the global setup strategy (if there is one) is scattered across the application, with little modularity and often significant duplication.\n\nIf we are diligent about building well-formed and robust systems, we should never let little, convenient idioms lead to modularity breakdown. The startup process of object construction and wiring is no exception. We should modularize this process separately from the normal runtime logic and we should make sure that we have a global, consistent strategy for resolving our major dependencies.\n\n# Separation of Main\n\nOne way to separate construction from use is simply to move all aspects of construction to main, or modules called by main, and to design the rest of the system assuming that all objects have been constructed and wired up appropriately. (See Figure 11-1.)\n\nThe flow of control is easy to follow. The main function builds the objects necessary for the system, then passes them to the application, which simply uses them. Notice the direction of the dependency arrows crossing the barrier between main and the application. They all go one direction, pointing away from main. This means that the application has no knowledge of main or of the construction process. It simply expects that everything has been built properly.\n\n# Factories\n\nSometimes, of course, we need to make the application responsible for when an object gets created. For example, in an order processing system the application must create the\n\n1.  [Mezzaros07].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2735, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5a8fce17-482c-48e2-beed-27487c49d1f7": {"__data__": {"id_": "5a8fce17-482c-48e2-beed-27487c49d1f7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d552cfe4-67ea-43dd-874e-ff9cee3730c1", "node_type": "4", "metadata": {}, "hash": "ecf577c93bf6a9bdf6fef38ee896d888b2ef3ac42bab63f0b53817b88342d3b3", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 11: Systems\n\n# Figure 11-1\n\nSeparating construction in main()\n\nLineItem instances to add to an Order. In this case we can use the ABSTRACT FACTORY2 pattern to give the application control of when to build the LineItems, but keep the details of that construction separate from the application code. (See Figure 11-2.)\n\n# Figure 11-2\n\nSeparation construction with factory\n\nAgain notice that all the dependencies point from main toward the OrderProcessing application. This means that the application is decoupled from the details of how to build a LineItem. That capability is held in the LineItemFactoryImplementation, which is on the main side of the line. And yet the application is in complete control of when the LineItem instances get built and can even provide application-specific constructor arguments.\n\n2.  [GOF].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 831, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d3241ae-ac8e-4eca-b94e-96e9df8a31f8": {"__data__": {"id_": "1d3241ae-ac8e-4eca-b94e-96e9df8a31f8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "566534af-4457-4c79-9551-2d20cdccdfa2", "node_type": "4", "metadata": {}, "hash": "6f74ab639fd03ef2b7916c38b8b64a0a51702da63e9504583f67dcd695311787", "class_name": "RelatedNodeInfo"}}, "text": "# Scaling Up\n\n# Dependency Injection\n\nA powerful mechanism for separating construction from use is Dependency Injection (DI), (IoC) to dependency management. Inversion of Control moves secondary responsibilities from an object to other objects that are dedicated to the purpose, thereby supporting the Single Responsibility Principle. In the context of dependency management, an object should not take responsibility for instantiating dependencies itself. Instead, it should pass this responsibility to another \u201cauthoritative\u201d mechanism, thereby inverting the control. Because setup is a global concern, this authoritative mechanism will usually be either the \u201cmain\u201d routine or a special-purpose container.\n\nJNDI lookups are a \u201cpartial\u201d implementation of DI, where an object asks a directory server to provide a \u201cservice\u201d matching a particular name.\n\nMyService myService = (MyService)(jndiContext.lookup(\u201cNameOfMyService\u201d));\nThe invoking object doesn\u2019t control what kind of object is actually returned (as long it implements the appropriate interface, of course), but the invoking object still actively resolves the dependency.\n\nTrue Dependency Injection goes one step further. The class takes no direct steps to resolve its dependencies; it is completely passive. Instead, it provides setter methods or constructor arguments (or both) that are used to inject the dependencies. During the construction process, the DI container instantiates the required objects (usually on demand) and uses the constructor arguments or setter methods provided to wire together the dependencies. Which dependent objects are actually used is specified through a configuration file or programmatically in a special-purpose construction module.\n\nThe Spring Framework provides the best known DI container for Java. You define which objects to wire together in an XML configuration file, then you ask for particular objects by name in Java code. We will look at an example shortly.\n\nBut what about the virtues of LAZY -INITIALIZATION? This idiom is still sometimes useful with DI. First, most DI containers won\u2019t construct an object until needed. Second, many of these containers provide mechanisms for invoking factories or for constructing proxies, which could be used for LAZY -EVALUATION and similar optimizations.\n\n# Scaling Up\n\nCities grow from towns, which grow from settlements. At first the roads are narrow and practically nonexistent, then they are paved, then widened over time. Small buildings and\n\n3. See, for example, [Fowler].\n\n4. See [Spring]. There is also a Spring.NET framework.\n\n5. Don\u2019t forget that lazy instantiation/evaluation is just an optimization and perhaps premature!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2675, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1ef0d57-53a6-47bb-ae24-cab2295fb152": {"__data__": {"id_": "c1ef0d57-53a6-47bb-ae24-cab2295fb152", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2c701332-4fd5-40d3-9a2e-edad38f5cda3", "node_type": "4", "metadata": {}, "hash": "292806089b12f584777eb537a1d28a31c93f715395e4da04ee21e38016d944f0", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 11: Systems\n\nempty plots are filled with larger buildings, some of which will eventually be replaced with skyscrapers.\n\nAt first there are no services like power, water, sewage, and the Internet (gasp!). These services are also added as the population and building densities increase.\n\nThis growth is not without pain. How many times have you driven, bumper to bumper through a road \u201cimprovement\u201d project and asked yourself, \u201cWhy didn\u2019t they build it wide enough the first time!?\u201d\n\nBut it couldn\u2019t have happened any other way. Who can justify the expense of a six-lane highway through the middle of a small town that anticipates growth? Who would want such a road through their town?\n\nIt is a myth that we can get systems \u201cright the first time.\u201d Instead, we should implement only today\u2019s stories, then refactor and expand the system to implement new stories tomorrow. This is the essence of iterative and incremental agility. Test-driven development, refactoring, and the clean code they produce make this work at the code level.\n\nBut what about at the system level? Doesn\u2019t the system architecture require preplanning? Certainly, it can\u2019t grow incrementally from simple to complex, can it?\n\nSoftware systems are unique compared to physical systems. Their architectures can grow incrementally, if we maintain the proper separation of concerns.\n\nThe ephemeral nature of software systems makes this possible, as we will see. Let us first consider a counterexample of an architecture that doesn\u2019t separate concerns adequately.\n\nThe original EJB1 and EJB2 architectures did not separate concerns appropriately and thereby imposed unnecessary barriers to organic growth. Consider an Entity Bean for a persistent Bank class. An entity bean is an in-memory representation of relational data, in other words, a table row.\n\nFirst, you had to define a local (in process) or remote (separate JVM) interface, which clients would use. Listing 11-1 shows a possible local interface:\n\n# Listing 11-1\n\nAn EJB2 local interface for a Bank EJB\n\npackage com.example.banking;\nimport java.util.Collections;\nimport javax.ejb.*;\npublic interface BankLocal extends java.ejb.EJBLocalObject {\nString getStreetAddr1() throws EJBException;\nString getStreetAddr2() throws EJBException;\nString getCity() throws EJBException;\nString getState() throws EJBException;\nString getZipCode() throws EJBException;\nvoid setStreetAddr1(String street1) throws EJBException;\nvoid setStreetAddr2(String street2) throws EJBException;\nvoid setCity(String city) throws EJBException;\nvoid setState(String state) throws EJBException;\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2595, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66319d01-2127-4bec-8823-6777a258b267": {"__data__": {"id_": "66319d01-2127-4bec-8823-6777a258b267", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ac598ff0-7dde-4d75-b5d8-03b56a9a7cd1", "node_type": "4", "metadata": {}, "hash": "32d5de7e2eaab7e091ad171fc29b91d4ea24146c1d9242ec42fd6f6706013d66", "class_name": "RelatedNodeInfo"}}, "text": "# Scaling Up\n\n# Listing 11-1 (continued)\n\nAn EJB2 local interface for a Bank EJB\n\nvoid   setZipCode(String zip) throws EJBException;\nCollection getAccounts() throws EJBException;\nvoid   setAccounts(Collection accounts) throws EJBException;\nvoid   addAccount(AccountDTO accountDTO) throws EJBException;\n\nI have shown several attributes for the Bank\u2019s address and a collection of accounts that the bank owns, each of which would have its data handled by a separate Account EJB. Listing 11-2 shows the corresponding implementation class for the Bank bean.\n\n# Listing 11-2\n\nThe corresponding EJB2 Entity Bean Implementation\n\npackage com.example.banking;\nimport   java.util.Collections;\nimport   javax.ejb.*;\npublic   abstract class Bank implements javax.ejb.EntityBean {\n// Business logic...\npublic abstract String getStreetAddr1();\npublic abstract String getStreetAddr2();\npublic abstract String getCity();\npublic abstract String getState();\npublic abstract String getZipCode();\npublic abstract void setStreetAddr1(String street1);\npublic abstract void setStreetAddr2(String street2);\npublic abstract void setCity(String city);\npublic abstract void setState(String state);\npublic abstract void setZipCode(String zip);\npublic abstract Collection getAccounts();\npublic abstract void setAccounts(Collection accounts);\npublic void addAccount(AccountDTO accountDTO) {\nInitialContext context = new InitialContext();\nAccountHomeLocal accountHome = context.lookup(\"AccountHomeLocal\");\nAccountLocal account = accountHome.create(accountDTO);\nCollection accounts = getAccounts();\naccounts.add(account);\n}\n// EJB container logic\npublic abstract void setId(Integer id);\npublic abstract Integer getId();\npublic Integer ejbCreate(Integer id) { ... }\npublic void ejbPostCreate(Integer id) { ... }\n// The rest had to be implemented but were usually empty:\npublic void setEntityContext(EntityContext ctx) {}\npublic void unsetEntityContext() {}\npublic void ejbActivate() {}\npublic void ejbPassivate() {}\npublic void ejbLoad() {}\npublic void ejbStore() {}\npublic void ejbRemove() {}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2061, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87b682fe-507d-4873-b5eb-4672765d8de2": {"__data__": {"id_": "87b682fe-507d-4873-b5eb-4672765d8de2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cd1f4905-e614-4fd6-89e8-bc56dfce5005", "node_type": "4", "metadata": {}, "hash": "bf80e6061ac8fe313546732d1a1fb3bd1361def4eeaa170f793139e9ff180ecb", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 11: Systems\n\nI haven\u2019t shown the corresponding LocalHome interface, essentially a factory used to create objects, nor any of the possible Bank finder (query) methods you might add.\n\nFinally, you had to write one or more XML deployment descriptors that specify the object-relational mapping details to a persistence store, the desired transactional behavior, security constraints, and so on.\n\nThe business logic is tightly coupled to the EJB2 application \u201ccontainer.\u201d You must subclass container types and you must provide many lifecycle methods that are required by the container.\n\nBecause of this coupling to the heavyweight container, isolated unit testing is difficult. It is necessary to mock out the container, which is hard, or waste a lot of time deploying EJBs and tests to a real server. Reuse outside of the EJB2 architecture is effectively impossible, due to the tight coupling.\n\nFinally, even object-oriented programming is undermined. One bean cannot inherit from another bean. Notice the logic for adding a new account. It is common in EJB2 beans to define \u201cdata transfer objects\u201d (DTOs) that are essentially \u201cstructs\u201d with no behavior. This usually leads to redundant types holding essentially the same data, and it requires boilerplate code to copy data from one object to another.\n\n# Cross-Cutting Concerns\n\nThe EJB2 architecture comes close to true separation of concerns in some areas. For example, the desired transactional, security, and some of the persistence behaviors are declared in the deployment descriptors, independently of the source code.\n\nNote that concerns like persistence tend to cut across the natural object boundaries of a domain. You want to persist all your objects using generally the same strategy, for example, using a particular DBMS6 versus flat files, following certain naming conventions for tables and columns, using consistent transactional semantics, and so on.\n\nIn principle, you can reason about your persistence strategy in a modular, encapsulated way. Yet, in practice, you have to spread essentially the same code that implements the persistence strategy across many objects. We use the term cross-cutting concerns for concerns like these. Again, the persistence framework might be modular and our domain logic, in isolation, might be modular. The problem is the fine-grained intersection of these domains.\n\n\u201canticipated\u201d aspect-oriented programming (AOP)7, which is a general-purpose approach to restoring modularity for cross-cutting concerns.\n\nIn AOP, modular constructs called aspects specify which points in the system should have their behavior modified in some consistent way to support a particular concern. This specification is done using a succinct declarative or programmatic mechanism.\n\n6 Database management system.\n\n7 See [AOSD] for general information on aspects and [AspectJ] and [Colyer] for AspectJ-specific information.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2905, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79a8bc35-1caa-4bb6-893b-423bad9070e7": {"__data__": {"id_": "79a8bc35-1caa-4bb6-893b-423bad9070e7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b5cb8a19-3ead-4999-b7bc-66164232ee33", "node_type": "4", "metadata": {}, "hash": "dc33fe84f684eae0556d4bcefe6bb15e65d61981b96e40bf3809b16dc71892f9", "class_name": "RelatedNodeInfo"}}, "text": "# Java Proxies\n\nUsing persistence as an example, you would declare which objects and attributes (or patterns thereof) should be persisted and then delegate the persistence tasks to your persistence framework. The behavior modifications are made noninvasively8 to the target code by the AOP framework. Let us look at three aspects or aspect-like mechanisms in Java.\n\n# Java Proxies\n\nJava proxies are suitable for simple situations, such as wrapping method calls in individual objects or classes. However, the dynamic proxies provided in the JDK only work with interfaces. To proxy classes, you have to use a byte-code manipulation library, such as CGLIB, ASM, or Javassist.9\n\n# Listing 11-3\n\n# JDK Proxy Example\n\n// Bank.java (suppressing package names...)\nimport java.utils.*;\n// The abstraction of a bank.\npublic interface Bank {\nCollection<Account> getAccounts();\nvoid setAccounts(Collection<Account> accounts);\n}\n\n// BankImpl.java\nimport java.utils.*;\n// The \u201cPlain Old Java Object\u201d (POJO) implementing the abstraction.\npublic class BankImpl implements Bank {\nprivate List<Account> accounts;\npublic Collection<Account> getAccounts() {\nreturn accounts;\n}\npublic void setAccounts(Collection<Account> accounts) {\nthis.accounts = new ArrayList<Account>();\nfor (Account account: accounts) {\nthis.accounts.add(account);\n}\n}\n}\n\n// BankProxyHandler.java\nimport java.lang.reflect.*;\nimport java.util.*;\n\n8. Meaning no manual editing of the target source code is required.\n\n9. See [CGLIB], [ASM], and [Javassist].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1506, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b715474-ab00-49b3-b96b-ec7c6a15db0e": {"__data__": {"id_": "6b715474-ab00-49b3-b96b-ec7c6a15db0e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2c98c9b3-a045-451a-be3c-707e258409aa", "node_type": "4", "metadata": {}, "hash": "31b4151569222ddfa090e01ac9d46b7378f6f4173ea27d84d35b98b6af406fc1", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 11: Systems\n\n# Listing 11-3 (continued)\n\n# JDK Proxy Example\n\n// \u201cInvocationHandler\u201d required by the proxy API.\npublic class BankProxyHandler implements InvocationHandler {\nprivate Bank bank;\npublic BankProxyHandler(Bank bank) { this.bank = bank; }\n// Method defined in InvocationHandler\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\nString methodName = method.getName();\nif (methodName.equals(\"getAccounts\")) {\nreturn bank.getAccounts();\n} else if (methodName.equals(\"setAccounts\")) {\nbank.setAccounts((Collection<Account>) args[0]);\nsetAccountsToDatabase(bank.getAccounts());\nreturn null;\n} else {...\n}\n}\n// Lots of details here:\nprotected Collection<Account> getAccountsFromDatabase() { ... }\nprotected void setAccountsToDatabase(Collection<Account> accounts) { ... }\n}\n// Somewhere else...\nBank bank = (Bank) Proxy.newProxyInstance(\nBank.class.getClassLoader(),\nnew Class[] { Bank.class },\nnew BankProxyHandler(new BankImpl()));\n\nWe defined an interface Bank, which will be wrapped by the proxy, and a Plain-Old Java Object (POJO), BankImpl, that implements the business logic. (We will revisit POJOs shortly.)\n\nThe Proxy API requires an InvocationHandler object that it calls to implement any Bank method calls made to the proxy. Our BankProxyHandler uses the Java reflection API to map the generic method invocations to the corresponding methods in BankImpl, and so on.\n\nThere is a lot of code here and it is relatively complicated, even for this simple case.10 Using one of the byte-manipulation libraries is similarly challenging. This code \u201cvolume\u201d\n\n10. For more detailed examples of the Proxy API and examples of its use, see, for example, [Goetz].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1706, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e664b102-79bf-4f1d-a8a6-2920e6d0c50b": {"__data__": {"id_": "e664b102-79bf-4f1d-a8a6-2920e6d0c50b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ea8983f0-85ec-41b4-9832-38693710bb3e", "node_type": "4", "metadata": {}, "hash": "66ec7812009d9c1e819a9190b47e0e07f83ff549e565895d16e64f32332a5f87", "class_name": "RelatedNodeInfo"}}, "text": "# Pure Java AOP Frameworks\n\nand complexity are two of the drawbacks of proxies. They make it hard to create clean code! Also, proxies don\u2019t provide a mechanism for specifying system-wide execution \u201cpoints\u201d of interest, which is needed for a true AOP solution.11\n\nFortunately, most of the proxy boilerplate can be handled automatically by tools. Proxies are used internally in several Java frameworks, for example, Spring AOP and JBoss AOP, to implement aspects in pure Java.12 In Spring, you write your business logic as Plain-Old Java Objects. POJOs are purely focused on their domain. They have no dependencies on enterprise frameworks (or any other domains). Hence, they are conceptually simpler and easier to test drive. The relative simplicity makes it easier to ensure that you are implementing the corresponding user stories correctly and to maintain and evolve the code for future stories.\n\nYou incorporate the required application infrastructure, including cross-cutting concerns like persistence, transactions, security, caching, failover, and so on, using declarative configuration files or APIs. In many cases, you are actually specifying Spring or JBoss library aspects, where the framework handles the mechanics of using Java proxies or byte-code libraries transparently to the user. These declarations drive the dependency injection (DI) container, which instantiates the major objects and wires them together on demand.\n\n# Listing 11-4\n\n# Spring 2.X configuration file\n\n&lt;beans&gt;...\n&lt;bean id=\"appDataSource\"\nclass=\"org.apache.commons.dbcp.BasicDataSource\"\ndestroy-method=\"close\"\np:driverClassName=\"com.mysql.jdbc.Driver\"\np:url=\"jdbc:mysql://localhost:3306/mydb\"\np:username=\"me\"/&gt;\n&lt;bean id=\"bankDataAccessObject\"\nclass=\"com.example.banking.persistence.BankDataAccessObject\"\np:dataSource-ref=\"appDataSource\"/&gt;\n&lt;bean id=\"bank\"&gt;\n\n11 AOP is sometimes confused with techniques used to implement it, such as method interception and \u201cwrapping\u201d through proxies. The real value of an AOP system is the ability to specify systemic behaviors in a concise and modular way.\n\n12 See [Spring] and [JBoss]. \u201cPure Java\u201d means without the use of AspectJ.\n\n13 Adapted from http://www.theserverside.com/tt/articles/article.tss?l=IntrotoSpring25", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2261, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f75c1b39-a71c-4bfd-8642-7db6dc74977c": {"__data__": {"id_": "f75c1b39-a71c-4bfd-8642-7db6dc74977c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "24482ac1-906f-4fdf-ace3-e21ee4592bc1", "node_type": "4", "metadata": {}, "hash": "c70975bb41ee583d4f92a016b000067940abef5c28858ef2ddafe38ea7956ed6", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 11: Systems\n\n# Listing 11-4 (continued)\n\nSpring 2.X configuration file\nclass=\"com.example.banking.model.Bank\"\np:dataAccessObject-ref=\"bankDataAccessObject\"/>\n...\n\n</beans>\n\nEach \u201cbean\u201d is like one part of a nested \u201cRussian doll,\u201d with a domain object for a Bank proxied (wrapped) by a data accessor object (DAO), which is itself proxied by a JDBC driver data source. (See Figure 11-3.)\n\n# Figure 11-3\n\nThe \u201cRussian doll\u201d of decorators\n\ning to the outermost of a set of nested DECORATOR objects that extend the basic behavior of the Bank POJO. We could add other decorators for transactions, caching, and so forth.\n\nIn the application, a few lines are needed to ask the DI container for the top-level objects in the system, as specified in the XML file.\n\nXmlBeanFactory bf =new XmlBeanFactory(new ClassPathResource(\"app.xml\", getClass()));\nBank bank = (Bank) bf.getBean(\"bank\");\n\nBecause so few lines of Spring-specific Java code are required, the application is almost completely decoupled from Spring, eliminating all the tight-coupling problems of systems like EJB2.\n\nAlthough XML can be verbose and hard to read, the \u201cpolicy\u201d specified in these configuration files is simpler than the complicated proxy and aspect logic that is hidden from view and created automatically. This type of architecture is so compelling that frameworks like Spring led to a complete overhaul of the EJB standard for version 3. EJB3\n\n# Footnotes\n\n1. [GOF].\n2. The example can be simplified using mechanisms that exploit convention over configuration and Java 5 annotations to reduce the amount of explicit \u201cwiring\u201d logic required.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1620, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f4f070f-810a-4a0e-848a-fa0ec71f7975": {"__data__": {"id_": "4f4f070f-810a-4a0e-848a-fa0ec71f7975", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8a73abc-8b7b-473a-bc70-7dc262128f43", "node_type": "4", "metadata": {}, "hash": "75f242a5c082000c90ee4e88305c0b120e60507844f0583e63b78a61357b1656", "class_name": "RelatedNodeInfo"}}, "text": "# Pure Java AOP Frameworks\n\nlargely follows the Spring model of declaratively supporting cross-cutting concerns using XML configuration files and/or Java 5 annotations.\n\n# Listing 11-5\n\n# An EJB3 Bank EJB\n\npackage com.example.banking.model;\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\n@Entity\n@Table(name = \"BANKS\")\npublic class Bank implements java.io.Serializable {\n@Id @GeneratedValue(strategy=GenerationType.AUTO)\nprivate int id;\n\n@Embeddable // An object \u201cinlined\u201d in Bank\u2019s DB row\npublic class Address {\nprotected String streetAddr1;\nprotected String streetAddr2;\nprotected String city;\nprotected String state;\nprotected String zipCode;\n}\n\n@Embedded\nprivate Address address;\n\n@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy=\"bank\")\nprivate Collection<Account> accounts = new ArrayList<Account>();\n\npublic int getId() {\nreturn id;\n}\n\npublic void setId(int id) {\nthis.id = id;\n}\n\npublic void addAccount(Account account) {\naccount.setBank(this);\naccounts.add(account);\n}\n\npublic Collection<Account> getAccounts() {\nreturn accounts;\n}\n}\n\n16. Adapted from http://www.onjava.com/pub/a/onjava/2006/05/17/standardizing-with-ejb3-java-persistence-api.html", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1218, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dfe3733b-1ade-4bdf-a7d9-0bb1d873d789": {"__data__": {"id_": "dfe3733b-1ade-4bdf-a7d9-0bb1d873d789", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b85b2c9f-f6f8-4d09-96ad-693e08719039", "node_type": "4", "metadata": {}, "hash": "ce7704813a2e4e19e34a4788233e3b30019e1bbaabbd100a9ec8e15c24ca93ae", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 11: Systems\n\n# Listing 11-5 (continued)\n\nAn EBJ3 Bank EJB\npublic void setAccounts(Collection<Account> accounts) {this.accounts = accounts;\n}\n\nThis code is much cleaner than the original EJB2 code. Some of the entity details are\nstill here, contained in the annotations. However, because none of that information is out-\nside of the annotations, the code is clean, clear, and hence easy to test drive, maintain, and\nso on.\n\nSome or all of the persistence information in the annotations can be moved to XML\ndeployment descriptors, if desired, leaving a truly pure POJO. If the persistence mapping\ndetails won\u2019t change frequently, many teams may choose to keep the annotations, but with\nfar fewer harmful drawbacks compared to the EJB2 invasiveness.\n\n# AspectJ Aspects\n\nFinally, the most full-featured tool for separating concerns through aspects is the AspectJ\nlanguage, an extension of Java that provides \u201cfirst-class\u201d support for aspects as modular-\nity constructs. The pure Java approaches provided by Spring AOP and JBoss AOP are suf-\nficient for 80\u201390 percent of the cases where aspects are most useful. However, AspectJ\nprovides a very rich and powerful tool set for separating concerns. The drawback of\nAspectJ is the need to adopt several new tools and to learn new language constructs and\nusage idioms.\n\nThe adoption issues have been partially mitigated by a recently introduced \u201cannotation form\u201d\nof AspectJ, where Java 5 annotations are used to define aspects using pure Java\ncode. Also, the Spring Framework has a number of features that make incorporation of\nannotation-based aspects much easier for a team with limited AspectJ experience.\n\nA full discussion of AspectJ is beyond the scope of this book. See [AspectJ], [Colyer],\nand [Spring] for more information.\n\n# Test Drive the System Architecture\n\nThe power of separating concerns through aspect-like approaches can\u2019t be overstated. If\nyou can write your application\u2019s domain logic using POJOs, decoupled from any architec-\nture concerns at the code level, then it is possible to truly test drive your architecture. You\ncan evolve it from simple to sophisticated, as needed, by adopting new technologies on\n\n17. See [AspectJ] and [Colyer].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2214, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6200bb52-bd00-4b64-b893-2799b2e59e6e": {"__data__": {"id_": "6200bb52-bd00-4b64-b893-2799b2e59e6e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d2c1cf8b-e9bf-40ac-b7f5-a3d89e91edb6", "node_type": "4", "metadata": {}, "hash": "c4698a1d45d403c2c6ba8d32700367ee9420cd57f4f50034eb6b124fa0d9a4b1", "class_name": "RelatedNodeInfo"}}, "text": "# Optimize Decision Making\n\ndemand. It is not necessary to do a Big Design Up Front18 (BDUF). In fact, BDUF is even harmful because it inhibits adapting to change, due to the psychological resistance to discarding prior effort and because of the way architecture choices influence subsequent thinking about the design.\n\nBuilding architects have to do BDUF because it is not feasible to make radical architectural changes to a large physical structure once construction is well underway.19 Although software has its own physics20, it is economically feasible to make radical change, if the structure of the software separates its concerns effectively.\n\nThis means we can start a software project with a \u201cnaively simple\u201d but nicely decoupled architecture, delivering working user stories quickly, then adding more infrastructure as we scale up. Some of the world\u2019s largest Web sites have achieved very high availability and performance, using sophisticated data caching, security, virtualization, and so forth, all done efficiently and flexibly because the minimally coupled designs are appropriately simple at each level of abstraction and scope.\n\nOf course, this does not mean that we go into a project \u201crudderless.\u201d We have some expectations of the general scope, goals, and schedule for the project, as well as the general structure of the resulting system. However, we must maintain the ability to change course in response to evolving circumstances.\n\nThe early EJB architecture is but one of many well-known APIs that are over-engineered and that compromise separation of concerns. Even well-designed APIs can be overkill when they aren\u2019t really needed. A good API should largely disappear from view most of the time, so the team expends the majority of its creative efforts focused on the user stories being implemented. If not, then the architectural constraints will inhibit the efficient delivery of optimal value to the customer.\n\nTo recap this long discussion, an optimal system architecture consists of modularized domains of concern, each of which is implemented with Plain Old Java (or other) Objects. The different domains are integrated together with minimally invasive Aspects or Aspect-like tools. This architecture can be test-driven, just like the code.\n\n# Optimize Decision Making\n\nModularity and separation of concerns make decentralized management and decision making possible. In a sufficiently large system, whether it is a city or a software project, no one person can make all the decisions.\n\n18. Not to be confused with the good practice of up-front design, BDUF is the practice of designing everything up front before implementing anything at all.\n\n19. There is still a significant amount of iterative exploration and discussion of details, even after construction starts.\n\n20. The term software physics was first used by [Kolence].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2860, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2994bbd5-0ab5-4deb-9229-1ac886a45ce0": {"__data__": {"id_": "2994bbd5-0ab5-4deb-9229-1ac886a45ce0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e710e637-2fb8-48dd-8071-d072f748b64b", "node_type": "4", "metadata": {}, "hash": "98fadc4ce2c85d6d33bf14295cb72302375b4bf2a994c35012b697a01bfa985f", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 11: Systems\n\nWe all know it is best to give responsibilities to the most qualified persons. We often forget that it is also best to postpone decisions until the last possible moment. This isn\u2019t lazy or irresponsible; it lets us make informed choices with the best possible information. A premature decision is a decision made with suboptimal knowledge. We will have that much less customer feedback, mental reflection on the project, and experience with our implementation choices if we decide too soon.\n\nThe agility provided by a POJO system with modularized concerns allows us to make optimal, just-in-time decisions, based on the most recent knowledge. The complexity of these decisions is also reduced.\n\n# Use Standards Wisely, When They Add Demonstrable Value\n\nBuilding construction is a marvel to watch because of the pace at which new buildings are built (even in the dead of winter) and because of the extraordinary designs that are possible with today\u2019s technology. Construction is a mature industry with highly optimized parts, methods, and standards that have evolved under pressure for centuries.\n\nMany teams used the EJB2 architecture because it was a standard, even when lighter-weight and more straightforward designs would have been sufficient. I have seen teams become obsessed with various strongly hyped standards and lose focus on implementing value for their customers.\n\nStandards make it easier to reuse ideas and components, recruit people with relevant experience, encapsulate good ideas, and wire components together. However, the process of creating standards can sometimes take too long for industry to wait, and some standards lose touch with the real needs of the adopters they are intended to serve.\n\n# Systems Need Domain-Specific Languages\n\nBuilding construction, like most domains, has developed a rich language with a vocabulary, idioms, and patterns21 that convey essential information clearly and concisely. In software, there has been renewed interest recently in creating Domain-Specific Languages (DSLs)22, which are separate, small scripting languages or APIs in standard languages that permit code to be written so that it reads like a structured form of prose that a domain expert might write.\n\nA good DSL minimizes the \u201ccommunication gap\u201d between a domain concept and the code that implements it, just as agile practices optimize the communications within a team and with the project\u2019s stakeholders. If you are implementing domain logic in the\n\n21. The work of [Alexander] has been particularly influential on the software community.\n\n22. See, for example, [DSL]. [JMock] is a good example of a Java API that creates a DSL.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2676, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f779ad36-6b5d-492e-98df-d24eb9809fcf": {"__data__": {"id_": "f779ad36-6b5d-492e-98df-d24eb9809fcf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "715dcca5-1b64-4245-ba57-715fe3fac989", "node_type": "4", "metadata": {}, "hash": "3477aeed448bdce411bce0f646ac06aaf4f4e7a3a192b821e485eaf4b9b7ec3b", "class_name": "RelatedNodeInfo"}}, "text": "# Bibliography\n\n169\n\nsame language that a domain expert uses, there is less risk that you will incorrectly trans-\n\nlate the domain into the implementation.\n\nDSLs, when used effectively, raise the abstraction level above code idioms and design\n\npatterns. They allow the developer to reveal the intent of the code at the appropriate level\n\nof abstraction.\n\nDomain-Specific Languages allow all levels of abstraction and all domains in the applica-\n\ntion to be expressed as POJOs, from high-level policy to low-level details.\n\n# Conclusion\n\nSystems must be clean too. An invasive architecture overwhelms the domain logic and\n\nimpacts agility. When the domain logic is obscured, quality suffers because bugs find it\n\neasier to hide and stories become harder to implement. If agility is compromised, produc-\n\ntivity suffers and the benefits of TDD are lost.\n\nAt all levels of abstraction, the intent should be clear. This will only happen if you\n\nwrite POJOs and you use aspect-like mechanisms to incorporate other implementation\n\nconcerns noninvasively.\n\nWhether you are designing systems or individual modules, never forget to use the\n\nsimplest thing that can possibly work.\n\n# Bibliography\n\n- [Alexander]: Christopher Alexander, A Timeless Way of Building, Oxford University Press, New York, 1979.\n- [AOSD]: Aspect-Oriented Software Development port, http://aosd.net\n- [ASM]: ASM Home Page, http://asm.objectweb.org/\n- [AspectJ]: http://eclipse.org/aspectj\n- [CGLIB]: Code Generation Library, http://cglib.sourceforge.net/\n- [Colyer]: Adrian Colyer, Andy Clement, George Hurley, Mathew Webster, Eclipse AspectJ, Person Education, Inc., Upper Saddle River, NJ, 2005.\n- [DSL]: Domain-specific programming language, http://en.wikipedia.org/wiki/Domain-specific_programming_language\n- [Fowler]: Inversion of Control Containers and the Dependency Injection pattern, http://martinfowler.com/articles/injection.html", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1905, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "064873f0-01ce-484d-8774-fa7afc371950": {"__data__": {"id_": "064873f0-01ce-484d-8774-fa7afc371950", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3e12033-fd83-44a1-902e-c35207db8512", "node_type": "4", "metadata": {}, "hash": "0c188e84c341042992dc2416751cd979f09ca25aa91dd77a1c8d39a411d612d3", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 11: Systems\n\n[Goetz]: Brian Goetz, Java Theory and Practice: Decorating with Dynamic Proxies, http://www.ibm.com/developerworks/java/library/j-jtp08305.html\n\n[Javassist]: Javassist Home Page, http://www.csg.is.titech.ac.jp/~chiba/javassist/\n\n[JBoss]: JBoss Home Page, http://jboss.org\n\n[JMock]: JMock\u2014A Lightweight Mock Object Library for Java, http://jmock.org\n\n[Kolence]: Kenneth W. Kolence, Software physics and computer performance measurements, Proceedings of the ACM annual conference\u2014Volume 2, Boston, Massachusetts, pp. 1024\u20131040, 1972.\n\n[Spring]: The Spring Framework, http://www.springframework.org\n\n[Mezzaros07]: XUnit Patterns, Gerard Mezzaros, Addison-Wesley, 2007.\n\n[GOF]: Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al., Addison-Wesley, 1996.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aaa30792-d935-4209-a77f-c2b4174ecd35": {"__data__": {"id_": "aaa30792-d935-4209-a77f-c2b4174ecd35", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b098aa41-27eb-4a6b-b52b-c79410d38383", "node_type": "4", "metadata": {}, "hash": "5cf638ad2eff63a4f11b2df4804ceb562871ff83df285101163413ecc9ea60d3", "class_name": "RelatedNodeInfo"}}, "text": "# Emergence by Jeff Langr\n\n# Getting Clean via Emergent Design\n\nWhat if there were four simple rules that you could follow that would help you create good designs as you worked? What if by following these rules you gained insights into the structure and design of your code, making it easier to apply principles such as SRP and DIP? What if these four rules facilitated the emergence of good designs?\n\nMany of us feel that Kent Beck\u2019s four rules of Simple Design1 are of significant help in creating well-designed software.\n\n1. [XPE].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 534, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2ee11ba-af15-4210-98c8-d6c79d68ce14": {"__data__": {"id_": "b2ee11ba-af15-4210-98c8-d6c79d68ce14", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a6f2e44c-e202-4563-a035-78e4dcd2b825", "node_type": "4", "metadata": {}, "hash": "819304c4d1636667c2342127ce0508cd343c11729c27ee2bddd214cbd1c00dfb", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 12: Emergence\n\nAccording to Kent, a design is \u201csimple\u201d if it follows these rules:\n\n- Runs all the tests\n- Contains no duplication\n- Expresses the intent of the programmer\n- Minimizes the number of classes and methods\n\nThe rules are given in order of importance.\n\n# Simple Design Rule 1: Runs All the Tests\n\nFirst and foremost, a design must produce a system that acts as intended. A system might have a perfect design on paper, but if there is no simple way to verify that the system actually works as intended, then all the paper effort is questionable.\n\nA system that is comprehensively tested and passes all of its tests all of the time is a testable system. That\u2019s an obvious statement, but an important one. Systems that aren\u2019t testable aren\u2019t verifiable. Arguably, a system that cannot be verified should never be deployed.\n\nFortunately, making our systems testable pushes us toward a design where our classes are small and single purpose. It\u2019s just easier to test classes that conform to the SRP. The more tests we write, the more we\u2019ll continue to push toward things that are simpler to test. So making sure our system is fully testable helps us create better designs.\n\nTight coupling makes it difficult to write tests. So, similarly, the more tests we write, the more we use principles like DIP and tools like dependency injection, interfaces, and abstraction to minimize coupling. Our designs improve even more.\n\nRemarkably, following a simple and obvious rule that says we need to have tests and run them continuously impacts our system\u2019s adherence to the primary OO goals of low coupling and high cohesion. Writing tests leads to better designs.\n\n# Simple Design Rules 2\u20134: Refactoring\n\nOnce we have tests, we are empowered to keep our code and classes clean. We do this by incrementally refactoring the code. For each few lines of code we add, we pause and reflect on the new design. Did we just degrade it? If so, we clean it up and run our tests to demonstrate that we haven\u2019t broken anything. The fact that we have these tests eliminates the fear that cleaning up the code will break it!\n\nDuring this refactoring step, we can apply anything from the entire body of knowledge about good software design. We can increase cohesion, decrease coupling, separate concerns, modularize system concerns, shrink our functions and classes, choose better names, and so on. This is also where we apply the final three rules of simple design: Eliminate duplication, ensure expressiveness, and minimize the number of classes and methods.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2548, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0be3316-1000-443f-bea9-8645961ab40d": {"__data__": {"id_": "f0be3316-1000-443f-bea9-8645961ab40d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "eefc890c-bb1d-404f-aa4e-d55ec467ead1", "node_type": "4", "metadata": {}, "hash": "317b5082cac59381af479de3baff5fe2d6700de4d347438ec3bc68e95ccca519", "class_name": "RelatedNodeInfo"}}, "text": "# No Duplication\n\nDuplication is the primary enemy of a well-designed system. It represents additional work, additional risk, and additional unnecessary complexity. Duplication manifests itself in many forms. Lines of code that look exactly alike are, of course, duplication. Lines of code that are similar can often be massaged to look even more alike so that they can be more easily refactored. And duplication can exist in other forms such as duplication of implementation. For example, we might have two methods in a collection class:\n\nint size() {}\nboolean isEmpty() {}\n\nWe could have separate implementations for each method. The isEmpty method could track a boolean, while size could track a counter. Or, we can eliminate this duplication by tying isEmpty to the definition of size:\n\nboolean isEmpty() {return 0 == size();}\n\nCreating a clean system requires the will to eliminate duplication, even in just a few lines of code. For example, consider the following code:\n\npublic void scaleToOneDimension(float desiredDimension, float imageDimension) {\nif (Math.abs(desiredDimension - imageDimension) < errorThreshold)\nreturn;\nfloat scalingFactor = desiredDimension / imageDimension;\nscalingFactor = (float)(Math.floor(scalingFactor * 100) * 0.01f);\nRenderedOp newImage = ImageUtilities.getScaledImage(image, scalingFactor, scalingFactor);\nimage.dispose();\nSystem.gc();\nimage = newImage;\n}\npublic synchronized void rotate(int degrees) {\nRenderedOp newImage = ImageUtilities.getRotatedImage(image, degrees);\nimage.dispose();\nSystem.gc();\nimage = newImage;\n}\n\nTo keep this system clean, we should eliminate the small amount of duplication between the scaleToOneDimension and rotate methods:\n\npublic void scaleToOneDimension(float desiredDimension, float imageDimension) {\nif (Math.abs(desiredDimension - imageDimension) < errorThreshold)\nreturn;\nfloat scalingFactor = desiredDimension / imageDimension;\nscalingFactor = (float)(Math.floor(scalingFactor * 100) * 0.01f);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1970, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "079dfe27-0605-4033-a27c-c71d19fa0d34": {"__data__": {"id_": "079dfe27-0605-4033-a27c-c71d19fa0d34", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8dabf594-fa7e-4c08-a47e-b45bd960c2ab", "node_type": "4", "metadata": {}, "hash": "709ad4334e7d1c798cc7cfb3b676eb491239fb44f94cbe5929aca45e75d39525", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 12: Emergence\n\nreplaceImage(ImageUtilities.getScaledImage(image, scalingFactor, scalingFactor));\n\npublic synchronized void rotate(int degrees) {replaceImage(ImageUtilities.getRotatedImage(image, degrees));}\n\nprivate void replaceImage(RenderedOp newImage) {image.dispose(); System.gc(); image = newImage;}\n\nAs we extract commonality at this very tiny level, we start to recognize violations of SRP. So we might move a newly extracted method to another class. That elevates its visibility. Someone else on the team may recognize the opportunity to further abstract the new method and reuse it in a different context. This \u201creuse in the small\u201d can cause system complexity to shrink dramatically. Understanding how to achieve reuse in the small is essential to achieving reuse in the large.\n\nThe TEMPLATE METHOD 2 pattern is a common technique for removing higher-level duplication. For example:\n\npublic class VacationPolicy {\npublic void accrueUSDivisionVacation() {// code to calculate vacation based on hours worked to date\n// ...\n// code to ensure vacation meets US minimums\n// ...\n// code to apply vacation to payroll record\n// ...\n}\npublic void accrueEUDivisionVacation() {// code to calculate vacation based on hours worked to date\n// ...\n// code to ensure vacation meets EU minimums\n// ...\n// code to apply vacation to payroll record\n// ...\n}\n}\nThe code across accrueUSDivisionVacation and accrueEuropeanDivisionVacation is largely the same, with the exception of calculating legal minimums. That bit of the algorithm changes based on the employee type.\n\nWe can eliminate the obvious duplication by applying the TEMPLATE METHOD pattern.\n\nabstract public class VacationPolicy {\npublic void accrueVacation() {\ncalculateBaseVacationHours();\n2.  [GOF].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1762, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88245585-e5cf-4bff-bd34-1e5240fea79b": {"__data__": {"id_": "88245585-e5cf-4bff-bd34-1e5240fea79b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6f591dd7-1ddf-4848-a123-0a7855b9e1c0", "node_type": "4", "metadata": {}, "hash": "720e9237968ebd001553bd2e6954d3a694db8c1985b13bc8eae8de02d1647690", "class_name": "RelatedNodeInfo"}}, "text": "# Expressive\n\nMost of us have had the experience of working on convoluted code. Many of us have produced some convoluted code ourselves. It\u2019s easy to write code that we understand, because at the time we write it we\u2019re deep in an understanding of the problem we\u2019re trying to solve. Other maintainers of the code aren\u2019t going to have so deep an understanding.\n\nThe majority of the cost of a software project is in long-term maintenance. In order to minimize the potential for defects as we introduce change, it\u2019s critical for us to be able to understand what a system does. As systems become more complex, they take more and more time for a developer to understand, and there is an ever greater opportunity for a misunderstanding. Therefore, code should clearly express the intent of its author. The clearer the author can make the code, the less time others will have to spend understanding it. This will reduce defects and shrink the cost of maintenance.\n\nYou can express yourself by choosing good names. We want to be able to hear a class or function name and not be surprised when we discover its responsibilities.\n\nYou can also express yourself by keeping your functions and classes small. Small classes and functions are usually easy to name, easy to write, and easy to understand.\n\nYou can also express yourself by using standard nomenclature. Design patterns, for example, are largely about communication and expressiveness. By using the standard pattern names, such as COMMAND or VISITOR, in the names of the classes that implement those patterns, you can succinctly describe your design to other developers.\n\nWell-written unit tests are also expressive. A primary goal of tests is to act as documentation by example. Someone reading our tests should be able to get a quick understanding of what a class is all about.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1825, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b18ce63-074f-415c-8b60-8370cc0f1e65": {"__data__": {"id_": "5b18ce63-074f-415c-8b60-8370cc0f1e65", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a60e5cea-ab36-4494-8666-b971ed5646e6", "node_type": "4", "metadata": {}, "hash": "1cfe86a4891a467a4d95447a3a21cd8166f87075996069c5c36c77dfcdfbff41", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 12: Emergence\n\nBut the most important way to be expressive is to try. All too often we get our code working and then move on to the next problem without giving sufficient thought to making that code easy for the next person to read. Remember, the most likely next person to read the code will be you.\n\nSo take a little pride in your workmanship. Spend a little time with each of your functions and classes. Choose better names, split large functions into smaller functions, and generally just take care of what you\u2019ve created. Care is a precious resource.\n\n# Minimal Classes and Methods\n\nEven concepts as fundamental as elimination of duplication, code expressiveness, and the SRP can be taken too far. In an effort to make our classes and methods small, we might create too many tiny classes and methods. So this rule suggests that we also keep our function and class counts low.\n\nHigh class and method counts are sometimes the result of pointless dogmatism. Consider, for example, a coding standard that insists on creating an interface for each and every class. Or consider developers who insist that fields and behavior must always be separated into data classes and behavior classes. Such dogma should be resisted and a more pragmatic approach adopted.\n\nOur goal is to keep our overall system small while we are also keeping our functions and classes small. Remember, however, that this rule is the lowest priority of the four rules of Simple Design. So, although it\u2019s important to keep class and function count low, it\u2019s more important to have tests, eliminate duplication, and express yourself.\n\n# Conclusion\n\nIs there a set of simple practices that can replace experience? Clearly not. On the other hand, the practices described in this chapter and in this book are a crystallized form of the many decades of experience enjoyed by the authors. Following the practice of simple design can and does encourage and enable developers to adhere to good principles and patterns that otherwise take years to learn.\n\n# Bibliography\n\n[XPE]: Extreme Programming Explained: Embrace Change, Kent Beck, Addison-Wesley, 1999.\n\n[GOF]: Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al., Addison-Wesley, 1996.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2236, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a93a9ea4-e5a7-4108-b68c-64eeff75b1e2": {"__data__": {"id_": "a93a9ea4-e5a7-4108-b68c-64eeff75b1e2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "eb18a2be-1afa-4d23-a812-e70c516e5053", "node_type": "4", "metadata": {}, "hash": "e42e725b3a7ce202dd22f2251ca2fbdf2492d12a8eb272a6b4ca0100136c041a", "class_name": "RelatedNodeInfo"}}, "text": "# Concurrency\n\n# by Brett L. Schuchert\n\n\u201cObjects are abstractions of processing. Threads are abstractions of schedule.\u201d\n\n\u2014James O. Coplien1\n\n1. Private correspondence.\n\n177", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e9c3584-15f2-4ebd-a8f8-34bef9b8d596": {"__data__": {"id_": "3e9c3584-15f2-4ebd-a8f8-34bef9b8d596", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fb398e8b-369b-4c4f-aa02-fb0e2bc98ccf", "node_type": "4", "metadata": {}, "hash": "c5409acda627731d5f48db035747092334ecfd3f9d7644395dcb4a62541396ea", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 13: Concurrency\n\nWriting clean concurrent programs is hard\u2014very hard. It is much easier to write code that executes in a single thread. It is also easy to write multithreaded code that looks fine on the surface but is broken at a deeper level. Such code works fine until the system is placed under stress.\n\nIn this chapter we discuss the need for concurrent programming, and the difficulties it presents. We then present several recommendations for dealing with those difficulties, and writing clean concurrent code. Finally, we conclude with issues related to testing concurrent code.\n\nClean Concurrency is a complex topic, worthy of a book by itself. Our strategy in this book is to present an overview here and provide a more detailed tutorial in \u201cConcurrency II\u201d on page 317. If you are just curious about concurrency, then this chapter will suffice for you now. If you have a need to understand concurrency at a deeper level, then you should read through the tutorial as well.\n\n# Why Concurrency?\n\nConcurrency is a decoupling strategy. It helps us decouple what gets done from when it gets done. In single-threaded applications what and when are so strongly coupled that the state of the entire application can often be determined by looking at the stack backtrace. A programmer who debugs such a system can set a breakpoint, or a sequence of breakpoints, and know the state of the system by which breakpoints are hit.\n\nDecoupling what from when can dramatically improve both the throughput and structures of an application. From a structural point of view the application looks like many little collaborating computers rather than one big main loop. This can make the system easier to understand and offers some powerful ways to separate concerns.\n\nConsider, for example, the standard \u201cServlet\u201d model of Web applications. These systems run under the umbrella of a Web or EJB container that partially manages concurrency for you. The servlets are executed asynchronously whenever Web requests come in. The servlet programmer does not have to manage all the incoming requests. In principle, each servlet execution lives in its own little world and is decoupled from all the other servlet executions.\n\nOf course if it were that easy, this chapter wouldn\u2019t be necessary. In fact, the decoupling provided by Web containers is far less than perfect. Servlet programmers have to be very aware, and very careful, to make sure their concurrent programs are correct. Still, the structural benefits of the servlet model are significant.\n\nBut structure is not the only motive for adopting concurrency. Some systems have response time and throughput constraints that require hand-coded concurrent solutions. For example, consider a single-threaded information aggregator that acquires information from many different Web sites and merges that information into a daily summary. Because", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2887, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a2b1b829-0120-44c9-a283-8c6afd214ce5": {"__data__": {"id_": "a2b1b829-0120-44c9-a283-8c6afd214ce5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f57d40f9-ca5f-47e1-82a9-6ab56f496a36", "node_type": "4", "metadata": {}, "hash": "252a804f3012f561a7bc3592bff76681077f8f355ec7f62b7b7e9f1243c5dff8", "class_name": "RelatedNodeInfo"}}, "text": "# Why Concurrency?\n\nthis system is single threaded, it hits each Web site in turn, always finishing one before\nstarting the next. The daily run needs to execute in less than 24 hours. However, as more\nand more Web sites are added, the time grows until it takes more than 24 hours to gather\nall the data. The single-thread involves a lot of waiting at Web sockets for I/O to complete.\nWe could improve the performance by using a multithreaded algorithm that hits more than\none Web site at a time.\n\nOr consider a system that handles one user at a time and requires only one second\nof time per user. This system is fairly responsive for a few users, but as the number of\nusers increases, the system\u2019s response time increases. No user wants to get in line\nbehind 150 others! We could improve the response time of this system by handling\nmany users concurrently.\n\nOr consider a system that interprets large data sets but can only give a complete solu-\ntion after processing all of them. Perhaps each data set could be processed on a different\ncomputer, so that many data sets are being processed in parallel.\n\n# Myths and Misconceptions\n\nAnd so there are compelling reasons to adopt concurrency. However, as we said before,\nconcurrency is hard. If you aren\u2019t very careful, you can create some very nasty situations.\nConsider these common myths and misconceptions:\n\n- Concurrency always improves performance.\nConcurrency can sometimes improve performance, but only when there is a lot of wait\ntime that can be shared between multiple threads or multiple processors. Neither situ-\nation is trivial.\n- Design does not change when writing concurrent programs.\nIn fact, the design of a concurrent algorithm can be remarkably different from the\ndesign of a single-threaded system. The decoupling of what from when usually has a\nhuge effect on the structure of the system.\n- Understanding concurrency issues is not important when working with a container\nsuch as a Web or EJB container.\nIn fact, you\u2019d better know just what your container is doing and how to guard against\nthe issues of concurrent update and deadlock described later in this chapter.\n\nHere are a few more balanced sound bites regarding writing concurrent software:\n\n- Concurrency incurs some overhead, both in performance as well as writing additional\ncode.\n- Correct concurrency is complex, even for simple problems.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9338af10-315d-4d73-96ae-c181ac8e2070": {"__data__": {"id_": "9338af10-315d-4d73-96ae-c181ac8e2070", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7762a72e-0f61-4d34-8270-53bd9be0b690", "node_type": "4", "metadata": {}, "hash": "a56b5eea8048345c99c8cb76f5769606a4314332593489aca5d2c00a57f9cfec", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 13: Concurrency\n\n\u2022 Concurrency bugs aren\u2019t usually repeatable, so they are often ignored as one-offs2 instead of the true defects they are.\n\n\u2022 Concurrency often requires a fundamental change in design strategy.\n\n# Challenges\n\nWhat makes concurrent programming so difficult? Consider the following trivial class:\n\npublic class X {\nprivate int lastIdUsed;\npublic int getNextId() {return ++lastIdUsed;}\n}\n\nLet\u2019s say we create an instance of X, set the lastIdUsed field to 42, and then share the instance between two threads. Now suppose that both of those threads call the method getNextId(); there are three possible outcomes:\n\n\u2022 Thread one gets the value 43, thread two gets the value 44, lastIdUsed is 44.\n\n\u2022 Thread one gets the value 44, thread two gets the value 43, lastIdUsed is 44.\n\n\u2022 Thread one gets the value 43, thread two gets the value 43, lastIdUsed is 43.\n\nThe surprising third result3 occurs when the two threads step on each other. This happens because there are many possible paths that the two threads can take through that one line of Java code, and some of those paths generate incorrect results. How many different paths are there? To really answer that question, we need to understand what the Just-In-Time Compiler does with the generated byte-code, and understand what the Java memory model considers to be atomic.\n\nA quick answer, working with just the generated byte-code, is that there are 12,870 different possible execution paths4 for those two threads executing within the getNextId method. If the type of lastIdUsed is changed from int to long, the number of possible paths increases to 2,704,156. Of course most of those paths generate valid results. The problem is that some of them don\u2019t.\n\n# Concurrency Defense Principles\n\nWhat follows is a series of principles and techniques for defending your systems from the problems of concurrent code.\n\n2. Cosmic-rays, glitches, and so on.\n\n3. See \u201cDigging Deeper\u201d on page 323.\n\n4. See \u201cPossible Paths of Execution\u201d on page 321.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a8a7248-2e8a-4ecc-976f-90e750de043a": {"__data__": {"id_": "7a8a7248-2e8a-4ecc-976f-90e750de043a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "32feb1bf-0377-40bc-9e6d-1f57849b83c7", "node_type": "4", "metadata": {}, "hash": "8a45cd48f3e56454916790b5db8df267e845ec69d8e2e7f34d1713bdffdee815", "class_name": "RelatedNodeInfo"}}, "text": "# Concurrency Defense Principles\n\n# Single Responsibility Principle\n\nThe SRP states that a given method/class/component should have a single reason to change. Concurrency design is complex enough to be a reason to change in its own right and therefore deserves to be separated from the rest of the code. Unfortunately, it is all too common for concurrency implementation details to be embedded directly into other production code. Here are a few things to consider:\n\n- Concurrency-related code has its own life cycle of development, change, and tuning.\n- Concurrency-related code has its own challenges, which are different from and often more difficult than nonconcurrency-related code.\n- The number of ways in which miswritten concurrency-based code can fail makes it challenging enough without the added burden of surrounding application code.\n\nRecommendation: Keep your concurrency-related code separate from other code.\n\n# Corollary: Limit the Scope of Data\n\nAs we saw, two threads modifying the same field of a shared object can interfere with each other, causing unexpected behavior. One solution is to use the synchronized keyword to protect a critical section in the code that uses the shared object. It is important to restrict the number of such critical sections. The more places shared data can get updated, the more likely:\n\n- You will forget to protect one or more of those places\u2014effectively breaking all code that modifies that shared data.\n- There will be duplication of effort required to make sure everything is effectively guarded (violation of DRY).\n- It will be difficult to determine the source of failures, which are already hard enough to find.\n\nRecommendation: Take data encapsulation to heart; severely limit the access of any data that may be shared.\n\n# Corollary: Use Copies of Data\n\nA good way to avoid shared data is to avoid sharing the data in the first place. In some situations it is possible to copy objects and treat them as read-only. In other cases it might be possible to copy objects, collect results from multiple threads in these copies and then merge the results in a single thread.\n\n5. [PPP]\n\n6. See \u201cClient/Server Example\u201d on page 317.\n\n7. [PRAG].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2194, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db4af358-a91b-4377-b371-09c130da01f3": {"__data__": {"id_": "db4af358-a91b-4377-b371-09c130da01f3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2a3011a6-50a7-4470-8571-bd6685d3c442", "node_type": "4", "metadata": {}, "hash": "fc119e25d8decb2a7b795997e359f45f5519bb5376d2c1ff9d4b9b71fde26b7b", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 13: Concurrency\n\nIf there is an easy way to avoid sharing objects, the resulting code will be far less likely to cause problems. You might be concerned about the cost of all the extra object creation. It is worth experimenting to find out if this is in fact a problem. However, if using copies of objects allows the code to avoid synchronizing, the savings in avoiding the intrinsic lock will likely make up for the additional creation and garbage collection overhead.\n\n# Corollary: Threads Should Be as Independent as Possible\n\nConsider writing your threaded code such that each thread exists in its own world, sharing no data with any other thread. Each thread processes one client request, with all of its required data coming from an unshared source and stored as local variables. This makes each of those threads behave as if it were the only thread in the world and there were no synchronization requirements.\n\nFor example, classes that subclass from HttpServlet receive all of their information as parameters passed in to the doGet and doPost methods. This makes each Servlet act as if it has its own machine. So long as the code in the Servlet uses only local variables, there is no chance that the Servlet will cause synchronization problems. Of course, most applications using Servlets eventually run into shared resources such as database connections.\n\nRecommendation: Attempt to partition data into independent subsets than can be operated on by independent threads, possibly in different processors.\n\n# Know Your Library\n\nJava 5 offers many improvements for concurrent development over previous versions. There are several things to consider when writing threaded code in Java 5:\n\n- Use the provided thread-safe collections.\n- Use the executor framework for executing unrelated tasks.\n- Use nonblocking solutions when possible.\n- Several library classes are not thread safe.\n\n# Thread-Safe Collections\n\nWhen Java was young, Doug Lea wrote the seminal book 8Concurrent Programming in Java. Along with the book he developed several thread-safe collections, which later became part of the JDK in the java.util.concurrent package. The collections in that package are safe for multithreaded situations and they perform well. In fact, the\n\n8. [Lea99].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66739602-ecf3-42a1-ac70-1039497d2dca": {"__data__": {"id_": "66739602-ecf3-42a1-ac70-1039497d2dca", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3116ac29-5983-4d5e-aa9e-89b57960b943", "node_type": "4", "metadata": {}, "hash": "8f3f99867a89ae9daf76c7db5b1620557ff363b1dafa9dcf251c8d0512aa56b5", "class_name": "RelatedNodeInfo"}}, "text": "# Know Your Execution Models\n\nConcurrentHashMap implementation performs better than HashMap in nearly all situations. It also allows for simultaneous concurrent reads and writes, and it has methods supporting common composite operations that are otherwise not thread safe. If Java 5 is the deployment environment, start with ConcurrentHashMap.\n\nThere are several other kinds of classes added to support advanced concurrency design. Here are a few examples:\n\n|ReentrantLock|A lock that can be acquired in one method and released in another.|\n|---|---|\n|Semaphore|An implementation of the classic semaphore, a lock with a count.|\n|CountDownLatch|A lock that waits for a number of events before releasing all threads waiting on it. This allows all threads to have a fair chance of starting at about the same time.|\n\nRecommendation: Review the classes available to you. In the case of Java, become familiar with java.util.concurrent, java.util.concurrent.atomic, java.util.concurrent.locks.\n\n# Know Your Execution Models\n\nThere are several different ways to partition behavior in a concurrent application. To discuss them we need to understand some basic definitions.\n\n|Bound Resources|Resources of a fixed size or number used in a concurrent environment. Examples include database connections and fixed-size read/write buffers.|\n|---|---|\n|Mutual Exclusion|Only one thread can access shared data or a shared resource at a time.|\n|Starvation|One thread or a group of threads is prohibited from proceeding for an excessively long time or forever. For example, always letting fast-running threads through first could starve out longer running threads if there is no end to the fast-running threads.|\n|Deadlock|Two or more threads waiting for each other to finish. Each thread has a resource that the other thread requires and neither can finish until it gets the other resource.|\n|Livelock|Threads in lockstep, each trying to do work but finding another \u201cin the way.\u201d Due to resonance, threads continue trying to make progress but are unable to for an excessively long time\u2014or forever.|\n\nGiven these definitions, we can now discuss the various execution models used in concurrent programming.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2186, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b92ee4e3-4ff9-4e65-a190-88c156c5566d": {"__data__": {"id_": "b92ee4e3-4ff9-4e65-a190-88c156c5566d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a68fc1f4-3d46-455e-983a-d73786304b20", "node_type": "4", "metadata": {}, "hash": "bf8d74684dd40422e7975602fd0608b45c123ef57f8380dadb6d08f92d2d38eb", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 13: Concurrency\n\n# Producer-Consumer\n\nOne or more producer threads create some work and place it in a buffer or queue. One or more consumer threads acquire that work from the queue and complete it. The queue between the producers and consumers is a bound resource. This means producers must wait for free space in the queue before writing and consumers must wait until there is something in the queue to consume. Coordination between the producers and consumers via the queue involves producers and consumers signaling each other. The producers write to the queue and signal that the queue is no longer empty. Consumers read from the queue and signal that the queue is no longer full. Both potentially wait to be notified when they can continue.\n\n# Readers-Writers\n\nWhen you have a shared resource that primarily serves as a source of information for readers, but which is occasionally updated by writers, throughput is an issue. Emphasizing throughput can cause starvation and the accumulation of stale information. Allowing updates can impact throughput. Coordinating readers so they do not read something a writer is updating and vice versa is a tough balancing act. Writers tend to block many readers for a long period of time, thus causing throughput issues.\n\nThe challenge is to balance the needs of both readers and writers to satisfy correct operation, provide reasonable throughput and avoiding starvation. A simple strategy makes writers wait until there are no readers before allowing the writer to perform an update. If there are continuous readers, however, the writers will be starved. On the other hand, if there are frequent writers and they are given priority, throughput will suffer. Finding that balance and avoiding concurrent update issues is what the problem addresses.\n\n# Dining Philosophers\n\nImagine a number of philosophers sitting around a circular table. A fork is placed to the left of each philosopher. There is a big bowl of spaghetti in the center of the table. The philosophers spend their time thinking unless they get hungry. Once hungry, they pick up the forks on either side of them and eat. A philosopher cannot eat unless he is holding two forks. If the philosopher to his right or left is already using one of the forks he needs, he must wait until that philosopher finishes eating and puts the forks back down. Once a philosopher eats, he puts both his forks back down on the table and waits until he is hungry again.\n\nReplace philosophers with threads and forks with resources and this problem is similar to many enterprise applications in which processes compete for resources. Unless carefully designed, systems that compete in this way can experience deadlock, livelock, throughput, and efficiency degradation.\n\n# References\n\n1. http://en.wikipedia.org/wiki/Producer-consumer\n2. http://en.wikipedia.org/wiki/Readers-writers_problem\n3. http://en.wikipedia.org/wiki/Dining_philosophers_problem", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2945, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d84001c-7c97-4911-9956-ad8b5a128fda": {"__data__": {"id_": "4d84001c-7c97-4911-9956-ad8b5a128fda", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "907de937-ba12-4cf3-a7fd-ea8811c91a12", "node_type": "4", "metadata": {}, "hash": "e754ac9bc16c7d4a9343bfc21f90a154ba32986249c9c970609f2f220b825da5", "class_name": "RelatedNodeInfo"}}, "text": "# Keep Synchronized Sections Small\n\nMost concurrent problems you will likely encounter will be some variation of these three problems. Study these algorithms and write solutions using them on your own so that when you come across concurrent problems, you\u2019ll be more prepared to solve the problem.\n\nRecommendation: Learn these basic algorithms and understand their solutions.\n\n# Beware Dependencies Between Synchronized Methods\n\nDependencies between synchronized methods cause subtle bugs in concurrent code. The Java language has the notion of synchronized, which protects an individual method. However, if there is more than one synchronized method on the same shared class, then your system may be written incorrectly.\n\nRecommendation: Avoid using more than one method on a shared object. There will be times when you must use more than one method on a shared object. When this is the case, there are three ways to make the code correct:\n\n- Client-Based Locking\u2014Have the client lock the server before calling the first method and make sure the lock\u2019s extent includes code calling the last method.\n- Server-Based Locking\u2014Within the server create a method that locks the server, calls all the methods, and then unlocks. Have the client call the new method.\n- Adapted Server\u2014create an intermediary that performs the locking. This is an example of server-based locking, where the original server cannot be changed.\n\n# Keep Synchronized Sections Small\n\nThe synchronized keyword introduces a lock. All sections of code guarded by the same lock are guaranteed to have only one thread executing through them at any given time. Locks are expensive because they create delays and add overhead. So we don\u2019t want to litter our code with synchronized statements. On the other hand, critical sections must be guarded. So we want to design our code with as few critical sections as possible.\n\nSome naive programmers try to achieve this by making their critical sections very large. However, extending synchronization beyond the minimal critical section increases contention and degrades performance.\n\nRecommendation: Keep your synchronized sections as small as possible.\n\n# Footnotes\n\n1. See \u201cDependencies Between Methods Can Break Concurrent Code\u201d on page 329.\n2. A critical section is any section of code that must be protected from simultaneous use for the program to be correct.\n3. See \u201cIncreasing Throughput\u201d on page 333.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2413, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91c3fc8d-9e74-45a5-955b-13349db2cfe7": {"__data__": {"id_": "91c3fc8d-9e74-45a5-955b-13349db2cfe7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cdc361c2-ba9a-40a6-b3d1-7d70ce715907", "node_type": "4", "metadata": {}, "hash": "faa10e3e47ce27964c866c232d18be8d14c6fb4ebc8c831c6a3d84cfcc841ed7", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 13: Concurrency\n\n# Writing Correct Shut-Down Code Is Hard\n\nWriting a system that is meant to stay live and run forever is different from writing something that works for awhile and then shuts down gracefully.\n\nGraceful shutdown can be hard to get correct. Common problems involve deadlock,15 with threads waiting for a signal to continue that never comes.\n\nFor example, imagine a system with a parent thread that spawns several child threads and then waits for them all to finish before it releases its resources and shuts down. What if one of the spawned threads is deadlocked? The parent will wait forever, and the system will never shut down.\n\nOr consider a similar system that has been instructed to shut down. The parent tells all the spawned children to abandon their tasks and finish. But what if two of the children were operating as a producer/consumer pair? Suppose the producer receives the signal from the parent and quickly shuts down. The consumer might have been expecting a message from the producer and be blocked in a state where it cannot receive the shutdown signal. It could get stuck waiting for the producer and never finish, preventing the parent from finishing as well.\n\nSituations like this are not at all uncommon. So if you must write concurrent code that involves shutting down gracefully, expect to spend much of your time getting the shutdown to happen correctly.\n\nRecommendation: Think about shut-down early and get it working early. It\u2019s going to take longer than you expect. Review existing algorithms because this is probably harder than you think.\n\n# Testing Threaded Code\n\nProving that code is correct is impractical. Testing does not guarantee correctness. However, good testing can minimize risk. This is all true in a single-threaded solution. As soon as there are two or more threads using the same code and working with shared data, things get substantially more complex.\n\nRecommendation: Write tests that have the potential to expose problems and then run them frequently, with different programmatic configurations and system configurations and load. If tests ever fail, track down the failure. Don\u2019t ignore a failure just because the tests pass on a subsequent run.\n\nThat is a whole lot to take into consideration. Here are a few more fine-grained recommendations:\n\n- Treat spurious failures as candidate threading issues.\n- Get your nonthreaded code working first.\n\n15. See \u201cDeadlock\u201d on page 335.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2453, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5481cb7-36fb-4956-b1c8-0966bf7bdb1f": {"__data__": {"id_": "f5481cb7-36fb-4956-b1c8-0966bf7bdb1f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "47b0867c-314b-45c7-961e-b2ffacbfcbd6", "node_type": "4", "metadata": {}, "hash": "607698cb46df55d417e1d57aeae64fe87ec885ae3d719a878b81c476e34f9b0f", "class_name": "RelatedNodeInfo"}}, "text": "# Testing Threaded Code\n\n1. Make your threaded code pluggable.\n2. Make your threaded code tunable.\n3. Run with more threads than processors.\n4. Run on different platforms.\n5. Instrument your code to try and force failures.\n\n# Treat Spurious Failures as Candidate Threading Issues\n\nThreaded code causes things to fail that \u201csimply cannot fail.\u201d Most developers do not have an intuitive feel for how threading interacts with other code (authors included). Bugs in threaded code might exhibit their symptoms once in a thousand, or a million, executions. Attempts to repeat the systems can be frustratingly. This often leads developers to write off the failure as a cosmic ray, a hardware glitch, or some other kind of \u201cone-off.\u201d It is best to assume that one-offs do not exist. The longer these \u201cone-offs\u201d are ignored, the more code is built on top of a potentially faulty approach.\n\nRecommendation: Do not ignore system failures as one-offs.\n\n# Get Your Nonthreaded Code Working First\n\nThis may seem obvious, but it doesn\u2019t hurt to reinforce it. Make sure code works outside of its use in threads. Generally, this means creating POJOs that are called by your threads. The POJOs are not thread aware, and can therefore be tested outside of the threaded environment. The more of your system you can place in such POJOs, the better.\n\nRecommendation: Do not try to chase down nonthreading bugs and threading bugs at the same time. Make sure your code works outside of threads.\n\n# Make Your Threaded Code Pluggable\n\nWrite the concurrency-supporting code such that it can be run in several configurations:\n\n- One thread, several threads, varied as it executes\n- Threaded code interacts with something that can be both real or a test double.\n- Execute with test doubles that run quickly, slowly, variable.\n- Configure tests so they can run for a number of iterations.\n\nRecommendation: Make your thread-based code especially pluggable so that you can run it in various configurations.\n\n# Make Your Threaded Code Tunable\n\nGetting the right balance of threads typically requires trial and error. Early on, find ways to time the performance of your system under different configurations. Allow the number of", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2194, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3993586e-5769-4d5f-a01d-cd30d988ea1a": {"__data__": {"id_": "3993586e-5769-4d5f-a01d-cd30d988ea1a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "401b851c-4b06-4832-8661-348efbc8a029", "node_type": "4", "metadata": {}, "hash": "ab7a7c15de281f964f1841d39651d54e6fa6a5368161a17381f1733f4868dbeb", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 13: Concurrency\n\nthreads to be easily tuned. Consider allowing it to change while the system is running. Consider allowing self-tuning based on throughput and system utilization.\n\n# Run with More Threads Than Processors\n\nThings happen when the system switches between tasks. To encourage task swapping, run with more threads than processors or cores. The more frequently your tasks swap, the more likely you\u2019ll encounter code that is missing a critical section or causes deadlock.\n\n# Run on Different Platforms\n\nIn the middle of 2007 we developed a course on concurrent programming. The course development ensued primarily under OS X. The class was presented using Windows XP running under a VM. Tests written to demonstrate failure conditions did not fail as frequently in an XP environment as they did running on OS X.\n\nIn all cases the code under test was known to be incorrect. This just reinforced the fact that different operating systems have different threading policies, each of which impacts the code\u2019s execution. Multithreaded code behaves differently in different environments.16 You should run your tests in every potential deployment environment.\n\nRecommendation: Run your threaded code on all target platforms early and often.\n\n# Instrument Your Code to Try and Force Failures\n\nIt is normal for flaws in concurrent code to hide. Simple tests often don\u2019t expose them. Indeed, they often hide during normal processing. They might show up once every few hours, or days, or weeks!\n\nThe reason that threading bugs can be infrequent, sporadic, and hard to repeat, is that only a very few pathways out of the many thousands of possible pathways through a vulnerable section actually fail. So the probability that a failing pathway is taken can be startlingly low. This makes detection and debugging very difficult.\n\nHow might you increase your chances of catching such rare occurrences? You can instrument your code and force it to run in different orderings by adding calls to methods like Object.wait(), Object.sleep(), Object.yield() and Object.priority().\n\nEach of these methods can affect the order of execution, thereby increasing the odds of detecting a flaw. It\u2019s better when broken code fails as early and as often as possible.\n\nThere are two options for code instrumentation:\n\n- Hand-coded\n- Automated\n\nDid you know that the threading model in Java does not guarantee preemptive threading? Modern OS\u2019s support preemptive threading, so you get that \u201cfor free.\u201d Even so, it not guaranteed by the JVM.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2526, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d369ba6-2356-4648-9e03-f437d3426012": {"__data__": {"id_": "6d369ba6-2356-4648-9e03-f437d3426012", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "60c5813b-194f-44dc-aeca-b2e294a053ab", "node_type": "4", "metadata": {}, "hash": "560d04a98c8a2bf66cd08c64ccdd7f954e08ec241adcfe4c1dfc953c61390d8f", "class_name": "RelatedNodeInfo"}}, "text": "# Testing Threaded Code\n\n# Hand-Coded\n\nYou can insert calls to wait(), sleep(), yield(), and priority() in your code by hand. It might be just the thing to do when you\u2019re testing a particularly thorny piece of code.\n\nHere is an example of doing just that:\n\npublic synchronized String nextUrlOrNull() {\nif(hasNext()) {\nString url = urlGenerator.next();\nThread.yield(); // inserted for testing.\nupdateHasNext();\nreturn url;\n}\nreturn null;\n}\nThe inserted call to yield() will change the execution pathways taken by the code and possibly cause the code to fail where it did not fail before. If the code does break, it was not because you added a call to yield.17 Rather, your code was broken and this simply made the failure evident.\n\nThere are many problems with this approach:\n\n- You have to manually find appropriate places to do this.\n- How do you know where to put the call and what kind of call to use?\n- Leaving such code in a production environment unnecessarily slows the code down.\n- It\u2019s a shotgun approach. You may or may not find flaws. Indeed, the odds aren\u2019t with you.\n\nWhat we need is a way to do this during testing but not in production. We also need to easily mix up configurations between different runs, which results in increased chances of finding errors in the aggregate.\n\nClearly, if we divide our system up into POJOs that know nothing of threading and classes that control the threading, it will be easier to find appropriate places to instrument the code. Moreover, we could create many different test jigs that invoke the POJOs under different regimes of calls to sleep, yield, and so on.\n\n# Automated\n\nYou could use tools like an Aspect-Oriented Framework, CGLIB, or ASM to programmatically instrument your code. For example, you could use a class with a single method:\n\npublic class ThreadJigglePoint {\npublic static void jiggle() {\n}\n}\n17 This is not strictly the case. Since the JVM does not guarantee preemptive threading, a particular algorithm might always work on an OS that does not preempt threads. The reverse is also possible but for different reasons.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2089, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1569b7a-24b4-45eb-81dc-6bb799c8abf8": {"__data__": {"id_": "d1569b7a-24b4-45eb-81dc-6bb799c8abf8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0ab75b3-0e32-4fba-aa3d-f6501ff1f6c3", "node_type": "4", "metadata": {}, "hash": "fc131a8854fcda7e11d8a55111a480558ef33374a4d499dcfeda34e4b179e76d", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 13: Concurrency\n\nYou can add calls to this in various places within your code:\n\npublic synchronized String nextUrlOrNull() {\nif(hasNext()) {\nThreadJiglePoint.jiggle();\nString url = urlGenerator.next();\nThreadJiglePoint.jiggle();\nupdateHasNext();\nThreadJiglePoint.jiggle();\nreturn url;\n}\nreturn null;\n}\n\nNow you use a simple aspect that randomly selects among doing nothing, sleeping, or yielding.\n\nOr imagine that the ThreadJigglePoint class has two implementations. The first implements jiggle to do nothing and is used in production. The second generates a random number to choose between sleeping, yielding, or just falling through. If you run your tests a thousand times with random jiggling, you may root out some flaws. If the tests pass, at least you can say you\u2019ve done due diligence. Though a bit simplistic, this could be a reasonable option in lieu of a more sophisticated tool.\n\nThere is a tool called ConTest, 18 developed by IBM that does something similar, but it does so with quite a bit more sophistication.\n\nThe point is to jiggle the code so that threads run in different orderings at different times. The combination of well-written tests and jiggling can dramatically increase the chance of finding errors.\n\nRecommendation: Use jiggling strategies to ferret out errors.\n\n# Conclusion\n\nConcurrent code is difficult to get right. Code that is simple to follow can become nightmarish when multiple threads and shared data get into the mix. If you are faced with writing concurrent code, you need to write clean code with rigor or else face subtle and infrequent failures.\n\nFirst and foremost, follow the Single Responsibility Principle. Break your system into POJOs that separate thread-aware code from thread-ignorant code. Make sure when you are testing your thread-aware code, you are only testing it and nothing else. This suggests that your thread-aware code should be small and focused.\n\nKnow the possible sources of concurrency issues: multiple threads operating on shared data, or using a common resource pool. Boundary cases, such as shutting down cleanly or finishing the iteration of a loop, can be especially thorny.\n\n18. http://www.alphaworks.ibm.com/tech/contest", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "227e5b1a-1e33-483a-ba3f-0c85fd7cfc58": {"__data__": {"id_": "227e5b1a-1e33-483a-ba3f-0c85fd7cfc58", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5497175-ac41-46dd-b542-313101438eb7", "node_type": "4", "metadata": {}, "hash": "b7ee6d786f850192c7ac13f02dc752fd6d99f47d271ebd8f3ce5960a7b73ccca", "class_name": "RelatedNodeInfo"}}, "text": "# Bibliography\n\nLearn your library and know the fundamental algorithms. Understand how some of the features offered by the library support solving problems similar to the fundamental algorithms.\n\nLearn how to find regions of code that must be locked and lock them. Do not lock regions of code that do not need to be locked. Avoid calling one locked section from another. This requires a deep understanding of whether something is or is not shared. Keep the amount of shared objects and the scope of the sharing as narrow as possible. Change designs of the objects with shared data to accommodate clients rather than forcing clients to manage shared state.\n\nIssues will crop up. The ones that do not crop up early are often written off as a one-time occurrence. These so-called one-offs typically only happen under load or at seemingly random times. Therefore, you need to be able to run your thread-related code in many configurations on many platforms repeatedly and continuously. Testability, which comes naturally from following the Three Laws of TDD, implies some level of plug-ability, which offers the support necessary to run code in a wider range of configurations.\n\nYou will greatly improve your chances of finding erroneous code if you take the time to instrument your code. You can either do so by hand or using some kind of automated technology. Invest in this early. You want to be running your thread-based code as long as possible before you put it into production.\n\nIf you take a clean approach, your chances of getting it right increase drastically.\n\n# Bibliography\n\n- [Lea99]: Concurrent Programming in Java: Design Principles and Patterns, 2d. ed., Doug Lea, Prentice Hall, 1999.\n- [PPP]: Agile Software Development: Principles, Patterns, and Practices, Robert C. Martin, Prentice Hall, 2002.\n- [PRAG]: The Pragmatic Programmer, Andrew Hunt, Dave Thomas, Addison-Wesley, 2000.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1895, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01ea07ab-f222-4e60-8fda-ee1dc5b0302c": {"__data__": {"id_": "01ea07ab-f222-4e60-8fda-ee1dc5b0302c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3fd87b6-7c3d-4d16-bc38-7cd0cf2dba33", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ee935ab-fe8d-4c81-af12-50bf250e5f7b": {"__data__": {"id_": "4ee935ab-fe8d-4c81-af12-50bf250e5f7b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "38062fe1-3efb-4af5-8238-59032184224a", "node_type": "4", "metadata": {}, "hash": "abfe013e8e875ec75aaed7f2dcd0d2e828f9bedaf796fa7066175b4764158eb2", "class_name": "RelatedNodeInfo"}}, "text": "# 14 Successive Refinement\n\n# Case Study of a Command-Line Argument Parser\n\nThis chapter is a case study in successive refinement. You will see a module that started well but did not scale. Then you will see how the module was refactored and cleaned.\n\nMost of us have had to parse command-line arguments from time to time. If we don\u2019t have a convenient utility, then we simply walk the array of strings that is passed into the main function. There are several good utilities available from various sources,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 506, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d948b30-867b-407c-ab06-6d9225b16801": {"__data__": {"id_": "0d948b30-867b-407c-ab06-6d9225b16801", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ce3b0c30-db4c-44af-bdbf-ad72968590b6", "node_type": "4", "metadata": {}, "hash": "3d0bc1147e49966d38be8a8448a7037b41726707ad537d68629273366718e115", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nbut none of them do exactly what I want. So, of course, I decided to write my own. I call it: Args.\n\nArgs is very simple to use. You simply construct the Args class with the input arguments and a format string, and then query the Args instance for the values of the arguments. Consider the following simple example:\n\n# Listing 14-1\n\nSimple use of Args\n\npublic static void main(String[] args) {\ntry {\nArgs arg = new Args(\"l,p#,d*\", args);\nboolean logging = arg.getBoolean('l');\nint port = arg.getInt('p');\nString directory = arg.getString('d');\nexecuteApplication(logging, port, directory);\n} catch (ArgsException e) {\nSystem.out.printf(\"Argument error: %s\\n\", e.errorMessage());\n}\n}\n\nYou can see how simple this is. We just create an instance of the Args class with two parameters. The first parameter is the format, or schema, string: \"l,p#,d*.\" It defines three command-line arguments. The first, \u2013l, is a boolean argument. The second, -p, is an integer argument. The third, -d, is a string argument. The second parameter to the Args constructor is simply the array of command-line argument passed into main.\n\nIf the constructor returns without throwing an ArgsException, then the incoming command-line was parsed, and the Args instance is ready to be queried. Methods like getBoolean, getInteger, and getString allow us to access the values of the arguments by their names.\n\nIf there is a problem, either in the format string or in the command-line arguments themselves, an ArgsException will be thrown. A convenient description of what went wrong can be retrieved from the errorMessage method of the exception.\n\n# Args Implementation\n\nListing 14-2 is the implementation of the Args class. Please read it very carefully. I worked hard on the style and structure and hope it is worth emulating.\n\n# Listing 14-2\n\nArgs.java\n\npackage com.objectmentor.utilities.args;\nimport static com.objectmentor.utilities.args.ArgsException.ErrorCode.*;\nimport java.util.*;\npublic class Args {\nprivate Map<Character, ArgumentMarshaler> marshalers;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2069, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d9edada-6491-4181-b0ad-63eaaaf9ff6e": {"__data__": {"id_": "8d9edada-6491-4181-b0ad-63eaaaf9ff6e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f5428164-e69a-4511-bab5-0ed4907a66b8", "node_type": "4", "metadata": {}, "hash": "c9fb664e92ab26e6ed9ade380916241701043409d7fbbbf1838b1af8b35e6a54", "class_name": "RelatedNodeInfo"}}, "text": "# Args Implementation\n\n# Listing 14-2 (continued)\n\nArgs.java\nprivate Set&lt;Character&gt; argsFound;\nprivate ListIterator&lt;String&gt; currentArgument;\npublic Args(String schema, String[] args) throws ArgsException {\nmarshalers = new HashMap&lt;Character, ArgumentMarshaler&gt;();\nargsFound = new HashSet&lt;Character&gt;();\nparseSchema(schema);\nparseArgumentStrings(Arrays.asList(args));\n}\nprivate void parseSchema(String schema) throws ArgsException {\nfor (String element : schema.split(\",\"))\nif (element.length() &gt; 0) parseSchemaElement(element.trim());\n}\nprivate void parseSchemaElement(String element) throws ArgsException {\nchar elementId = element.charAt(0);\nString elementTail = element.substring(1);\nvalidateSchemaElementId(elementId);\nif (marshalers.put(elementId, new BooleanArgumentMarshaler()); (elementTail.length() == 0)\nelse if (elementTail.equals(\"*\")) marshalers.put(elementId, new StringArgumentMarshaler());\nelse if (elementTail.equals(\"#\")) marshalers.put(elementId, new IntegerArgumentMarshaler());\nelse if (elementTail.equals(\"##\")) marshalers.put(elementId, new DoubleArgumentMarshaler());\nelse if (elementTail.equals(\"[*]\")) marshalers.put(elementId, new StringArrayArgumentMarshaler());\nelse throw new ArgsException(INVALID_ARGUMENT_FORMAT, elementId, elementTail);\n}\nprivate void validateSchemaElementId(char elementId) throws ArgsException {\nif throw new ArgsException(INVALID_ARGUMENT_NAME, elementId, null);\n(!Character.isLetter(elementId))\n}\nprivate void parseArgumentStrings(List&lt;String&gt; argsList) throws ArgsException {\nfor (currentArgument = argsList.listIterator(); currentArgument.hasNext();) {\nString argString = currentArgument.next();\nif (argString.startsWith(\"-\")) {\nparseArgumentCharacters(argString.substring(1));\n} else {\ncurrentArgument.previous();\nbreak;\n}\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1815, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4956c4c0-eed5-4041-b349-fa584b613127": {"__data__": {"id_": "4956c4c0-eed5-4041-b349-fa584b613127", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "11839251-0972-4fcf-98d5-1e96b5e6febe", "node_type": "4", "metadata": {}, "hash": "57fb7e370e08e23377e60ed4a192749eb0c10327fdfb396fcf982087b1a7c1c4", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-2 (continued)\n\nprivate void parseArgumentCharacters(String argChars) throws ArgsException {\nfor (int i = 0; i < argChars.length(); i++)\nparseArgumentCharacter(argChars.charAt(i));\n}\nprivate void parseArgumentCharacter(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\nif (m == null) {\nthrow new ArgsException(UNEXPECTED_ARGUMENT, argChar, null);\n} else {\nargsFound.add(argChar);\ntry {\nm.set(currentArgument);\n} catch (ArgsException e) {\ne.setErrorArgumentId(argChar);\nthrow e;\n}\n}\n}\npublic boolean has(char arg) {\nreturn argsFound.contains(arg);\n}\npublic int nextArgument() {\nreturn currentArgument.nextIndex();\n}\npublic boolean getBoolean(char arg) {\nreturn BooleanArgumentMarshaler.getValue(marshalers.get(arg));\n}\npublic String getString(char arg) {\nreturn StringArgumentMarshaler.getValue(marshalers.get(arg));\n}\npublic int getInt(char arg) {\nreturn IntegerArgumentMarshaler.getValue(marshalers.get(arg));\n}\npublic double getDouble(char arg) {\nreturn DoubleArgumentMarshaler.getValue(marshalers.get(arg));\n}\npublic String[] getStringArray(char arg) {\nreturn StringArrayArgumentMarshaler.getValue(marshalers.get(arg));\n}\n\nNotice that you can read this code from the top to the bottom without a lot of jumping around or looking ahead. The one thing you may have had to look ahead for is the definition of ArgumentMarshaler, which I left out intentionally. Having read this code carefully,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1474, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "621db5f7-9dab-49e1-af53-33fbd0eeb533": {"__data__": {"id_": "621db5f7-9dab-49e1-af53-33fbd0eeb533", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0ddf5fa0-18c4-4178-8b15-28306a8f27a1", "node_type": "4", "metadata": {}, "hash": "c7d9843f421306da55e81644d7a958fa9f68bf65eef3a6934110b6335d4e46a6", "class_name": "RelatedNodeInfo"}}, "text": "# Args Implementation\n\nyou should understand what the ArgumentMarshaler interface is and what its derivatives do. I\u2019ll show a few of them to you now (Listing 14-3 through Listing 14-6).\n\n# Listing 14-3\n\npublic interface ArgumentMarshaler {\nvoid set(Iterator<String> currentArgument) throws ArgsException;\n}\n\n# Listing 14-4\n\npublic class BooleanArgumentMarshaler implements ArgumentMarshaler {\nprivate boolean booleanValue = false;\npublic void set(Iterator<String> currentArgument) throws ArgsException {\nbooleanValue = true;\n}\npublic static boolean getValue(ArgumentMarshaler am) {\nif (am != null && am instanceof BooleanArgumentMarshaler)\nreturn ((BooleanArgumentMarshaler) am).booleanValue;\nelse\nreturn false;\n}\n}\n\n# Listing 14-5\n\nimport static com.objectmentor.utilities.args.ArgsException.ErrorCode.*;\n\npublic class StringArgumentMarshaler implements ArgumentMarshaler {\nprivate String stringValue = \"\";\npublic void set(Iterator<String> currentArgument) throws ArgsException {\ntry {\nstringValue = currentArgument.next();\n} catch (NoSuchElementException e) {\nthrow new ArgsException(MISSING_STRING);\n}\n}\npublic static String getValue(ArgumentMarshaler am) {\nif (am != null && am instanceof StringArgumentMarshaler)\nreturn ((StringArgumentMarshaler) am).stringValue;\nelse\nreturn \"\";\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1288, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "355653c9-b572-4a56-9b84-31ffa842f96c": {"__data__": {"id_": "355653c9-b572-4a56-9b84-31ffa842f96c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fab49502-c1c4-4874-bf14-42d086211eb9", "node_type": "4", "metadata": {}, "hash": "4df81d9da30e48d822a00e4aba795fc3d05f67ebb486c9f68a5983f56ecec37e", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-6\n\n# IntegerArgumentMarshaler.java\n\nimport static com.objectmentor.utilities.args.ArgsException.ErrorCode.*;\npublic class IntegerArgumentMarshaler implements ArgumentMarshaler {\nprivate int intValue = 0;\npublic void set(Iterator<String> currentArgument) throws ArgsException {\nString parameter = null;\ntry {\nparameter = currentArgument.next();\nintValue = Integer.parseInt(parameter);\n} catch (NoSuchElementException e) {\nthrow new ArgsException(MISSING_INTEGER);\n} catch (NumberFormatException e) {\nthrow new ArgsException(INVALID_INTEGER, parameter);\n}\n}\npublic static int getValue(ArgumentMarshaler am) {\nif (am != null && am instanceof IntegerArgumentMarshaler)\nreturn ((IntegerArgumentMarshaler) am).intValue;\nelse\nreturn 0;\n}\n}\n\nThe other ArgumentMarshaler derivatives simply replicate this pattern for doubles and String arrays and would serve to clutter this chapter. I\u2019ll leave them to you as an exercise.\n\nOne other bit of information might be troubling you: the definition of the error code constants. They are in the ArgsException class (Listing 14-7).\n\n# Listing 14-7\n\n# ArgsException.java\n\nimport static com.objectmentor.utilities.args.ArgsException.ErrorCode.*;\npublic class ArgsException extends Exception {\nprivate char errorArgumentId = '\\0';\nprivate String errorParameter = null;\nprivate ErrorCode errorCode = OK;\npublic ArgsException() {}\npublic ArgsException(String message) {\nsuper(message);\n}\npublic ArgsException(ErrorCode errorCode) {\nthis.errorCode = errorCode;\n}\npublic ArgsException(ErrorCode errorCode, String errorParameter) {\nthis.errorCode = errorCode;\nthis.errorParameter = errorParameter;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1675, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20dde164-6d96-4a77-a9a6-b3d9cac4fb95": {"__data__": {"id_": "20dde164-6d96-4a77-a9a6-b3d9cac4fb95", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6d71844-218b-4b3c-8ec8-b7d21ffa03c8", "node_type": "4", "metadata": {}, "hash": "9aa7f32344d6443a33273c3388989bf42e1ec8002c407d59ebba2ad3327f35ae", "class_name": "RelatedNodeInfo"}}, "text": "# Args Implementation\n\nListing 14-7 (continued)\n\n# ArgsException.java\n\npublic ArgsException(ErrorCode errorCode,char errorArgumentId, String errorParameter) {\nthis.errorCode = errorCode;\nthis.errorParameter = errorParameter;\nthis.errorArgumentId = errorArgumentId;\n}\npublic char getErrorArgumentId() {return errorArgumentId;}\npublic void setErrorArgumentId(char errorArgumentId) {\nthis.errorArgumentId = errorArgumentId;\n}\npublic String getErrorParameter() {return errorParameter;}\npublic void setErrorParameter(String errorParameter) {\nthis.errorParameter = errorParameter;\n}\npublic ErrorCode getErrorCode() {return errorCode;}\npublic void setErrorCode(ErrorCode errorCode) {\nthis.errorCode = errorCode;\n}\npublic String errorMessage() {\nswitch (errorCode) {\ncase OK:return \"TILT: Should not get here.\";\ncase UNEXPECTED_ARGUMENT:return String.format(\"Argument -%c unexpected.\", errorArgumentId);\ncase MISSING_STRING:return String.format(\"Could not find string parameter for -%c.\", errorArgumentId);\ncase INVALID_INTEGER:return String.format(\"Argument -%c expects an integer but was '%s'.\", errorArgumentId, errorParameter);\ncase MISSING_INTEGER:return String.format(\"Could not find integer parameter for -%c.\", errorArgumentId);\ncase INVALID_DOUBLE:return String.format(\"Argument -%c expects a double but was '%s'.\", errorArgumentId, errorParameter);\ncase MISSING_DOUBLE:return String.format(\"Could not find double parameter for -%c.\", errorArgumentId);\ncase INVALID_ARGUMENT_NAME:return String.format(\"'%c' is not a valid argument name.\", errorArgumentId);\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ac6e32d-aa82-454f-8dd4-c5b2d28e1771": {"__data__": {"id_": "6ac6e32d-aa82-454f-8dd4-c5b2d28e1771", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4821d88d-083d-4fb7-96b2-bc33f3cd4833", "node_type": "4", "metadata": {}, "hash": "46495359c6070b148917e476b55dc1ce6c61ec4b218790175dfc680b33a64e5c", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nListing 14-7 (continued)\nArgsException.java\ncase INVALID_ARGUMENT_FORMAT:return String.format(\"'%s' is not a valid argument format.\",\nerrorParameter);\n}\nreturn \"\";\n}\npublic enum ErrorCode {OK, INVALID_ARGUMENT_FORMAT, UNEXPECTED_ARGUMENT, INVALID_ARGUMENT_NAME,\nMISSING_STRING,\nMISSING_INTEGER, INVALID_INTEGER,\nMISSING_DOUBLE, INVALID_DOUBLE}\n\nIt\u2019s remarkable how much code is required to flesh out the details of this simple concept. One of the reasons for this is that we are using a particularly wordy language. Java, being a statically typed language, requires a lot of words in order to satisfy the type system. In a language like Ruby, Python, or Smalltalk, this program is much smaller.1\n\nPlease read the code over one more time. Pay special attention to the way things are named, the size of the functions, and the formatting of the code. If you are an experienced programmer, you may have some quibbles here and there with various parts of the style or structure. Overall, however, I hope you conclude that this program is nicely written and has a clean structure.\n\nFor example, it should be obvious how you would add a new argument type, such as a date argument or a complex number argument, and that such an addition would require a trivial amount of effort. In short, it would simply require a new derivative of Argument-Marshaler, a new getXXX function, and a new case statement in the parseSchemaElement function. There would also probably be a new ArgsException.ErrorCode and a new error message.\n\n# How Did I Do This?\n\nLet me set your mind at rest. I did not simply write this program from beginning to end in its current form. More importantly, I am not expecting you to be able to write clean and elegant programs in one pass. If we have learned anything over the last couple of decades, it is that programming is a craft more than it is a science. To write clean code, you must first write dirty code and then clean it.\n\nThis should not be a surprise to you. We learned this truth in grade school when our teachers tried (usually in vain) to get us to write rough drafts of our compositions. The process, they told us, was that we should write a rough draft, then a second draft, then several subsequent drafts until we had our final version. Writing clean compositions, they tried to tell us, is a matter of successive refinement.\n\n1. I recently rewrote this module in Ruby. It was 1/7th the size and had a subtly better structure.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2489, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c053595-f1d5-4df6-8fbd-965cab5b12ba": {"__data__": {"id_": "2c053595-f1d5-4df6-8fbd-965cab5b12ba", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "295785f1-8d2b-4582-90ac-b9425bea0afa", "node_type": "4", "metadata": {}, "hash": "b8190553986804675ee0013f948d26f4374fc6b7724af5f9e4bcc6ad7d8299dc", "class_name": "RelatedNodeInfo"}}, "text": "# Args: The Rough Draft\n\nMost freshman programmers (like most grade-schoolers) don\u2019t follow this advice particularly well. They believe that the primary goal is to get the program working. Once it\u2019s \u201cworking,\u201d they move on to the next task, leaving the \u201cworking\u201d program in whatever state they finally got it to \u201cwork.\u201d Most seasoned programmers know that this is professional suicide.\n\n# Args: The Rough Draft\n\n# Listing 14-8\n\n# Args.java (first draft)\n\nimport    java.text.ParseException;\nimport    java.util.*;\npublic    class Args {\nprivate String schema;\nprivate String[] args;\nprivate boolean valid = true;\nprivate Set<Character> unexpectedArguments = new TreeSet<Character>();\nprivate Map<Character, Boolean> booleanArgs = new HashMap<Character, Boolean>();\nprivate Map<Character, String> stringArgs = new HashMap<Character, String>();\nprivate Map<Character, Integer> intArgs = new HashMap<Character, Integer>();\nprivate Set<Character> argsFound = new HashSet<Character>();\nprivate int currentArgument;\nprivate char errorArgumentId = '\\0';\nprivate String errorParameter = \"TILT\";\nprivate ErrorCode errorCode = ErrorCode.OK;\nprivate enum ErrorCode {OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT}\npublic Args(String schema, String[] args) throws ParseException {\nthis.schema = schema;\nthis.args = args;\nvalid = parse();\n}\nprivate boolean parse() throws ParseException {\nif return true;(schema.length() == 0 && args.length == 0)\nparseSchema();\ntry {\nparseArguments();\n} catch (ArgsException e) {\n}\nreturn valid;\n}\nprivate boolean parseSchema() throws ParseException {\nfor (String element : schema.split(\",\")) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1642, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a19d7248-e750-42d0-bd84-a8de9caf4147": {"__data__": {"id_": "a19d7248-e750-42d0-bd84-a8de9caf4147", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d06c9d02-6bce-4350-a3c2-ed23155f2b42", "node_type": "4", "metadata": {}, "hash": "64dfd3e6cc8757a8f3f9c48336d0e02cc125f3b9a953c9860fde56c9e8393ea1", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-8 (continued)\n\nArgs.java (first draft)\nif (element.length() > 0) {\nString trimmedElement = element.trim();\nparseSchemaElement(trimmedElement);\n}\n}\nreturn true;\n}\nprivate void parseSchemaElement(String element) throws ParseException {\nchar elementId = element.charAt(0);\nString elementTail = element.substring(1);\nvalidateSchemaElementId(elementId);\nif (isBooleanSchemaElement(elementTail))\nparseBooleanSchemaElement(elementId);\nelse if (isStringSchemaElement(elementTail))\nparseStringSchemaElement(elementId);\nelse if (isIntegerSchemaElement(elementTail)) {\nparseIntegerSchemaElement(elementId);\n} else {\nthrow new ParseException(\nString.format(\"Argument: %c has invalid format: %s.\", elementId, elementTail), 0);\n}\n}\nprivate void validateSchemaElementId(char elementId) throws ParseException {\nif (!Character.isLetter(elementId)) {\nthrow new ParseException(\"Bad character:\" + elementId + \" in Args format: \" + schema, 0);\n}\n}\nprivate void parseBooleanSchemaElement(char elementId) {\nbooleanArgs.put(elementId, false);\n}\nprivate void parseIntegerSchemaElement(char elementId) {\nintArgs.put(elementId, 0);\n}\nprivate void parseStringSchemaElement(char elementId) {\nstringArgs.put(elementId, \"\");\n}\nprivate boolean isStringSchemaElement(String elementTail) {\nreturn elementTail.equals(\"*\");\n}\nprivate boolean isBooleanSchemaElement(String elementTail) {\nreturn elementTail.length() == 0;\n}\nprivate boolean isIntegerSchemaElement(String elementTail) {\nreturn elementTail.equals(\"#\");\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1531, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2ea714d-412f-435a-a971-acd128ada9d2": {"__data__": {"id_": "f2ea714d-412f-435a-a971-acd128ada9d2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "52914f46-cfde-4193-929c-3563fa2031c5", "node_type": "4", "metadata": {}, "hash": "92deedc44dcca6708f796d7ae555ef6e75627eaef7e8c9447ab005da23d4e5e7", "class_name": "RelatedNodeInfo"}}, "text": "# Args: The Rough Draft\n\n# Listing 14-8 (continued)\n\nArgs.java (first draft)\nprivate boolean parseArguments() throws ArgsException {\nfor (currentArgument = 0; currentArgument < args.length; currentArgument++) {\nString arg = args[currentArgument];\nparseArgument(arg);\n}\nreturn true;\n}\nprivate void parseArgument(String arg) throws ArgsException {\nif (arg.startsWith(\"-\")) parseElements(arg);\n}\nprivate void parseElements(String arg) throws ArgsException {\nfor (int i = 1; i < arg.length(); i++)\nparseElement(arg.charAt(i));\n}\nprivate void parseElement(char argChar) throws ArgsException {\nif (setArgument(argChar)) argsFound.add(argChar);\nelse {\nunexpectedArguments.add(argChar);\nerrorCode = ErrorCode.UNEXPECTED_ARGUMENT;\nvalid = false;\n}\n}\nprivate boolean setArgument(char argChar) throws ArgsException {\nif (isBooleanArg(argChar)) setBooleanArg(argChar, true);\nelse if (isStringArg(argChar)) setStringArg(argChar);\nelse if (isIntArg(argChar)) setIntArg(argChar);\nelse return false;\nreturn true;\n}\nprivate boolean isIntArg(char argChar) {\nreturn intArgs.containsKey(argChar);\n}\nprivate void setIntArg(char argChar) throws ArgsException {\ncurrentArgument++;\nString parameter = null;\ntry {\nparameter = args[currentArgument];\nintArgs.put(argChar, new Integer(parameter));\n} catch (ArrayIndexOutOfBoundsException e) {\nvalid = false;\nerrorArgumentId = argChar;\nerrorCode = ErrorCode.MISSING_INTEGER;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1399, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26b69292-72fe-486a-bf23-4e4d890e4a5e": {"__data__": {"id_": "26b69292-72fe-486a-bf23-4e4d890e4a5e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d4ed3b70-ccee-4205-a111-04efeca34e0a", "node_type": "4", "metadata": {}, "hash": "a3a1863483cae6a773ed05e38f89f86af781d004940247e56f0d50a1e52dbf38", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-8 (continued)\n\nArgs.java (first draft)\nthrow new ArgsException();\n} catch (NumberFormatException e) {\nvalid = false;\nerrorArgumentId = argChar;\nerrorParameter = parameter;\nerrorCode = ErrorCode.INVALID_INTEGER;\nthrow new ArgsException();\n}\n}\nprivate void setStringArg(char argChar) throws ArgsException {\ncurrentArgument++;\ntry {\nstringArgs.put(argChar, args[currentArgument]);\n} catch (ArrayIndexOutOfBoundsException e) {\nvalid = false;\nerrorArgumentId = argChar;\nerrorCode = ErrorCode.MISSING_STRING;\nthrow new ArgsException();\n}\n}\nprivate boolean isStringArg(char argChar) {\nreturn stringArgs.containsKey(argChar);\n}\nprivate void setBooleanArg(char argChar, boolean value) {\nbooleanArgs.put(argChar, value);\n}\nprivate boolean isBooleanArg(char argChar) {\nreturn booleanArgs.containsKey(argChar);\n}\npublic int cardinality() {\nreturn argsFound.size();\n}\npublic String usage() {\nif (schema.length() > 0)\nreturn \"-[\" + schema + \"]\";\nelse\nreturn \"\";\n}\npublic String errorMessage() throws Exception {\nswitch (errorCode) {\ncase OK:\nthrow new Exception(\"TILT: Should not get here.\");\ncase UNEXPECTED_ARGUMENT:\nreturn unexpectedArgumentMessage();\ncase MISSING_STRING:\nreturn String.format(\"Could not find string parameter for -%c.\", errorArgumentId);\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1298, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8c6fa2b-3a6c-499f-a82a-bbcf366404da": {"__data__": {"id_": "f8c6fa2b-3a6c-499f-a82a-bbcf366404da", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2b4e3b1f-b4fb-4ad6-beec-800c6b589377", "node_type": "4", "metadata": {}, "hash": "3781d73410ebfc13663d54c715fea66c83db64f2fa4fd91c6db6dd51df9f96bb", "class_name": "RelatedNodeInfo"}}, "text": "# The Rough Draft\n\n# Listing 14-8 (continued)\n\nArgs.java (first draft)\ncase INVALID_INTEGER:return String.format(\"Argument -%c expects an integer but was '%s'.\",\nerrorArgumentId, errorParameter);\ncase MISSING_INTEGER:return String.format(\"Could not find integer parameter for -%c.\",\nerrorArgumentId);\n}\nreturn \"\";\n}\nprivate String unexpectedArgumentMessage() {\nStringBuffer message = new StringBuffer(\"Argument(s) -\");\nfor (char c : unexpectedArguments) {message.append(c);\n}\nmessage.append(\" unexpected.\");\nreturn message.toString();\n}\nprivate boolean falseIfNull(Boolean b) {return b != null && b;\n}\nprivate int zeroIfNull(Integer i) {return i == null ? 0 : i;\n}\nprivate String blankIfNull(String s) {return s == null ? \"\" : s;\n}\npublic String getString(char arg) {return blankIfNull(stringArgs.get(arg));\n}\npublic int getInt(char arg) {return zeroIfNull(intArgs.get(arg));\n}\npublic boolean getBoolean(char arg) {return falseIfNull(booleanArgs.get(arg));\n}\npublic boolean has(char arg) {return argsFound.contains(arg);\n}\npublic boolean isValid() {return valid;\n}\nprivate class ArgsException extends Exception {\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1114, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a636504-55d9-40b2-b969-3cde57c2eadf": {"__data__": {"id_": "1a636504-55d9-40b2-b969-3cde57c2eadf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "caf7c77b-b9f5-4b21-b2df-9237614f5604", "node_type": "4", "metadata": {}, "hash": "28fbcceb1a319cacb03836f9a0323d1d88a210d30d8938904923c2311e51140b", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nI hope your initial reaction to this mass of code is \u201cI\u2019m certainly glad he didn\u2019t leave it like that!\u201d If you feel like this, then remember that\u2019s how other people are going to feel about code that you leave in rough-draft form.\n\nActually \u201crough draft\u201d is probably the kindest thing you can say about this code. It\u2019s clearly a work in progress. The sheer number of instance variables is daunting. The odd strings like \u201cTILT,\u201d the HashSets and TreeSets, and the try-catch-catch blocks all add up to a festering pile.\n\nI had not wanted to write a festering pile. Indeed, I was trying to keep things reasonably well organized. You can probably tell that from my choice of function and variable names and the fact that there is a crude structure to the program. But, clearly, I had let the problem get away from me.\n\nThe mess built gradually. Earlier versions had not been nearly so nasty. For example, Listing 14-9 shows an earlier version in which only Boolean arguments were working.\n\n# Listing 14-9\n\n# Args.java (Boolean only)\n\npackage com.objectmentor.utilities.getopts;\nimport java.util.*;\npublic class Args {\nprivate String schema;\nprivate String[] args;\nprivate boolean valid;\nprivate Set<Character> unexpectedArguments = new TreeSet<Character>();\nprivate Map<Character, Boolean> booleanArgs = new HashMap<Character, Boolean>();\nprivate int numberOfArguments = 0;\n\npublic Args(String schema, String[] args) {\nthis.schema = schema;\nthis.args = args;\nvalid = parse();\n}\n\npublic boolean isValid() {return valid;}\n\nprivate boolean parse() {\nif (schema.length() == 0 && args.length == 0) return true;\nparseSchema();\nparseArguments();\nreturn unexpectedArguments.size() == 0;\n}\n\nprivate boolean parseSchema() {\nfor (String element : schema.split(\",\")) {\nparseSchemaElement(element);\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1821, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c6b9305-9716-464d-ac83-e6b65c552c12": {"__data__": {"id_": "8c6b9305-9716-464d-ac83-e6b65c552c12", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cd306b6d-35ca-4169-af99-48bd4c3d09f0", "node_type": "4", "metadata": {}, "hash": "f95f13857fe60d3abdf0655db6f0bdc342987d132ca605a84273fcaed0cfc30e", "class_name": "RelatedNodeInfo"}}, "text": "# Args: The Rough Draft\n\n# Listing 14-9 (continued)\n\nArgs.java (Boolean only)\nreturn true;\n}\nprivate void parseSchemaElement(String element) {\nif parseBooleanSchemaElement(element);(element.length() == 1) {\n}\n}\nprivate void parseBooleanSchemaElement(String element) {\nchar c = element.charAt(0);\nif booleanArgs.put(c, false);(Character.isLetter(c)) {\n}\n}\nprivate boolean parseArguments() {\nfor (String arg : args)\nparseArgument(arg);\nreturn true;\n}\nprivate void parseArgument(String arg) {\nif parseElements(arg);(arg.startsWith(\"-\"))\n}\nprivate void parseElements(String arg) {\nfor (int i = 1; i < arg.length(); i++)\nparseElement(arg.charAt(i));\n}\nprivate void parseElement(char argChar) {\nif numberOfArguments++;(isBoolean(argChar)) {\nsetBooleanArg(argChar, true);\n} else unexpectedArguments.add(argChar);\n}\nprivate void setBooleanArg(char argChar, boolean value) {\nbooleanArgs.put(argChar, value);\n}\nprivate boolean isBoolean(char argChar) {\nreturn booleanArgs.containsKey(argChar);\n}\npublic int cardinality() {\nreturn numberOfArguments;\n}\npublic String usage() {\nif (schema.length() > 0)\nreturn \"-[\"+schema+\"]\";\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "31c51fe1-0761-48ba-996d-2730a45a5fe7": {"__data__": {"id_": "31c51fe1-0761-48ba-996d-2730a45a5fe7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3b05a250-477d-4275-8905-4211b1a975bf", "node_type": "4", "metadata": {}, "hash": "55eb6de0c15de219a3e0142acdd1faa2f67daed313a3e3e95723e472d4906617", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-9 (continued)\n\nArgs.java (Boolean only)\nelsereturn \"\";\n}\npublic String errorMessage() {if return unexpectedArgumentMessage();(unexpectedArguments.size() > 0) {\n} elsereturn \"\";\n}\nprivate String unexpectedArgumentMessage() {\nStringBuffer message = new StringBuffer(\"Argument(s) -\");\nfor (char c : unexpectedArguments) {message.append(c);\n}\nmessage.append(\" unexpected.\");\nreturn message.toString();\n}\npublic boolean getBoolean(char arg) {return booleanArgs.get(arg);\n}\n}\n\nAlthough you can find plenty to complain about in this code, it\u2019s really not that bad. It\u2019s compact and simple and easy to understand. However, within this code it is easy to see the seeds of the later festering pile. It\u2019s quite clear how this grew into the latter mess.\n\nNotice that the latter mess has only two more argument types than this: String and integer. The addition of just two more argument types had a massively negative impact on the code. It converted it from something that would have been reasonably maintainable into something that I would expect to become riddled with bugs and warts.\n\nI added the two argument types incrementally. First, I added the String argument, which yielded this:\n\n# Listing 14-10\n\nArgs.java (Boolean and String)\npackage com.objectmentor.utilities.getopts;\nimport    java.text.ParseException;\nimport    java.util.*;\npublic    class Args {\nprivate String schema;\nprivate String[] args;\nprivate boolean valid = true;\nprivate Set<Character> unexpectedArguments = new TreeSet<Character>();\nprivate Map<Character, Boolean> booleanArgs =\nnew HashMap<Character, Boolean>();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1630, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "493359b6-53eb-4869-b232-6177ce6a95b4": {"__data__": {"id_": "493359b6-53eb-4869-b232-6177ce6a95b4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9567c207-0a67-473a-9433-cb30e74a0b5a", "node_type": "4", "metadata": {}, "hash": "bd7c561a3cc9ad942eda76affde97c2fbc0a6892f3d851c775997c018710df0e", "class_name": "RelatedNodeInfo"}}, "text": "# Args: The Rough Draft\n\n# Listing 14-10 (continued)\n\nArgs.java (Boolean and String)\nprivate Map&lt;Character, String&gt; stringArgs =\nnew HashMap&lt;Character, String&gt;();\nprivate Set&lt;Character&gt; argsFound = new HashSet&lt;Character&gt;();\nprivate int currentArgument;\nprivate char errorArgument = '\\0';\nenum  ErrorCode {\nOK, MISSING_STRING}\nprivate ErrorCode errorCode = ErrorCode.OK;\npublic Args(String schema, String[] args) throws ParseException {\nthis.schema = schema;\nthis.args = args;\nvalid = parse();\n}\nprivate boolean parse() throws ParseException {\nif return true;(schema.length() == 0 && args.length == 0)\nparseSchema();\nparseArguments();\nreturn valid;\n}\nprivate boolean parseSchema() throws ParseException {\nfor (String element : schema.split(\",\")) {\nif (element.length() > 0) {String trimmedElement = element.trim();\nparseSchemaElement(trimmedElement);\n}\n}\nreturn true;\n}\nprivate void parseSchemaElement(String element) throws ParseException {\nchar elementId = element.charAt(0);\nString elementTail = element.substring(1);\nvalidateSchemaElementId(elementId);\nif parseBooleanSchemaElement(elementId);(isBooleanSchemaElement(elementTail))\nelse if (isStringSchemaElement(elementTail))\nparseStringSchemaElement(elementId);\n}\nprivate void validateSchemaElementId(char elementId) throws ParseException {\nif throw new ParseException((!Character.isLetter(elementId)) {\n\"Bad character:\" + elementId + \"in Args format: \" + schema, 0);\n}\n}\nprivate void parseStringSchemaElement(char elementId) {\nstringArgs.put(elementId, \"\");\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1538, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6bd112bb-2f56-4457-a2de-a3dc73749def": {"__data__": {"id_": "6bd112bb-2f56-4457-a2de-a3dc73749def", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dcb0a653-40d6-4df2-ae36-94ef093e8886", "node_type": "4", "metadata": {}, "hash": "bc42bd3017a010e238fbf405cd1dbaeea7b3023d06b8a9f7c2f177b28e1e72fe", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-10 (continued)\n\n# Args.java (Boolean and String)\n\nprivate boolean isStringSchemaElement(String elementTail) {\nreturn elementTail.equals(\"*\");\n}\nprivate boolean isBooleanSchemaElement(String elementTail) {\nreturn elementTail.length() == 0;\n}\nprivate void parseBooleanSchemaElement(char elementId) {\nbooleanArgs.put(elementId, false);\n}\nprivate boolean parseArguments() {\nfor (currentArgument = 0; currentArgument < args.length; currentArgument++) {\nString arg = args[currentArgument];\nparseArgument(arg);\n}\nreturn true;\n}\nprivate void parseArgument(String arg) {\nif (arg.startsWith(\"-\"))\nparseElements(arg);\n}\nprivate void parseElements(String arg) {\nfor (int i = 1; i < arg.length(); i++)\nparseElement(arg.charAt(i));\n}\nprivate void parseElement(char argChar) {\nif (setArgument(argChar))\nargsFound.add(argChar);\nelse {\nunexpectedArguments.add(argChar);\nvalid = false;\n}\n}\nprivate boolean setArgument(char argChar) {\nboolean set = true;\nif (isBoolean(argChar))\nsetBooleanArg(argChar, true);\nelse if (isString(argChar))\nsetStringArg(argChar, \"\");\nelse\nset = false;\nreturn set;\n}\nprivate void setStringArg(char argChar, String s) {\ncurrentArgument++;\ntry {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1203, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c185139-1672-4b05-8ab2-0c2c64a3adb4": {"__data__": {"id_": "5c185139-1672-4b05-8ab2-0c2c64a3adb4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "147dd45f-5d06-4913-af1f-c43e5425e63f", "node_type": "4", "metadata": {}, "hash": "26919fffa4266eea681583a518275045edbc5ac7491168a1327884110ed4cdc2", "class_name": "RelatedNodeInfo"}}, "text": "# The Rough Draft\n\n# Listing 14-10 (continued)\n\nArgs.java (Boolean and String)\nstringArgs.put(argChar, args[currentArgument]);\n} catch (ArrayIndexOutOfBoundsException e) {\nvalid = false;\nerrorArgument = argChar;\nerrorCode = ErrorCode.MISSING_STRING;\n}\n}\nprivate boolean isString(char argChar) {\nreturn stringArgs.containsKey(argChar);\n}\nprivate void setBooleanArg(char argChar, boolean value) {\nbooleanArgs.put(argChar, value);\n}\nprivate boolean isBoolean(char argChar) {\nreturn booleanArgs.containsKey(argChar);\n}\npublic int cardinality() {\nreturn argsFound.size();\n}\npublic String usage() {\nif (schema.length() > 0)\nreturn \"-[\" + schema + \"]\";\nelse\nreturn \"\";\n}\npublic String errorMessage() throws Exception {\nif (unexpectedArguments.size() > 0) {\nreturn unexpectedArgumentMessage();\n} else {\nswitch (errorCode) {\ncase MISSING_STRING:\nreturn String.format(\"Could not find string parameter for -%c.\", errorArgument);\ncase OK:\nthrow new Exception(\"TILT: Should not get here.\");\n}\n}\nreturn \"\";\n}\nprivate String unexpectedArgumentMessage() {\nStringBuffer message = new StringBuffer(\"Argument(s) -\");\nfor (char c : unexpectedArguments) {\nmessage.append(c);\n}\nmessage.append(\" unexpected.\");\nreturn message.toString();\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1216, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "206c86eb-42fb-4dbf-a6cd-ac7788d541ab": {"__data__": {"id_": "206c86eb-42fb-4dbf-a6cd-ac7788d541ab", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "525718eb-b425-4b79-8d73-b15822a0f3c6", "node_type": "4", "metadata": {}, "hash": "815365dda23781755ed0ee690a310995b2b6dfd735003852ad5df37c0f3cc0ac", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-10 (continued)\n\nArgs.java (Boolean and String)\npublic boolean getBoolean(char arg) {return falseIfNull(booleanArgs.get(arg));\n}\nprivate boolean falseIfNull(Boolean b) {return b == null ? false : b;\n}\npublic String getString(char arg) {return blankIfNull(stringArgs.get(arg));\n}\nprivate String blankIfNull(String s) {return s == null ? \"\" : s;\n}\npublic boolean has(char arg) {return argsFound.contains(arg);\n}\npublic boolean isValid() {return valid;\n}\n\nYou can see that this is starting to get out of hand. It\u2019s still not horrible, but the mess is certainly starting to grow. It\u2019s a pile, but it\u2019s not festering quite yet. It took the addition of the integer argument type to get this pile really fermenting and festering.\n\n# So I Stopped\n\nI had at least two more argument types to add, and I could tell that they would make things much worse. If I bulldozed my way forward, I could probably get them to work, but I\u2019d leave behind a mess that was too large to fix. If the structure of this code was ever going to be maintainable, now was the time to fix it.\n\nSo I stopped adding features and started refactoring. Having just added the String and integer arguments, I knew that each argument type required new code in three major places. First, each argument type required some way to parse its schema element in order to select the HashMap for that type. Next, each argument type needed to be parsed in the command-line strings and converted to its true type. Finally, each argument type needed a getXXX method so that it could be returned to the caller as its true type.\n\nMany different types, all with similar methods\u2014that sounds like a class to me. And so the ArgumentMarshaler concept was born.\n\n# On Incrementalism\n\nOne of the best ways to ruin a program is to make massive changes to its structure in the name of improvement. Some programs never recover from such \u201cimprovements.\u201d The problem is that it\u2019s very hard to get the program working the same way it worked before the \u201cimprovement.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2045, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "109da770-5ce6-4b71-b2af-e3e78ab2c055": {"__data__": {"id_": "109da770-5ce6-4b71-b2af-e3e78ab2c055", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a0b0acc8-840b-4422-ae48-826db59e12dd", "node_type": "4", "metadata": {}, "hash": "678b5c0402e0d98591674c46acf9afde1045ac000edab627a5010a1b0d167859", "class_name": "RelatedNodeInfo"}}, "text": "# Args: The Rough Draft\n\nTo avoid this, I use the discipline of Test-Driven Development (TDD). One of the central doctrines of this approach is to keep the system running at all times. In other words, using TDD, I am not allowed to make a change to the system that breaks that system. Every change I make must keep the system working as it worked before.\n\nTo achieve this, I need a suite of automated tests that I can run on a whim and that verifies that the behavior of the system is unchanged. For the Args class I had created a suite of unit and acceptance tests while I was building the festering pile. The unit tests were written in Java and administered by JUnit. The acceptance tests were written as wiki pages in FitNesse. I could run these tests any time I wanted, and if they passed, I was confident that the system was working as I specified.\n\nSo I proceeded to make a large number of very tiny changes. Each change moved the structure of the system toward the ArgumentMarshaler concept. And yet each change kept the system working. The first change I made was to add the skeleton of the ArgumentMarshaller to the end of the festering pile (Listing 14-11).\n\n# Listing 14-11\n\n# ArgumentMarshaller appended to Args.java\n\nprivate class ArgumentMarshaler {\nprivate boolean booleanValue = false;\npublic void setBoolean(boolean value) {\nbooleanValue = value;\n}\npublic boolean getBoolean() {\nreturn booleanValue;\n}\n}\nprivate class BooleanArgumentMarshaler extends ArgumentMarshaler {\n}\nprivate class StringArgumentMarshaler extends ArgumentMarshaler {\n}\nprivate class IntegerArgumentMarshaler extends ArgumentMarshaler {\n}\n\nClearly, this wasn\u2019t going to break anything. So then I made the simplest modification I could, one that would break as little as possible. I changed the HashMap for the Boolean arguments to take an ArgumentMarshaler.\n\nprivate Map<Character, new HashMap<Character,ArgumentMarshaler> booleanArgs =\n\nThis broke a few statements, which I quickly fixed.\n\n...private void parseBooleanSchemaElement(char elementId) {\nbooleanArgs.put(elementId, new BooleanArgumentMarshaler());\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2100, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "45fee225-76bb-4be2-af2d-924964ff423f": {"__data__": {"id_": "45fee225-76bb-4be2-af2d-924964ff423f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7f33ce81-b1b4-4889-aafd-d5f5f370d877", "node_type": "4", "metadata": {}, "hash": "4a4675c75a88b0f616c34d9d10f0d22f1896039385a9ff98bd0f8cdcb71ef58f", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nprivate void setBooleanArg(char argChar, boolean value) {\n\n&nbsp;&nbsp;&nbsp;&nbsp;booleanArgs.get(argChar).setBoolean(value);\n\n}\n\n...public boolean getBoolean(char arg) {\n\n&nbsp;&nbsp;&nbsp;&nbsp;return falseIfNull(booleanArgs.get(arg).getBoolean());\n\n}\n\nNotice how these changes are in exactly the areas that I mentioned before: the parse, set, and get for the argument type. Unfortunately, small as this change was, some of the tests started failing. If you look carefully at getBoolean, you\u2019ll see that if you call it with 'y,' but there is no y argument, then booleanArgs.get('y') will return null, and the function will throw a NullPointerException. The falseIfNull function had been used to protect against this, but the change I made caused that function to become irrelevant.\n\nIncrementalism demanded that I get this working quickly before making any other changes. Indeed, the fix was not too difficult. I just had to move the check for null. It was no longer the boolean being null that I needed to check; it was the ArgumentMarshaller.\n\nFirst, I removed the falseIfNull call in the getBoolean function. It was useless now, so I also eliminated the function itself. The tests still failed in the same way, so I was confident that I hadn\u2019t introduced any new errors.\n\npublic boolean getBoolean(char arg) {\n\n&nbsp;&nbsp;&nbsp;&nbsp;return booleanArgs.get(arg).getBoolean();\n\n}\n\nNext, I split the function into two lines and put the ArgumentMarshaller into its own variable named argumentMarshaller. I didn\u2019t care for the long variable name; it was badly redundant and cluttered up the function. So I shortened it to am [N5].\n\npublic boolean getBoolean(char arg) {\n\n&nbsp;&nbsp;&nbsp;&nbsp;Args.ArgumentMarshaler am.getBoolean();am = booleanArgs.get(arg);\n\n&nbsp;&nbsp;&nbsp;&nbsp;return\n\n}\n\nAnd then I put in the null detection logic.\n\npublic boolean getBoolean(char arg) {\n\n&nbsp;&nbsp;&nbsp;&nbsp;Args.ArgumentMarshaler am = booleanArgs.get(arg);\n\n&nbsp;&nbsp;&nbsp;&nbsp;return am != null && am.getBoolean();\n\n}\n\n# String Arguments\n\nAdding String arguments was very similar to adding boolean arguments. I had to change the HashMap and get the parse, set, and get functions working. There shouldn\u2019t be any surprises in what follows except, perhaps, that I seem to be putting all the marshalling implementation in the ArgumentMarshaller base class instead of distributing it to the derivatives.\n\nprivate Map<Character, ArgumentMarshaler> stringArgs = new HashMap<Character, ArgumentMarshaler>();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2542, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5003bd1a-a9a8-49e5-96cf-3d2089da2ab9": {"__data__": {"id_": "5003bd1a-a9a8-49e5-96cf-3d2089da2ab9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7ceecf92-6721-4f77-82da-312959cb0eb6", "node_type": "4", "metadata": {}, "hash": "39d10b2945eb947b4e55ed022c853940238ee9bc131f65fdbaa2dbdd91468c79", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\nprivate void parseStringSchemaElement(char elementId) {\nstringArgs.put(elementId, new StringArgumentMarshaler());\n}\n\nprivate void setStringArg(char argChar) throws ArgsException {\ncurrentArgument++;\ntry {\nstringArgs.get(argChar).setString(args[currentArgument]);\n} catch (ArrayIndexOutOfBoundsException e) {\nvalid = false;\nerrorArgumentId = argChar;\nerrorCode = ErrorCode.MISSING_STRING;\nthrow new ArgsException();\n}\n}\n\npublic String getString(char arg) {\nArgs.ArgumentMarshaler am = stringArgs.get(arg);\nreturn am == null ? \"\" : am.getString();\n}\n\nprivate class ArgumentMarshaler {\nprivate boolean booleanValue = false;\nprivate String stringValue;\npublic void setBoolean(boolean value) {\nbooleanValue = value;\n}\npublic boolean getBoolean() {\nreturn booleanValue;\n}\npublic void setString(String s) {\nstringValue = s;\n}\npublic String getString() {\nreturn stringValue == null ? \"\" : stringValue;\n}\n}\n\nAgain, these changes were made one at a time and in such a way that the tests kept running, if not passing. When a test broke, I made sure to get it passing again before continuing with the next change.\n\nBy now you should be able to see my intent. Once I get all the current marshalling behavior into the ArgumentMarshaler base class, I\u2019m going to start pushing that behavior down into the derivatives. This will allow me to keep everything running while I gradually change the shape of this program.\n\nThe obvious next step was to move the int argument functionality into the ArgumentMarshaler. Again, there weren\u2019t any surprises.\n\nprivate Map<Character, ArgumentMarshaler> intArgs = new HashMap<Character, ArgumentMarshaler>();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1647, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f320e175-32e6-4a95-b73f-c9d24c0be7c4": {"__data__": {"id_": "f320e175-32e6-4a95-b73f-c9d24c0be7c4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b976ccd1-0e4c-4b19-b7cb-bb8d7e22747f", "node_type": "4", "metadata": {}, "hash": "65d13bdd969feaee11959f21fe61d1ef7c3e7815b7208067e4b1ebc0c24f5362", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nprivate void parseIntegerSchemaElement(char elementId) {\nintArgs.put(elementId,        new IntegerArgumentMarshaler());\n}\n...private void setIntArg(char argChar) throws ArgsException {\ncurrentArgument++;\nString parameter = null;\ntry {parameter = args[currentArgument];\nintArgs.get(argChar).setInteger(Integer.parseInt(parameter));\n} catch (ArrayIndexOutOfBoundsException e) {\nvalid = false;\nerrorArgumentId = argChar;\nerrorCode = ErrorCode.MISSING_INTEGER;\nthrow new ArgsException();\n} catch (NumberFormatException e) {valid = false;\nerrorArgumentId = argChar;\nerrorParameter = parameter;\nerrorCode = ErrorCode.INVALID_INTEGER;\nthrow new ArgsException();\n}\n}\n...public int getInt(char arg) {\nArgs.ArgumentMarshaler am =          intArgs.get(arg);\nreturn   am == null ? 0      : am.getInteger();\n}\n...private class ArgumentMarshaler {\nprivate boolean booleanValue = false;\nprivate String stringValue;\nprivate int integerValue;\npublic void setBoolean(boolean value) {\nbooleanValue = value;\n}\npublic boolean getBoolean() {return booleanValue;\n}\npublic void setString(String s) {stringValue = s;\n}\npublic String getString() {return stringValue == null ? \"\" : stringValue;\n}\npublic void setInteger(int i) {integerValue = i;\n}\npublic int getInteger() {return integerValue;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd9e5706-6fae-46f4-a610-2854dbbcaafa": {"__data__": {"id_": "fd9e5706-6fae-46f4-a610-2854dbbcaafa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b678f24e-45a2-485f-b6ae-d81f169e5b4e", "node_type": "4", "metadata": {}, "hash": "94efb8e323851424042bda59959d3302f175d509ae4bed90779d3202ad088482", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\nWith all the marshalling moved to the ArgumentMarshaler, I started pushing functionality into the derivatives. The first step was to move the setBoolean function into the BooleanArgumentMarshaller and make sure it got called correctly. So I created an abstract set method.\n\nprivate abstract class ArgumentMarshaler {\nprotected boolean booleanValue = false;\nprivate String stringValue;\nprivate int integerValue;\n\npublic void setBoolean(boolean value) {\nbooleanValue = value;\n}\n\npublic boolean getBoolean() {\nreturn booleanValue;\n}\n\npublic void setString(String s) {\nstringValue = s;\n}\n\npublic String getString() {\nreturn stringValue == null ? \"\" : stringValue;\n}\n\npublic void setInteger(int i) {\nintegerValue = i;\n}\n\npublic int getInteger() {\nreturn integerValue;\n}\n\npublic abstract void set(String s);\n}\n\nThen I implemented the set method in BooleanArgumentMarshaller.\n\nprivate class BooleanArgumentMarshaler extends ArgumentMarshaler {\npublic void set(String s) {\nbooleanValue = true;\n}\n}\n\nAnd finally I replaced the call to setBoolean with a call to set.\n\nprivate void setBooleanArg(char argChar, boolean value) {\nbooleanArgs.get(argChar).set(\"true\");\n}\n\nThe tests all still passed. Because this change caused set to be deployed to the BooleanArgumentMarshaler, I removed the setBoolean method from the ArgumentMarshaler base class.\n\nNotice that the abstract set function takes a String argument, but the implementation in the BooleanArgumentMarshaller does not use it. I put that argument in there because I knew that the StringArgumentMarshaller and IntegerArgumentMarshaller would use it.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1613, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f556e10c-8770-4893-834f-011f418bbfd6": {"__data__": {"id_": "f556e10c-8770-4893-834f-011f418bbfd6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1a5c1c7e-605a-49d7-aea1-9f8cd7028037", "node_type": "4", "metadata": {}, "hash": "9b677f9177645d0c5bba7ff97940c17ed2060070cbd6d43b4aae410cfcec376d", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nNext, I wanted to deploy the get method into BooleanArgumentMarshaler. Deploying get functions is always ugly because the return type has to be Object, and in this case needs to be cast to a Boolean.\n\npublic boolean getBoolean(char arg) {\nArgs.ArgumentMarshaler am = booleanArgs.get(arg);\nreturn am != null && (Boolean)am.get();\n}\nJust to get this to compile, I added the get function to the ArgumentMarshaler.\n\nprivate abstract class ArgumentMarshaler {\npublic Object get() {return null;}\n}\nThis compiled and obviously failed the tests. Getting the tests working again was simply a matter of making get abstract and implementing it in BooleanArgumentMarshaler.\n\nprivate abstract class ArgumentMarshaler {\nprotected boolean booleanValue = false;\npublic abstract Object get();\n}\nprivate class BooleanArgumentMarshaler extends ArgumentMarshaler {\npublic void set(String s) {booleanValue = true;}\npublic Object get() {return booleanValue;}\n}\nOnce again the tests passed. So both get and set deploy to the BooleanArgumentMarshaler!\n\nThis allowed me to remove the old getBoolean function from ArgumentMarshaler, move the protected booleanValue variable down to BooleanArgumentMarshaler, and make it private.\n\nI did the same pattern of changes for Strings. I deployed both set and get, deleted the unused functions, and moved the variables.\n\nprivate void setStringArg(char argChar) throws ArgsException {\ncurrentArgument++;\ntry {\nstringArgs.get(argChar).set(args[currentArgument]);\n} catch (ArrayIndexOutOfBoundsException e) {\nvalid = false;\nerrorArgumentId = argChar;\nerrorCode = ErrorCode.MISSING_STRING;\nthrow new ArgsException();\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1668, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c9dff9b-3da7-41f8-ba29-40c9edd1faf9": {"__data__": {"id_": "1c9dff9b-3da7-41f8-ba29-40c9edd1faf9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "477bfe58-3a30-4596-befa-265b35347458", "node_type": "4", "metadata": {}, "hash": "24295b23efcb27b076c6061476c28cabd1e8c44e65adf26ca06bc96db0f73244", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\n...public String getString(char arg) {\nArgs.ArgumentMarshaler am = stringArgs.get(arg);\nreturn am == null ? \"\" :        (String)    am.get();\n}\n...private abstract class ArgumentMarshaler {\nprivate int integerValue;\npublic void setInteger(int i) {integerValue = i;}\npublic int getInteger() {return integerValue;}\npublic abstract void set(String s);\npublic abstract Object get();\n}\nprivate class BooleanArgumentMarshaler extends ArgumentMarshaler {\nprivate boolean booleanValue = false;\npublic void set(String s) {booleanValue = true;}\npublic Object get() {return booleanValue;}\n}\nprivate class StringArgumentMarshaler extends ArgumentMarshaler {\nprivate String stringValue = \"\";\npublic void set(String s) {stringValue = s;}\npublic Object get() {return stringValue;}\n}\nprivate class IntegerArgumentMarshaler extends ArgumentMarshaler {\npublic void set(String s) {\n}\npublic Object get() {return null;}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 921, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01ed3659-b5a7-4933-921f-9129e5246699": {"__data__": {"id_": "01ed3659-b5a7-4933-921f-9129e5246699", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "797d82f5-ae36-444e-9ef4-4f1935439737", "node_type": "4", "metadata": {}, "hash": "90c97db3182f9cff94f725a62b85a568eb443d93b387a7811cc9350322557be0", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nFinally, I repeated the process for integers. This was just a little more complicated because integers needed to be parsed, and the parse operation can throw an exception. But the result is better because the whole concept of NumberFormatException got buried in the IntegerArgumentMarshaler.\n\nprivate boolean isIntArg(char argChar) {return intArgs.containsKey(argChar);}\nprivate void setIntArg(char argChar) throws ArgsException {\ncurrentArgument++;\nString parameter = null;\ntry {\nparameter = args[currentArgument];\nintArgs.get(argChar).set(parameter);\n} catch (ArrayIndexOutOfBoundsException e) {\nvalid = false;\nerrorArgumentId = argChar;\nerrorCode = ErrorCode.MISSING_INTEGER;\nthrow new ArgsException();\n} catch (ArgsException e) {\nvalid = false;\nerrorArgumentId = argChar;\nerrorParameter = parameter;\nerrorCode = ErrorCode.INVALID_INTEGER;\nthrow e;\n}\n}\n...private void setBooleanArg(char argChar) {\ntry {\nbooleanArgs.get(argChar).set(\"true\");\n} catch (ArgsException e) {\n}\n}\n...public int getInt(char arg) {\nArgs.ArgumentMarshaler am = intArgs.get(arg);\nreturn am == null ? 0 : (Integer) am.get();\n}\n...private abstract class ArgumentMarshaler {\npublic abstract void set(String s) throws ArgsException;\npublic abstract Object get();\n}\n...private class IntegerArgumentMarshaler extends ArgumentMarshaler {\nprivate int intValue = 0;\npublic void set(String s) throws ArgsException {\ntry {\nintValue = Integer.parseInt(s);\n} catch (NumberFormatException e) {\nthrow new ArgsException();\n}\n}\npublic Object get() {\nreturn intValue;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1567, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1513a2ea-688f-4952-9081-5a93963811bb": {"__data__": {"id_": "1513a2ea-688f-4952-9081-5a93963811bb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0f2e80de-f13d-443d-af52-c8a71508d0d0", "node_type": "4", "metadata": {}, "hash": "b9248d38a60c969852d6d805f27ab70b6766bf46f91b5e5e934d0f684102f028", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\nOf course, the tests continued to pass. Next, I got rid of the three different maps up at the top of the algorithm. This made the whole system much more generic. However, I couldn\u2019t get rid of them just by deleting them because that would break the system. Instead, I added a new Map for the ArgumentMarshaler and then one by one changed the methods to use it instead of the three original maps.\n\npublic class Args {\nprivate Map&lt;Character, ArgumentMarshaler&gt; booleanArgs =\nnew HashMap&lt;Character, ArgumentMarshaler&gt;();\nprivate Map&lt;Character, ArgumentMarshaler&gt; stringArgs =\nnew HashMap&lt;Character, ArgumentMarshaler&gt;();\nprivate Map&lt;Character, ArgumentMarshaler&gt; intArgs =\nnew HashMap&lt;Character, ArgumentMarshaler&gt;();\nprivate Map&lt;Character, ArgumentMarshaler&gt; marshalers =\nnew HashMap&lt;Character, ArgumentMarshaler&gt;();\n\nprivate void parseBooleanSchemaElement(char elementId) {\nArgumentMarshaler m = new BooleanArgumentMarshaler();\nbooleanArgs.put(elementId, m);\nmarshalers.put(elementId, m);\n}\n\nprivate void parseIntegerSchemaElement(char elementId) {\nArgumentMarshaler m = new IntegerArgumentMarshaler();\nintArgs.put(elementId, m);\nmarshalers.put(elementId, m);\n}\n\nprivate void parseStringSchemaElement(char elementId) {\nArgumentMarshaler m = new StringArgumentMarshaler();\nstringArgs.put(elementId, m);\nmarshalers.put(elementId, m);\n}\n}\n\nOf course the tests all still passed. Next, I changed isBooleanArg from this:\n\nprivate boolean isBooleanArg(char argChar) {\nreturn booleanArgs.containsKey(argChar);\n}\n\nto this:\n\nprivate boolean isBooleanArg(char argChar) {\nArgumentMarshaler m = marshalers.get(argChar);\nreturn m instanceof BooleanArgumentMarshaler;\n}\n\nThe tests still passed. So I made the same change to isIntArg and isStringArg.\n\nprivate boolean isIntArg(char argChar) {\nArgumentMarshaler m = marshalers.get(argChar);\nreturn m instanceof IntegerArgumentMarshaler;\n}\n\nprivate boolean isStringArg(char argChar) {\nArgumentMarshaler m = marshalers.get(argChar);\nreturn m instanceof StringArgumentMarshaler;\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2077, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ed24efe-0b9d-4608-8fc2-02d6a8d6f54a": {"__data__": {"id_": "8ed24efe-0b9d-4608-8fc2-02d6a8d6f54a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "254d5bd0-fc3c-432b-9d1b-6a309088976c", "node_type": "4", "metadata": {}, "hash": "1701b4644710e4c022bf75cbecedaa9b5522f0b957e4842eaf13c1e1749005b3", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nThe tests still passed. So I eliminated all the duplicate calls to marshalers.get as follows:\n\nprivate boolean setArgument(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\nif (isBooleanArg(m)) setBooleanArg(argChar);\nelse if (isStringArg(m)) setStringArg(argChar);\nelse if (isIntArg(m)) setIntArg(argChar);\nelse return false;\nreturn true;\n}\n\nprivate boolean isIntArg(ArgumentMarshaler m) {\nreturn m instanceof IntegerArgumentMarshaler;\n}\n\nprivate boolean isStringArg(ArgumentMarshaler m) {\nreturn m instanceof StringArgumentMarshaler;\n}\n\nprivate boolean isBooleanArg(ArgumentMarshaler m) {\nreturn m instanceof BooleanArgumentMarshaler;\n}\n\nThis left no good reason for the three isxxxArg methods. So I inlined them:\n\nprivate boolean setArgument(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\nif (m instanceof BooleanArgumentMarshaler)\nsetBooleanArg(argChar);\nelse if (m instanceof StringArgumentMarshaler)\nsetStringArg(argChar);\nelse if (m instanceof IntegerArgumentMarshaler)\nsetIntArg(argChar);\nelse return false;\nreturn true;\n}\n\nNext, I started using the marshalers map in the set functions, breaking the use of the other three maps. I started with the booleans.\n\nprivate boolean setArgument(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\nif (m instanceof BooleanArgumentMarshaler)\nsetBooleanArg(m);\nelse if (m instanceof StringArgumentMarshaler)\nsetStringArg(argChar);\nelse if (m instanceof IntegerArgumentMarshaler)\nsetIntArg(argChar);\nelse return false;\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1606, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e51cb12d-8487-408b-ab6a-7f4e51806f2e": {"__data__": {"id_": "e51cb12d-8487-408b-ab6a-7f4e51806f2e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "81b270bc-5b13-48ec-917a-1abee218d9cd", "node_type": "4", "metadata": {}, "hash": "5b632802a250741656291e72a19a49d5aef9aaa94224644dab02e481e46f5820", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\nreturn true;\n\nprivate void setBooleanArg(ArgumentMarshaler m) {\n\ntry {m.set(\"true\"); // was: booleanArgs.get(argChar).set(\"true\");\n\n} catch (ArgsException e) {\n\n}\n\nThe tests still passed, so I did the same with Strings and Integers. This allowed me to integrate some of the ugly exception management code into the setArgument function.\n\nprivate boolean setArgument(char argChar) throws ArgsException {\n\nArgumentMarshaler m = marshalers.get(argChar);\n\ntry {if (m instanceof BooleanArgumentMarshaler)\n\nsetBooleanArg(m);\n\nelse if (m instanceof StringArgumentMarshaler)\n\nsetStringArg(m);\n\nelse if (m instanceof IntegerArgumentMarshaler)\n\nsetIntArg(m);\n\nelse return false;\n\n} catch (ArgsException e) {valid = false;\n\nerrorArgumentId = argChar;\n\nthrow e;\n\n}\n\nreturn true;\n\n}\n\nprivate void setIntArg(ArgumentMarshaler m) throws ArgsException {\n\ncurrentArgument++;\n\nString parameter = null;\n\ntry {parameter = args[currentArgument];\n\nm.set(parameter);\n\n} catch (ArrayIndexOutOfBoundsException e) {\n\nerrorCode = ErrorCode.MISSING_INTEGER;\n\nthrow new ArgsException();\n\n} catch (ArgsException e) {errorParameter = parameter;\n\nerrorCode = ErrorCode.INVALID_INTEGER;\n\nthrow e;\n\n}\n\n}\n\nprivate void setStringArg(ArgumentMarshaler m) throws ArgsException {\n\ncurrentArgument++;\n\ntry {m.set(args[currentArgument]);\n\n} catch (ArrayIndexOutOfBoundsException e) {\n\nerrorCode = ErrorCode.MISSING_STRING;\n\nthrow new ArgsException();\n\n}\n\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1434, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10e75e74-dfc4-4116-bcf0-1ee1a17f8e08": {"__data__": {"id_": "10e75e74-dfc4-4116-bcf0-1ee1a17f8e08", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8d17f7f-08f9-4602-9934-10600eb86522", "node_type": "4", "metadata": {}, "hash": "abb25511676b2d234950e7874a9ef921d11c8b5cd6bb4bc19fcf1472ec24795e", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nI was close to being able to remove the three old maps. First, I needed to change the getBoolean function from this:\n\npublic boolean getBoolean(char arg) {\nArgs.ArgumentMarshaler am = booleanArgs.get(arg);\nreturn am != null && (Boolean) am.get();\n}\nto this:\n\npublic boolean getBoolean(char arg) {\nArgs.ArgumentMarshaler am = marshalers.get(arg);\nboolean b = false;\ntry { b = am != null && (Boolean) am.get();\n} catch (ClassCastException e) { b = false; }\nreturn b;\n}\nThis last change might have been a surprise. Why did I suddenly decide to deal with the ClassCastException? The reason is that I have a set of unit tests and a separate set of acceptance tests written in FitNesse. It turns out that the FitNesse tests made sure that if you called getBoolean on a nonboolean argument, you got a false. The unit tests did not. Up to this point I had only been running the unit tests.2\n\nThis last change allowed me to pull out another use of the boolean map:\n\nprivate void parseBooleanSchemaElement(char elementId) {\nArgumentMarshaler m = new BooleanArgumentMarshaler();\nbooleanArgs.put(elementId, m);\nmarshalers.put(elementId, m);\n}\nAnd now we can delete the boolean map.\n\npublic class Args {\n...private Map<Character, ArgumentMarshaler> booleanArgs =\nnew HashMap<Character, ArgumentMarshaler>();\nprivate Map<Character, ArgumentMarshaler> stringArgs =\nnew HashMap<Character, ArgumentMarshaler>();\nprivate Map<Character, ArgumentMarshaler> intArgs =\nnew HashMap<Character, ArgumentMarshaler>();\nprivate Map<Character, ArgumentMarshaler> marshalers =\n...new HashMap<Character, ArgumentMarshaler>();\n}\nNext, I migrated the String and Integer arguments in the same manner and did a little cleanup with the booleans.\n\nprivate void parseBooleanSchemaElement(char elementId) {\nmarshalers.put(elementId, new BooleanArgumentMarshaler());\n}\nTo prevent further surprises of this kind, I added a new unit test that invoked all the FitNesse tests.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1969, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83d10a9a-1f37-48ef-9cfc-5e65a5618ae4": {"__data__": {"id_": "83d10a9a-1f37-48ef-9cfc-5e65a5618ae4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a300ae8b-6907-431e-a588-7a855e38e50d", "node_type": "4", "metadata": {}, "hash": "b192fc91cb856f6df68c53e7061e19f15104195882545a3714fec06585d1540d", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\nprivate void parseIntegerSchemaElement(char elementId) {\nmarshalers.put(elementId, new IntegerArgumentMarshaler());\n}\nprivate void parseStringSchemaElement(char elementId) {\nmarshalers.put(elementId, new StringArgumentMarshaler());\n}\npublic String getString(char arg) {\nArgs.ArgumentMarshaler am = marshalers.get(arg);\ntry {\nreturn am == null ? \"\" : (String) am.get();\n} catch (ClassCastException e) {\nreturn \"\";\n}\n}\npublic int getInt(char arg) {\nArgs.ArgumentMarshaler am = marshalers.get(arg);\ntry {\nreturn am == null ? 0 : (Integer) am.get();\n} catch (Exception e) {\nreturn 0;\n}\n}\npublic class Args {\nprivate Map<Character, ArgumentMarshaler> stringArgs = new HashMap<Character, ArgumentMarshaler>();\nprivate Map<Character, ArgumentMarshaler> intArgs = new HashMap<Character, ArgumentMarshaler>();\nprivate Map<Character, ArgumentMarshaler> marshalers = new HashMap<Character, ArgumentMarshaler>();\nprivate void parseSchemaElement(String element) throws ParseException {\nchar elementId = element.charAt(0);\nString elementTail = element.substring(1);\nvalidateSchemaElementId(elementId);\nif (isBooleanSchemaElement(elementTail))\nmarshalers.put(elementId, new BooleanArgumentMarshaler());\nelse if (isStringSchemaElement(elementTail))\nmarshalers.put(elementId, new StringArgumentMarshaler());\nelse if (isIntegerSchemaElement(elementTail)) {\nmarshalers.put(elementId, new IntegerArgumentMarshaler());\n} else {\nthrow new ParseException(String.format(\n\"Argument: %c has invalid format: %s.\", elementId, elementTail), 0);\n}\n}\n}\n\nOkay, so now let\u2019s look at the whole picture again. Listing 14-12 shows the current form of the Args class.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1650, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f357bcc0-28eb-4ac4-8c15-4644e0891cab": {"__data__": {"id_": "f357bcc0-28eb-4ac4-8c15-4644e0891cab", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d5f71016-c79e-4024-b898-0f87bc436f6c", "node_type": "4", "metadata": {}, "hash": "9558e74d49d9ed9c5182191bbfcd9a89fa3640c97d402a8063ed4781ef8b1084", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-12\n\n# Args.java (After first refactoring)\n\npackage com.objectmentor.utilities.getopts;\nimport java.text.ParseException;\nimport java.util.*;\n\npublic class Args {\nprivate String schema;\nprivate String[] args;\nprivate boolean valid = true;\nprivate Set<Character> unexpectedArguments = new TreeSet<Character>();\nprivate Map<Character, ArgumentMarshaler> marshalers = new HashMap<Character, ArgumentMarshaler>();\nprivate Set<Character> argsFound = new HashSet<Character>();\nprivate int currentArgument;\nprivate char errorArgumentId = '\\0';\nprivate String errorParameter = \"TILT\";\nprivate ErrorCode errorCode = ErrorCode.OK;\n\nprivate enum ErrorCode {OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT}\n\npublic Args(String schema, String[] args) throws ParseException {\nthis.schema = schema;\nthis.args = args;\nvalid = parse();\n}\n\nprivate boolean parse() throws ParseException {\nif (schema.length() == 0 && args.length == 0) return true;\nparseSchema();\ntry {\nparseArguments();\n} catch (ArgsException e) {\n}\nreturn valid;\n}\n\nprivate boolean parseSchema() throws ParseException {\nfor (String element : schema.split(\",\")) {\nif (element.length() > 0) {\nString trimmedElement = element.trim();\nparseSchemaElement(trimmedElement);\n}\n}\nreturn true;\n}\n\nprivate void parseSchemaElement(String element) throws ParseException {\nchar elementId = element.charAt(0);\nString elementTail = element.substring(1);\nvalidateSchemaElementId(elementId);\nif (isBooleanSchemaElement(elementTail))\nmarshalers.put(elementId, new BooleanArgumentMarshaler());\nelse if (isStringSchemaElement(elementTail))\nmarshalers.put(elementId, new StringArgumentMarshaler());\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1703, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b91eb20-3c3d-4e31-aa7c-6f2585382a7c": {"__data__": {"id_": "3b91eb20-3c3d-4e31-aa7c-6f2585382a7c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1f31637e-fd02-43ba-85f5-1d76a29edc45", "node_type": "4", "metadata": {}, "hash": "2e9f7a7639e643629d2c638497f5b2c170d5ed30cbce0176b7a3f36f4b87f95a", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\n# Listing 14-12 (continued)\n\nArgs.java (After first refactoring)\nelse if (isIntegerSchemaElement(elementTail)) {\nmarshalers.put(elementId, new IntegerArgumentMarshaler());\n} else {\nthrow new ParseException(String.format(\n\"Argument: %c has invalid format: %s.\", elementId, elementTail), 0);\n}\n}\nprivate void validateSchemaElementId(char elementId) throws ParseException {\nif throw new ParseException((!Character.isLetter(elementId)) {\n\"Bad character:\" + elementId + \"in Args format: \" + schema, 0);\n}\n}\nprivate boolean isStringSchemaElement(String elementTail) {\nreturn elementTail.equals(\"*\");\n}\nprivate boolean isBooleanSchemaElement(String elementTail) {\nreturn elementTail.length() == 0;\n}\nprivate boolean isIntegerSchemaElement(String elementTail) {\nreturn elementTail.equals(\"#\");\n}\nprivate boolean parseArguments() throws ArgsException {\nfor (currentArgument=0; currentArgument<args.length; currentArgument++) {\nString arg = args[currentArgument];\nparseArgument(arg);\n}\nreturn true;\n}\nprivate void parseArgument(String arg) throws ArgsException {\nif parseElements(arg);(arg.startsWith(\"-\"))\n}\nprivate void parseElements(String arg) throws ArgsException {\nfor (int i = 1; i < arg.length(); i++)\nparseElement(arg.charAt(i));\n}\nprivate void parseElement(char argChar) throws ArgsException {\nif argsFound.add(argChar);(setArgument(argChar))\nelse {\nunexpectedArguments.add(argChar);\nerrorCode = ErrorCode.UNEXPECTED_ARGUMENT;\nvalid = false;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1465, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0571b00d-9832-4575-9aaf-9317b4b68621": {"__data__": {"id_": "0571b00d-9832-4575-9aaf-9317b4b68621", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b5438909-29ce-4865-8e7f-5780a68edc89", "node_type": "4", "metadata": {}, "hash": "bdeff85173e51f92c315d29d887871c1f3251c94e7ad13d1513236cb5ef4b980", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-12 (continued)\n\nArgs.java (After first refactoring)\nprivate boolean setArgument(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\ntry {\nif (m instanceof BooleanArgumentMarshaler)\nsetBooleanArg(m);\nelse if (m instanceof StringArgumentMarshaler)\nsetStringArg(m);\nelse if (m instanceof IntegerArgumentMarshaler)\nsetIntArg(m);\nelse\nreturn false;\n} catch (ArgsException e) {\nvalid = false;\nerrorArgumentId = argChar;\nthrow e;\n}\nreturn true;\n}\n\nprivate void setIntArg(ArgumentMarshaler m) throws ArgsException {\ncurrentArgument++;\nString parameter = null;\ntry {\nparameter = args[currentArgument];\nm.set(parameter);\n} catch (ArrayIndexOutOfBoundsException e) {\nerrorCode = ErrorCode.MISSING_INTEGER;\nthrow new ArgsException();\n} catch (ArgsException e) {\nerrorParameter = parameter;\nerrorCode = ErrorCode.INVALID_INTEGER;\nthrow e;\n}\n}\n\nprivate void setStringArg(ArgumentMarshaler m) throws ArgsException {\ncurrentArgument++;\ntry {\nm.set(args[currentArgument]);\n} catch (ArrayIndexOutOfBoundsException e) {\nerrorCode = ErrorCode.MISSING_STRING;\nthrow new ArgsException();\n}\n}\n\nprivate void setBooleanArg(ArgumentMarshaler m) {\ntry {\nm.set(\"true\");\n} catch (ArgsException e) {\n}\n}\n\npublic int cardinality() {\nreturn argsFound.size();\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1310, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7df48a73-ffa3-4405-9e62-da3bb4e88690": {"__data__": {"id_": "7df48a73-ffa3-4405-9e62-da3bb4e88690", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6daf7c8d-169c-4e71-b3aa-7d656c5aa335", "node_type": "4", "metadata": {}, "hash": "adf3756f4d736bda74887752417a8a47321f3a63faae21a82aa7dfc79aceebae", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\n# Listing 14-12 (continued)\n\nArgs.java (After first refactoring)\npublic String usage() {\nif (schema.length() > 0)\nreturn \"-[\" + schema + \"]\";\nelse\nreturn \"\";\n}\n\npublic String errorMessage() throws Exception {\nswitch (errorCode) {\ncase OK:\nthrow new Exception(\"TILT: Should not get here.\");\ncase UNEXPECTED_ARGUMENT:\nreturn unexpectedArgumentMessage();\ncase MISSING_STRING:\nreturn String.format(\"Could not find string parameter for -%c.\", errorArgumentId);\ncase INVALID_INTEGER:\nreturn String.format(\"Argument -%c expects an integer but was '%s'.\", errorArgumentId, errorParameter);\ncase MISSING_INTEGER:\nreturn String.format(\"Could not find integer parameter for -%c.\", errorArgumentId);\n}\nreturn \"\";\n}\n\nprivate String unexpectedArgumentMessage() {\nStringBuffer message = new StringBuffer(\"Argument(s) -\");\nfor (char c : unexpectedArguments) {\nmessage.append(c);\n}\nmessage.append(\" unexpected.\");\nreturn message.toString();\n}\n\npublic boolean getBoolean(char arg) {\nArgs.ArgumentMarshaler am = marshalers.get(arg);\nboolean b = false;\ntry {\nb = am != null && (Boolean) am.get();\n} catch (ClassCastException e) {\nb = false;\n}\nreturn b;\n}\n\npublic String getString(char arg) {\nArgs.ArgumentMarshaler am = marshalers.get(arg);\ntry {\nreturn am == null ? \"\" : (String) am.get();\n} catch (ClassCastException e) {\nreturn \"\";\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1338, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "85c39591-d095-4b98-9ad2-416b4d785079": {"__data__": {"id_": "85c39591-d095-4b98-9ad2-416b4d785079", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c5098d1-0a4a-4d55-95ee-6df2759dfe96", "node_type": "4", "metadata": {}, "hash": "da98255bd2a3e54a2ba175a90ff5e98b8a144be82bbd1c69ac15d62c85ae8b9f", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-12 (continued)\n\nArgs.java (After first refactoring)\npublic int getInt(char arg) {\nArgs.ArgumentMarshaler am = marshalers.get(arg);\ntry {\nreturn am == null ? 0 : (Integer) am.get();\n} catch (Exception e) {\nreturn 0;\n}\n}\n\npublic boolean has(char arg) {\nreturn argsFound.contains(arg);\n}\n\npublic boolean isValid() {\nreturn valid;\n}\n\nprivate class ArgsException extends Exception {\n}\n\nprivate abstract class ArgumentMarshaler {\npublic abstract void set(String s) throws ArgsException;\npublic abstract Object get();\n}\n\nprivate class BooleanArgumentMarshaler extends ArgumentMarshaler {\nprivate boolean booleanValue = false;\npublic void set(String s) {\nbooleanValue = true;\n}\npublic Object get() {\nreturn booleanValue;\n}\n}\n\nprivate class StringArgumentMarshaler extends ArgumentMarshaler {\nprivate String stringValue = \"\";\npublic void set(String s) {\nstringValue = s;\n}\npublic Object get() {\nreturn stringValue;\n}\n}\n\nprivate class IntegerArgumentMarshaler extends ArgumentMarshaler {\nprivate int intValue = 0;\npublic void set(String s) throws ArgsException {\ntry {\nintValue = Integer.parseInt(s);\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1142, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aaae221b-980c-4afe-abf4-d924b9b8e8d4": {"__data__": {"id_": "aaae221b-980c-4afe-abf4-d924b9b8e8d4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3f93af7-81e2-4537-b9b6-bccfe8312be8", "node_type": "4", "metadata": {}, "hash": "b3f2097e994d6d1cd30ddaf0fe47d56ca29392eafaefeafdaae33f04b3649e5a", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\n# Listing 14-12 (continued)\n\nArgs.java (After first refactoring)\n} catch (NumberFormatException e) {\nthrow new ArgsException();\n}\n}\npublic Object get() {return intValue;\n}\n}\n\nAfter all that work, this is a bit disappointing. The structure is a bit better, but we still have all those variables up at the top; there\u2019s still a horrible type-case in setArgument; and all those set functions are really ugly. Not to mention all the error processing. We still have a lot of work ahead of us.\n\nI\u2019d really like to get rid of that type-case up in setArgument [G23]. What I\u2019d like in setArgument is a single call to ArgumentMarshaler.set. This means I need to push setIntArg, setStringArg, and setBooleanArg down into the appropriate ArgumentMarshaler derivatives. But there is a problem.\n\nIf you look closely at setIntArg, you\u2019ll notice that it uses two instance variables: args and currentArg. To move setIntArg down into BooleanArgumentMarshaler, I\u2019ll have to pass both args and currentArgs as function arguments. That\u2019s dirty [F1]. I\u2019d rather pass one argument instead of two. Fortunately, there is a simple solution. We can convert the args array into a list and pass an Iterator down to the set functions. The following took me ten steps, passing all the tests after each. But I\u2019ll just show you the result. You should be able to figure out what most of the tiny little steps were.\n\npublic class Args {\nprivate String schema;\nprivate String[] args;\nprivate boolean valid = true;\nprivate Set<Character> unexpectedArguments = new TreeSet<Character>();\nprivate Map<Character, ArgumentMarshaler> marshalers = new HashMap<Character, ArgumentMarshaler>();\nprivate Set<Character> argsFound = new HashSet<Character>();\nprivate Iterator<String> currentArgument;\nprivate char errorArgumentId = '\\0';\nprivate String errorParameter = \"TILT\";\nprivate ErrorCode errorCode = ErrorCode.OK;\nprivate List<String> argsList;\nprivate enum ErrorCode {OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT}\npublic Args(String schema, String[] args) throws ParseException {\nthis.schema = schema;\nargsList = Arrays.asList(args);\nvalid = parse();\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2159, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "091d4173-5e9a-4381-92d0-4bb4b53a36e2": {"__data__": {"id_": "091d4173-5e9a-4381-92d0-4bb4b53a36e2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d959bfd-bb64-47f7-911c-9c083ab1c30d", "node_type": "4", "metadata": {}, "hash": "36eb6392460a3317a8891834868302294ce86122dbe0c542d096bad5b379ed00", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nprivate boolean parse() throws ParseException {\nif return true;(schema.length() == 0 && argsList.size() == 0)\nparseSchema();\ntry {parseArguments();\n} catch (ArgsException e) {\n}\nreturn valid;\n}\n\nprivate boolean parseArguments() throws ArgsException {\nfor (currentArgument = argsList.iterator(); currentArgument.hasNext();) {\nString arg = currentArgument.next();\nparseArgument(arg);\n}\nreturn true;\n}\n\nprivate void setIntArg(ArgumentMarshaler m) throws ArgsException {\nString parameter = null;\ntry {\nparameter = currentArgument.next();\nm.set(parameter);\n} catch (NoSuchElementException e) {\nerrorCode = ErrorCode.MISSING_INTEGER;\nthrow new ArgsException();\n} catch (ArgsException e) {\nerrorParameter = parameter;\nerrorCode = ErrorCode.INVALID_INTEGER;\nthrow e;\n}\n}\n\nprivate void setStringArg(ArgumentMarshaler m) throws ArgsException {\ntry {\n} catch (NoSuchElementException m.set(currentArgument.next()); e) {\nerrorCode = ErrorCode.MISSING_STRING;\nthrow new ArgsException();\n}\n}\n\nThese were simple changes that kept all the tests passing. Now we can start moving the set functions down into the appropriate derivatives. First, I need to make the following change in setArgument:\n\nprivate boolean setArgument(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\nif (m == null) return false;\ntry {\nif (m instanceof BooleanArgumentMarshaler)\nsetBooleanArg(m);\nelse if (m instanceof StringArgumentMarshaler)\nsetStringArg(m);\nelse if (m instanceof IntegerArgumentMarshaler)\nsetIntArg(m);\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1552, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8afc509-eff8-4ce5-b58c-be6e29cf6f09": {"__data__": {"id_": "a8afc509-eff8-4ce5-b58c-be6e29cf6f09", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d7cb1dc2-af40-42ae-ba9f-700904bf5a95", "node_type": "4", "metadata": {}, "hash": "d090894a34faa6bae5bcc6a84039fb427c4bcb7c2d3ae976917ea2e0ac13ac92", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\nelsereturn false;\n\ncatch (ArgsException e) {valid = false; errorArgumentId = argChar; throw e;}\n\nreturn true;\n\nThis change is important because we want to completely eliminate the if-else chain. Therefore, we needed to get the error condition out of it.\n\nNow we can start to move the set functions. The setBooleanArg function is trivial, so we\u2019ll prepare that one first. Our goal is to change the setBooleanArg function to simply forward to the BooleanArgumentMarshaler.\n\nprivate boolean setArgument(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\nif return false;(m == null)\ntry {\nif (m instanceof BooleanArgumentMarshaler)\nsetBooleanArg(m, currentArgument);\nelse if (m instanceof StringArgumentMarshaler)\nsetStringArg(m);\nelse if (m instanceof IntegerArgumentMarshaler)\nsetIntArg(m);\n} catch (ArgsException e) {\nvalid = false;\nerrorArgumentId = argChar;\nthrow e;\n}\nreturn true;\n}\nprivate void setBooleanArg(ArgumentMarshaler m, Iterator<String> currentArgument) throws ArgsException {\ntry {\nm.set(\"true\");\n} catch (ArgsException e) {\n}\n}\nDidn\u2019t we just put that exception processing in? Putting things in so you can take them out again is pretty common in refactoring. The smallness of the steps and the need to keep the tests running means that you move things around a lot. Refactoring is a lot like solving a Rubik\u2019s cube. There are lots of little steps required to achieve a large goal. Each step enables the next.\n\nWhy did we pass that iterator when setBooleanArg certainly doesn\u2019t need it? Because setIntArg and setStringArg will! And because I want to deploy all three of these functions through an abstract method in ArgumentMarshaller, I need to pass it to setBooleanArg.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1738, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f9b74eb-8552-4bdb-a213-8dc926f2d246": {"__data__": {"id_": "8f9b74eb-8552-4bdb-a213-8dc926f2d246", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b2511b1e-1be2-4a93-ba44-9dc973a0a9fd", "node_type": "4", "metadata": {}, "hash": "0a2602727a91f7a95122cc81821f631e2c21e24c8804c5a2137d520b26d443ea", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nSo now setBooleanArg is useless. If there were a set function in ArgumentMarshaler, we could call it directly. So it\u2019s time to make that function! The first step is to add the new abstract method to ArgumentMarshaler.\n\nprivate abstract class ArgumentMarshaler {\npublic abstract void set(Iterator&lt;String&gt; currentArgument) throws ArgsException;\npublic abstract void set(String s) throws ArgsException;\npublic abstract Object get();\n}\nOf course this breaks all the derivatives. So let\u2019s implement the new method in each.\n\nprivate class BooleanArgumentMarshaler extends ArgumentMarshaler {\nprivate boolean booleanValue = false;\npublic void set(Iterator&lt;String&gt; currentArgument) throws ArgsException {\nbooleanValue = true;\n}\npublic void set(String s) {\nbooleanValue = true;\n}\npublic Object get() {\nreturn booleanValue;\n}\n}\nprivate class StringArgumentMarshaler extends ArgumentMarshaler {\nprivate String stringValue = \"\";\npublic void set(Iterator&lt;String&gt; currentArgument) throws ArgsException {\n}\npublic void set(String s) {\nstringValue = s;\n}\npublic Object get() {\nreturn stringValue;\n}\n}\nprivate class IntegerArgumentMarshaler extends ArgumentMarshaler {\nprivate int intValue = 0;\npublic void set(Iterator&lt;String&gt; currentArgument) throws ArgsException {\n}\npublic void set(String s) throws ArgsException {\ntry {\nintValue = Integer.parseInt(s);\n} catch (NumberFormatException e) {\nthrow new ArgsException();\n}\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd186674-52e1-4191-b6b0-4f34b5c33739": {"__data__": {"id_": "fd186674-52e1-4191-b6b0-4f34b5c33739", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "365027d3-bb03-4a81-8da3-a962a2555411", "node_type": "4", "metadata": {}, "hash": "f769a24b808804d1219fd583e6c05ea5e29d3477edb162392da7c13346f328f2", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\npublic Object get() {return intValue;\n}\n}\nAnd now we can eliminate setBooleanArg!\nprivate boolean setArgument(char argChar) throws ArgsException {ArgumentMarshaler m = marshalers.get(argChar);\nif return false;(m == null)\ntry {if (m instanceof BooleanArgumentMarshaler)\nm.set(currentArgument);\nelse if (m instanceof StringArgumentMarshaler)\nsetStringArg(m);\nelse if (m instanceof IntegerArgumentMarshaler)\nsetIntArg(m);\n} catch (ArgsException e) {valid = false;\nerrorArgumentId = argChar;\nthrow e;\n}\nreturn true;\n}\nThe tests all pass, and the set function is deploying to BooleanArgumentMarshaler!\nNow we can do the same for Strings and Integers.\nprivate boolean setArgument(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\nif (m == null)return false;\ntry {if (m instanceof BooleanArgumentMarshaler)\nm.set(currentArgument);\nelse if (m instanceof StringArgumentMarshaler)\nm.set(currentArgument);\nelse if (m instanceof IntegerArgumentMarshaler)\nm.set(currentArgument);\n} catch (ArgsException e) {valid = false;\nerrorArgumentId = argChar;\nthrow e;\n}\nreturn true;\n}\n---private class StringArgumentMarshaler extends ArgumentMarshaler {\nprivate String stringValue = \"\";\npublic void set(Iterator<String> currentArgument) throws ArgsException {\ntry {stringValue = currentArgument.next();\n} catch (NoSuchElementException e) {errorCode = ErrorCode.MISSING_STRING;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1407, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bbeff375-3182-41a1-b261-d3d0fc381850": {"__data__": {"id_": "bbeff375-3182-41a1-b261-d3d0fc381850", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "92efdd71-4c98-4e32-8a26-73bfeffa15f7", "node_type": "4", "metadata": {}, "hash": "eb8357dbc28ef3fd4f15115ec3a9d1fb777bb003bf28592abe8ee82940714922", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nthrow new ArgsException();\n}\npublic void set(String s) {\n}\npublic Object get() {return stringValue;\n}\nprivate class IntegerArgumentMarshaler extends ArgumentMarshaler {\nprivate int intValue = 0;\npublic void set(Iterator<String> currentArgument) throws ArgsException {\nString parameter = null;\ntry {\nparameter = currentArgument.next();\nset(parameter);\n} catch (NoSuchElementException e) {\nerrorCode = ErrorCode.MISSING_INTEGER;\nthrow new ArgsException();\n} catch (ArgsException e) {\nerrorParameter = parameter;\nerrorCode = ErrorCode.INVALID_INTEGER;\nthrow e;\n}\n}\npublic void set(String s) throws ArgsException {\ntry {\nintValue = Integer.parseInt(s);\n} catch (NumberFormatException e) {\nthrow new ArgsException();\n}\n}\npublic Object get() {return intValue;\n}\n}\nAnd so the coup de grace: The type-case can be removed! Touche!\nprivate boolean setArgument(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\nif (m == null) return false;\ntry {\nm.set(currentArgument);\nreturn true;\n} catch (ArgsException e) {\nvalid = false;\nerrorArgumentId = argChar;\nthrow e;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4550aae7-b224-4382-9aae-b71e938f6af2": {"__data__": {"id_": "4550aae7-b224-4382-9aae-b71e938f6af2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6526a161-6d12-44f7-8179-cc640fe3430a", "node_type": "4", "metadata": {}, "hash": "9d7996b640383c8f0cc1b90c878c2d0e43d1fb9eb78c5e62b820ee69946061a7", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\nNow we can get rid of some crufty functions in IntegerArgumentMarshaler and clean it up a bit.\n\nprivate class IntegerArgumentMarshaler extends ArgumentMarshaler {\nprivate int intValue = 0;\npublic void set(Iterator&lt;String&gt; currentArgument) throws ArgsException {\nString parameter = null;\ntry {\nparameter = currentArgument.next();\nintValue = Integer.parseInt(parameter);\n} catch (NoSuchElementException e) {\nerrorCode = ErrorCode.MISSING_INTEGER;\nthrow new ArgsException();\n} catch (NumberFormatException e) {\nerrorParameter = parameter;\nerrorCode = ErrorCode.INVALID_INTEGER;\nthrow new ArgsException();\n}\n}\npublic Object get() {\nreturn intValue;\n}\n}\nWe can also turn ArgumentMarshaler into an interface.\n\nprivate interface ArgumentMarshaler {\nvoid set(Iterator&lt;String&gt; currentArgument) throws ArgsException;\nObject get();\n}\nSo now let\u2019s see how easy it is to add a new argument type to our structure. It should require very few changes, and those changes should be isolated. First, we begin by adding a new test case to check that the double argument works correctly.\n\npublic void testSimpleDoublePresent() throws Exception {\nArgs args = new Args(\"x##\", new String[] {\"-x\",\"42.3\"});\nassertTrue(args.isValid());\nassertEquals(1, args.cardinality());\nassertTrue(args.has('x'));\nassertEquals(42.3, args.getDouble('x'), .001);\n}\nNow we clean up the schema parsing code and add the ## detection for the double argument type.\n\nprivate void parseSchemaElement(String element) throws ParseException {\nchar elementId = element.charAt(0);\nString elementTail = element.substring(1);\nvalidateSchemaElementId(elementId);\nif (elementTail.length() == 0) {\nmarshalers.put(elementId, new BooleanArgumentMarshaler());\n} else if (elementTail.equals(\"*\")) {\nmarshalers.put(elementId, new StringArgumentMarshaler());\n} else if (elementTail.equals(\"#\")) {\nmarshalers.put(elementId, new IntegerArgumentMarshaler());\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1926, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d08b21af-0ed9-4752-9ba8-f5c2c3ce494a": {"__data__": {"id_": "d08b21af-0ed9-4752-9ba8-f5c2c3ce494a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5538af5-739f-422e-8fd4-842a95100454", "node_type": "4", "metadata": {}, "hash": "fb501b29864d1e14574d741f69a2e4eb9275b6ab8e7c58de0e26360a73f17498", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nelse if (elementTail.equals(\"##\")) marshalers.put(elementId, new DoubleArgumentMarshaler());\n\nelse throw new ParseException(String.format(\"Argument: %c has invalid format: %s.\", elementId, elementTail), 0);\n\nNext, we write the DoubleArgumentMarshaler class.\n\nprivate class DoubleArgumentMarshaler implements ArgumentMarshaler {\nprivate double doubleValue = 0;\npublic void set(Iterator<String> currentArgument) throws ArgsException {\nString parameter = null;\ntry {\nparameter = currentArgument.next();\ndoubleValue = Double.parseDouble(parameter);\n} catch (NoSuchElementException e) {\nerrorCode = ErrorCode.MISSING_DOUBLE;\nthrow new ArgsException();\n} catch (NumberFormatException e) {\nerrorParameter = parameter;\nerrorCode = ErrorCode.INVALID_DOUBLE;\nthrow new ArgsException();\n}\n}\npublic Object get() {\nreturn doubleValue;\n}\n}\n\nThis forces us to add a new ErrorCode.\n\nprivate enum ErrorCode {OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT,\nMISSING_DOUBLE, INVALID_DOUBLE}\n\nAnd we need a getDouble function.\n\npublic double getDouble(char arg) {\nArgs.ArgumentMarshaler am = marshalers.get(arg);\ntry {\nreturn am == null ? 0 : (Double) am.get();\n} catch (Exception e) {\nreturn 0.0;\n}\n}\n\nAnd all the tests pass! That was pretty painless. So now let\u2019s make sure all the error processing works correctly. The next test case checks that an error is declared if an unparseable string is fed to a ## argument.\n\npublic void testInvalidDouble() throws Exception {\nArgs args = new Args(\"x##\", new String[] {\"-x\",\"Forty two\"});\nassertFalse(args.isValid());\nassertEquals(0, args.cardinality());\nassertFalse(args.has('x'));\nassertEquals(0, args.getInt('x'));\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1707, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ea710cc-8d20-4301-a415-dd45dcbd8464": {"__data__": {"id_": "3ea710cc-8d20-4301-a415-dd45dcbd8464", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b01bb83-5716-45f4-8fa4-52c27394eac3", "node_type": "4", "metadata": {}, "hash": "44d0e991809a4b4b60546b8240bbf84fc81a5c1bfcae6967606719694dc4968f", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\nassertEquals(\"Argument -x expects a double but was 'Forty two'.\",args.errorMessage());\n\npublic String errorMessage() throws Exception {\nswitch (errorCode) {\ncase OK:\nthrow new Exception(\"TILT: Should not get here.\");\ncase UNEXPECTED_ARGUMENT:\nreturn unexpectedArgumentMessage();\ncase MISSING_STRING:\nreturn String.format(\"Could not find string parameter for -%c.\", errorArgumentId);\ncase INVALID_INTEGER:\nreturn String.format(\"Argument -%c expects an integer but was '%s'.\", errorArgumentId, errorParameter);\ncase MISSING_INTEGER:\nreturn String.format(\"Could not find integer parameter for -%c.\", errorArgumentId);\ncase INVALID_DOUBLE:\nreturn String.format(\"Argument -%c expects a double but was '%s'.\", errorArgumentId, errorParameter);\ncase MISSING_DOUBLE:\nreturn String.format(\"Could not find double parameter for -%c.\", errorArgumentId);\n}\nreturn \"\";\n}\n\nAnd the tests pass. The next test makes sure we detect a missing double argument properly.\n\npublic void testMissingDouble() throws Exception {\nArgs args = new Args(\"x##\", new String[]{\"-x\"});\nassertFalse(args.isValid());\nassertEquals(0, args.cardinality());\nassertFalse(args.has('x'));\nassertEquals(0.0, args.getDouble('x'), 0.01);\nassertEquals(\"Could not find double parameter for -x.\", args.errorMessage());\n}\n\nThis passes as expected. We wrote it simply for completeness.\n\nThe exception code is pretty ugly and doesn\u2019t really belong in the Args class. We are also throwing out ParseException, which doesn\u2019t really belong to us. So let\u2019s merge all the exceptions into a single ArgsException class and move it into its own module.\n\npublic class ArgsException extends Exception {\nprivate char errorArgumentId = '\\0';\nprivate String errorParameter = \"TILT\";\nprivate ErrorCode errorCode = ErrorCode.OK;\npublic ArgsException() {}\npublic ArgsException(String message) {super(message);}\npublic enum ErrorCode {OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT, MISSING_DOUBLE, INVALID_DOUBLE}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1991, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9dfe52ed-3e43-4ab7-bc59-c81bbc1477bf": {"__data__": {"id_": "9dfe52ed-3e43-4ab7-bc59-c81bbc1477bf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2679f2d0-c56c-4e2a-86fb-f52ac438a56e", "node_type": "4", "metadata": {}, "hash": "f2c8129eeb58619187c82b63e891770f99c449a282afdf44503adeaec44b794d", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\npublic class Args {\n...\nprivate char errorArgumentId = '\\0';\nprivate String errorParameter = \"TILT\";\nprivate ArgsException.ErrorCode errorCode = ArgsException.ErrorCode.OK;\nprivate List<String> argsList;\n\npublic Args(String schema, String[] args) throws ArgsException {\nthis.schema = schema;\nargsList = Arrays.asList(args);\nvalid = parse();\n}\n\nprivate boolean parse() throws ArgsException {\nif (schema.length() == 0 && argsList.size() == 0)\nreturn true;\nparseSchema();\ntry {\nparseArguments();\n} catch (ArgsException e) {\n}\nreturn valid;\n}\n\nprivate boolean parseSchema() throws ArgsException {\n...\n}\n\nprivate void parseSchemaElement(String element) throws ArgsException {\n...\nelse throw new ArgsException(\nString.format(\"Argument: %c has invalid format: %s.\", elementId, elementTail));\n}\n\nprivate void validateSchemaElementId(char elementId) throws ArgsException {\nif (!Character.isLetter(elementId)) {\nthrow new ArgsException(\n\"Bad character:\" + elementId + \"in Args format: \" + schema);\n}\n}\n...\nprivate void parseElement(char argChar) throws ArgsException {\nif (setArgument(argChar)) argsFound.add(argChar);\nelse {\nunexpectedArguments.add(argChar);\nerrorCode = ArgsException.ErrorCode.UNEXPECTED_ARGUMENT;\nvalid = false;\n}\n}\n...", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1266, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8df15780-7f3c-404b-957d-0d1a88ff55af": {"__data__": {"id_": "8df15780-7f3c-404b-957d-0d1a88ff55af", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7db29dd5-3b0f-4114-af3e-544f12562230", "node_type": "4", "metadata": {}, "hash": "3196e02bcfaaa4625a1b7397c7c4c4c530a3ea5dc420720d2186ffa8f73d3da5", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\nprivate class StringArgumentMarshaler implements ArgumentMarshaler {\nprivate String stringValue = \"\";\npublic void set(Iterator<String> currentArgument) throws ArgsException {\ntry {\nstringValue = currentArgument.next();\n} catch (NoSuchElementException e) {\nerrorCode = ArgsException.ErrorCode.MISSING_STRING;\nthrow new ArgsException();\n}\n}\npublic Object get() {\nreturn stringValue;\n}\n}\n\nprivate class IntegerArgumentMarshaler implements ArgumentMarshaler {\nprivate int intValue = 0;\npublic void set(Iterator<String> currentArgument) throws ArgsException {\nString parameter = null;\ntry {\nparameter = currentArgument.next();\nintValue = Integer.parseInt(parameter);\n} catch (NoSuchElementException e) {\nerrorCode = ArgsException.ErrorCode.MISSING_INTEGER;\nthrow new ArgsException();\n} catch (NumberFormatException e) {\nerrorParameter = parameter;\nerrorCode = ArgsException.ErrorCode.INVALID_INTEGER;\nthrow new ArgsException();\n}\n}\npublic Object get() {\nreturn intValue;\n}\n}\n\nprivate class DoubleArgumentMarshaler implements ArgumentMarshaler {\nprivate double doubleValue = 0;\npublic void set(Iterator<String> currentArgument) throws ArgsException {\nString parameter = null;\ntry {\nparameter = currentArgument.next();\ndoubleValue = Double.parseDouble(parameter);\n} catch (NoSuchElementException e) {\nerrorCode = ArgsException.ErrorCode.MISSING_DOUBLE;\nthrow new ArgsException();\n} catch (NumberFormatException e) {\nerrorParameter = parameter;\nerrorCode = ArgsException.ErrorCode.INVALID_DOUBLE;\nthrow new ArgsException();\n}\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1541, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "362b4396-f019-4996-8572-c8f5b07d01a6": {"__data__": {"id_": "362b4396-f019-4996-8572-c8f5b07d01a6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "417fbe10-311b-4221-adce-6d8f1c8a3d2b", "node_type": "4", "metadata": {}, "hash": "20707e1bf26088c45fba0a77171ce0827e32792290932911e9e1461283411b35", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\npublic Object get() {return doubleValue;\n\n}\n\n}\n\nThis is nice. Now the only exception thrown by Args is ArgsException. Moving ArgsException into its own module means that we can move a lot of the miscellaneous error support code into that module and out of the Args module. It provides a natural and obvious place to put all that code and will really help us clean up the Args module going forward.\n\nSo now we have completely separated the exception and error code from the Args module. (See Listing 14-13 through Listing 14-16.) This was achieved through a series of about 30 tiny steps, keeping the tests passing between each step.\n\n# Listing 14-13\n\n# ArgsTest.java\n\npackage com.objectmentor.utilities.args;\nimport junit.framework.TestCase;\n\npublic class ArgsTest extends TestCase {\npublic void testCreateWithNoSchemaOrArguments() throws Exception {\nArgs args = new Args(\"\", new String[0]);\nassertEquals(0, args.cardinality());\n}\npublic void testWithNoSchemaButWithOneArgument() throws Exception {\ntry {\nnew Args(\"\", new String[]{\"-x\"});\nfail();\n} catch (ArgsException e) {\nassertEquals(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT, e.getErrorCode());\nassertEquals('x', e.getErrorArgumentId());\n}\n}\npublic void testWithNoSchemaButWithMultipleArguments() throws Exception {\ntry {\nnew Args(\"\", new String[]{\"-x\", \"-y\"});\nfail();\n} catch (ArgsException e) {\nassertEquals(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT, e.getErrorCode());\nassertEquals('x', e.getErrorArgumentId());\n}\n}\npublic void testNonLetterSchema() throws Exception {\ntry {\nnew Args(\"*\", new String[]{});\nfail(\"Args constructor should have thrown exception\");\n} catch (ArgsException e) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1688, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6efbd2ac-fb3c-4baa-8134-302499cca2e6": {"__data__": {"id_": "6efbd2ac-fb3c-4baa-8134-302499cca2e6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19ae6b6d-2bbc-4709-9c27-1d196e5814cc", "node_type": "4", "metadata": {}, "hash": "8943d6d923cd1e64f22f6652c1f0f43543c552adf76f03de84f6c756125c343d", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\n# Listing 14-13 (continued)\n\nArgsTest.java\nassertEquals(ArgsException.ErrorCode.INVALID_ARGUMENT_NAME,e.getErrorCode());\nassertEquals('*', e.getErrorArgumentId());\n}\n}\npublic void testInvalidArgumentFormat() throws Exception {\ntry {new Args(\"f~\", new String[]{});\nfail(\"Args constructor should have throws exception\");\n} catch (ArgsException e) {\nassertEquals(ArgsException.ErrorCode.INVALID_FORMAT, e.getErrorCode());\nassertEquals('f', e.getErrorArgumentId());\n}\n}\npublic void testSimpleBooleanPresent() throws Exception {\nArgs args = new Args(\"x\", new String[]{\"-x\"});\nassertEquals(1, args.cardinality());\nassertEquals(true, args.getBoolean('x'));\n}\npublic void testSimpleStringPresent() throws Exception {\nArgs args = new Args(\"x*\", new String[]{\"-x\", \"param\"});\nassertEquals(1, args.cardinality());\nassertTrue(args.has('x'));\nassertEquals(\"param\", args.getString('x'));\n}\npublic void testMissingStringArgument() throws Exception {\ntry {new Args(\"x*\", new String[]{\"-x\"});\nfail();\n} catch (ArgsException e) {\nassertEquals(ArgsException.ErrorCode.MISSING_STRING, e.getErrorCode());\nassertEquals('x', e.getErrorArgumentId());\n}\n}\npublic void testSpacesInFormat() throws Exception {\nArgs args = new Args(\"x, y\", new String[]{\"-xy\"});\nassertEquals(2, args.cardinality());\nassertTrue(args.has('x'));\nassertTrue(args.has('y'));\n}\npublic void testSimpleIntPresent() throws Exception {\nArgs args = new Args(\"x#\", new String[]{\"-x\", \"42\"});\nassertEquals(1, args.cardinality());\nassertTrue(args.has('x'));\nassertEquals(42, args.getInt('x'));\n}\npublic void testInvalidInteger() throws Exception {\ntry {new Args(\"x#\", new String[]{\"-x\", \"Forty two\"});", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1662, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5a82a65-d69f-4468-a8b1-38d37a60f4ec": {"__data__": {"id_": "a5a82a65-d69f-4468-a8b1-38d37a60f4ec", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0eb11fe7-d1c0-4e7f-b83d-bedfd3bb8ac7", "node_type": "4", "metadata": {}, "hash": "5c37d58a7c719378978fb1992e4d85e80886aa4a1f633e494f0ea638fc8616da", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-13 (continued)\n\nArgsTest.java\nfail();\n} catch (ArgsException e) {\nassertEquals(ArgsException.ErrorCode.INVALID_INTEGER, e.getErrorCode());\nassertEquals('x', e.getErrorArgumentId());\nassertEquals(\"Forty two\", e.getErrorParameter());\n}\n}\npublic void testMissingInteger() throws Exception {\ntry {\nnew Args(\"x#\", new String[]{\"-x\"});\nfail();\n} catch (ArgsException e) {\nassertEquals(ArgsException.ErrorCode.MISSING_INTEGER, e.getErrorCode());\nassertEquals('x', e.getErrorArgumentId());\n}\n}\npublic void testSimpleDoublePresent() throws Exception {\nArgs args = new Args(\"x##\", new String[]{\"-x\", \"42.3\"});\nassertEquals(1, args.cardinality());\nassertTrue(args.has('x'));\nassertEquals(42.3, args.getDouble('x'), .001);\n}\npublic void testInvalidDouble() throws Exception {\ntry {\nnew Args(\"x##\", new String[]{\"-x\", \"Forty two\"});\nfail();\n} catch (ArgsException e) {\nassertEquals(ArgsException.ErrorCode.INVALID_DOUBLE, e.getErrorCode());\nassertEquals('x', e.getErrorArgumentId());\nassertEquals(\"Forty two\", e.getErrorParameter());\n}\n}\npublic void testMissingDouble() throws Exception {\ntry {\nnew Args(\"x##\", new String[]{\"-x\"});\nfail();\n} catch (ArgsException e) {\nassertEquals(ArgsException.ErrorCode.MISSING_DOUBLE, e.getErrorCode());\nassertEquals('x', e.getErrorArgumentId());\n}\n}\n}\n\n# Listing 14-14\n\nArgsExceptionTest.java\npublic class ArgsExceptionTest extends TestCase {\npublic void testUnexpectedMessage() throws Exception {\nArgsException e =", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1489, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8be7381-0914-4206-9cdf-3bb914083414": {"__data__": {"id_": "a8be7381-0914-4206-9cdf-3bb914083414", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0651d64-9470-4e90-97f5-294404387893", "node_type": "4", "metadata": {}, "hash": "6f1067a9ed4b7340b15f1991d2f71992a268897bb548ae54896bfaa82dbac4e9", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\n# Listing 14-14 (continued)\n\nArgsExceptionTest.java\nnew ArgsException(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT,'x', null);\nassertEquals(\"Argument -x unexpected.\", e.errorMessage());\n\n# public void testMissingStringMessage() throws Exception\n\nArgsException e = new ArgsException(ArgsException.ErrorCode.MISSING_STRING,'x', null);\nassertEquals(\"Could not find string parameter for -x.\", e.errorMessage());\n\n# public void testInvalidIntegerMessage() throws Exception\n\nArgsException e =new ArgsException(ArgsException.ErrorCode.INVALID_INTEGER,\n'x', \"Forty two\");\nassertEquals(\"Argument -x expects an integer but was 'Forty two'.\",e.errorMessage());\n\n# public void testMissingIntegerMessage() throws Exception\n\nArgsException e =new ArgsException(ArgsException.ErrorCode.MISSING_INTEGER, 'x', null);\nassertEquals(\"Could not find integer parameter for -x.\", e.errorMessage());\n\n# public void testInvalidDoubleMessage() throws Exception\n\nArgsException e = new ArgsException(ArgsException.ErrorCode.INVALID_DOUBLE,'x', \"Forty two\");\nassertEquals(\"Argument -x expects a double but was 'Forty two'.\",e.errorMessage());\n\n# public void testMissingDoubleMessage() throws Exception\n\nArgsException e = new ArgsException(ArgsException.ErrorCode.MISSING_DOUBLE,'x', null);\nassertEquals(\"Could not find double parameter for -x.\", e.errorMessage());\n\n# Listing 14-15\n\nArgsException.java\npublic   class ArgsException extends Exception {\nprivate char errorArgumentId = '\\0';\nprivate String errorParameter = \"TILT\";\nprivate ErrorCode errorCode = ErrorCode.OK;\npublic ArgsException() {}\npublic ArgsException(String message) {super(message);}\npublic ArgsException(ErrorCode errorCode) {\nthis.errorCode = errorCode;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1717, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec8b2d88-10ec-4e2f-a04b-103af7d1d1a4": {"__data__": {"id_": "ec8b2d88-10ec-4e2f-a04b-103af7d1d1a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "da3bb542-5030-46cc-9d18-888e96baf54b", "node_type": "4", "metadata": {}, "hash": "53f8a720bd7db9645f7708fc42ccc3d747ad32f08176159ca7d141c55627642c", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-15 (continued)\n\n# ArgsException.java\n\npublic ArgsException(ErrorCode errorCode, String errorParameter) {\nthis.errorCode = errorCode;\nthis.errorParameter = errorParameter;\n}\npublic ArgsException(ErrorCode errorCode, char errorArgumentId, String errorParameter) {\nthis.errorCode = errorCode;\nthis.errorParameter = errorParameter;\nthis.errorArgumentId = errorArgumentId;\n}\npublic char getErrorArgumentId() {\nreturn errorArgumentId;\n}\npublic void setErrorArgumentId(char errorArgumentId) {\nthis.errorArgumentId = errorArgumentId;\n}\npublic String getErrorParameter() {\nreturn errorParameter;\n}\npublic void setErrorParameter(String errorParameter) {\nthis.errorParameter = errorParameter;\n}\npublic ErrorCode getErrorCode() {\nreturn errorCode;\n}\npublic void setErrorCode(ErrorCode errorCode) {\nthis.errorCode = errorCode;\n}\npublic String errorMessage() throws Exception {\nswitch (errorCode) {\ncase OK:\nthrow new Exception(\"TILT: Should not get here.\");\ncase UNEXPECTED_ARGUMENT:\nreturn String.format(\"Argument -%c unexpected.\", errorArgumentId);\ncase MISSING_STRING:\nreturn String.format(\"Could not find string parameter for -%c.\", errorArgumentId);\ncase INVALID_INTEGER:\nreturn String.format(\"Argument -%c expects an integer but was '%s'.\", errorArgumentId, errorParameter);\ncase MISSING_INTEGER:\nreturn String.format(\"Could not find integer parameter for -%c.\", errorArgumentId);\ncase INVALID_DOUBLE:\nreturn String.format(\"Argument -%c expects a double but was '%s'.\", errorArgumentId, errorParameter);\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1550, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f16eb65a-1d1c-434d-a02a-30f14e1d2f1e": {"__data__": {"id_": "f16eb65a-1d1c-434d-a02a-30f14e1d2f1e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "798fc166-f2a5-4ea9-a1d3-7e0985c78487", "node_type": "4", "metadata": {}, "hash": "93f24fbb8df7d62ae8459bb3586c04bc23c186b3b0b8617c24e2601347e8e98c", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\nListing 14-15 (continued)\n\nArgsException.java\ncase MISSING_DOUBLE:return String.format(\"Could not find double parameter for -%c.\",\nerrorArgumentId);\n}\nreturn \"\";\n}\npublic enum ErrorCode {OK, INVALID_FORMAT, UNEXPECTED_ARGUMENT, INVALID_ARGUMENT_NAME,\nMISSING_STRING,\nMISSING_INTEGER, INVALID_INTEGER,\nMISSING_DOUBLE, INVALID_DOUBLE}\n}\n\nListing 14-16\n\nArgs.java\npublic class Args {\nprivate String schema;\nprivate Map<Character, ArgumentMarshaler> marshalers =\nnew HashMap<Character, ArgumentMarshaler>();\nprivate Set<Character> argsFound = new HashSet<Character>();\nprivate Iterator<String> currentArgument;\nprivate List<String> argsList;\npublic Args(String schema, String[] args) throws ArgsException {\nthis.schema = schema;\nargsList = Arrays.asList(args);\nparse();\n}\nprivate void parse() throws ArgsException {\nparseSchema();\nparseArguments();\n}\nprivate boolean parseSchema() throws ArgsException {\nfor (String element : schema.split(\",\")) {\nif (element.length() > 0) {parseSchemaElement(element.trim());\n}\n}\nreturn true;\n}\nprivate void parseSchemaElement(String element) throws ArgsException {\nchar elementId = element.charAt(0);\nString elementTail = element.substring(1);\nvalidateSchemaElementId(elementId);\nif marshalers.put(elementId, new BooleanArgumentMarshaler());(elementTail.length() == 0)\nelse if (elementTail.equals(\"*\"))marshalers.put(elementId, new StringArgumentMarshaler());", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1410, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ba43bfe-9a7e-456c-8b0e-3b6a9cb95177": {"__data__": {"id_": "8ba43bfe-9a7e-456c-8b0e-3b6a9cb95177", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f3419ce1-8af9-47bf-824e-a752aa4d10ea", "node_type": "4", "metadata": {}, "hash": "43c490bcf97622ed7c14997b4188341b7398868c29f5637b1c8c81a59b5e6340", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\n# Listing 14-16 (continued)\n\nelse if (elementTail.equals(\"#\")) marshalers.put(elementId, new IntegerArgumentMarshaler());\nelse if (elementTail.equals(\"##\")) marshalers.put(elementId, new DoubleArgumentMarshaler());\nelse throw new ArgsException(ArgsException.ErrorCode.INVALID_FORMAT,\nelementId, elementTail);\n}\nprivate void validateSchemaElementId(char elementId) throws ArgsException {\nif (!Character.isLetter(elementId)) {\nthrow new ArgsException(ArgsException.ErrorCode.INVALID_ARGUMENT_NAME,\nelementId, null);\n}\n}\nprivate void parseArguments() throws ArgsException {\nfor (currentArgument = argsList.iterator(); currentArgument.hasNext();) {\nString arg = currentArgument.next();\nparseArgument(arg);\n}\n}\nprivate void parseArgument(String arg) throws ArgsException {\nif (arg.startsWith(\"-\")) parseElements(arg);\n}\nprivate void parseElements(String arg) throws ArgsException {\nfor (int i = 1; i < arg.length(); i++)\nparseElement(arg.charAt(i));\n}\nprivate void parseElement(char argChar) throws ArgsException {\nif (argsFound.add(argChar)) setArgument(argChar);\nelse {\nthrow new ArgsException(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT,\nargChar, null);\n}\n}\nprivate boolean setArgument(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\nif (m == null) return false;\ntry {\nm.set(currentArgument);\nreturn true;\n} catch (ArgsException e) {\ne.setErrorArgumentId(argChar);\nthrow e;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fefc7547-4936-4267-a58d-538c425e69bc": {"__data__": {"id_": "fefc7547-4936-4267-a58d-538c425e69bc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5c96af14-8d46-48c6-855b-fcd8c7a73ac1", "node_type": "4", "metadata": {}, "hash": "e1e6ddbc81c778c044c02d90191accfcb48fa913a08f15e619e5e417a1ca33cb", "class_name": "RelatedNodeInfo"}}, "text": "# String Arguments\n\n# Listing 14-16 (continued)\n\nArgs.java\npublic int cardinality() {return argsFound.size();\n}\npublic String usage() {if (schema.length() > 0)\nreturn \"-[\" + schema + \"]\";\nelse return \"\";\n}\npublic boolean getBoolean(char arg) {ArgumentMarshaler am = marshalers.get(arg);\nboolean b = false;\ntry {b = am != null && (Boolean) am.get();\n} catch (ClassCastException e) {b = false;\n}\nreturn b;\n}\npublic String getString(char arg) {ArgumentMarshaler am = marshalers.get(arg);\ntry {return am == null ? \"\" : (String) am.get();\n} catch (ClassCastException e) {return \"\";\n}\n}\npublic int getInt(char arg) {ArgumentMarshaler am = marshalers.get(arg);\ntry {return am == null ? 0 : (Integer) am.get();\n} catch (Exception e) {return 0;\n}\n}\npublic double getDouble(char arg) {ArgumentMarshaler am = marshalers.get(arg);\ntry {return am == null ? 0 : (Double) am.get();\n} catch (Exception e) {return 0.0;\n}\n}\npublic boolean has(char arg) {return argsFound.contains(arg);\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 969, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce542681-5df6-40f1-98ab-f25c958db555": {"__data__": {"id_": "ce542681-5df6-40f1-98ab-f25c958db555", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f1bbb7cb-18dc-4f96-849b-a4db39ea554b", "node_type": "4", "metadata": {}, "hash": "36e0fcd1b19b6244803c11d005291a884d819e9ab9b3e7de2671a650dee1897d", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 14: Successive Refinement\n\nThe majority of the changes to the Args class were deletions. A lot of code just got moved out of Args and put into ArgsException. Nice. We also moved all the ArgumentMarshallers into their own files. Nicer!\n\nMuch of good software design is simply about partitioning\u2014creating appropriate places to put different kinds of code. This separation of concerns makes the code much simpler to understand and maintain.\n\nOf special interest is the errorMessage method of ArgsException. Clearly it was a violation of the SRP to put the error message formatting into Args. Args should be about the processing of arguments, not about the format of the error messages. However, does it really make sense to put the error message formatting code into ArgsException?\n\nFrankly, it\u2019s a compromise. Users who don\u2019t like the error messages supplied by ArgsException will have to write their own. But the convenience of having canned error messages already prepared for you is not insignificant.\n\nBy now it should be clear that we are within striking distance of the final solution that appeared at the start of this chapter. I\u2019ll leave the final transformations to you as an exercise.\n\n# Conclusion\n\nIt is not enough for code to work. Code that works is often badly broken. Programmers who satisfy themselves with merely working code are behaving unprofessionally. They may fear that they don\u2019t have time to improve the structure and design of their code, but I disagree. Nothing has a more profound and long-term degrading effect upon a development project than bad code. Bad schedules can be redone, bad requirements can be redefined. Bad team dynamics can be repaired. But bad code rots and ferments, becoming an inexorable weight that drags the team down. Time and time again I have seen teams grind to a crawl because, in their haste, they created a malignant morass of code that forever thereafter dominated their destiny.\n\nOf course bad code can be cleaned up. But it\u2019s very expensive. As code rots, the modules insinuate themselves into each other, creating lots of hidden and tangled dependencies. Finding and breaking old dependencies is a long and arduous task. On the other hand, keeping code clean is relatively easy. If you made a mess in a module in the morning, it is easy to clean it up in the afternoon. Better yet, if you made a mess five minutes ago, it\u2019s very easy to clean it up right now.\n\nSo the solution is to continuously keep your code as clean and simple as it can be. Never let the rot get started.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2545, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d373c242-503b-418d-ad2e-4a600c34d723": {"__data__": {"id_": "d373c242-503b-418d-ad2e-4a600c34d723", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3e463451-0b00-4782-9640-47611f1b5cfe", "node_type": "4", "metadata": {}, "hash": "12c1ce05279a1b1273bfa74b5bd059ea518a4e090a5c811b89445547e5238f3d", "class_name": "RelatedNodeInfo"}}, "text": "# 15 JUnit Internals\n\nJUnit is one of the most famous of all Java frameworks. As frameworks go, it is simple in conception, precise in definition, and elegant in implementation. But what does the code look like? In this chapter we\u2019ll critique an example drawn from the JUnit framework.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 285, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca276a6a-518a-4bf9-b601-0ec824e6e577": {"__data__": {"id_": "ca276a6a-518a-4bf9-b601-0ec824e6e577", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "41cf41a1-2bff-473e-9290-4b90b09e03d4", "node_type": "4", "metadata": {}, "hash": "a9cbeb658f457733f99f7eb03b935fb967f2665c8bbd68fa3156daa23352258f", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 15: JUnit Internals\n\n# The JUnit Framework\n\nJUnit has had many authors, but it began with Kent Beck and Eric Gamma together on a plane to Atlanta. Kent wanted to learn Java, and Eric wanted to learn about Kent\u2019s Smalltalk testing framework. \u201cWhat could be more natural to a couple of geeks in cramped quarters than to pull out our laptops and start coding?\u201d1 After three hours of high-altitude work, they had written the basics of JUnit.\n\nThe module we\u2019ll look at is the clever bit of code that helps identify string comparison errors. This module is called ComparisonCompactor. Given two strings that differ, such as ABCDE and ABXDE, it will expose the difference by generating a string such as &lt;...B[X]D...&gt;.\n\nI could explain it further, but the test cases do a better job. So take a look at Listing 15-1 and you will understand the requirements of this module in depth. While you are at it, critique the structure of the tests. Could they be simpler or more obvious?\n\n# Listing 15-1\n\nComparisonCompactorTest.java\npackage junit.tests.framework;\nimport junit.framework.ComparisonCompactor;\nimport junit.framework.TestCase;\npublic class ComparisonCompactorTest extends TestCase {\npublic void testMessage() {\nString failure = new ComparisonCompactor(0, \"b\", \"c\").compact(\"a\");\nassertTrue(\"a expected:<[b]> but was:<[c]>\".equals(failure));\n}\npublic void testStartSame() {\nString failure = new ComparisonCompactor(1, \"ba\", \"bc\").compact(null);\nassertEquals(\"expected:<b[a]> but was:<b[c]>\", failure);\n}\npublic void testEndSame() {\nString failure = new ComparisonCompactor(1, \"ab\", \"cb\").compact(null);\nassertEquals(\"expected:<[a]b> but was:<[c]b>\", failure);\n}\npublic void testSame() {\nString failure = new ComparisonCompactor(1, \"ab\", \"ab\").compact(null);\nassertEquals(\"expected:<ab> but was:<ab>\", failure);\n}\npublic void testNoContextStartAndEndSame() {\nString failure = new ComparisonCompactor(0, \"abc\", \"adc\").compact(null);\nassertEquals(\"expected:<...[b]...> but was:<...[d]...>\", failure);\n}\n}\n\n1. JUnit Pocket Guide, Kent Beck, O\u2019Reilly, 2004, p. 43.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2071, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61fb5623-4a4e-4558-bcd6-4ed61764e5e4": {"__data__": {"id_": "61fb5623-4a4e-4558-bcd6-4ed61764e5e4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d74e098f-2a40-4127-86a2-6b81fc9e329d", "node_type": "4", "metadata": {}, "hash": "c0bb69812456f5a1245fb0708869f3ee72ba12bf8a1ff43bba1194e08b2afa1c", "class_name": "RelatedNodeInfo"}}, "text": "# The JUnit Framework\n\n# Listing 15-1 (continued)\n\n# ComparisonCompactorTest.java\n\npublic void testStartAndEndContext() {\nString failure = new ComparisonCompactor(1, \"abc\", \"adc\").compact(null);\nassertEquals(\"expected:<a[b]c> but was:<a[d]c>\", failure);\n}\npublic void testStartAndEndContextWithEllipses() {\nString failure = new ComparisonCompactor(1, \"abcde\", \"abfde\").compact(null);\nassertEquals(\"expected:<...b[c]d...> but was:<...b[f]d...>\", failure);\n}\npublic void testComparisonErrorStartSameComplete() {\nString failure = new ComparisonCompactor(2, \"ab\", \"abc\").compact(null);\nassertEquals(\"expected:<ab[]> but was:<ab[c]>\", failure);\n}\npublic void testComparisonErrorEndSameComplete() {\nString failure = new ComparisonCompactor(0, \"bc\", \"abc\").compact(null);\nassertEquals(\"expected:<[]...> but was:<[a]...>\", failure);\n}\npublic void testComparisonErrorEndSameCompleteContext() {\nString failure = new ComparisonCompactor(2, \"bc\", \"abc\").compact(null);\nassertEquals(\"expected:<[]bc> but was:<[a]bc>\", failure);\n}\npublic void testComparisonErrorOverlapingMatches() {\nString failure = new ComparisonCompactor(0, \"abc\", \"abbc\").compact(null);\nassertEquals(\"expected:<...[]...> but was:<...[b]...>\", failure);\n}\npublic void testComparisonErrorOverlapingMatchesContext() {\nString failure = new ComparisonCompactor(2, \"abc\", \"abbc\").compact(null);\nassertEquals(\"expected:<ab[]c> but was:<ab[b]c>\", failure);\n}\npublic void testComparisonErrorOverlapingMatches2() {\nString failure = new ComparisonCompactor(0, \"abcdde\", \"abcde\").compact(null);\nassertEquals(\"expected:<...[d]...> but was:<...[]...>\", failure);\n}\npublic void testComparisonErrorOverlapingMatches2Context() {\nString failure = new ComparisonCompactor(2, \"abcdde\", \"abcde\").compact(null);\nassertEquals(\"expected:<...cd[d]e> but was:<...cd[]e>\", failure);\n}\npublic void testComparisonErrorWithActualNull() {\nString failure = new ComparisonCompactor(0, \"a\", null).compact(null);\nassertEquals(\"expected: but was:<null>\", failure);\n}\npublic void testComparisonErrorWithActualNullContext() {\nString failure = new ComparisonCompactor(2, \"a\", null).compact(null);\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3243344-5260-4418-a126-043faae264e3": {"__data__": {"id_": "e3243344-5260-4418-a126-043faae264e3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "47838cde-e8e3-40b5-a74e-952d956e4c7a", "node_type": "4", "metadata": {}, "hash": "242a29df4a4e459f554f453f755ebc47680b0c8ae6ba7da1384953669539b082", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 15: JUnit Internals\n\n# Listing 15-1 (continued)\n\n# ComparisonCompactorTest.java\n\nassertEquals(\"expected: but was:<null>\", failure);\n}\npublic void testComparisonErrorWithExpectedNull() {\nString failure= new ComparisonCompactor(0, null, \"a\").compact(null);\nassertEquals(\"expected:<null> but was:\", failure);\n}\npublic void testComparisonErrorWithExpectedNullContext() {\nString failure= new ComparisonCompactor(2, null, \"a\").compact(null);\nassertEquals(\"expected:<null> but was:\", failure);\n}\npublic void testBug609972() {\nString failure= new ComparisonCompactor(10, \"S&P500\", \"0\").compact(null);\nassertEquals(\"expected:<[S&P50]0> but was:<[]0>\", failure);\n}\n}\n\nI ran a code coverage analysis on the ComparisonCompactor using these tests. The code is 100 percent covered. Every line of code, every if statement and for loop, is executed by the tests. This gives me a high degree of confidence that the code works and a high degree of respect for the craftsmanship of the authors.\n\nThe code for ComparisonCompactor is in Listing 15-2. Take a moment to look over this code. I think you\u2019ll find it to be nicely partitioned, reasonably expressive, and simple in structure. Once you are done, then we\u2019ll pick the nits together.\n\n# Listing 15-2\n\n# ComparisonCompactor.java (Original)\n\npackage junit.framework;\npublic class ComparisonCompactor {\nprivate static final String ELLIPSIS = \"...\";\nprivate static final String DELTA_END = \"]\";\nprivate static final String DELTA_START = \"[\";\nprivate int fContextLength;\nprivate String fExpected;\nprivate String fActual;\nprivate int fPrefix;\nprivate int fSuffix;\npublic ComparisonCompactor(int contextLength,String expected,\nString actual) {\nfContextLength = contextLength;\nfExpected = expected;\nfActual = actual;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1757, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e87e1b3a-547d-4e7a-9a7b-43781a095cfb": {"__data__": {"id_": "e87e1b3a-547d-4e7a-9a7b-43781a095cfb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5944158c-54e7-4259-b9b2-d7fa58fd0ce2", "node_type": "4", "metadata": {}, "hash": "2f9455ed984d8885d2b7f3db94d89a968d4cd2c5ba05d755242f23c37205c538", "class_name": "RelatedNodeInfo"}}, "text": "# The JUnit Framework\n\n# Listing 15-2 (continued)\n\n# ComparisonCompactor.java (Original)\n\npublic String compact(String message) {\nif (fExpected == null || fActual == null || areStringsEqual())\nreturn Assert.format(message, fExpected, fActual);\nfindCommonPrefix();\nfindCommonSuffix();\nString expected = compactString(fExpected);\nString actual = compactString(fActual);\nreturn Assert.format(message, expected, actual);\n}\n\nprivate String compactString(String source) {\nString result = DELTA_START + source.substring(fPrefix, source.length() - fSuffix + 1) + DELTA_END;\nif (fPrefix > 0)\nresult = computeCommonPrefix() + result;\nif (fSuffix > 0)\nresult = result + computeCommonSuffix();\nreturn result;\n}\n\nprivate void findCommonPrefix() {\nfPrefix = 0;\nint end = Math.min(fExpected.length(), fActual.length());\nfor (; fPrefix < end; fPrefix++) {\nif (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix))\nbreak;\n}\n}\n\nprivate void findCommonSuffix() {\nint expectedSuffix = fExpected.length() - 1;\nint actualSuffix = fActual.length() - 1;\nfor (; actualSuffix >= fPrefix && expectedSuffix >= fPrefix; actualSuffix--, expectedSuffix--) {\nif (fExpected.charAt(expectedSuffix) != fActual.charAt(actualSuffix))\nbreak;\n}\nfSuffix = fExpected.length() - expectedSuffix;\n}\n\nprivate String computeCommonPrefix() {\nreturn (fPrefix > fContextLength ? ELLIPSIS : \"\") +\nfExpected.substring(Math.max(0, fPrefix - fContextLength), fPrefix);\n}\n\nprivate String computeCommonSuffix() {\nint end = Math.min(fExpected.length() - fSuffix + 1 + fContextLength, fExpected.length());\nreturn fExpected.substring(fExpected.length() - fSuffix + 1, end) +\n(fExpected.length() - fSuffix + 1 < fExpected.length() - fContextLength ? ELLIPSIS : \"\");\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1708, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "edd11344-6f86-4f7f-bb7e-0055f1e17925": {"__data__": {"id_": "edd11344-6f86-4f7f-bb7e-0055f1e17925", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "73b6846b-37f3-45c8-9acc-6e353b97d485", "node_type": "4", "metadata": {}, "hash": "aa74dd91c6a330846e58b6dbc89c01680f7cc1218f240390ad3c0de04b6a38e6", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 15: JUnit Internals\n\n# Listing 15-2 (continued)\n\nComparisonCompactor.java (Original)\nprivate boolean areStringsEqual() {return fExpected.equals(fActual);\n}\n\nYou might have a few complaints about this module. There are some long expressions and some strange +1s and so forth. But overall this module is pretty good. After all, it might have looked like Listing 15-3.\n\n# Listing 15-3\n\nComparisonCompactor.java (defactored)\npackage junit.framework;\npublic class ComparisonCompactor {\nprivate int ctxt;\nprivate String s1;\nprivate String s2;\nprivate int pfx;\nprivate int sfx;\npublic ComparisonCompactor(int ctxt, String s1, String s2) {\nthis.ctxt = ctxt;\nthis.s1 = s1;\nthis.s2 = s2;\n}\npublic String compact(String msg) {\nif (s1 == null || s2 == null || s1.equals(s2))\npfx = 0;\nfor (; pfx < Math.min(s1.length(), s2.length()); pfx++) {\nif (s1.charAt(pfx) != s2.charAt(pfx)) break;\n}\nint sfx1 = s1.length() - 1;\nint sfx2 = s2.length() - 1;\nfor (; sfx2 >= pfx && sfx1 >= pfx; sfx2--, sfx1--) {\nif (s1.charAt(sfx1) != s2.charAt(sfx2)) break;\n}\nsfx = s1.length() - sfx1;\nString cmp1 = compactString(s1);\nString cmp2 = compactString(s2);\nreturn Assert.format(msg, cmp1, cmp2);\n}\nprivate String compactString(String s) {\nString result = \"[\" + s.substring(pfx, s.length() - sfx + 1) + \"]\";\nif (pfx > 0)\nresult = (pfx > ctxt ? \"...\" : \"\") + s1.substring(Math.max(0, pfx - ctxt), pfx) + result;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1393, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20a0372d-30a0-4e19-9fe8-4bfd9c17513a": {"__data__": {"id_": "20a0372d-30a0-4e19-9fe8-4bfd9c17513a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bd93353b-78af-4d64-a5ca-40087cf45f5e", "node_type": "4", "metadata": {}, "hash": "a08e85ea4e1255bc9571d771938db0aac31097a314fa72af13eb056f50d21f25", "class_name": "RelatedNodeInfo"}}, "text": "# The JUnit Framework\n\n# Listing 15-3 (continued)\n\nComparisonCompator.java (defactored)\nif (sfx > 0) {\nint end = Math.min(s1.length() - sfx + 1 + ctxt, s1.length());\nresult = result + (s1.substring(s1.length() - sfx + 1, end) +\n(s1.length() - sfx + 1 < s1.length() - ctxt ? \"...\" : \"\"));\n}\nreturn result;\n}\n\nEven though the authors left this module in very good shape, the Boy Scout Rule2 tells us we should leave it cleaner than we found it. So, how can we improve on the original code in Listing 15-2?\n\nThe first thing I don\u2019t care for is the f prefix for the member variables [N6]. Today\u2019s environments make this kind of scope encoding redundant. So let\u2019s eliminate all the f\u2019s.\n\nprivate int contextLength;\nprivate String expected;\nprivate String actual;\nprivate int prefix;\nprivate int suffix;\n\nNext, we have an unencapsulated conditional at the beginning of the compact function [G28].\n\npublic String compact(String message) {\nif (expected == null || actual == null || areStringsEqual())\nreturn Assert.format(message, expected, actual);\nfindCommonPrefix();\nfindCommonSuffix();\nString expected = compactString(this.expected);\nString actual = compactString(this.actual);\nreturn Assert.format(message, expected, actual);\n}\n\nThis conditional should be encapsulated to make our intent clear. So let\u2019s extract a method that explains it.\n\npublic String compact(String message) {\nif (shouldNotCompact())\nreturn Assert.format(message, expected, actual);\nfindCommonPrefix();\nfindCommonSuffix();\nString expected = compactString(this.expected);\nString actual = compactString(this.actual);\nreturn Assert.format(message, expected, actual);\n}\n\n2. See \u201cThe Boy Scout Rule\u201d on page 14.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1673, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad6f3633-cb40-4253-90c5-e497bed907fc": {"__data__": {"id_": "ad6f3633-cb40-4253-90c5-e497bed907fc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f6d1a57b-e17b-4f78-8566-d47e8525f40c", "node_type": "4", "metadata": {}, "hash": "5c2b36477f604423252a4dac69afc93d15ce60f3a0d40da3f7a1ef9cd1bab252", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 15: JUnit Internals\n\nprivate boolean shouldNotCompact() {return expected == null || actual == null || areStringsEqual();}\n\nI don\u2019t much care for the this.expected and this.actual notation in the compact function. This happened when we changed the name of fExpected to expected. Why are there variables in this function that have the same names as the member variables? Don\u2019t they represent something else [N4]? We should make the names unambiguous.\n\nString compactExpected = compactString(expected);\n\nString compactActual = compactString(actual);\n\nNegatives are slightly harder to understand than positives [G29]. So let\u2019s turn that if statement on its head and invert the sense of the conditional.\n\npublic String compact(String message) {if findCommonPrefix();(canBeCompacted()) {\n\nfindCommonSuffix();\n\nString compactExpected = compactString(expected);\n\nString compactActual = compactString(actual);\n\nreturn Assert.format(message, compactExpected, compactActual);\n\n} else {return Assert.format(message, expected, actual);}\n\n}\n\nprivate boolean != return expectedcanBeCompacted() {null && actual != null && !areStringsEqual();}\n\nThe name of the function is strange [N7]. Although it does compact the strings, it actually might not compact the strings if canBeCompacted returns false. So naming this function compact hides the side effect of the error check. Notice also that the function returns a formatted message, not just the compacted strings. So the name of the function should really be formatCompactedComparison. That makes it read a lot better when taken with the function argument:\n\npublic String formatCompactedComparison(String message) {\n\nThe body of the if statement is where the true compacting of the expected and actual strings is done. We should extract that as a method named compactExpectedAndActual. However, we want the formatCompactedComparison function to do all the formatting. The compact... function should do nothing but compacting [G30]. So let\u2019s split it up as follows:\n\n...private String compactExpected;\n\nprivate String compactActual;\n\npublic String formatCompactedComparison(String message) {\n\nif compactExpectedAndActual();(canBeCompacted()) {\n\nreturn Assert.format(message, compactExpected, compactActual);\n\n} else {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2260, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "869d6937-816c-4398-931c-2b48f326e89b": {"__data__": {"id_": "869d6937-816c-4398-931c-2b48f326e89b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e9680c-0a8e-46f8-baa5-2478e5e7de03", "node_type": "4", "metadata": {}, "hash": "7e6ebe370b0c50f6cf5638f646dd6d978429f45a97b9b68c25f60cc8be59993e", "class_name": "RelatedNodeInfo"}}, "text": "# The JUnit Framework\n\nreturn Assert.format(message, expected, actual);\n\nprivate void compactExpectedAndActual() {\n\nfindCommonPrefix();\n\nfindCommonSuffix();\n\ncompactExpected = compactString(expected);\n\ncompactActual = compactString(actual);\n\nNotice that this required us to promote compactExpected and compactActual to member variables. I don\u2019t like the way that the last two lines of the new function return variables, but the first two don\u2019t. They aren\u2019t using consistent conventions [G11]. So we should change findCommonPrefix and findCommonSuffix to return the prefix and suffix values.\n\nprivate void compactExpectedAndActual() {prefixIndex = findCommonPrefix();\n\nsuffixIndex = findCommonSuffix();\n\ncompactExpected = compactString(expected);\n\ncompactActual = compactString(actual);\n\nprivate int findCommonPrefix() {int Index = 0;\n\nint end = Math.min(expected.length(), actual.length());\n\nfor (; prefixIndex < end; prefixIndex++) {\n\nif (expected.charAt(prefixIndex) != actual.charAt(prefixIndex)) break;\n\n}\n\nreturn prefixIndex;\n\n}\n\nprivate int findCommonSuffix() {\n\nint expectedSuffix = expected.length() - 1;\n\nint actualSuffix = actual.length() - 1;\n\nfor (; actualSuffix >= prefixIndex && expectedSuffix >= prefixIndex; actualSuffix--, expectedSuffix--) {\n\nif (expected.charAt(expectedSuffix) != actual.charAt(actualSuffix)) break;\n\n}\n\nreturn expected.length() - expectedSuffix;\n\n}\n\nWe should also change the names of the member variables to be a little more accurate [N1]; after all, they are both indices.\n\nCareful inspection of findCommonSuffix exposes a hidden temporal coupling [G31]; it depends on the fact that prefixIndex is calculated by findCommonPrefix. If these two functions were called out of order, there would be a difficult debugging session ahead. So, to expose this temporal coupling, let\u2019s have findCommonSuffix take the prefixIndex as an argument.\n\nprivate void compactExpectedAndActual() {prefixIndex = findCommonPrefix();\n\nsuffixIndex = findCommonSuffix(prefixIndex);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a5c8e8e-9643-4178-bb15-51bcb4f8a065": {"__data__": {"id_": "4a5c8e8e-9643-4178-bb15-51bcb4f8a065", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1fd068ce-718f-485e-887a-b5dcbab5396d", "node_type": "4", "metadata": {}, "hash": "1033eb67c25f8a37556d9b26b8d1abab8e5bafb439c53d0ed968d8af521ff17f", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 15: JUnit Internals\n\ncompactExpected = compactString(expected);\n\ncompactActual = compactString(actual);\n\nprivate int findCommonSuffix(int prefixIndex) {\n\nint expectedSuffix = expected.length() - 1;\n\nint actualSuffix = actual.length() - 1;\n\nfor (; actualSuffix >= prefixIndex && expectedSuffix >= prefixIndex; actualSuffix--, expectedSuffix--) {\n\nif (expected.charAt(expectedSuffix) != actual.charAt(actualSuffix))\n\nbreak;\n\n}\n\nreturn expected.length() - expectedSuffix;\n\n}\n\nI\u2019m not really happy with this. The passing of the prefixIndex argument is a bit arbitrary [G32]. It works to establish the ordering but does nothing to explain the need for that ordering. Another programmer might undo what we have done because there\u2019s no indication that the parameter is really needed. So let\u2019s take a different tack.\n\nprivate void compactExpectedAndActual() {findCommonPrefixAndSuffix();\n\ncompactExpected = compactString(expected);\n\ncompactActual = compactString(actual);\n\n}\n\nprivate void findCommonPrefixAndSuffix() {\n\nfindCommonPrefix();\n\nint expectedSuffix = expected.length() - 1;\n\nint actualSuffix = actual.length() - 1;\n\nfor (; actualSuffix >= prefixIndex && expectedSuffix >= prefixIndex; ) {\n\nactualSuffix--, expectedSuffix--\n\nif (expected.charAt(expectedSuffix) != actual.charAt(actualSuffix))\n\nbreak;\n\n}\n\nsuffixIndex = expected.length() - expectedSuffix;\n\n}\n\nprivate void findCommonPrefix() {\n\nprefixIndex = 0;\n\nint end = Math.min(expected.length(), actual.length());\n\nfor (; prefixIndex < end; prefixIndex++)\n\nif (expected.charAt(prefixIndex) != actual.charAt(prefixIndex))\n\nbreak;\n\n}\n\nWe put findCommonPrefix and findCommonSuffix back the way they were, changing the name of findCommonSuffix to findCommonPrefixAndSuffix and having it call findCommonPrefix before doing anything else. That establishes the temporal nature of the two functions in a much more dramatic way than the previous solution. It also points out how ugly findCommonPrefixAndSuffix is. Let\u2019s clean it up now.\n\nprivate void findCommonPrefixAndSuffix() {\n\nfindCommonPrefix();\n\nint suffixLength = 1;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2081, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1993dd5f-f1c8-4f19-9638-af4a0a967a9d": {"__data__": {"id_": "1993dd5f-f1c8-4f19-9638-af4a0a967a9d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e0b80983-7483-4ca6-ac72-05577586137f", "node_type": "4", "metadata": {}, "hash": "f98ed4bb94533990cf53b6fb696460868061e81162e8970254e5c6f91d87c08c", "class_name": "RelatedNodeInfo"}}, "text": "# The JUnit Framework\n\nfor (; !suffixOverlapsPrefix(suffixLength); suffixLength++) {\n\nif (charFromEnd(expected, suffixLength) != charFromEnd(actual, suffixLength))\n\nbreak;\n\n}\n\nsuffixIndex = suffixLength;\n\n}\n\nprivate char charFromEnd(String s, int i) {\n\nreturn s.charAt(s.length() - i);}\n\nprivate boolean suffixOverlapsPrefix(int suffixLength) {\n\nreturn actual.length() - suffixLength < prefixLength ||\n\nexpected.length() - suffixLength < prefixLength;\n\n}\n\nThis is much better. It exposes that the suffixIndex is really the length of the suffix\n\nand is not well named. The same is true of the prefixIndex, though in that case \u201cindex\u201d and\n\n\u201clength\u201d are synonymous. Even so, it is more consistent to use \u201clength.\u201d The problem is\n\nthat the suffixIndex variable is not zero based; it is 1 based and so is not a true length. This\n\nis also the reason that there are all those +1s in computeCommonSuffix [G33]. So let\u2019s fix that.\n\nThe result is in Listing 15-4.\n\n# Listing 15-4\n\nComparisonCompactor.java (interim)\n\npublic class ComparisonCompactor {\n\n...private int suffixLength;\n\n...private void findCommonPrefixAndSuffix() {\n\nfindCommonPrefix();\n\nsuffixLength = 0;\n\nfor (; !suffixOverlapsPrefix(suffixLength); suffixLength++) {\n\nif (charFromEnd(expected, suffixLength) != charFromEnd(actual, suffixLength))\n\nbreak;\n\n}\n\n}\n\nprivate char charFromEnd(String s, int i) {\n\nreturn s.charAt(s.length() - i - 1);\n\n}\n\nprivate boolean suffixOverlapsPrefix(int suffixLength) {\n\nreturn actual.length() - suffixLength <= prefixLength ||\n\nexpected.length() - suffixLength <= prefixLength;\n\n}\n\n...private String compactString(String source) {\n\nString result = DELTA_START +\n\nsource.substring(prefixLength, source.length() - suffixLength) +\n\nDELTA_END;\n\nif (prefixLength > 0) result = computeCommonPrefix() + result;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1793, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25d02104-a1f4-4a52-972b-f0037e6e7984": {"__data__": {"id_": "25d02104-a1f4-4a52-972b-f0037e6e7984", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "20da4996-3bc4-4b68-bfda-cfd130060dd7", "node_type": "4", "metadata": {}, "hash": "cc8c6ef4874e65296429759020aac77f0f9020716ce6548423c8d54297b201dc", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 15: JUnit Internals\n\n# Listing 15-4 (continued)\n\nComparisonCompactor.java (interim)\nif result = result + computeCommonSuffix();(suffixLength > 0)\nreturn result;\n\nprivate String computeCommonSuffix() {\nint end = Math.min(expected.length() - suffixLength + contextLength, expected.length());\nreturn expected.substring(expected.length() - suffixLength, end) +\n(expected.length() - suffixLength < expected.length() - contextLength ? ELLIPSIS : \"\");\n}\n\nWe replaced the +1s in computeCommonSuffix with a -1 in charFromEnd, where it makes perfect sense, and two <= operators in suffixOverlapsPrefix, where they also make perfect sense. This allowed us to change the name of suffixIndex to suffixLength, greatly enhancing the readability of the code.\n\nThere is a problem however. As I was eliminating the +1s, I noticed the following line in compactString:\n\nif (suffixLength > 0)\n\nTake a look at it in Listing 15-4. By rights, because suffixLength is now one less than it used to be, I should change the > operator to a >= operator. But that makes no sense. It makes sense now! This means that it didn\u2019t use to make sense and was probably a bug. Well, not quite a bug. Upon further analysis we see that the if statement now prevents a zero length suffix from being appended. Before we made the change, the if statement was nonfunctional because suffixIndex could never be less than one!\n\nThis calls into question both if statements in compactString! It looks as though they could both be eliminated. So let\u2019s comment them out and run the tests. They passed! So let\u2019s restructure compactString to eliminate the extraneous if statements and make the function much simpler [G9].\n\nprivate String compactString(String source) {\nreturn computeCommonPrefix() +\nDELTA_START +\nsource.substring(prefixLength, source.length() - suffixLength) +\nDELTA_END +\ncomputeCommonSuffix();\n}\n\nThis is much better! Now we see that the compactString function is simply composing the fragments together. We can probably make this even clearer. Indeed, there are lots of little", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2053, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9dd90495-39df-493d-b3fc-52c47dfc1567": {"__data__": {"id_": "9dd90495-39df-493d-b3fc-52c47dfc1567", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c1044ee8-0424-497a-8db9-83b93acb1c38", "node_type": "4", "metadata": {}, "hash": "a45c3caded02a0112150815db6917dbe4dea53c87a076740915696ab1f61c04b", "class_name": "RelatedNodeInfo"}}, "text": "# The JUnit Framework\n\n# 263\n\ncleanups we could do. But rather than drag you through the rest of the changes, I\u2019ll just show you the result in Listing 15-5.\n\n# Listing 15-5\n\n# ComparisonCompactor.java (final)\n\npackage junit.framework;\n\npublic class ComparisonCompactor {\nprivate static final String ELLIPSIS = \"...\";\nprivate static final String DELTA_END = \"]\";\nprivate static final String DELTA_START = \"[\";\nprivate int contextLength;\nprivate String expected;\nprivate String actual;\nprivate int prefixLength;\nprivate int suffixLength;\n\npublic ComparisonCompactor(int contextLength, String expected, String actual) {\nthis.contextLength = contextLength;\nthis.expected = expected;\nthis.actual = actual;\n}\n\npublic String formatCompactedComparison(String message) {\nString compactExpected = expected;\nString compactActual = actual;\nif (findCommonPrefixAndSuffix(); (shouldBeCompacted())) {\ncompactExpected = compact(expected);\ncompactActual = compact(actual);\n}\nreturn Assert.format(message, compactExpected, compactActual);\n}\n\nprivate boolean shouldBeCompacted() {\nreturn !shouldNotBeCompacted();\n}\n\nprivate boolean shouldNotBeCompacted() {\nreturn expected == null || actual == null || expected.equals(actual);\n}\n\nprivate void findCommonPrefixAndSuffix() {\nfindCommonPrefix();\nsuffixLength = 0;\nfor (; !suffixOverlapsPrefix(); suffixLength++) {\nif (charFromEnd(expected, suffixLength) != charFromEnd(actual, suffixLength)\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1422, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f08c999d-55a6-46d3-a503-60a2cc43fe92": {"__data__": {"id_": "f08c999d-55a6-46d3-a503-60a2cc43fe92", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f6c988ba-a0b6-4b5f-bb39-1885ef0cc6c6", "node_type": "4", "metadata": {}, "hash": "7757a6178db289d7eae73ff3e858ad66bb2b0500bda8eb2ead9ed0b56e676f15", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 15: JUnit Internals\n\n# Listing 15-5 (continued)\n\nComparisonCompactor.java (final)\nbreak;\n}\n}\nprivate char charFromEnd(String s, int i) {\nreturn s.charAt(s.length() - i - 1);\n}\nprivate boolean suffixOverlapsPrefix() {\nreturn actual.length() - suffixLength <= prefixLength ||\nexpected.length() - suffixLength <= prefixLength;\n}\nprivate void findCommonPrefix() {\nprefixLength = 0;\nint end = Math.min(expected.length(), actual.length());\nfor (; prefixLength < end; prefixLength++)\nif (expected.charAt(prefixLength) != actual.charAt(prefixLength))\nbreak;\n}\nprivate String compact(String s) {\nreturn new StringBuilder()\n.append(startingEllipsis())\n.append(startingContext())\n.append(DELTA_START)\n.append(delta(s))\n.append(DELTA_END)\n.append(endingContext())\n.append(endingEllipsis())\n.toString();\n}\nprivate String startingEllipsis() {\nreturn prefixLength > contextLength ? ELLIPSIS : \"\";\n}\nprivate String startingContext() {\nint contextStart = Math.max(0, prefixLength - contextLength);\nint contextEnd = prefixLength;\nreturn expected.substring(contextStart, contextEnd);\n}\nprivate String delta(String s) {\nint deltaStart = prefixLength;\nint deltaEnd = s.length() - suffixLength;\nreturn s.substring(deltaStart, deltaEnd);\n}\nprivate String endingContext() {\nint contextStart = expected.length() - suffixLength;\nint contextEnd = Math.min(contextStart + contextLength, expected.length());\nreturn expected.substring(contextStart, contextEnd);\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1443, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6dcb4123-1ae1-483d-8c90-2b965d3d0ac8": {"__data__": {"id_": "6dcb4123-1ae1-483d-8c90-2b965d3d0ac8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3558b6ba-1382-445a-806d-e4ee1e8dae18", "node_type": "4", "metadata": {}, "hash": "9519038f011e570e57c91f8d5269a12467fc9f3ac2bdbde6c5d60c375ef615dd", "class_name": "RelatedNodeInfo"}}, "text": "# Conclusion\n\nAnd so we have satisfied the Boy Scout Rule. We have left this module a bit cleaner than we found it. Not that it wasn\u2019t clean already. The authors had done an excellent job with it. But no module is immune from improvement, and each of us has the responsibility to leave the code a little better than we found it.\n\n# Listing 15-5 (continued)\n\n# ComparisonCompactor.java (final)\n\nprivate String endingEllipsis() {return (suffixLength > contextLength ? ELLIPSIS : \"\");}\n\nThis is actually quite pretty. The module is separated into a group of analysis functions and another group of synthesis functions. They are topologically sorted so that the definition of each function appears just after it is used. All the analysis functions appear first, and all the synthesis functions appear last.\n\nIf you look carefully, you will notice that I reversed several of the decisions I made earlier in this chapter. For example, I inlined some extracted methods back into formatCompactedComparison, and I changed the sense of the shouldNotBeCompacted expression. This is typical. Often one refactoring leads to another that leads to the undoing of the first. Refactoring is an iterative process full of trial and error, inevitably converging on something that we feel is worthy of a professional.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1296, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c33eae1-4945-47c0-9ae1-a6dccb5f9f0c": {"__data__": {"id_": "5c33eae1-4945-47c0-9ae1-a6dccb5f9f0c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bff12fb3-7c7d-4933-b52a-6e9b3bb38064", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cce1653f-e93c-4d78-ad95-0d6bfc889fe8": {"__data__": {"id_": "cce1653f-e93c-4d78-ad95-0d6bfc889fe8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bd5c609-4f68-44cb-a2f9-e7aa0027d797", "node_type": "4", "metadata": {}, "hash": "3653f0a1d1f45b3f4efea2266cb32929ec87255d72eb66e58aeb0a44e6ac3969", "class_name": "RelatedNodeInfo"}}, "text": "# 16 Refactoring\n\n# SerialDate\n\nIf you go to http://www.jfree.org/jcommon/index.php, you will find the JCommon library. Deep within that library there is a package named org.jfree.date. Within that package there is a class named SerialDate. We are going to explore that class.\n\nThe author of SerialDate is David Gilbert. David is clearly an experienced and competent programmer. As we shall see, he shows a significant degree of professionalism and discipline within his code. For all intents and purposes, this is \u201cgood code.\u201d And I am going to rip it to pieces.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 563, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "def95df7-9d85-44a5-901e-27caae716292": {"__data__": {"id_": "def95df7-9d85-44a5-901e-27caae716292", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "76b1c29c-69cc-4152-9644-dbb0381d20a3", "node_type": "4", "metadata": {}, "hash": "f2a3316a38480a6d8ef8b528caedb8f3f1e8d8765e546feaa389067bbb584184", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 16: Refactoring SerialDate\n\nThis is not an activity of malice. Nor do I think that I am so much better than David that I somehow have a right to pass judgment on his code. Indeed, if you were to find some of my code, I\u2019m sure you could find plenty of things to complain about.\n\nNo, this is not an activity of nastiness or arrogance. What I am about to do is nothing more and nothing less than a professional review. It is something that we should all be comfortable doing. And it is something we should welcome when it is done for us. It is only through critiques like these that we will learn. Doctors do it. Pilots do it. Lawyers do it. And we programmers need to learn how to do it too.\n\nOne more thing about David Gilbert: David is more than just a good programmer. David had the courage and good will to offer his code to the community at large for free. He placed it out in the open for all to see and invited public usage and public scrutiny. This was well done!\n\nSerialDate (Listing B-1, page 349) is a class that represents a date in Java. Why have a class that represents a date, when Java already has java.util.Date and java.util.Calendar, and others? The author wrote this class in response to a pain that I have often felt myself. The comment in his opening Javadoc (line 67) explains it well. We could quibble about his intention, but I have certainly had to deal with this issue, and I welcome a class that is about dates instead of times.\n\n# First, Make It Work\n\nThere are some unit tests in a class named SerialDateTests (Listing B-2, page 366). The tests all pass. Unfortunately a quick inspection of the tests shows that they don\u2019t test everything [T1]. For example, doing a \u201cFind Usages\u201d search on the method MonthCodeToQuarter (line 334) indicates that it is not used [F4]. Therefore, the unit tests don\u2019t test it.\n\nSo I fired up Clover to see what the unit tests covered and what they didn\u2019t. Clover reported that the unit tests executed only 91 of the 185 executable statements in SerialDate (~50 percent) [T2]. The coverage map looks like a patchwork quilt, with big gobs of unexecuted code littered all through the class.\n\nIt was my goal to completely understand and also refactor this class. I couldn\u2019t do that without much greater test coverage. So I wrote my own suite of completely independent unit tests (Listing B-4, page 374).\n\nAs you look through these tests, you will note that many of them are commented out. These tests didn\u2019t pass. They represent behavior that I think SerialDate should have. So as I refactor SerialDate, I\u2019ll be working to make these tests pass too.\n\nEven with some of the tests commented out, Clover reports that the new unit tests are executing 170 (92 percent) out of the 185 executable statements. This is pretty good, and I think we\u2019ll be able to get this number higher.\n\nThe first few commented-out tests (lines 23-63) were a bit of conceit on my part. The program was not designed to pass these tests, but the behavior seemed obvious [G2] to me.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3017, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c2d0efa-c041-44ac-9596-8123e0187104": {"__data__": {"id_": "2c2d0efa-c041-44ac-9596-8123e0187104", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2fb43d8-5e80-4edb-8252-5b1c6c853ba5", "node_type": "4", "metadata": {}, "hash": "4187c47063ed08ab30036de8a1bceeb924201538fd749ab4c7fae819f4428157", "class_name": "RelatedNodeInfo"}}, "text": "# First, Make It Work\n\nI\u2019m not sure why the testWeekdayCodeToString method was written in the first place, but because it is there, it seems obvious that it should not be case sensitive. Writing these tests was trivial [T3]. Making them pass was even easier; I just changed lines 259 and 263 to use equalsIgnoreCase.\n\nI left the tests at line 32 and line 45 commented out because it\u2019s not clear to me that the \u201ctues\u201d and \u201cthurs\u201d abbreviations ought to be supported.\n\nThe tests on line 153 and line 154 don\u2019t pass. Clearly, they should [G2]. We can easily fix this, and the tests on line 163 through line 213, by making the following changes to the stringToMonthCode function.\n\n457              if ((result &lt; 1) || (result &gt; 12)) {result = -1;\n458                   for (int i = 0; i &lt; monthNames.length; i++) {\n459                         if (s.equalsIgnoreCase(shortMonthNames[i])) {\n460                               result = i + 1;\n461                               break;\n462                         }\n463                         if (s.equalsIgnoreCase(monthNames[i])) {\n464                               result = i + 1;\n465                               break;\n466                         }\n467                   }\n468              }\n\nThe commented test on line 318 exposes a bug in the getFollowingDayOfWeek method (line 672). December 25th, 2004, was a Saturday. The following Saturday was January 1st, 2005. However, when we run the test, we see that getFollowingDayOfWeek returns December 25th as the Saturday that follows December 25th. Clearly, this is wrong [G3],[T1]. We see the problem in line 685. It is a typical boundary condition error [T5]. It should read as follows:\n\n685              if (baseDOW &gt;= targetWeekday) {\n\nIt is interesting to note that this function was the target of an earlier repair. The change history (line 43) shows that \u201cbugs\u201d were fixed in getPreviousDayOfWeek, getFollowingDayOfWeek, and getNearestDayOfWeek [T6].\n\nThe testGetNearestDayOfWeek unit test (line 329), which tests the getNearestDayOfWeek method (line 705), did not start out as long and exhaustive as it currently is. I added a lot of test cases to it because my initial test cases did not all pass [T6]. You can see the pattern of failure by looking at which test cases are commented out. That pattern is revealing [T7]. It shows that the algorithm fails if the nearest day is in the future. Clearly there is some kind of boundary condition error [T5].\n\nThe pattern of test coverage reported by Clover is also interesting [T8]. Line 719 never gets executed! This means that the if statement in line 718 is always false. Sure enough, a look at the code shows that this must be true. The adjust variable is always negative and so cannot be greater or equal to 4. So this algorithm is just wrong.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2811, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd016ec9-c6b2-47dc-a7d2-dd8698664070": {"__data__": {"id_": "dd016ec9-c6b2-47dc-a7d2-dd8698664070", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed47c2be-31a0-4b93-814d-96b706709af6", "node_type": "4", "metadata": {}, "hash": "4923261c8fdfbbdf86a82446e9567c18b25a7745f9dc3a9f3442d1187fb505c3", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 16: Refactoring SerialDate\n\nThe right algorithm is shown below:\n\nint delta = targetDOW - base.getDayOfWeek();\nint positiveDelta = delta + 7;\nint adjust = positiveDelta % 7;\nif (adjust > 3) adjust -= 7;\nreturn SerialDate.addDays(adjust, base);\n\nFinally, the tests at line 417 and line 429 can be made to pass simply by throwing an IllegalArgumentException instead of returning an error string from weekInMonthToString and relativeToString. With these changes all the unit tests pass, and I believe SerialDate now works. So now it\u2019s time to make it \u201cright.\u201d\n\n# Then Make It Right\n\nWe are going to walk from the top to the bottom of SerialDate, improving it as we go along. Although you won\u2019t see this in the discussion, I will be running all of the JCommon unit tests, including my improved unit test for SerialDate, after every change I make. So rest assured that every change you see here works for all of JCommon.\n\nStarting at line 1, we see a ream of comments with license information, copyrights, authors, and change history. I acknowledge that there are certain legalities that need to be addressed, and so the copyrights and licenses must stay. On the other hand, the change history is a leftover from the 1960s. We have source code control tools that do this for us now. This history should be deleted [C1].\n\nThe import list starting at line 61 could be shortened by using java.text.* and java.util.*. [J1]\n\nI wince at the HTML formatting in the Javadoc (line 67). Having a source file with more than one language in it troubles me. This comment has four languages in it: Java, English, Javadoc, and html [G1]. With that many languages in use, it\u2019s hard to keep things straight. For example, the nice positioning of line 71 and line 72 are lost when the Javadoc is generated, and yet who wants to see &lt;ul&gt; and &lt;li&gt; in the source code? A better strategy might be to just surround the whole comment with &lt;pre&gt; so that the formatting that is apparent in the source code is preserved within the Javadoc.\n\nLine 86 is the class declaration. Why is this class named SerialDate? What is the significance of the word \u201cserial\u201d? Is it because the class is derived from Serializable? That doesn\u2019t seem likely.\n\n# Footnote\n\n1. An even better solution would have been for Javadoc to present all comments as preformatted, so that comments appear the same in both code and document.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2400, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d189999-b189-41e0-b7d4-63523c6d1776": {"__data__": {"id_": "5d189999-b189-41e0-b7d4-63523c6d1776", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3071a475-adbe-4c31-bbb5-1ea73e06a834", "node_type": "4", "metadata": {}, "hash": "3b34ee90af64f7cbafd522e548770eca2859a69933cd0d7569b481fd28e35c30", "class_name": "RelatedNodeInfo"}}, "text": "# Then Make It Right\n\nI won\u2019t keep you guessing. I know why (or at least I think I know why) the word \u201cserial\u201d was used. The clue is in the constants SERIAL_LOWER_BOUND and SERIAL_UPPER_BOUND on line 98 and line 101. An even better clue is in the comment that begins on line 830. This class is named SerialDate because it is implemented using a \u201cserial number,\u201d which happens to be the number of days since December 30th, 1899.\n\nI have two problems with this. First, the term \u201cserial number\u201d is not really correct. This may be a quibble, but the representation is more of a relative offset than a serial number. The term \u201cserial number\u201d has more to do with product identification markers than dates. So I don\u2019t find this name particularly descriptive [N1]. A more descriptive term might be \u201cordinal.\u201d\n\nThe second problem is more significant. The name SerialDate implies an implementation. This class is an abstract class. There is no need to imply anything at all about the implementation. Indeed, there is good reason to hide the implementation! So I find this name to be at the wrong level of abstraction [N2]. In my opinion, the name of this class should simply be Date.\n\nUnfortunately, there are already too many classes in the Java library named Date, so this is probably not the best name to choose. Because this class is all about days, instead of time, I considered naming it Day, but this name is also heavily used in other places. In the end, I chose DayDate as the best compromise.\n\nFrom now on in this discussion I will use the term DayDate. I leave it to you to remember that the listings you are looking at still use SerialDate.\n\nI understand why DayDate inherits from Comparable and Serializable. But why does it inherit from MonthConstants? The class MonthConstants (Listing B-3, page 372) is just a bunch of static final constants that define the months. Inheriting from classes with constants is an old trick that Java programmers used so that they could avoid using expressions like MonthConstants.January, but it\u2019s a bad idea [J2]. MonthConstants should really be an enum.\n\npublic abstract class DayDate implements Comparable, Serializable {\npublic static enum Month {JANUARY(1),\nFEBRUARY(2),\nMARCH(3),\nAPRIL(4),\nMAY(5),\nJUNE(6),\nJULY(7),\nAUGUST(8),\nSEPTEMBER(9),\nOCTOBER(10),\nNOVEMBER(11),\nDECEMBER(12);\nMonth(int index) {this.index = index;\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2364, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9c21777-97c6-4150-bea8-132bcf9758b8": {"__data__": {"id_": "f9c21777-97c6-4150-bea8-132bcf9758b8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b40e685c-05f3-42fd-8b9e-2da3241c3c97", "node_type": "4", "metadata": {}, "hash": "b1ec878c18812739b4db34183dd1fffb30b14bf7062cef787e9b2437df863cbb", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 16: Refactoring SerialDate\n\npublic static Month make(int monthIndex) {\nfor (Month m : Month.values()) {\nif (m.index == monthIndex)\nreturn m;\n}\nthrow new IllegalArgumentException(\"Invalid month index \" + monthIndex);\n}\npublic final int index;\n\nChanging MonthConstants to this enum forces quite a few changes to the DayDate class and all it\u2019s users. It took me an hour to make all the changes. However, any function that used to take an int for a month, now takes a Month enumerator. This means we can get rid of the isValidMonthCode method (line 326), and all the month code error checking such as that in monthCodeToQuarter (line 356) [G5].\n\nNext, we have line 91, serialVersionUID. This variable is used to control the serializer. If we change it, then any DayDate written with an older version of the software won\u2019t be readable anymore and will result in an InvalidClassException. If you don\u2019t declare the serialVersionUID variable, then the compiler automatically generates one for you, and it will be different every time you make a change to the module. I know that all the documents recommend manual control of this variable, but it seems to me that automatic control of serialization is a lot safer [G4]. After all, I\u2019d much rather debug an InvalidClassException than the odd behavior that would ensue if I forgot to change the serialVersionUID. So I\u2019m going to delete the variable\u2014at least for the time being.\n\nI find the comment on line 93 redundant. Redundant comments are just places to collect lies and misinformation [C2]. So I\u2019m going to get rid of it and its ilk.\n\nThe comments at line 97 and line 100 talk about serial numbers, which I discussed earlier [C1]. The variables they describe are the earliest and latest possible dates that DayDate can describe. This can be made a bit clearer [N1].\n\npublic static final int EARLIEST_DATE_ORDINAL = 2;                                // 1/1/1900\npublic static final int LATEST_DATE_ORDINAL = 2958465; // 12/31/9999\n\nIt\u2019s not clear to me why EARLIEST_DATE_ORDINAL is 2 instead of 0. There is a hint in the comment on line 829 that suggests that this has something to do with the way dates are represented in Microsoft Excel. There is a much deeper insight provided in a derivative of DayDate called SpreadsheetDate (Listing B-5, page 382). The comment on line 71 describes the issue nicely.\n\nThe problem I have with this is that the issue seems to be related to the implementation of SpreadsheetDate and has nothing to do with DayDate. I conclude from this that\n\nSeveral of the reviewers of this text have taken exception to this decision. They contend that in an open source framework it is better to assert manual control over the serial ID so that minor changes to the software don\u2019t cause old serialized dates to be invalid. This is a fair point. However, at least the failure, inconvenient though it might be, has a clear-cut cause. On the other hand, if the author of the class forgets to update the ID, then the failure mode is undefined and might very well be silent. I think the real moral of this story is that you should not expect to deserialize across versions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3143, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a22b7b2-9c89-4f74-9307-026fc65081e6": {"__data__": {"id_": "3a22b7b2-9c89-4f74-9307-026fc65081e6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cb736e8e-ef47-4322-8509-a86d54659846", "node_type": "4", "metadata": {}, "hash": "6aea77b7e89ff5fdaa3e20f50f015e1be3c45f792a538308afeb0b0378f0ed3e", "class_name": "RelatedNodeInfo"}}, "text": "# Then Make It Right\n\nEARLIEST_DATE_ORDINAL and LATEST_DATE_ORDINAL do not really belong in DayDate and should be moved to SpreadsheetDate [G6]. Indeed, a search of the code shows that these variables are used only within SpreadsheetDate. Nothing in DayDate, nor in any other class in the JCommon framework, uses them. Therefore, I\u2019ll move them down into SpreadsheetDate.\n\nThe next variables, MINIMUM_YEAR_SUPPORTED, and MAXIMUM_YEAR_SUPPORTED (line 104 and line 107), provide something of a dilemma. It seems clear that if DayDate is an abstract class that provides no foreshadowing of implementation, then it should not inform us about a minimum or maximum year. Again, I am tempted to move these variables down into SpreadsheetDate [G6]. However, a quick search of the users of these variables shows that one other class uses them: RelativeDayOfWeekRule (Listing B-6, page 390). We see that usage at line 177 and line 178 in the getDate function, where they are used to check that the argument to getDate is a valid year. The dilemma is that a user of an abstract class needs information about its implementation.\n\nWhat we need to do is provide this information without polluting DayDate itself. Usually, we would get implementation information from an instance of a derivative. However, the getDate function is not passed an instance of a DayDate. It does, however, return such an instance, which means that somewhere it must be creating it. Line 187 through line 205 provide the hint. The DayDate instance is being created by one of the three functions, getPreviousDayOfWeek, getNearestDayOfWeek, or getFollowingDayOfWeek. Looking back at the DayDate listing, we see that these functions (lines 638\u2013724) all return a date created by addDays (line 571), which calls createInstance (line 808), which creates a SpreadsheetDate! [G7].\n\nshould use the ABSTRACT FACTORY 3 pattern and create a DayDateFactory. This factory will create the instances of DayDate that we need and can also answer questions about the implementation, such as the maximum and minimum dates.\n\npublic abstract class DayDateFactory {\nprivate static DayDateFactory factory = new SpreadsheetDateFactory();\npublic static void setInstance(DayDateFactory factory) {\nDayDateFactory.factory = factory;\n}\nprotected abstract DayDate _makeDate(int ordinal);\nprotected abstract DayDate _makeDate(int day, DayDate.Month month, int year);\nprotected abstract DayDate _makeDate(int day, int month, int year);\nprotected abstract DayDate _makeDate(java.util.Date date);\nprotected abstract int _getMinimumYear();\nprotected abstract int _getMaximumYear();\npublic static DayDate makeDate(int ordinal) {\nreturn factory._makeDate(ordinal);\n}\n}\n3. [GOF].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2703, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e30a7447-86ef-483c-a669-2c2509c60d0c": {"__data__": {"id_": "e30a7447-86ef-483c-a669-2c2509c60d0c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5422306f-455e-4a92-9d6e-1095334f5ec8", "node_type": "4", "metadata": {}, "hash": "7657abd3dc8807c7a906da1a77dd694fa172f31fa1e432ba39e3e38e36be7852", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 16: Refactoring SerialDate\n\npublic static DayDate makeDate(int day, DayDate.Month month, int year) {\nreturn factory._makeDate(day, month, year);\n}\npublic static DayDate makeDate(int day, int month, int year) {\nreturn factory._makeDate(day, month, year);\n}\npublic static DayDate makeDate(java.util.Date date) {\nreturn factory._makeDate(date);\n}\npublic static int getMinimumYear() {return factory._getMinimumYear();\n}\npublic static int getMaximumYear() { return factory._getMaximumYear();\n}\n\nThis factory class replaces the createInstance methods with makeDate methods, which\nimproves the names quite a bit [N1]. It defaults to a SpreadsheetDateFactory but can be\nchanged at any time to use a different factory. The static methods that delegate to abstract\nmethods use a combination of the SINGLETON, 4 DECORATOR, 5 and ABSTRACT FACTORY\npatterns that I have found to be useful.\n\nThe SpreadsheetDateFactory looks like this.\n\npublic class SpreadsheetDateFactory extends DayDateFactory {\npublic DayDate _makeDate(int ordinal) { return new SpreadsheetDate(ordinal); }\npublic DayDate _makeDate(int day, DayDate.Month month, int year) {\nreturn new SpreadsheetDate(day, month, year);\n}\npublic DayDate _makeDate(int day, int month, int year) {\nreturn new SpreadsheetDate(day, month, year);\n}\npublic DayDate _makeDate(Date date) {\nfinal GregorianCalendar calendar = new GregorianCalendar();\ncalendar.setTime(date);\nreturn new SpreadsheetDate(calendar.get(Calendar.DATE),\nDayDate.Month.make(calendar.get(Calendar.MONTH) + 1),\ncalendar.get(Calendar.YEAR));\n}\n}\n\n4. Ibid.\n\n5. Ibid.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c924316e-d266-4a77-9355-b861fee597b0": {"__data__": {"id_": "c924316e-d266-4a77-9355-b861fee597b0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "736650ca-46a7-46e2-89ac-f31a5f6d6ed4", "node_type": "4", "metadata": {}, "hash": "d4873d8fc4c9be5ad58c5f9d4eb24d2388784c2a54d8c3c243bcdc4f6c062de0", "class_name": "RelatedNodeInfo"}}, "text": "# Then Make It Right\n\nprotected int _getMinimumYear() {return SpreadsheetDate.MINIMUM_YEAR_SUPPORTED;}\n\nprotected int _getMaximumYear() {return SpreadsheetDate.MAXIMUM_YEAR_SUPPORTED;}\n\nAs you can see, I have already moved the MINIMUM_YEAR_SUPPORTED and MAXIMUM_YEAR_SUPPORTED variables into SpreadsheetDate, where they belong [G6].\n\nThe next issue in DayDate are the day constants beginning at line 109. These should really be another enum [J3]. We\u2019ve seen this pattern before, so I won\u2019t repeat it here. You\u2019ll see it in the final listings.\n\nNext, we see a series of tables starting with LAST_DAY_OF_MONTH at line 140. My first issue with these tables is that the comments that describe them are redundant [C3]. Their names are sufficient. So I\u2019m going to delete the comments.\n\nThere seems to be no good reason that this table isn\u2019t private [G8], because there is a static function lastDayOfMonth that provides the same data.\n\nThe next table, AGGREGATE_DAYS_TO_END_OF_MONTH, is a bit more mysterious because it is not used anywhere in the JCommon framework [G9]. So I deleted it.\n\nThe same goes for LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH.\n\nThe next table, AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, is used only in SpreadsheetDate (line 434 and line 473). This begs the question of whether it should be moved to SpreadsheetDate. The argument for not moving it is that the table is not specific to any particular implementation [G6]. On the other hand, no implementation other than SpreadsheetDate actually exists, and so the table should be moved close to where it is used [G10].\n\nWhat settles the argument for me is that to be consistent [G11], we should make the table private and expose it through a function like julianDateOfLastDayOfMonth. Nobody seems to need a function like that. Moreover, the table can be moved back to DayDate easily if any new implementation of DayDate needs it. So I moved it.\n\nThe same goes for the table, LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH.\n\nNext, we see three sets of constants that can be turned into enums (lines 162\u2013205). The first of the three selects a week within a month. I changed it into an enum named WeekInMonth.\n\npublic enum WeekInMonth {\nFIRST(1), SECOND(2), THIRD(3), FOURTH(4), LAST(0);\npublic final int index;\nWeekInMonth(int index) {this.index = index;}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d39eaa3-0d1c-4bf6-aae5-d08ca19bb937": {"__data__": {"id_": "2d39eaa3-0d1c-4bf6-aae5-d08ca19bb937", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "99c74577-1e2b-41e2-bf02-e7714f773426", "node_type": "4", "metadata": {}, "hash": "4edadba046b97d9a2675a3d864a894558961754c2b5460a2d209e449a258f490", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 16: Refactoring SerialDate\n\nThe second set of constants (lines 177\u2013187) is a bit more obscure. The INCLUDE_NONE, INCLUDE_FIRST, INCLUDE_SECOND, and INCLUDE_BOTH constants are used to describe whether the defining end-point dates of a range should be included in that range. Mathematically, this is described using the terms \u201copen interval,\u201d \u201chalf-open interval,\u201d and \u201cclosed interval.\u201d I think it is clearer using the mathematical nomenclature [N3], so I changed it to an enum named DateInterval with CLOSED, CLOSED_LEFT, CLOSED_RIGHT, and OPEN enumerators.\n\nThe third set of constants (lines 18\u2013205) describe whether a search for a particular day of the week should result in the last, next, or nearest instance. Deciding what to call this is difficult at best. In the end, I settled for WeekdayRange with LAST, NEXT, and NEAREST enumerators.\n\nYou might not agree with the names I\u2019ve chosen. They make sense to me, but they may not make sense to you. The point is that they are now in a form that makes them easy to change [J3]. They aren\u2019t passed as integers anymore; they are passed as symbols. I can use the \u201cchange name\u201d function of my IDE to change the names, or the types, without worrying that I missed some -1 or 2 somewhere in the code or that some int argument declaration is left poorly described.\n\nThe description field at line 208 does not seem to be used by anyone. I deleted it along with its accessor and mutator [G9].\n\nI also deleted the degenerate default constructor at line 213 [G12]. The compiler will generate it for us.\n\nWe can skip over the isValidWeekdayCode method (lines 216\u2013238) because we deleted it when we created the Day enumeration.\n\nThis brings us to the stringToWeekdayCode method (lines 242\u2013270). Javadocs that don\u2019t add much to the method signature are just clutter [C3],[G12]. The only value this Javadoc adds is the description of the -1 return value. However, because we changed to the Day enumeration, the comment is actually wrong [C2]. The method now throws an IllegalArgumentException. So I deleted the Javadoc.\n\nI also deleted all the final keywords in arguments and variable declarations. As far as I could tell, they added no real value but did add to the clutter [G12]. Eliminating final flies in the face of some conventional wisdom. For example, Robert Simmons6 strongly recommends us to \u201c. . . spread final all over your code.\u201d Clearly I disagree. I think that there are a few good uses for final, such as the occasional final constant, but otherwise the keyword adds little value and creates a lot of clutter. Perhaps I feel this way because the kinds of errors that final might catch are already caught by the unit tests I write.\n\nI didn\u2019t care for the duplicate if statements [G5] inside the for loop (line 259 and line 263), so I connected them into a single if statement using the || operator. I also used the Day enumeration to direct the for loop and made a few other cosmetic changes.\n\nIt occurred to me that this method does not really belong in DayDate. It\u2019s really the parse function of Day. So I moved it into the Day enumeration.\n\n6. [Simmons04], p. 73.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3128, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "04008d16-7658-4807-ba95-b8424d979c05": {"__data__": {"id_": "04008d16-7658-4807-ba95-b8424d979c05", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dc91214b-09de-4bff-a373-d386bf126e10", "node_type": "4", "metadata": {}, "hash": "ab4da3bb21aee9d1c5b7e35f2ccc6105d76dc2ab9019dfd1d048b98f31c4cadc", "class_name": "RelatedNodeInfo"}}, "text": "# Then Make It Right\n\nenumeration pretty large. Because the concept of Day does not depend on DayDate, I moved the Day enumeration outside of the DayDate class into its own source file [G13]. I also moved the next function, weekdayCodeToString (lines 272\u2013286) into the Day enumeration and called it toString.\n\npublic enum Day {\nMONDAY(Calendar.MONDAY),\nTUESDAY(Calendar.TUESDAY),\nWEDNESDAY(Calendar.WEDNESDAY),\nTHURSDAY(Calendar.THURSDAY),\nFRIDAY(Calendar.FRIDAY),\nSATURDAY(Calendar.SATURDAY),\nSUNDAY(Calendar.SUNDAY);\npublic final int index;\nprivate static DateFormatSymbols dateSymbols = new DateFormatSymbols();\nDay(int day) {index = day;}\n\npublic static Day make(int index) throws IllegalArgumentException {\nfor (Day d : Day.values()) if (d.index == index)\nreturn d;\nthrow new IllegalArgumentException(String.format(\"Illegal day index: %d.\", index));\n}\n\npublic static Day parse(String s) throws IllegalArgumentException {\nString[] shortWeekdayNames = dateSymbols.getShortWeekdays();\nString[] weekDayNames = dateSymbols.getWeekdays();\ns = s.trim();\nfor (Day day : Day.values()) {\nif (s.equalsIgnoreCase(shortWeekdayNames[day.index]) ||\ns.equalsIgnoreCase(weekDayNames[day.index])) {\nreturn day;\n}\n}\nthrow new IllegalArgumentException(String.format(\"%s is not a valid weekday string\", s));\n}\n\npublic String toString() {return dateSymbols.getWeekdays()[index];}\n}\n\nThere are two getMonths functions (lines 288\u2013316). The first calls the second. The second is never called by anyone but the first. Therefore, I collapsed the two into one and vastly simplified them [G9],[G12],[F4]. Finally, I changed the name to be a bit more self-descriptive [N1].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1648, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "361ee216-599f-4164-82ae-a6689b92c7fc": {"__data__": {"id_": "361ee216-599f-4164-82ae-a6689b92c7fc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3247c556-c251-4d8e-92fd-6c444ee9e8d4", "node_type": "4", "metadata": {}, "hash": "30a25536d0430838096c941430ec4af9db54da16d39ecb380e6f7cad6e4c3bed", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 16: Refactoring SerialDate\n\npublic static String[] getMonthNames() {return dateFormatSymbols.getMonths();\n}\n\nThe isValidMonthCode function (lines 326\u2013346) was made irrelevant by the Month enum, so I deleted it [G9].\n\nThe monthCodeToQuarter function (lines 356\u2013375) smells of FEATURE ENVY 7 [G14] and probably belongs in the Month enum as a method named quarter. So I replaced it.\n\npublic int quarter() {return 1 + (index-1)/3;\n}\n\nThis made the Month enum big enough to be in its own class. So I moved it out of DayDate to be consistent with the Day enum [G11],[G13].\n\nThe next two methods are named monthCodeToString (lines 377\u2013426). Again, we see the pattern of one method calling its twin with a flag. It is usually a bad idea to pass a flag as an argument to a function, especially when that flag simply selects the format of the output [G15]. I renamed, simplified, and restructured these functions and moved them into the Month enum [N1],[N3],[C3],[G14].\n\npublic String toString() {return dateFormatSymbols.getMonths()[index - 1];\n}\npublic String toShortString() {return dateFormatSymbols.getShortMonths()[index - 1];\n}\n\nThe next method is stringToMonthCode (lines 428\u2013472). I renamed it, moved it into the Month enum, and simplified it [N1],[N3],[C3],[G14],[G12].\n\npublic static Month parse(String s) {s = s.trim();\nfor (Month m : Month.values())if (m.matches(s))\nreturn m;\ntry {return make(Integer.parseInt(s));\n}\ncatch (NumberFormatException e) {}\nthrow new IllegalArgumentException(\"Invalid month \" + s);\n}\n\n7.  [Refactoring].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1545, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c75af2a9-9e4d-4509-a09a-e6e1d13fb4d9": {"__data__": {"id_": "c75af2a9-9e4d-4509-a09a-e6e1d13fb4d9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4954e71a-c7b4-4cc9-b906-a427e3ba12bf", "node_type": "4", "metadata": {}, "hash": "43e12a327d4ab0d61d088bc31ccc059ed3e2c6ee1e705b144a48908ce98c02b4", "class_name": "RelatedNodeInfo"}}, "text": "# Then Make It Right\n\nprivate boolean matches(String s) {return s.equalsIgnoreCase(toString()) || s.equalsIgnoreCase(toShortString());}\n\nThe isLeapYear method (lines 495\u2013517) can be made a bit more expressive [G16].\n\npublic static boolean isLeapYear(int year) {\nboolean fourth = year % 4 == 0;\nboolean hundredth = year % 100 == 0;\nboolean fourHundredth = year % 400 == 0;\nreturn fourth && (!hundredth || fourHundredth);\n}\n\nThe next function, leapYearCount (lines 519\u2013536) doesn\u2019t really belong in DayDate. Nobody calls it except for two methods in SpreadsheetDate. So I pushed it down [G6].\n\nThe lastDayOfMonth function (lines 538\u2013560) makes use of the LAST_DAY_OF_MONTH array. This array really belongs in the Month enum [G17], so I moved it there. I also simplified the function and made it a bit more expressive [G16].\n\npublic static int lastDayOfMonth(Month month, int year) {\nif (month == Month.FEBRUARY && isLeapYear(year))\nreturn month.lastDay() + 1;\nelse\nreturn month.lastDay();\n}\n\nNow things start to get a bit more interesting. The next function is addDays (lines 562\u2013576). First of all, because this function operates on the variables of DayDate, it should not be static [G18]. So I changed it to an instance method. Second, it calls the function toSerial. This function should be renamed toOrdinal [N1]. Finally, the method can be simplified.\n\npublic DayDate addDays(int days) {\nreturn DayDateFactory.makeDate(toOrdinal() + days);\n}\n\nThe algorithm is a bit complicated, so I used EXPLAINING TEMPORARY VARIABLES 8 [G19] to make it more transparent. I also renamed the method getYYY to getYear [N1].\n\npublic DayDate addMonths(int months) {\nint thisMonthAsOrdinal = 12 * getYear() + getMonth().index - 1;\nint resultMonthAsOrdinal = thisMonthAsOrdinal + months;\nint resultYear = resultMonthAsOrdinal / 12;\nMonth resultMonth = Month.make(resultMonthAsOrdinal % 12 + 1);\n}\n\n8. [Beck97].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1892, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e32f4d0-64bc-4694-8653-39f0f5a5d1a3": {"__data__": {"id_": "1e32f4d0-64bc-4694-8653-39f0f5a5d1a3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6845825d-dcc4-45f3-bc8b-4aa2f25791eb", "node_type": "4", "metadata": {}, "hash": "153bcb467730f238596612da20c07aa897ddd8cd70c2e4e49658751bce6c3791", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 16: Refactoring SerialDate\n\nint lastDayOfResultMonth = lastDayOfMonth(resultMonth, resultYear);\n\nint resultDay = Math.min(getDayOfMonth(), lastDayOfResultMonth);\n\nreturn DayDateFactory.makeDate(resultDay, resultMonth, resultYear);\n\nThe addYears function (lines 604\u2013626) provides no surprises over the others.\n\npublic DayDate plusYears(int years) {\nint resultYear = getYear() + years;\nint lastDayOfMonthInResultYear = lastDayOfMonth(getMonth(), resultYear);\nint resultDay = Math.min(getDayOfMonth(), lastDayOfMonthInResultYear);\nreturn DayDateFactory.makeDate(resultDay, getMonth(), resultYear);\n}\n\nThere is a little itch at the back of my mind that is bothering me about changing these methods from static to instance. Does the expression date.addDays(5) make it clear that the date object does not change and that a new instance of DayDate is returned? Or does it erroneously imply that we are adding five days to the date object? You might not think that is a big problem, but a bit of code that looks like the following can be very deceiving [G20].\n\nDayDate date = DateFactory.makeDate(5, Month.DECEMBER, 1952);\ndate.addDays(7); // bump date by one week.\nSomeone reading this code would very likely just accept that addDays is changing the date object. So we need a name that breaks this ambiguity [N4]. So I changed the names to plusDays and plusMonths. It seems to me that the intent of the method is captured nicely by\n\nDayDate date = oldDate.plusDays(5);\nwhereas the following doesn\u2019t read fluidly enough for a reader to simply accept that the date object is changed:\n\ndate.plusDays(5);\nThe algorithms continue to get more interesting. getPreviousDayOfWeek (lines 628\u2013660) works but is a bit complicated. After some thought about what was really going on [G21], I was able to simplify it and use EXPLAINING TEMPORARY VARIABLES [G19] to make it clearer. I also changed it from a static method to an instance method [G18], and got rid of the duplicate instance method [G5] (lines 997\u20131008).\n\npublic DayDate getPreviousDayOfWeek(Day targetDayOfWeek) {\nint offsetToTarget = targetDayOfWeek.index - getDayOfWeek().index;\nif (offsetToTarget -= 7; (offsetToTarget >= 0))\nreturn plusDays(offsetToTarget);\n}\n\nThe exact same analysis and result occurred for getFollowingDayOfWeek (lines 662\u2013693).\n\npublic DayDate getFollowingDayOfWeek(Day targetDayOfWeek) {\nint offsetToTarget = targetDayOfWeek.index - getDayOfWeek().index;\nif (offsetToTarget <= 0)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47813bf9-2a31-4101-b40b-fcba953e7be7": {"__data__": {"id_": "47813bf9-2a31-4101-b40b-fcba953e7be7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b63eb823-65b8-4f81-ac25-2643ab0de952", "node_type": "4", "metadata": {}, "hash": "d6cdbcdad07beb8b1fb48666a0f929559c42bf6ad6caf9584a2f07cdf5c3074a", "class_name": "RelatedNodeInfo"}}, "text": "# Then Make It Right\n\noffsetToTarget += 7;\n\nreturn plusDays(offsetToTarget);\n\nThe next function is getNearestDayOfWeek (lines 695\u2013726), which we corrected back on page 270. But the changes I made back then aren\u2019t consistent with the current pattern in the last two functions [G11]. So I made it consistent and used some EXPLAINING TEMPORARY VARIABLES [G19] to clarify the algorithm.\n\npublic DayDate getNearestDayOfWeek(final Day targetDay) {\nint offsetToThisWeeksTarget = targetDay.index - getDayOfWeek().index;\nint offsetToFutureTarget = (offsetToThisWeeksTarget + 7) % 7;\nint offsetToPreviousTarget = offsetToFutureTarget - 7;\nif (offsetToFutureTarget > 3)\nreturn plusDays(offsetToPreviousTarget);\nelse\nreturn plusDays(offsetToFutureTarget);\n}\n\nThe getEndOfCurrentMonth method (lines 728\u2013740) is a little strange because it is an instance method that envies [G14] its own class by taking a DayDate argument. I made it a true instance method and clarified a few names.\n\npublic DayDate getEndOfMonth() {\nMonth month = getMonth();\nint year = getYear();\nint lastDay = lastDayOfMonth(month, year);\nreturn DayDateFactory.makeDate(lastDay, month, year);\n}\n\nRefactoring weekInMonthToString (lines 742\u2013761) turned out to be very interesting indeed. Using the refactoring tools of my IDE, I first moved the method to the WeekInMonth enum that I created back on page 275. Then I renamed the method to toString. Next, I changed it from a static method to an instance method. All the tests still passed. (Can you guess where I am going?)\n\nNext, I deleted the method entirely! Five asserts failed (lines 411\u2013415, Listing B-4, page 374). I changed these lines to use the names of the enumerators (FIRST, SECOND, . . .). All the tests passed. Can you see why? Can you also see why each of these steps was necessary? The refactoring tool made sure that all previous callers of weekInMonthToString now called toString on the weekInMonth enumerator because all enumerators implement toString to simply return their names. . . .\n\nUnfortunately, I was a bit too clever. As elegant as that wonderful chain of refactorings was, I finally realized that the only users of this function were the tests I had just modified, so I deleted the tests.\n\nFool me once, shame on you. Fool me twice, shame on me! So after determining that nobody other than the tests called relativeToString (lines 765\u2013781), I simply deleted the function and its tests.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6e911fd-6c11-45f7-95b5-5173c28b0476": {"__data__": {"id_": "c6e911fd-6c11-45f7-95b5-5173c28b0476", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9ac6a875-2674-4875-ba0f-e2ddd4664a9f", "node_type": "4", "metadata": {}, "hash": "3a057f6f2e40257cfb381903adb87151f0917e31bc81b6274565dd86e1c49646", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 16: Refactoring SerialDate\n\nWe have finally made it to the abstract methods of this abstract class. And the first one is as appropriate as they come: toSerial (lines 838\u2013844). Back on page 279 I had changed the name to toOrdinal. Having looked at it in this context, I decided the name should be changed to getOrdinalDay.\n\nThe next abstract method is toDate (lines 838\u2013844). It converts a DayDate to a java.util.Date. Why is this method abstract? If we look at its implementation in SpreadsheetDate (lines 198\u2013207, Listing B-5, page 382), we see that it doesn\u2019t depend on anything in the implementation of that class [G6]. So I pushed it up.\n\nThe getYYYY, getMonth, and getDayOfMonth methods are nicely abstract. However, the getDayOfWeek method is another one that should be pulled up from SpreadSheetDate because it doesn\u2019t depend on anything that can\u2019t be found in DayDate [G6]. Or does it?\n\nIf you look carefully (line 247, Listing B-5, page 382), you\u2019ll see that the algorithm implicitly depends on the origin of the ordinal day (in other words, the day of the week of day 0). So even though this function has no physical dependencies that couldn\u2019t be moved to DayDate, it does have a logical dependency.\n\nLogical dependencies like this bother me [G22]. If something logical depends on the implementation, then something physical should too. Also, it seems to me that the algorithm itself could be generic with a much smaller portion of it dependent on the implementation [G6].\n\nSo I created an abstract method in DayDate named getDayOfWeekForOrdinalZero and implemented it in SpreadsheetDate to return Day.SATURDAY. Then I moved the getDayOfWeek method up to DayDate and changed it to call getOrdinalDay and getDayOfWeekForOrdinalZero.\n\npublic Day getDayOfWeek() {\nDay startingDay = getDayOfWeekForOrdinalZero();\nint startingOffset = startingDay.index - Day.SUNDAY.index;\nreturn Day.make((getOrdinalDay() + startingOffset) % 7 + 1);\n}\nAs a side note, look carefully at the comment on line 895 through line 899. Was this repetition really necessary? As usual, I deleted this comment along with all the others.\n\nThe next method is compare (lines 902\u2013913). Again, this method is inappropriately abstract [G6], so I pulled the implementation up into DayDate. Also, the name does not communicate enough [N1]. This method actually returns the difference in days since the argument. So I changed the name to daysSince. Also, I noted that there weren\u2019t any tests for this method, so I wrote them.\n\nThe next six functions (lines 915\u2013980) are all abstract methods that should be implemented in DayDate. So I pulled them all up from SpreadsheetDate.\n\nThe last function, isInRange (lines 982\u2013995) also needs to be pulled up and refactored. The switch statement is a bit ugly [G23] and can be replaced by moving the cases into the DateInterval enum.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3c3b0d7-40a8-43f0-98f8-59ca2de6c8bc": {"__data__": {"id_": "a3c3b0d7-40a8-43f0-98f8-59ca2de6c8bc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5b943f8d-da2e-4489-83d0-315e25d8c0af", "node_type": "4", "metadata": {}, "hash": "236534220e97d08593c6bdaa4fe92b9060e5bc2a231d0a9c66c06e05a60415c1", "class_name": "RelatedNodeInfo"}}, "text": "# Then Make It Right\n\npublic enum DateInterval {\n\nOPEN {public boolean isIn(int d, int left, int right) { return d > left && d < right; },}\n\nCLOSED_LEFT {public boolean isIn(int d, int left, int right) { return d >= left && d < right; },}\n\nCLOSED_RIGHT {public boolean isIn(int d, int left, int right) { return d > left && d <= right; },}\n\nCLOSED {public boolean isIn(int d, int left, int right) { return d >= left && d <= right; };}\n\npublic abstract boolean isIn(int d, int left, int right); }\n\npublic boolean isInRange(DayDate d1, DayDate d2, DateInterval interval) {\n\nint left = Math.min(d1.getOrdinalDay(), d2.getOrdinalDay());\n\nint right = Math.max(d1.getOrdinalDay(), d2.getOrdinalDay());\n\nreturn interval.isIn(getOrdinalDay(), left, right); }\n\nThat brings us to the end of DayDate. So now we\u2019ll make one more pass over the whole class to see how well it flows.\n\nFirst, the opening comment is long out of date, so I shortened and improved it [C2].\n\nNext, I moved all the remaining enums out into their own files [G12].\n\nNext, I moved the static variable (dateFormatSymbols) and three static methods (getMonthNames, isLeapYear, lastDayOfMonth) into a new class named DateUtil [G6].\n\nI moved the abstract methods up to the top where they belong [G24].\n\nI changed Month.make to Month.fromInt [N1] and did the same for all the other enums.\n\nI also created a toInt() accessor for all the enums and made the index field private.\n\nThere was some interesting duplication [G5] in plusYears and plusMonths that I was able to eliminate by extracting a new method named correctLastDayOfMonth, making all three methods much clearer.\n\nI got rid of the magic number 1 [G25], replacing it with Month.JANUARY.toInt() or Day.SUNDAY.toInt(), as appropriate.\n\nI spent a little time with SpreadsheetDate, cleaning up the algorithms a bit. The end result is contained in Listing B-7, page 394, through Listing B-16, page 405.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1909, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d4e3a15-5d1c-4285-9fb9-07f20f507482": {"__data__": {"id_": "4d4e3a15-5d1c-4285-9fb9-07f20f507482", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1ea64f0b-df78-4e30-b208-d7cc9a906641", "node_type": "4", "metadata": {}, "hash": "122c7db8c7f0807c5f22f4a07f471af40e0bf066f18992006c47b1687746a11e", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 16: Refactoring SerialDate\n\nInterestingly the code coverage in DayDate has decreased to 84.9 percent! This is not because less functionality is being tested; rather it is because the class has shrunk so much that the few uncovered lines have a greater weight. DayDate now has 45 out of 53 executable statements covered by tests. The uncovered lines are so trivial that they weren\u2019t worth testing.\n\n# Conclusion\n\nSo once again we\u2019ve followed the Boy Scout Rule. We\u2019ve checked the code in a bit cleaner than when we checked it out. It took a little time, but it was worth it. Test coverage was increased, some bugs were fixed, the code was clarified and shrunk. The next person to look at this code will hopefully find it easier to deal with than we did. That person will also probably be able to clean it up a bit more than we did.\n\n# Bibliography\n\n- [GOF]: Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al., Addison-Wesley, 1996.\n- [Simmons04]: Hardcore Java, Robert Simmons, Jr., O\u2019Reilly, 2004.\n- [Refactoring]: Refactoring: Improving the Design of Existing Code, Martin Fowler et al., Addison-Wesley, 1999.\n- [Beck97]: Smalltalk Best Practice Patterns, Kent Beck, Prentice Hall, 1997.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1224, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3858ba3-b706-43d2-aa4b-a2515ca5fdef": {"__data__": {"id_": "d3858ba3-b706-43d2-aa4b-a2515ca5fdef", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b34bde9b-921b-4e4f-8db4-b4f42004df4d", "node_type": "4", "metadata": {}, "hash": "6551640b4b031f12069da98ac193635445c6b1557c08aa238458e6a6955472f1", "class_name": "RelatedNodeInfo"}}, "text": "# 17 Smells and Heuristics\n\nIn his wonderful book *Refactoring*1, Martin Fowler identified many different \u201cCode Smells.\u201d The list that follows includes many of Martin\u2019s smells and adds many more of my own. It also includes other pearls and heuristics that I use to practice my trade.\n\n1. [Refactoring].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 302, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56642dd3-2109-4d76-8e73-cb747d37f5fd": {"__data__": {"id_": "56642dd3-2109-4d76-8e73-cb747d37f5fd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "720dbb9b-6cb5-42fd-8b2b-98bb1df4fa92", "node_type": "4", "metadata": {}, "hash": "fb0b01c88a664cdf388e54a1667d5206fd75855e1ac2509cbde9e978a2e630ba", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\nI compiled this list by walking through several different programs and refactoring them. As I made each change, I asked myself why I made that change and then wrote the reason down here. The result is a rather long list of things that smell bad to me when I read code.\n\nThis list is meant to be read from top to bottom and also to be used as a reference. There is a cross-reference for each heuristic that shows you where it is referenced in the rest of the text in \u201cAppendix C\u201d on page 409.\n\n# Comments\n\n# C1: Inappropriate Information\n\nIt is inappropriate for a comment to hold information better held in a different kind of system such as your source code control system, your issue tracking system, or any other record-keeping system. Change histories, for example, just clutter up source files with volumes of historical and uninteresting text. In general, meta-data such as authors, last-modified-date, SPR number, and so on should not appear in comments. Comments should be reserved for technical notes about the code and design.\n\n# C2: Obsolete Comment\n\nA comment that has gotten old, irrelevant, and incorrect is obsolete. Comments get old quickly. It is best not to write a comment that will become obsolete. If you find an obsolete comment, it is best to update it or get rid of it as quickly as possible. Obsolete comments tend to migrate away from the code they once described. They become floating islands of irrelevance and misdirection in the code.\n\n# C3: Redundant Comment\n\nA comment is redundant if it describes something that adequately describes itself. For example:\n\ni++; // increment i\n\nAnother example is a Javadoc that says nothing more than (or even less than) the function signature:\n\n/*** @param sellRequest\n* @return\n* @throws ManagedComponentException\n*/\npublic SellResponse beginSellItem(SellRequest sellRequest)\nthrows ManagedComponentException\n\nComments should say things that the code cannot say for itself.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1977, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa2c5fa1-4bde-450d-9d72-65e4ffc34fc6": {"__data__": {"id_": "aa2c5fa1-4bde-450d-9d72-65e4ffc34fc6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e8687c05-bdfc-4f8a-81a4-91d807fc2bfa", "node_type": "4", "metadata": {}, "hash": "9283f558efa57cbefed5f9658b26bc0c9548abc7b43d415136ae9ac12c9f22c9", "class_name": "RelatedNodeInfo"}}, "text": "# C4: Poorly Written Comment\n\nA comment worth writing is worth writing well. If you are going to write a comment, take the time to make sure it is the best comment you can write. Choose your words carefully. Use correct grammar and punctuation. Don\u2019t ramble. Don\u2019t state the obvious. Be brief.\n\n# C5: Commented-Out Code\n\nIt makes me crazy to see stretches of code that are commented out. Who knows how old it is? Who knows whether or not it\u2019s meaningful? Yet no one will delete it because everyone assumes someone else needs it or has plans for it.\n\nThat code sits there and rots, getting less and less relevant with every passing day. It calls functions that no longer exist. It uses variables whose names have changed. It follows conventions that are long obsolete. It pollutes the modules that contain it and distracts the people who try to read it. Commented-out code is an abomination.\n\nWhen you see commented-out code, delete it! Don\u2019t worry, the source code control system still remembers it. If anyone really needs it, he or she can go back and check out a previous version. Don\u2019t suffer commented-out code to survive.\n\n# Environment\n\n# E1: Build Requires More Than One Step\n\nBuilding a project should be a single trivial operation. You should not have to check many little pieces out from source code control. You should not need a sequence of arcane commands or context dependent scripts in order to build the individual elements. You should not have to search near and far for all the various little extra JARs, XML files, and other artifacts that the system requires. You should be able to check out the system with one simple command and then issue one other simple command to build it.\n\nsvn get mySystem\ncd mySystem\nant all\n\n# E2: Tests Require More Than One Step\n\nYou should be able to run all the unit tests with just one command. In the best case you can run all the tests by clicking on one button in your IDE. In the worst case you should be able to issue a single simple command in a shell. Being able to run all the tests is so fundamental and so important that it should be quick, easy, and obvious to do.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2127, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eefdbb25-09d8-4044-97cf-b9b90feab8a4": {"__data__": {"id_": "eefdbb25-09d8-4044-97cf-b9b90feab8a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f6f5414f-48b4-4d9e-9342-ec0be4d70a79", "node_type": "4", "metadata": {}, "hash": "e0c8be9065bcc47fc784c7f33630e7914dfd352c41463969b1108f7df67c266b", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\n# Functions\n\n# F1: Too Many Arguments\n\nFunctions should have a small number of arguments. No argument is best, followed by one, two, and three. More than three is very questionable and should be avoided with prejudice. (See \u201cFunction Arguments\u201d on page 40.)\n\n# F2: Output Arguments\n\nOutput arguments are counterintuitive. Readers expect arguments to be inputs, not outputs. If your function must change the state of something, have it change the state of the object it is called on. (See \u201cOutput Arguments\u201d on page 45.)\n\n# F3: Flag Arguments\n\nBoolean arguments loudly declare that the function does more than one thing. They are confusing and should be eliminated. (See \u201cFlag Arguments\u201d on page 41.)\n\n# F4: Dead Function\n\nMethods that are never called should be discarded. Keeping dead code around is wasteful. Don\u2019t be afraid to delete the function. Remember, your source code control system still remembers it.\n\n# General\n\n# G1: Multiple Languages in One Source File\n\nToday\u2019s modern programming environments make it possible to put many different languages into a single source file. For example, a Java source file might contain snippets of XML, HTML, YAML, JavaDoc, English, JavaScript, and so on. For another example, in addition to HTML a JSP file might contain Java, a tag library syntax, English comments, Javadocs, XML, JavaScript, and so forth. This is confusing at best and carelessly sloppy at worst. The ideal is for a source file to contain one, and only one, language. Realistically, we will probably have to use more than one. But we should take pains to minimize both the number and extent of extra languages in our source files.\n\n# G2: Obvious Behavior Is Unimplemented\n\nFollowing \u201cThe Principle of Least Surprise,\u201d any function or class should implement the behaviors that another programmer could reasonably expect. For example, consider a function that translates the name of a day to an enum that represents the day.\n\n2. Or \u201cThe Principle of Least Astonishment\u201d: http://en.wikipedia.org/wiki/Principle_of_least_astonishment", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2082, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d3f8eda-feb0-4fce-bed4-ae19122b18bb": {"__data__": {"id_": "2d3f8eda-feb0-4fce-bed4-ae19122b18bb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ec439c5f-4fb1-42a5-bd53-23b528c8a034", "node_type": "4", "metadata": {}, "hash": "b8806d7bf7387ed530a29afc12622c38d1302886eb91daf99bf7a3445aff1f36", "class_name": "RelatedNodeInfo"}}, "text": "# General\n\nDay day = DayDate.StringToDay(String dayName); We would expect the string \"Monday\" to be translated to Day.MONDAY. We would also expect the common abbreviations to be translated, and we would expect the function to ignore case.\n\nWhen an obvious behavior is not implemented, readers and users of the code can no longer depend on their intuition about function names. They lose their trust in the original author and must fall back on reading the details of the code.\n\n# G3: Incorrect Behavior at the Boundaries\n\nIt seems obvious to say that code should behave correctly. The problem is that we seldom realize just how complicated correct behavior is. Developers often write functions that they think will work, and then trust their intuition rather than going to the effort to prove that their code works in all the corner and boundary cases.\n\nThere is no replacement for due diligence. Every boundary condition, every corner case, every quirk and exception represents something that can confound an elegant and intuitive algorithm. Don\u2019t rely on your intuition. Look for every boundary condition and write a test for it.\n\n# G4: Overridden Safeties\n\nChernobyl melted down because the plant manager overrode each of the safety mechanisms one by one. The safeties were making it inconvenient to run an experiment. The result was that the experiment did not get run, and the world saw its first major civilian nuclear catastrophe.\n\nIt is risky to override safeties. Exerting manual control over serialVersionUID may be necessary, but it is always risky. Turning off certain compiler warnings (or all warnings!) may help you get the build to succeed, but at the risk of endless debugging sessions. Turning off failing tests and telling yourself you\u2019ll get them to pass later is as bad as pretending your credit cards are free money.\n\n# G5: Duplication\n\nThis is one of the most important rules in this book, and you should take it very seriously. Virtually every author who writes about software design mentions this rule. Dave Thomas and Andy Hunt called it the DRY3 principle (Don\u2019t Repeat Yourself). Kent Beck made it one of the core principles of Extreme Programming and called it: \u201cOnce, and only once.\u201d Ron Jeffries ranks this rule second, just below getting all the tests to pass.\n\nEvery time you see duplication in the code, it represents a missed opportunity for abstraction. That duplication could probably become a subroutine or perhaps another class outright. By folding the duplication into such an abstraction, you increase the vocabulary of the language of your design. Other programmers can use the abstract facilities.\n\n3.  [PRAG].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2653, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17a3f36c-58eb-4159-b17a-1b9998ddd8ea": {"__data__": {"id_": "17a3f36c-58eb-4159-b17a-1b9998ddd8ea", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9967566f-8d3e-410f-b3b0-2abb6d3b4917", "node_type": "4", "metadata": {}, "hash": "a1a3e641ca127cb4443075e9eacf94068becd8e3b4af9d0cd911d330c5d4ed06", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\nyou create. Coding becomes faster and less error prone because you have raised the abstraction level.\n\nThe most obvious form of duplication is when you have clumps of identical code that look like some programmers went wild with the mouse, pasting the same code over and over again. These should be replaced with simple methods.\n\nA more subtle form is the switch/case or if/else chain that appears again and again in various modules, always testing for the same set of conditions. These should be replaced with polymorphism.\n\nStill more subtle are the modules that have similar algorithms, but that don\u2019t share similar lines of code. This is still duplication and should be addressed by using the TEMPLATE METHOD, 4 or STRATEGY 5 pattern.\n\nIndeed, most of the design patterns that have appeared in the last fifteen years are simply well-known ways to eliminate duplication. So too the Codd Normal Forms are a strategy for eliminating duplication in database schemae. OO itself is a strategy for organizing modules and eliminating duplication. Not surprisingly, so is structured programming.\n\nI think the point has been made. Find and eliminate duplication wherever you can.\n\n# G6: Code at Wrong Level of Abstraction\n\nIt is important to create abstractions that separate higher level general concepts from lower level detailed concepts. Sometimes we do this by creating abstract classes to hold the higher level concepts and derivatives to hold the lower level concepts. When we do this, we need to make sure that the separation is complete. We want all the lower level concepts to be in the derivatives and all the higher level concepts to be in the base class.\n\nFor example, constants, variables, or utility functions that pertain only to the detailed implementation should not be present in the base class. The base class should know nothing about them.\n\nThis rule also pertains to source files, components, and modules. Good software design requires that we separate concepts at different levels and place them in different containers. Sometimes these containers are base classes or derivatives and sometimes they are source files, modules, or components. Whatever the case may be, the separation needs to be complete. We don\u2019t want lower and higher level concepts mixed together.\n\nConsider the following code:\n\npublic interface Stack {\nObject pop() throws EmptyException;\nvoid push(Object o) throws FullException;\ndouble percentFull();\n}\n\n4.  [GOF].\n\n5.  [GOF].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2502, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38e2716a-3fb1-4b38-a667-d47251331e12": {"__data__": {"id_": "38e2716a-3fb1-4b38-a667-d47251331e12", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7d5fd680-3984-4d9f-abb7-154a069d9198", "node_type": "4", "metadata": {}, "hash": "c855fc666ab75c722aed5d97650f2b64639b96ac89a24dc7770c4aa75a1fe020", "class_name": "RelatedNodeInfo"}}, "text": "General 291\n\nclass EmptyException extends Exception {}\nclass FullException extends Exception {}\n\nThe percentFull function is at the wrong level of abstraction. Although there are many implementations of Stack where the concept of fullness is reasonable, there are other implementations that simply could not know how full they are. So the function would be better placed in a derivative interface such as BoundedStack.\n\nPerhaps you are thinking that the implementation could just return zero if the stack were boundless. The problem with that is that no stack is truly boundless. You cannot really prevent an OutOfMemoryException by checking for stack.percentFull() &lt; 50.0. Implementing the function to return 0 would be telling a lie.\n\nThe point is that you cannot lie or fake your way out of a misplaced abstraction. Isolating abstractions is one of the hardest things that software developers do, and there is no quick fix when you get it wrong.\n\n# G7: Base Classes Depending on Their Derivatives\n\nThe most common reason for partitioning concepts into base and derivative classes is so that the higher level base class concepts can be independent of the lower level derivative class concepts. Therefore, when we see base classes mentioning the names of their derivatives, we suspect a problem. In general, base classes should know nothing about their derivatives.\n\nThere are exceptions to this rule, of course. Sometimes the number of derivatives is strictly fixed, and the base class has code that selects between the derivatives. We see this a lot in finite state machine implementations. However, in that case the derivatives and base class are strongly coupled and always deploy together in the same jar file. In the general case we want to be able to deploy derivatives and bases in different jar files.\n\nDeploying derivatives and bases in different jar files and making sure the base jar files know nothing about the contents of the derivative jar files allow us to deploy our systems in discrete and independent components. When such components are modified, they can be redeployed without having to redeploy the base components. This means that the impact of a change is greatly lessened, and maintaining systems in the field is made much simpler.\n\n# G8: Too Much Information\n\nWell-defined modules have very small interfaces that allow you to do a lot with a little. Poorly defined modules have wide and deep interfaces that force you to use many different gestures to get simple things done. A well-defined interface does not offer very many functions to depend upon, so coupling is low. A poorly defined interface provides lots of functions that you must call, so coupling is high.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2697, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3551ecb-6dbd-4507-8400-71e82a99845b": {"__data__": {"id_": "f3551ecb-6dbd-4507-8400-71e82a99845b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bd7befe7-954d-4140-bfdb-ea9224fc7d95", "node_type": "4", "metadata": {}, "hash": "d068e382e5d7edd13124241f3a30cfa5b26840a8e7fd93d14c4d2eb55ab6f936", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\nGood software developers learn to limit what they expose at the interfaces of their classes and modules. The fewer methods a class has, the better. The fewer variables a function knows about, the better. The fewer instance variables a class has, the better.\n\nHide your data. Hide your utility functions. Hide your constants and your temporaries. Don\u2019t create classes with lots of methods or lots of instance variables. Don\u2019t create lots of protected variables and functions for your subclasses. Concentrate on keeping interfaces very tight and very small. Help keep coupling low by limiting information.\n\n# G9: Dead Code\n\nDead code is code that isn\u2019t executed. You find it in the body of an if statement that checks for a condition that can\u2019t happen. You find it in the catch block of a try that never throws. You find it in little utility methods that are never called or switch/case conditions that never occur.\n\nThe problem with dead code is that after awhile it starts to smell. The older it is, the stronger and sourer the odor becomes. This is because dead code is not completely updated when designs change. It still compiles, but it does not follow newer conventions or rules. It was written at a time when the system was different. When you find dead code, do the right thing. Give it a decent burial. Delete it from the system.\n\n# G10: Vertical Separation\n\nVariables and function should be defined close to where they are used. Local variables should be declared just above their first usage and should have a small vertical scope. We don\u2019t want local variables declared hundreds of lines distant from their usages.\n\nPrivate functions should be defined just below their first usage. Private functions belong to the scope of the whole class, but we\u2019d still like to limit the vertical distance between the invocations and definitions. Finding a private function should just be a matter of scanning downward from the first usage.\n\n# G11: Inconsistency\n\nIf you do something a certain way, do all similar things in the same way. This goes back to the principle of least surprise. Be careful with the conventions you choose, and once chosen, be careful to continue to follow them.\n\nIf within a particular function you use a variable named response to hold an HttpServletResponse, then use the same variable name consistently in the other functions that use HttpServletResponse objects. If you name a method processVerificationRequest, then use a similar name, such as processDeletionRequest, for the methods that process other kinds of requests.\n\nSimple consistency like this, when reliably applied, can make code much easier to read and modify.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2686, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6860251-a6f5-4362-92ff-a83cf2e7bb58": {"__data__": {"id_": "e6860251-a6f5-4362-92ff-a83cf2e7bb58", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "293bebd4-c05a-4185-a8d3-2fd4c380c4b0", "node_type": "4", "metadata": {}, "hash": "2dc522e9aa87b01e48550a61c07cf26e10fbc9c05062059f7156d46f7c136e9d", "class_name": "RelatedNodeInfo"}}, "text": "# G12: Clutter\n\nOf what use is a default constructor with no implementation? All it serves to do is clutter up the code with meaningless artifacts. Variables that aren\u2019t used, functions that are never called, comments that add no information, and so forth. All these things are clutter and should be removed. Keep your source files clean, well organized, and free of clutter.\n\n# G13: Artificial Coupling\n\nThings that don\u2019t depend upon each other should not be artificially coupled. For example, general enums should not be contained within more specific classes because this forces the whole application to know about these more specific classes. The same goes for general purpose static functions being declared in specific classes.\n\nIn general an artificial coupling is a coupling between two modules that serves no direct purpose. It is a result of putting a variable, constant, or function in a temporarily convenient, though inappropriate, location. This is lazy and careless.\n\nTake the time to figure out where functions, constants, and variables ought to be declared. Don\u2019t just toss them in the most convenient place at hand and then leave them there.\n\n# G14: Feature Envy\n\nThis is one of Martin Fowler\u2019s code smells.6 The methods of a class should be interested in the variables and functions of the class they belong to, and not the variables and functions of other classes. When a method uses accessors and mutators of some other object to manipulate the data within that object, then it envies the scope of the class of that other object. It wishes that it were inside that other class so that it could have direct access to the variables it is manipulating.\n\nFor example:\n\npublic class HourlyPayCalculator {\npublic Money calculateWeeklyPay(HourlyEmployee e) {\nint tenthRate = e.getTenthRate().getPennies();\nint tenthsWorked = e.getTenthsWorked();\nint straightTime = Math.min(400, tenthsWorked);\nint overTime = Math.max(0, tenthsWorked - straightTime);\nint straightPay = straightTime * tenthRate;\nint overtimePay = (int)Math.round(overTime*tenthRate*1.5);\nreturn new Money(straightPay + overtimePay);\n}\n}\nThe calculateWeeklyPay method reaches into the HourlyEmployee object to get the data on which it operates. The calculateWeeklyPay method envies the scope of HourlyEmployee. It \u201cwishes\u201d that it could be inside HourlyEmployee.\n\n6.  [Refactoring].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2361, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82081ef7-da8c-4701-b4b4-88de5dcb4a18": {"__data__": {"id_": "82081ef7-da8c-4701-b4b4-88de5dcb4a18", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3565263c-cd86-4611-abb1-76e7156ec4d4", "node_type": "4", "metadata": {}, "hash": "008ab8bff58aa8eec364063e92f89ba3796b71c8e57c725914974b84a35b1857", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\nAll else being equal, we want to eliminate Feature Envy because it exposes the internals of one class to another. Sometimes, however, Feature Envy is a necessary evil. Consider the following:\n\npublic class HourlyEmployeeReport {\nprivate HourlyEmployee employee;\npublic HourlyEmployeeReport(HourlyEmployee e) {\nthis.employee = e;\n}\nString reportHours() {\nreturn String.format(\n\"Name: %s\\tHours:%d.%1d\\n\",\nemployee.getName(),\nemployee.getTenthsWorked()/10,\nemployee.getTenthsWorked()%10);\n}\n}\n\nClearly, the reportHours method envies the HourlyEmployee class. On the other hand, we don\u2019t want HourlyEmployee to have to know about the format of the report. Moving that format string into the HourlyEmployee class would violate several principles of object oriented design.7 It would couple HourlyEmployee to the format of the report, exposing it to changes in that format.\n\n# G15: Selector Arguments\n\nThere is hardly anything more abominable than a dangling false argument at the end of a function call. What does it mean? What would it change if it were true? Not only is the purpose of a selector argument difficult to remember, each selector argument combines many functions into one. Selector arguments are just a lazy way to avoid splitting a large function into several smaller functions. Consider:\n\npublic int calculateWeeklyPay(boolean overtime) {\nint tenthRate = getTenthRate();\nint tenthsWorked = getTenthsWorked();\nint straightTime = Math.min(400, tenthsWorked);\nint overTime = Math.max(0, tenthsWorked - straightTime);\nint straightPay = straightTime * tenthRate;\ndouble overtimeRate = overtime ? 1.5 : 1.0 * tenthRate;\nint overtimePay = (int)Math.round(overTime*overtimeRate);\nreturn straightPay + overtimePay;\n}\n\nYou call this function with a true if overtime is paid as time and a half, and with a false if overtime is paid as straight time. It\u2019s bad enough that you must remember what calculateWeeklyPay(false) means whenever you happen to stumble across it. But the\n\n7. Specifically, the Single Responsibility Principle, the Open Closed Principle, and the Common Closure Principle. See [PPP].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2141, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5862b298-0064-484d-973d-489dcda19315": {"__data__": {"id_": "5862b298-0064-484d-973d-489dcda19315", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "00a6454b-31d3-45b7-b596-0d87a5010c70", "node_type": "4", "metadata": {}, "hash": "a41d254833e6625d940559ebf773b4d4e20cf29d99942bac701e367d95a30b5b", "class_name": "RelatedNodeInfo"}}, "text": "# General\n\nreal shame of a function like this is that the author missed the opportunity to write the following:\n\npublic int straightPay() {return getTenthsWorked() * getTenthRate();\n}\npublic int overTimePay() {int overTimeTenths = Math.max(0, getTenthsWorked() - 400);\nint overTimePay = overTimeBonus(overTimeTenths);\nreturn straightPay() + overTimePay;\n}\nprivate int overTimeBonus(int overTimeTenths) {\ndouble bonus = 0.5 * getTenthRate() * overTimeTenths;\nreturn (int) Math.round(bonus);\n}\n\nOf course, selectors need not be boolean. They can be enums, integers, or any other type of argument that is used to select the behavior of the function. In general it is better to have many functions than to pass some code into a function to select the behavior.\n\n# G16: Obscured Intent\n\nWe want code to be as expressive as possible. Run-on expressions, Hungarian notation, and magic numbers all obscure the author\u2019s intent. For example, here is the overTimePay function as it might have appeared:\n\npublic int m_otCalc() {return iThsWkd * iThsRte +\n(int) Math.round(0.5 * iThsRte *\n);Math.max(0, iThsWkd - 400)\n}\n\nSmall and dense as this might appear, it\u2019s also virtually impenetrable. It is worth taking the time to make the intent of our code visible to our readers.\n\n# G17: Misplaced Responsibility\n\nOne of the most important decisions a software developer can make is where to put code. For example, where should the PI constant go? Should it be in the Math class? Perhaps it belongs in the Trigonometry class? Or maybe in the Circle class?\n\nThe principle of least surprise comes into play here. Code should be placed where a reader would naturally expect it to be. The PI constant should go where the trig functions are declared. The OVERTIME_RATE constant should be declared in the HourlyPay-Calculator class.\n\nSometimes we get \u201cclever\u201d about where to put certain functionality. We\u2019ll put it in a function that\u2019s convenient for us, but not necessarily intuitive to the reader. For example, perhaps we need to print a report with the total of hours that an employee worked. We", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2075, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d767ca8-ff7f-4632-a588-28d70c9a6037": {"__data__": {"id_": "8d767ca8-ff7f-4632-a588-28d70c9a6037", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "99226b58-b8ac-4f2e-9daf-a4dcf4ea23a6", "node_type": "4", "metadata": {}, "hash": "bca5dfde28f8240b1bafe851dba9fc4a4834e7063aaaa261452edb84fe61f746", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\ncould sum up those hours in the code that prints the report, or we could try to keep a running total in the code that accepts time cards.\n\nOne way to make this decision is to look at the names of the functions. Let\u2019s say that our report module has a function named getTotalHours. Let\u2019s also say that the module that accepts time cards has a saveTimeCard function. Which of these two functions, by it\u2019s name, implies that it calculates the total? The answer should be obvious.\n\nClearly, there are sometimes performance reasons why the total should be calculated as time cards are accepted rather than when the report is printed. That\u2019s fine, but the names of the functions ought to reflect this. For example, there should be a computeRunningTotalOfHours function in the timecard module.\n\n# G18: Inappropriate Static\n\nMath.max(double a, double b) is a good static method. It does not operate on a single instance; indeed, it would be silly to have to say new Math().max(a,b) or even a.max(b). All the data that max uses comes from its two arguments, and not from any \u201cowning\u201d object. More to the point, there is almost no chance that we\u2019d want Math.max to be polymorphic.\n\nSometimes, however, we write static functions that should not be static. For example, consider:\n\nHourlyPayCalculator.calculatePay(employee, overtimeRate).\n\nAgain, this seems like a reasonable static function. It doesn\u2019t operate on any particular object and gets all it\u2019s data from it\u2019s arguments. However, there is a reasonable chance that we\u2019ll want this function to be polymorphic. We may wish to implement several different algorithms for calculating hourly pay, for example, OvertimeHourlyPayCalculator and StraightTimeHourlyPayCalculator. So in this case the function should not be static. It should be a nonstatic member function of Employee.\n\nIn general you should prefer nonstatic methods to static methods. When in doubt, make the function nonstatic. If you really want a function to be static, make sure that there is no chance that you\u2019ll want it to behave polymorphically.\n\n# G19: Use Explanatory Variables\n\nKent Beck wrote about this in his great book *Smalltalk Best Practice Patterns8 and again more recently in his equally great book Implementation Patterns*9. One of the more powerful ways to make a program readable is to break the calculations up into intermediate values that are held in variables with meaningful names.\n\n8.  [Beck97], p. 108.\n\n9.  [Beck07].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2486, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9bafaa1-eea0-45f6-9e9e-48855c521ca3": {"__data__": {"id_": "a9bafaa1-eea0-45f6-9e9e-48855c521ca3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "07660a68-d66c-410f-9aca-ec1b975d2d5e", "node_type": "4", "metadata": {}, "hash": "f1e0b146842e2a301d6841b786f948303b2c56f4938f6dd2406eec4ede414928", "class_name": "RelatedNodeInfo"}}, "text": "# General\n\nConsider this example from FitNesse:\n\nMatcher match = headerPattern.matcher(line);\nif(match.find())\n{ String key = match.group(1);String value = match.group(2);\nheaders.put(key.toLowerCase(), value);\n}\n\nThe simple use of explanatory variables makes it clear that the first matched group is the key, and the second matched group is the value. It is hard to overdo this. More explanatory variables are generally better than fewer. It is remarkable how an opaque module can suddenly become transparent simply by breaking the calculations up into well-named intermediate values.\n\n# G20: Function Names Should Say What They Do\n\nLook at this code:\n\nDate newDate = date.add(5);\n\nWould you expect this to add five days to the date? Or is it weeks, or hours? Is the date instance changed or does the function just return a new Date without changing the old one? You can\u2019t tell from the call what the function does.\n\nIf the function adds five days to the date and changes the date, then it should be called addDaysTo or increaseByDays. If, on the other hand, the function returns a new date that is five days later but does not change the date instance, it should be called daysLater or daysSince.\n\nIf you have to look at the implementation (or documentation) of the function to know what it does, then you should work to find a better name or rearrange the functionality so that it can be placed in functions with better names.\n\n# G21: Understand the Algorithm\n\nLots of very funny code is written because people don\u2019t take the time to understand the algorithm. They get something to work by plugging in enough if statements and flags, without really stopping to consider what is really going on.\n\nProgramming is often an exploration. You think you know the right algorithm for something, but then you wind up fiddling with it, prodding and poking at it, until you get it to \u201cwork.\u201d How do you know it \u201cworks\u201d? Because it passes the test cases you can think of.\n\nThere is nothing wrong with this approach. Indeed, often it is the only way to get a function to do what you think it should. However, it is not sufficient to leave the quotation marks around the word \u201cwork.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "abc14f02-9827-481a-bc89-23088210135c": {"__data__": {"id_": "abc14f02-9827-481a-bc89-23088210135c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f767f52d-a0fb-4309-a1ec-fa95404729c9", "node_type": "4", "metadata": {}, "hash": "86d7701484e146afd8f7746cbc3d58818149d425cab322c05afd058a61cab36e", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\nhow it works. It is not good enough that it passes all the tests. You must know10 that the solution is correct.\n\nBefore you consider yourself to be done with a function, make sure you understand the solution is correct. Often the best way to gain this knowledge and understanding is to refactor the function into something that is so clean and expressive that it is obvious how it works.\n\n# G22: Make Logical Dependencies Physical\n\nIf one module depends upon another, that dependency should be physical, not just logical. The dependent module should not make assumptions (in other words, logical dependencies) about the module it depends upon. Rather it should explicitly ask that module for all the information it depends upon.\n\nFor example, imagine that you are writing a function that prints a plain text report of hours worked by employees. One class named HourlyReporter gathers all the data into a convenient form and then passes it to HourlyReportFormatter to print it. (See Listing 17-1.)\n\n# Listing 17-1\n\n# HourlyReporter.java\n\npublic class HourlyReporter {\nprivate HourlyReportFormatter formatter;\nprivate List<LineItem> page;\nprivate final int PAGE_SIZE = 55;\n\npublic HourlyReporter(HourlyReportFormatter formatter) {\nthis.formatter = formatter;\npage = new ArrayList<LineItem>();\n}\n\npublic void generateReport(List<HourlyEmployee> employees) {\nfor (HourlyEmployee e : employees) {\naddLineItemToPage(e);\nif (page.size() == PAGE_SIZE) printAndClearItemList();\n}\nif (page.size() > 0) printAndClearItemList();\n}\n\nprivate void printAndClearItemList() {\nformatter.format(page);\npage.clear();\n}\n\nprivate void addLineItemToPage(HourlyEmployee e) {\nLineItem item = new LineItem();\nitem.name = e.getName();\nitem.hours = e.getTenthsWorked() / 10;\n}\n}\n\n10. There is a difference between knowing how the code works and knowing whether the algorithm will do the job required of it. Being unsure that an algorithm is appropriate is often a fact of life. Being unsure what your code does is just laziness.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2037, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2c44c65-3e18-423a-a65e-0edb787e9d97": {"__data__": {"id_": "e2c44c65-3e18-423a-a65e-0edb787e9d97", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "517ca926-f127-4824-a6c4-d8312b787518", "node_type": "4", "metadata": {}, "hash": "f3a7803701b0674993c1797d719660baff370481384f16f4b6c3d4887b7926d3", "class_name": "RelatedNodeInfo"}}, "text": "# General\n\nListing 17-1 (continued)\n\nHourlyReporter.java\nitem.tenths = e.getTenthsWorked() % 10;\npage.add(item);\n\npublic class LineItem {\npublic String name;\npublic int hours;\npublic int tenths;\n}\n\nThis code has a logical dependency that has not been physicalized. Can you spot it? It is the constant PAGE_SIZE. Why should the HourlyReporter know the size of the page? Page size should be the responsibility of the HourlyReportFormatter.\n\nThe fact that PAGE_SIZE is declared in HourlyReporter represents a misplaced responsibility [G17] that causes HourlyReporter to assume that it knows what the page size ought to be. Such an assumption is a logical dependency. HourlyReporter depends on the fact that HourlyReportFormatter can deal with page sizes of 55. If some implementation of HourlyReportFormatter could not deal with such sizes, then there would be an error.\n\nWe can physicalize this dependency by creating a new method in HourlyReportFormatter named getMaxPageSize(). HourlyReporter will then call that function rather than using the PAGE_SIZE constant.\n\n# G23: Prefer Polymorphism to If/Else or Switch/Case\n\nThis might seem a strange suggestion given the topic of Chapter 6. After all, in that chapter I make the point that switch statements are probably appropriate in the parts of the system where adding new functions is more likely than adding new types.\n\nFirst, most people use switch statements because it\u2019s the obvious brute force solution, not because it\u2019s the right solution for the situation. So this heuristic is here to remind us to consider polymorphism before using a switch.\n\nSecond, the cases where functions are more volatile than types are relatively rare. So every switch statement should be suspect.\n\nI use the following \u201cONE SWITCH\u201d rule: There may be no more than one switch statement for a given type of selection. The cases in that switch statement must create polymorphic objects that take the place of other such switch statements in the rest of the system.\n\n# G24: Follow Standard Conventions\n\nEvery team should follow a coding standard based on common industry norms. This coding standard should specify things like where to declare instance variables; how to name classes, methods, and variables; where to put braces; and so on. The team should not need a document to describe these conventions because their code provides the examples.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2376, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "325d7034-1b85-4eaa-b061-5de7cd4817a4": {"__data__": {"id_": "325d7034-1b85-4eaa-b061-5de7cd4817a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9e4ca1e2-53cc-4d4f-be35-ad98183623ab", "node_type": "4", "metadata": {}, "hash": "c860912c06035fdb27ae4c3f38e5fcac09e60b081a83aa269256bd14361fddc3", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\nEveryone on the team should follow these conventions. This means that each team member must be mature enough to realize that it doesn\u2019t matter a whit where you put your braces so long as you all agree on where to put them.\n\nIf you would like to know what conventions I follow, you\u2019ll see them in the refactored code in Listing B-7 on page 394, through Listing B-14.\n\n# G25: Replace Magic Numbers with Named Constants\n\nThis is probably one of the oldest rules in software development. I remember reading it in the late sixties in introductory COBOL, FORTRAN, and PL/1 manuals. In general it is a bad idea to have raw numbers in your code. You should hide them behind well-named constants.\n\nFor example, the number 86,400 should be hidden behind the constant SECONDS_PER_DAY. If you are printing 55 lines per page, then the constant 55 should be hidden behind the constant LINES_PER_PAGE.\n\nSome constants are so easy to recognize that they don\u2019t always need a named constant to hide behind so long as they are used in conjunction with very self-explanatory code. For example:\n\ndouble milesWalked = feetWalked / 5280.0;\nint dailyPay = hourlyRate * 8;\ndouble circumference = radius * Math.PI * 2;\n\nDo we really need the constants FEET_PER_MILE, WORK_HOURS_PER_DAY, and TWO in the above examples? Clearly, the last case is absurd. There are some formulae in which constants are simply better written as raw numbers. You might quibble about the WORK_HOURS_PER_DAY case because the laws or conventions might change. On the other hand, that formula reads so nicely with the 8 in it that I would be reluctant to add 17 extra characters to the readers\u2019 burden. And in the FEET_PER_MILE case, the number 5280 is so very well known and so unique a constant that readers would recognize it even if it stood alone on a page with no context surrounding it.\n\nConstants like 3.141592653589793 are also very well known and easily recognizable. However, the chance for error is too great to leave them raw. Every time someone sees 3.1415927535890793, they know that it is \u03c0, and so they fail to scrutinize it. (Did you catch the single-digit error?) We also don\u2019t want people using 3.14, 3.14159, 3.142, and so forth. Therefore, it is a good thing that Math.PI has already been defined for us.\n\nThe term \u201cMagic Number\u201d does not apply only to numbers. It applies to any token that has a value that is not self-describing. For example:\n\nassertEquals(7777, Employee.find(\"John Doe\").employeeNumber());\n\nThere are two magic numbers in this assertion. The first is obviously 7777, though what it might mean is not obvious. The second magic number is \"John Doe,\" and again the intent is not clear.\n\nIt turns out that \"John Doe\" is the name of employee #7777 in a well-known test database created by our team. Everyone in the team knows that when you connect to this", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2877, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e13b388e-f816-410a-8fc9-8d8a13c4280c": {"__data__": {"id_": "e13b388e-f816-410a-8fc9-8d8a13c4280c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b548d86a-6af5-4223-9a16-8d5dec55155f", "node_type": "4", "metadata": {}, "hash": "7eaf60aa2918161d003bd961ae305fb2c30c481b9cb44b55e2f4e27e2cb7caeb", "class_name": "RelatedNodeInfo"}}, "text": "# General\n\ndatabase, it will have several employees already cooked into it with well-known values and attributes. It also turns out that \"John Doe\" represents the sole hourly employee in that test database. So this test should really read:\n\nassertEquals(HOURLY_EMPLOYEE_ID,\nEmployee.find(HOURLY_EMPLOYEE_NAME).employeeNumber());\n\n# G26: Be Precise\n\nExpecting the first match to be the only match to a query is probably naive. Using floating point numbers to represent currency is almost criminal. Avoiding locks and/or transaction management because you don\u2019t think concurrent update is likely is lazy at best. Declaring a variable to be an ArrayList when a List will due is overly constraining. Making all variables protected by default is not constraining enough.\n\nWhen you make a decision in your code, make sure you make it precisely. Know why you have made it and how you will deal with any exceptions. Don\u2019t be lazy about the precision of your decisions. If you decide to call a function that might return null, make sure you check for null. If you query for what you think is the only record in the database, make sure your code checks to be sure there aren\u2019t others. If you need to deal with currency, use integers11 and deal with rounding appropriately. If there is the possibility of concurrent update, make sure you implement some kind of locking mechanism.\n\nAmbiguities and imprecision in code are either a result of disagreements or laziness. In either case they should be eliminated.\n\n# G27: Structure over Convention\n\nEnforce design decisions with structure over convention. Naming conventions are good, but they are inferior to structures that force compliance. For example, switch/cases with nicely named enumerations are inferior to base classes with abstract methods. No one is forced to implement the switch/case statement the same way each time; but the base classes do enforce that concrete classes have all abstract methods implemented.\n\n# G28: Encapsulate Conditionals\n\nBoolean logic is hard enough to understand without having to see it in the context of an if or while statement. Extract functions that explain the intent of the conditional.\n\nFor example:\n\nif (shouldBeDeleted(timer))\nis preferable to\n\nif (timer.hasExpired() && !timer.isRecurrent())\n\n11. Or better yet, a Money class that uses integers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2330, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2016821f-b4d4-4a48-9af6-cb83298a2fe7": {"__data__": {"id_": "2016821f-b4d4-4a48-9af6-cb83298a2fe7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ac126ab5-c1f3-4117-9c69-735dab219d4d", "node_type": "4", "metadata": {}, "hash": "9ea3f27bc5a041e2de9afc49f94b209303f50de1d0e26a23d4331a6d5457f6de", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\n# G29: Avoid Negative Conditionals\n\nNegatives are just a bit harder to understand than positives. So, when possible, conditionals should be expressed as positives. For example:\n\nif (buffer.shouldCompact())\n\nis preferable to\n\nif (!buffer.shouldNotCompact())\n\n# G30: Functions Should Do One Thing\n\nIt is often tempting to create functions that have multiple sections that perform a series of operations. Functions of this kind do more than one thing, and should be converted into many smaller functions, each of which does one thing.\n\nFor example:\n\npublic void pay() {\nfor (Employee e : employees) {\nif (e.isPayday()) {\nMoney pay = e.calculatePay();\ne.deliverPay(pay);\n}\n}\n}\n\nThis bit of code does three things. It loops over all the employees, checks to see whether each employee ought to be paid, and then pays the employee. This code would be better written as:\n\npublic void pay() {\nfor (Employee e : employees)\npayIfNecessary(e);\n}\nprivate void payIfNecessary(Employee e) {\nif (e.isPayday())\ncalculateAndDeliverPay(e);\n}\nprivate void calculateAndDeliverPay(Employee e) {\nMoney pay = e.calculatePay();\ne.deliverPay(pay);\n}\n\nEach of these functions does one thing. (See \u201cDo One Thing\u201d on page 35.)\n\n# G31: Hidden Temporal Couplings\n\nTemporal couplings are often necessary, but you should not hide the coupling. Structure the arguments of your functions such that the order in which they should be called is obvious. Consider the following:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1476, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4934dc4b-e83b-4c76-b6a8-cd7e2996d9b7": {"__data__": {"id_": "4934dc4b-e83b-4c76-b6a8-cd7e2996d9b7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c5a18b58-b19d-4e85-bea5-81831b9ea486", "node_type": "4", "metadata": {}, "hash": "3eae02ad34b1f29ff02efd51996988bea2737dd9c20235238edea2bf4b5a62b0", "class_name": "RelatedNodeInfo"}}, "text": "# General\n\npublic class MoogDiver {\n\n&nbsp;&nbsp;&nbsp;&nbsp;Gradient gradient;\n\n&nbsp;&nbsp;&nbsp;&nbsp;List<Spline> splines;\n\n&nbsp;&nbsp;&nbsp;&nbsp;public void dive(String reason) {saturateGradient();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reticulateSplines();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diveForMoog(reason);\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;...\n\n}\n\nThe order of the three functions is important. You must saturate the gradient before you can reticulate the splines, and only then can you dive for the moog. Unfortunately, the code does not enforce this temporal coupling. Another programmer could call reticulateSplines before saturateGradient was called, leading to an UnsaturatedGradientException.\n\nA better solution is:\n\npublic class MoogDiver {\n\n&nbsp;&nbsp;&nbsp;&nbsp;Gradient gradient;\n\n&nbsp;&nbsp;&nbsp;&nbsp;List<Spline> splines;\n\n&nbsp;&nbsp;&nbsp;&nbsp;public void dive(String reason) {Gradient gradient = saturateGradient();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List<Spline> splines = reticulateSplines(gradient);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diveForMoog(splines, reason);\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;...\n\n}\n\nThis exposes the temporal coupling by creating a bucket brigade. Each function produces a result that the next function needs, so there is no reasonable way to call them out of order.\n\nYou might complain that this increases the complexity of the functions, and you\u2019d be right. But that extra syntactic complexity exposes the true temporal complexity of the situation.\n\nNote that I left the instance variables in place. I presume that they are needed by private methods in the class. Even so, I want the arguments in place to make the temporal coupling explicit.\n\n# G32: Don\u2019t Be Arbitrary\n\nHave a reason for the way you structure your code, and make sure that reason is communicated by the structure of the code. If a structure appears arbitrary, others will feel empowered to change it. If a structure appears consistently throughout the system, others will use it and preserve the convention. For example, I was recently merging changes to FitNesse and discovered that one of our committers had done this:\n\npublic class AliasLinkWidget extends ParentWidget { public static class VariableExpandingWidgetRoot {...\n\n&nbsp;&nbsp;&nbsp;&nbsp;...\n\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2379, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c557b98c-f550-439a-baae-ee5357fd4913": {"__data__": {"id_": "c557b98c-f550-439a-baae-ee5357fd4913", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6bb96ce0-1458-4b22-9d23-08ab0e590d2a", "node_type": "4", "metadata": {}, "hash": "e327ed2afc6a861ca4bb5180629c0d698184a63d3d480f92194c4bc0186dabeb", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\nThe problem with this was that VariableExpandingWidgetRoot had no need to be inside the scope of AliasLinkWidget. Moreover, other unrelated classes made use of AliasLinkWidget.VariableExpandingWidgetRoot. These classes had no need to know about AliasLinkWidget.\n\nPerhaps the programmer had plopped the VariableExpandingWidgetRoot into AliasWidget as a matter of convenience, or perhaps he thought it really needed to be scoped inside AliasWidget. Whatever the reason, the result wound up being arbitrary. Public classes that are not utilities of some other class should not be scoped inside another class. The convention is to make them public at the top level of their package.\n\n# G33: Encapsulate Boundary Conditions\n\nBoundary conditions are hard to keep track of. Put the processing for them in one place. Don\u2019t let them leak all over the code. We don\u2019t want swarms of +1s and -1s scattered hither and yon. Consider this simple example from FIT:\n\nif(level + 1 &lt; tags.length)\n{ parts = new Parse(body, tags, level + 1, offset + endTag);\nbody = null;\n}\nNotice that level+1 appears twice. This is a boundary condition that should be encapsulated within a variable named something like nextLevel.\n\nint nextLevel = level + 1;\nif(nextLevel &lt; tags.length)\n{   parts = new Parse(body, tags, nextLevel, offset + endTag);\nbody  = null;\n}\n\n# G34: Functions Should Descend Only One Level of Abstraction\n\nThe statements within a function should all be written at the same level of abstraction, which should be one level below the operation described by the name of the function. This may be the hardest of these heuristics to interpret and follow. Though the idea is plain enough, humans are just far too good at seamlessly mixing levels of abstraction. Consider, for example, the following code taken from FitNesse:\n\npublic String render() throws Exception\n{  StringBuffer html = new StringBuffer(\"&lt;hr\");\nif(size &gt; 0)html.append(\" size=\\\"\").append(size + 1).append(\"\\\"\");\nhtml.append(\"&gt;\");\nreturn html.toString();\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2058, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ea8cf0a-773f-4066-9b27-9a49d6fe4b7e": {"__data__": {"id_": "2ea8cf0a-773f-4066-9b27-9a49d6fe4b7e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6ac933ff-741a-4e85-a2aa-f6adc31970f7", "node_type": "4", "metadata": {}, "hash": "9e107f1c795cd613b0dc086ef8ea30a67204936b8f44a92865a56c72c32862e7", "class_name": "RelatedNodeInfo"}}, "text": "# General\n\nA moment\u2019s study and you can see what\u2019s going on. This function constructs the HTML tag that draws a horizontal rule across the page. The height of that rule is specified in the size variable.\n\nNow look again. This method is mixing at least two levels of abstraction. The first is the notion that a horizontal rule has a size. The second is the syntax of the HR tag itself.\n\nThis code comes from the HruleWidget module in FitNesse. This module detects a row of four or more dashes and converts it into the appropriate HR tag. The more dashes, the larger the size.\n\nI refactored this bit of code as follows. Note that I changed the name of the size field to reflect its true purpose. It held the number of extra dashes.\n\npublic String render() throws Exception\n{  HtmlTag hr = new HtmlTag(\"hr\");\nif (extraDashes > 0) hr.addAttribute(\"size\", hrSize(extraDashes));\nreturn hr.html();\n}\nprivate String hrSize(int height)\n{  int hrSize = height + 1;\nreturn String.format(\"%d\", hrSize);\n}\nThis change separates the two levels of abstraction nicely. The render function simply constructs an HR tag, without having to know anything about the HTML syntax of that tag. The HtmlTag module takes care of all the nasty syntax issues.\n\nIndeed, by making this change I caught a subtle error. The original code did not put the closing slash on the HR tag, as the XHTML standard would have it. (In other words, it emitted &lt;hr&gt; instead of &lt;hr/&gt;.) The HtmlTag module had been changed to conform to XHTML long ago.\n\nSeparating levels of abstraction is one of the most important functions of refactoring, and it\u2019s one of the hardest to do well. As an example, look at the code below. This was my first attempt at separating the abstraction levels in the HruleWidget.render method.\n\npublic String render() throws Exception\n{  HtmlTag hr = new HtmlTag(\"hr\");\nif (size > 0) { hr.addAttribute(\"size\", \"\"+(size+1));\n}\nreturn hr.html();\n}\nMy goal, at this point, was to create the necessary separation and get the tests to pass. I accomplished that goal easily, but the result was a function that still had mixed levels of abstraction. In this case the mixed levels were the construction of the HR tag and the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7eac7cca-e933-431d-bb6c-5df6a8d84c82": {"__data__": {"id_": "7eac7cca-e933-431d-bb6c-5df6a8d84c82", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ab4f8438-c1d8-4e72-813b-8a31ea8a562c", "node_type": "4", "metadata": {}, "hash": "2690397a9513d611a9b36dd639aec5594ddf0602d8d8098968b50b489251a97c", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\ninterpretation and formatting of the size variable. This points out that when you break a function along lines of abstraction, you often uncover new lines of abstraction that were obscured by the previous structure.\n\n# G35: Keep Configurable Data at High Levels\n\nIf you have a constant such as a default or configuration value that is known and expected at a high level of abstraction, do not bury it in a low-level function. Expose it as an argument to that low-level function called from the high-level function. Consider the following code from FitNesse:\n\npublic static void main(String[] args) throws Exception\n{\nArguments arguments = parseCommandLine(args);\n...\n}\npublic class Arguments\n{\npublic static final String DEFAULT_PATH = \".\";\npublic static final String DEFAULT_ROOT = \"FitNesseRoot\";\npublic static final int DEFAULT_PORT = 80;\npublic static final int DEFAULT_VERSION_DAYS = 14;\n...\n}\n\nThe command-line arguments are parsed in the very first executable line of FitNesse. The default values of those arguments are specified at the top of the Argument class. You don\u2019t have to go looking in low levels of the system for statements like this one:\n\nif (arguments.port == 0) // use 80 by default\n\nThe configuration constants reside at a very high level and are easy to change. They get passed down to the rest of the application. The lower levels of the application do not own the values of these constants.\n\n# G36: Avoid Transitive Navigation\n\nIn general we don\u2019t want a single module to know much about its collaborators. More specifically, if A collaborates with B, and B collaborates with C, we don\u2019t want modules that use A to know about C. (For example, we don\u2019t want a.getB().getC().doSomething();) \u201cWriting Shy Code.\u201d12 This is sometimes called the Law of Demeter. The Pragmatic Programmers call it In either case it comes down to making sure that modules know only about their immediate collaborators and do not know the navigation map of the whole system.\n\nIf many modules used some form of the statement a.getB().getC(), then it would be difficult to change the design and architecture to interpose a Q between B and C. You\u2019d\n\n12. [PRAG], p. 138.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2203, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e5da2a62-9c17-4f58-b144-75224404594b": {"__data__": {"id_": "e5da2a62-9c17-4f58-b144-75224404594b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "815da48c-4209-45e7-bd38-2fb37d5fbd2e", "node_type": "4", "metadata": {}, "hash": "bce8051e0fe36dd9cc28f9c8ea3e0510e95bb553e0699afb47871a40b01c3572", "class_name": "RelatedNodeInfo"}}, "text": "have to find every instance of a.getB().getC() and convert it to a.getB().getQ().getC(). This is how architectures become rigid. Too many modules know too much about the architecture. Rather we want our immediate collaborators to offer all the services we need. We should not have to roam through the object graph of the system, hunting for the method we want to call. Rather we should simply be able to say:\n\nmyCollaborator.doSomething().\n\n# Java\n\n# J1: Avoid Long Import Lists by Using Wildcards\n\nIf you use two or more classes from a package, then import the whole package with import package.*; Long lists of imports are daunting to the reader. We don\u2019t want to clutter up the tops of our modules with 80 lines of imports. Rather we want the imports to be a concise statement about which packages we collaborate with.\n\nSpecific imports are hard dependencies, whereas wildcard imports are not. If you specifically import a class, then that class must exist. But if you import a package with a wildcard, no particular classes need to exist. The import statement simply adds the package to the search path when hunting for names. So no true dependency is created by such imports, and they therefore serve to keep our modules less coupled.\n\nThere are times when the long list of specific imports can be useful. For example, if you are dealing with legacy code and you want to find out what classes you need to build mocks and stubs for, you can walk down the list of specific imports to find out the true qualified names of all those classes and then put the appropriate stubs in place. However, this use for specific imports is very rare. Furthermore, most modern IDEs will allow you to convert the wildcarded imports to a list of specific imports with a single command. So even in the legacy case it\u2019s better to import wildcards.\n\nWildcard imports can sometimes cause name conflicts and ambiguities. Two classes with the same name, but in different packages, will need to be specifically imported, or at least specifically qualified when used. This can be a nuisance but is rare enough that using wildcard imports is still generally better than specific imports.\n\n# J2: Don\u2019t Inherit Constants\n\nI have seen this several times and it always makes me grimace. A programmer puts some constants in an interface and then gains access to those constants by inheriting that interface. Take a look at the following code:\n\npublic class HourlyEmployee extends Employee {\nprivate int tenthsWorked;\nprivate double hourlyRate;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2515, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "50507e9c-7f5c-4fc8-811d-0d8a069c93f8": {"__data__": {"id_": "50507e9c-7f5c-4fc8-811d-0d8a069c93f8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "556d9d2c-4fcd-43dc-ab43-0d2091fdab34", "node_type": "4", "metadata": {}, "hash": "c43109224b70a4208b6fcde22bb3edcf4eeb754781332fa0cf7088740d0c1255", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\npublic Money calculatePay() {int straightTime = Math.min(tenthsWorked, TENTHS_PER_WEEK);\nint overTime = tenthsWorked - straightTime;\nreturn new Money(\n);hourlyRate * (tenthsWorked + OVERTIME_RATE * overTime)\n}\n...\n\nWhere did the constants TENTHS_PER_WEEK and OVERTIME_RATE come from? They might have come from class Employee; so let\u2019s take a look at that:\n\npublic abstract class Employee implements PayrollConstants {\npublic abstract boolean isPayday();\npublic abstract Money calculatePay();\npublic abstract void deliverPay(Money pay);\n}\n\nNope, not there. But then where? Look closely at class Employee. It implements PayrollConstants.\n\npublic interface PayrollConstants {\npublic static final int TENTHS_PER_WEEK = 400;\npublic static final double OVERTIME_RATE = 1.5;\n}\n\nThis is a hideous practice! The constants are hidden at the top of the inheritance hierarchy. Ick! Don\u2019t use inheritance as a way to cheat the scoping rules of the language. Use a static import instead.\n\nimport static PayrollConstants.*;\npublic class HourlyEmployee extends Employee {\nprivate int tenthsWorked;\nprivate double hourlyRate;\npublic Money calculatePay() {int straightTime = Math.min(tenthsWorked, TENTHS_PER_WEEK);\nint overTime = tenthsWorked - straightTime;\nreturn new Money(\n);hourlyRate * (tenthsWorked + OVERTIME_RATE * overTime)\n}\n...\n\n# J3: Constants versus Enums\n\nNow that enums have been added to the language (Java 5), use them! Don\u2019t keep using the old trick of public static final ints. The meaning of ints can get lost. The meaning of enums cannot, because they belong to an enumeration that is named.\n\nWhat\u2019s more, study the syntax for enums carefully. They can have methods and fields. This makes them very powerful tools that allow much more expression and flexibility than ints. Consider this variation on the payroll code:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1859, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5fc40572-c56d-495c-99d8-57dea8229e3d": {"__data__": {"id_": "5fc40572-c56d-495c-99d8-57dea8229e3d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "89fcab02-a926-495a-b8f1-383724d2bd14", "node_type": "4", "metadata": {}, "hash": "576cfa17765cb7abd7ab29fa528407b5fb74b481ea74146a6b0e9e745f570a97", "class_name": "RelatedNodeInfo"}}, "text": "# Names\n\npublic class HourlyEmployee extends Employee {\nprivate int tenthsWorked;\nHourlyPayGrade grade;\npublic Money calculatePay() {\nint straightTime = Math.min(tenthsWorked, TENTHS_PER_WEEK);\nint overTime = tenthsWorked - straightTime;\nreturn new Money(\n);grade.rate() * (tenthsWorked + OVERTIME_RATE * overTime)\n}\n...\n}\npublic enum HourlyPayGrade {\nAPPRENTICE {\npublic double rate() {\nreturn 1.0;\n},\n}\nLEUTENANT_JOURNEYMAN {\npublic double rate() {\nreturn 1.2;\n},\n}\nJOURNEYMAN {\npublic double rate() {\nreturn 1.5;\n},\n}\nMASTER {\npublic double rate() {\nreturn 2.0;\n};\n}\npublic abstract double rate();\n}\n\n# Choose Descriptive Names\n\nDon\u2019t be too quick to choose a name. Make sure the name is descriptive. Remember that meanings tend to drift as software evolves, so frequently reevaluate the appropriateness of the names you choose.\n\nThis is not just a \u201cfeel-good\u201d recommendation. Names in software are 90 percent of what make software readable. You need to take the time to choose them wisely and keep them relevant. Names are too important to treat carelessly.\n\nConsider the code below. What does it do? If I show you the code with well-chosen names, it will make perfect sense to you, but like this it\u2019s just a hodge-podge of symbols and magic numbers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1254, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ce4b246-c762-4410-ad7b-c8fe2a743540": {"__data__": {"id_": "7ce4b246-c762-4410-ad7b-c8fe2a743540", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "807aefac-1828-4b1b-8cbf-2b8e3b91a2bb", "node_type": "4", "metadata": {}, "hash": "b61164c2b0e14ec9141139ada3faac20b263fa276d0eb0709bfa5266bd58d4ff", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\npublic int x() {\nint q = 0;\nint z = 0;\nfor (int kk = 0; kk < 10; kk++) {\nif (l[z] == 10) {\nq += 10 + (l[z + 1] + l[z + 2]);\nz += 1;\n} else if (l[z] + l[z + 1] == 10) {\nq += 10 + l[z + 2];\nz += 2;\n} else {\nq += l[z] + l[z + 1];\nz += 2;\n}\n}\nreturn q;\n}\n\nHere is the code the way it should be written. This snippet is actually less complete than the one above. Yet you can infer immediately what it is trying to do, and you could very likely write the missing functions based on that inferred meaning. The magic numbers are no longer magic, and the structure of the algorithm is compellingly descriptive.\n\npublic int score() {\nint score = 0;\nint frame = 0;\nfor (int frameNumber = 0; frameNumber < 10; frameNumber++) {\nif (isStrike(frame)) {\nscore += 10 + nextTwoBallsForStrike(frame);\nframe += 1;\n} else if (isSpare(frame)) {\nscore += 10 + nextBallForSpare(frame);\nframe += 2;\n} else {\nscore += twoBallsInFrame(frame);\nframe += 2;\n}\n}\nreturn score;\n}\n\nThe power of carefully chosen names is that they overload the structure of the code with description. That overloading sets the readers\u2019 expectations about what the other functions in the module do. You can infer the implementation of isStrike() by looking at the code above. When you read the isStrike method, it will be \u201cpretty much what you expected.\u201d\n\nprivate boolean isStrike(int frame) {\nreturn rolls[frame] == 10;\n}\n\n13. See Ward Cunningham\u2019s quote on page 11.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1453, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "309ca1f5-161a-4bb8-a011-1a92b30f6ce6": {"__data__": {"id_": "309ca1f5-161a-4bb8-a011-1a92b30f6ce6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "823babdc-b9c9-4440-a971-740f50d65a61", "node_type": "4", "metadata": {}, "hash": "281994e041d8a4ad5f3ef3e245f7584bdf8bb8aaff65650213ac44f85cdf233a", "class_name": "RelatedNodeInfo"}}, "text": "# Names\n\n# N2: Choose Names at the Appropriate Level of Abstraction\n\nDon\u2019t pick names that communicate implementation; choose names that reflect the level of abstraction of the class or function you are working in. This is hard to do. Again, people are just too good at mixing levels of abstractions. Each time you make a pass over your code, you will likely find some variable that is named at too low a level. You should take the opportunity to change those names when you find them. Making code readable requires a dedication to continuous improvement. Consider the Modem interface below:\n\npublic interface Modem {\nboolean dial(String phoneNumber);\nboolean disconnect();\nboolean send(char c);\nchar recv();\nString getConnectedPhoneNumber();\n}\n\nAt first this looks fine. The functions all seem appropriate. Indeed, for many applications they are. But now consider an application in which some modems aren\u2019t connected by dialling. Rather they are connected permanently by hard wiring them together (think of the cable modems that provide Internet access to most homes nowadays). Perhaps some are connected by sending a port number to a switch over a USB connection. Clearly the notion of phone numbers is at the wrong level of abstraction. A better naming strategy for this scenario might be:\n\npublic interface Modem {\nboolean connect(String connectionLocator);\nboolean disconnect();\nboolean send(char c);\nchar recv();\nString getConnectedLocator();\n}\n\nNow the names don\u2019t make any commitments about phone numbers. They can still be used for phone numbers, or they could be used for any other kind of connection strategy.\n\n# N3: Use Standard Nomenclature Where Possible\n\nNames are easier to understand if they are based on existing convention or usage. For example, if you are using the DECORATOR pattern, you should use the word Decorator in the names of the decorating classes. For example, AutoHangupModemDecorator might be the name of a class that decorates a Modem with the ability to automatically hang up at the end of a session.\n\nPatterns are just one kind of standard. In Java, for example, functions that convert objects to string representations are often named toString. It is better to follow conventions like these than to invent your own.\n\nEric Evans refers to this as a ubiquitous language for the project.14 Your code should use Teams will often invent their own standard system of names for a particular project.\n\n14. [DDD].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2441, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bdf69ce1-cd4b-4795-b657-b5d5706f825c": {"__data__": {"id_": "bdf69ce1-cd4b-4795-b657-b5d5706f825c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "efe0f79b-2f23-48b8-b1a7-dfb683bf964c", "node_type": "4", "metadata": {}, "hash": "3460713d98d781f09648f962695ba9c6bdcb47f3e364f7d89a7a3a73428e04b9", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\nThe terms from this language extensively. In short, the more you can use names that are overloaded with special meanings that are relevant to your project, the easier it will be for readers to know what your code is talking about.\n\n# N4: Unambiguous Names\n\nChoose names that make the workings of a function or variable unambiguous. Consider this example from FitNesse:\n\nprivate String doRename() throws Exception\n{ if(refactorReferences)renameReferences();\nrenamePage();\npathToRename.removeNameFromEnd();\npathToRename.addNameToEnd(newName);\nreturn PathParser.render(pathToRename);\n}\nThe name of this function does not say what the function does except in broad and vague terms. This is emphasized by the fact that there is a function named renamePage inside the function named doRename! What do the names tell you about the difference between the two functions? Nothing.\n\nA better name for that function is renamePageAndOptionallyAllReferences. This may seem long, and it is, but it\u2019s only called from one place in the module, so its explanatory value outweighs the length.\n\n# N5: Use Long Names for Long Scopes\n\nThe length of a name should be related to the length of the scope. You can use very short variable names for tiny scopes, but for big scopes you should use longer names.\n\nVariable names like i and j are just fine if their scope is five lines long. Consider this snippet from the old standard \u201cBowling Game\u201d:\n\nprivate void rollMany(int n, int pins)\n{ for (int i=0; i<n; i++)g.roll(pins);\n}\nThis is perfectly clear and would be obfuscated if the variable i were replaced with something annoying like rollCount. On the other hand, variables and functions with short names lose their meaning over long distances. So the longer the scope of the name, the longer and more precise the name should be.\n\n# N6: Avoid Encodings\n\nNames should not be encoded with type or scope information. Prefixes such as m_ or f are useless in today\u2019s environments. Also project and/or subsystem encodings such as", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2037, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "807a3fd1-d28e-4419-8885-08c47ac3968b": {"__data__": {"id_": "807a3fd1-d28e-4419-8885-08c47ac3968b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8f650b97-e971-4ec9-8ebf-b5b01760fee8", "node_type": "4", "metadata": {}, "hash": "9a3c45c9637a0bc5821f63f8930df8848fa9c00a64ac1ede65d206b9a87fae0a", "class_name": "RelatedNodeInfo"}}, "text": "# Tests\n\n# N7: Names Should Describe Side-Effects\n\nNames should describe everything that a function, variable, or class is or does. Don\u2019t hide side effects with a name. Don\u2019t use a simple verb to describe a function that does more than just that simple action. For example, consider this code from TestNG:\n\npublic    ObjectOutputStream getOos() throws IOException {\nif (m_oos == null) {m_oos = new ObjectOutputStream(m_socket.getOutputStream());\n}\nreturn m_oos;\n}\n\nThis function does a bit more than get an \u201coos\u201d; it creates the \u201coos\u201d if it hasn\u2019t been created already. Thus, a better name might be createOrReturnOos.\n\n# Tests\n\n# T1: Insufficient Tests\n\nHow many tests should be in a test suite? Unfortunately, the metric many programmers use is \u201cThat seems like enough.\u201d A test suite should test everything that could possibly break. The tests are insufficient so long as there are conditions that have not been explored by the tests or calculations that have not been validated.\n\n# T2: Use a Coverage Tool!\n\nCoverage tools reports gaps in your testing strategy. They make it easy to find modules, classes, and functions that are insufficiently tested. Most IDEs give you a visual indication, marking lines that are covered in green and those that are uncovered in red. This makes it quick and easy to find if or catch statements whose bodies haven\u2019t been checked.\n\n# T3: Don\u2019t Skip Trivial Tests\n\nThey are easy to write and their documentary value is higher than the cost to produce them.\n\n# T4: An Ignored Test Is a Question about an Ambiguity\n\nSometimes we are uncertain about a behavioral detail because the requirements are unclear. We can express our question about the requirements as a test that is commented out, or as a test that annotated with @Ignore. Which you choose depends upon whether the ambiguity is about something that would compile or not.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1862, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e68fd50b-8133-4d47-8076-3c03dad7438d": {"__data__": {"id_": "e68fd50b-8133-4d47-8076-3c03dad7438d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ab414123-9f57-4173-8acb-8d6d1f09d3df", "node_type": "4", "metadata": {}, "hash": "5eb424cb8fe12cf71ce68782e25d3a3e94970626a2f834b22814921097b1435e", "class_name": "RelatedNodeInfo"}}, "text": "# Chapter 17: Smells and Heuristics\n\n# T5: Test Boundary Conditions\n\nTake special care to test boundary conditions. We often get the middle of an algorithm right but misjudge the boundaries.\n\n# T6: Exhaustively Test Near Bugs\n\nBugs tend to congregate. When you find a bug in a function, it is wise to do an exhaustive test of that function. You\u2019ll probably find that the bug was not alone.\n\n# T7: Patterns of Failure Are Revealing\n\nSometimes you can diagnose a problem by finding patterns in the way the test cases fail. This is another argument for making the test cases as complete as possible. Complete test cases, ordered in a reasonable way, expose patterns.\n\nAs a simple example, suppose you noticed that all tests with an input larger than five characters failed? Or what if any test that passed a negative number into the second argument of a function failed? Sometimes just seeing the pattern of red and green on the test report is enough to spark the \u201cAha!\u201d that leads to the solution. Look back at page 267 to see an interesting example of this in the SerialDate example.\n\n# T8: Test Coverage Patterns Can Be Revealing\n\nLooking at the code that is or is not executed by the passing tests gives clues to why the failing tests fail.\n\n# T9: Tests Should Be Fast\n\nA slow test is a test that won\u2019t get run. When things get tight, it\u2019s the slow tests that will be dropped from the suite. So do what you must to keep your tests fast.\n\n# Conclusion\n\nThis list of heuristics and smells could hardly be said to be complete. Indeed, I\u2019m not sure that such a list can ever be complete. But perhaps completeness should not be the goal, because what this list does do is imply a value system.\n\nIndeed, that value system has been the goal, and the topic, of this book. Clean code is not written by following a set of rules. You don\u2019t become a software craftsman by learning a list of heuristics. Professionalism and craftsmanship come from values that drive disciplines.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1966, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fb9c46a-6b4d-40ce-b7cf-141da971514c": {"__data__": {"id_": "0fb9c46a-6b4d-40ce-b7cf-141da971514c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6482c848-e524-4afa-b54a-7919594d6ac6", "node_type": "4", "metadata": {}, "hash": "a46af08ccda1f4bd1cb8aa712e43fbee4611ed4f97408e81c83a0cf7d18c618d", "class_name": "RelatedNodeInfo"}}, "text": "# Bibliography\n\n|[Refactoring]|Refactoring: Improving the Design of Existing Code, Martin Fowler et al., Addison-Wesley, 1999.|\n|---|---|\n|[PRAG]|The Pragmatic Programmer, Andrew Hunt, Dave Thomas, Addison-Wesley, 2000.|\n|[GOF]|Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al., Addison-Wesley, 1996.|\n|[Beck97]|Smalltalk Best Practice Patterns, Kent Beck, Prentice Hall, 1997.|\n|[Beck07]|Implementation Patterns, Kent Beck, Addison-Wesley, 2008.|\n|[PPP]|Agile Software Development: Principles, Patterns, and Practices, Robert C. Martin, Prentice Hall, 2002.|\n|[DDD]|Domain Driven Design, Eric Evans, Addison-Wesley, 2003.|", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 650, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b4052ad7-c8ad-4b74-bc60-9fef9398c1fd": {"__data__": {"id_": "b4052ad7-c8ad-4b74-bc60-9fef9398c1fd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1dcfae0f-969c-4dee-86ef-2eb7bed3ea17", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56713210-a9d1-4369-a628-f5aba8be6c90": {"__data__": {"id_": "56713210-a9d1-4369-a628-f5aba8be6c90", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ccb3eae5-d3b8-4c03-bf6c-5eb92f1c0f8f", "node_type": "4", "metadata": {}, "hash": "e6788da0c65925511afc868158f401628be61fb736ee44e42a559f58717e18d2", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A\n\n# Concurrency II\n\nby Brett L. Schuchert\n\nThis appendix supports and amplifies the Concurrency chapter on page 177. It is written as a series of independent topics and you can generally read them in any order. There is some duplication between sections to allow for such reading.\n\n# Client/Server Example\n\nImagine a simple client/server application. A server sits and waits listening on a socket for a client to connect. A client connects and sends a request.\n\n# The Server\n\nHere is a simplified version of a server application. Full source for this example is available starting on page 343, Client/Server Nonthreaded.\n\nServerSocket serverSocket = new ServerSocket(8009);\nwhile (keepProcessing) {\ntry {\nSocket socket = serverSocket.accept();\nprocess(socket);\n} catch (Exception e) {\nhandle(e);\n}\n}\n\n317", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 816, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e7e2281-38ae-406c-ab7c-d395f282b774": {"__data__": {"id_": "0e7e2281-38ae-406c-ab7c-d395f282b774", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "33460cd3-8cc1-4f4a-8995-ed5d2783b19b", "node_type": "4", "metadata": {}, "hash": "ea9d3621f4cb6d4096fdfd70bb4e0068257469e0456183baa57cca6c1460c1e5", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\nThis simple application waits for a connection, processes an incoming message, and then again waits for the next client request to come in. Here\u2019s client code that connects to this server:\n\nprivate void connectSendReceive(int i) {\ntry {\nSocket socket = new Socket(\"localhost\", PORT);\nMessageUtils.sendMessage(socket, Integer.toString(i));\nMessageUtils.getMessage(socket);\nsocket.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\nHow well does this client/server pair perform? How can we formally describe that performance? Here\u2019s a test that asserts that the performance is \u201cacceptable\u201d:\n\n@Test(timeout = 10000)\npublic void shouldRunInUnder10Seconds() throws Exception {\nThread[] threads = createThreads();\nstartAllThreadsw(threads);\nwaitForAllThreadsToFinish(threads);\n}\nThe setup is left out to keep the example simple (see \u201cClientTest.java\u201d on page 344). This test asserts that it should complete within 10,000 milliseconds.\n\nThis is a classic example of validating the throughput of a system. This system should complete a series of client requests in ten seconds. So long as the server can process each individual client request in time, the test will pass.\n\nWhat happens if the test fails? Short of developing some kind of event polling loop, there is not much to do within a single thread that will make this code any faster. Will using multiple threads solve the problem? It might, but we need to know where the time is being spent. There are two possibilities:\n\n- I/O\u2014using a socket, connecting to a database, waiting for virtual memory swapping, and so on.\n- Processor\u2014numerical calculations, regular expression processing, garbage collection, and so on.\n\nSystems typically have some of each, but for a given operation one tends to dominate. If the code is processor bound, more processing hardware can improve throughput, making our test pass. But there are only so many CPU cycles available, so adding threads to a processor-bound problem will not make it go faster.\n\nOn the other hand, if the process is I/O bound, then concurrency can increase efficiency. When one part of the system is waiting for I/O, another part can use that wait time to process something else, making more effective use of the available CPU.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2266, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eac0d71f-1cf8-48b5-8242-aee39cbbd449": {"__data__": {"id_": "eac0d71f-1cf8-48b5-8242-aee39cbbd449", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d1d7474-026b-487c-ab26-80e43788d426", "node_type": "4", "metadata": {}, "hash": "291ad6594baf43eadf46371b869575d81faa5490489410cf2dafcdd733beb43c", "class_name": "RelatedNodeInfo"}}, "text": "# Client/Server Example\n\n# Adding Threading\n\nAssume for the moment that the performance test fails. How can we improve the throughput so that the performance test passes? If the process method of the server is I/O bound, then here is one way to make the server use threads (just change the processMessage):\n\nvoid process(final Socket socket) {\nif (socket == null)\nreturn;\nRunnable clientHandler = new Runnable() {\npublic void run() {\ntry {\nString message = MessageUtils.getMessage(socket);\nMessageUtils.sendMessage(socket, \"Processed: \" + message);\ncloseIgnoringException(socket);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n};\nThread clientConnection = new Thread(clientHandler);\nclientConnection.start();\n}\n\nAssume that this change causes the test to pass; the code is complete, correct?\n\n# Server Observations\n\nThe updated server completes the test successfully in just over one second. Unfortunately, this solution is a bit naive and introduces some new problems.\n\nHow many threads might our server create? The code sets no limit, so we could feasibly hit the limit imposed by the Java Virtual Machine (JVM). For many simple systems this may suffice. But what if the system is meant to support many users on the public net? If too many users connect at the same time, the system might grind to a halt.\n\nBut set the behavioral problem aside for the moment. The solution shown has problems of cleanliness and structure. How many responsibilities does the server code have?\n\n- Socket connection management\n- Client processing\n- Threading policy\n- Server shutdown policy\n\nUnfortunately, all these responsibilities live in the process function. In addition, the code crosses many different levels of abstraction. So, small as the process function is, it needs to be repartitioned.\n\n1. You can verify that for yourself by trying out the before and after code. Review the nonthreaded code starting on page 343. Review the threaded code starting on page 346.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1959, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f8839b2-6297-476d-ac0d-314934b4bf78": {"__data__": {"id_": "9f8839b2-6297-476d-ac0d-314934b4bf78", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7a0030e8-749c-4d30-ae8b-81f030bc7a2d", "node_type": "4", "metadata": {}, "hash": "6afd946991448b704efd8839a034f4f3fca2e5ae21139fc471f6786c880e9a87", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\nThe server has several reasons to change; therefore it violates the Single Responsibility Principle. To keep concurrent systems clean, thread management should be kept to a few, well-controlled places. What\u2019s more, any code that manages threads should do nothing other than thread management. Why? If for no other reason than that tracking down concurrency issues is hard enough without having to unwind other nonconcurrency issues at the same time.\n\nIf we create a separate class for each of the responsibilities listed above, including the thread management responsibility, then when we change the thread management strategy, the change will impact less overall code and will not pollute the other responsibilities. This also makes it much easier to test all the other responsibilities without having to worry about threading. Here is an updated version that does just that:\n\npublic void run() {\nwhile (keepProcessing) {\ntry {\nClientConnection clientConnection = connectionManager.awaitClient();\nClientRequestProcessor requestProcessor = new ClientRequestProcessor(clientConnection);\nclientScheduler.schedule(requestProcessor);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\nconnectionManager.shutdown();\n}\nThis now focuses all things thread-related into one place, clientScheduler. If there are concurrency problems, there is just one place to look:\n\npublic interface ClientScheduler {\nvoid schedule(ClientRequestProcessor requestProcessor);\n}\nThe current policy is easy to implement:\n\npublic class ThreadPerRequestScheduler implements ClientScheduler {\npublic void schedule(final ClientRequestProcessor requestProcessor) {\nRunnable runnable = new Runnable() {\npublic void run() {\nrequestProcessor.process();\n}\n};\nThread thread = new Thread(runnable);\nthread.start();\n}\n}\nHaving isolated all the thread management into a single place, it is much easier to change the way we control threads. For example, moving to the Java 5 Executor framework involves writing a new class and plugging it in (Listing A-1).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2041, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1890bf2-e3fd-46b5-82f6-969cbdc30807": {"__data__": {"id_": "f1890bf2-e3fd-46b5-82f6-969cbdc30807", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3968bab8-b910-4a03-b3f3-550770c85437", "node_type": "4", "metadata": {}, "hash": "f98fa661cfe67095ac1448d395bf5c14b8b5f552d3204d40f9ca6b2add4a0b5b", "class_name": "RelatedNodeInfo"}}, "text": "# Possible Paths of Execution\n\n# Listing A-1\n\nExecutorClientScheduler.java\nimport    java.util.concurrent.Executor;\nimport    java.util.concurrent.Executors;\npublic    class ExecutorClientScheduler implements ClientScheduler {\nExecutor executor;\n\npublic ExecutorClientScheduler(int availableThreads) {\nexecutor = Executors.newFixedThreadPool(availableThreads);\n}\npublic void schedule(final ClientRequestProcessor requestProcessor) {\nRunnable runnable = new Runnable() {\npublic void run() {\nrequestProcessor.process();\n}\n};\nexecutor.execute(runnable);\n}\n}\n\n# Conclusion\n\nIntroducing concurrency in this particular example demonstrates a way to improve the\nthroughput of a system and one way of validating that throughput through a testing framework.\nFocusing all concurrency code into a small number of classes is an example of applying the\nSingle Responsibility Principle. In the case of concurrent programming, this becomes especially\nimportant because of its complexity.\n\n# Possible Paths of Execution\n\nReview the method incrementValue, a one-line Java method with no looping or branching:\n\npublic    class IdGenerator {\nint lastIdUsed;\npublic int incrementValue() {\nreturn ++lastIdUsed;\n}\n}\n\nIgnore integer overflow and assume that only one thread has access to a single instance\nof IdGenerator. In this case there is a single path of execution and a single guaranteed\nresult:\n\n- The value returned is equal to the value of lastIdUsed, both of which are one greater\nthan just before calling the method.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ee3dce2-a8c9-48c8-9e02-b52f881a52b1": {"__data__": {"id_": "8ee3dce2-a8c9-48c8-9e02-b52f881a52b1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7f4f9660-efb7-42df-95d9-230ccc1cd29c", "node_type": "4", "metadata": {}, "hash": "fbf3287e4676432e326f22f77cc20f0bfe4965c370fc7d0032c7514f838afd07", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\nWhat happens if we use two threads and leave the method unchanged? What are the possible outcomes if each thread calls incrementValue once? How many possible paths of execution are there? First, the outcomes (assume lastIdUsed starts with a value of 93):\n\n- Thread 1 gets the value of 94, thread 2 gets the value of 95, and lastIdUsed is now 95.\n- Thread 1 gets the value of 95, thread 2 gets the value of 94, and lastIdUsed is now 95.\n- Thread 1 gets the value of 94, thread 2 gets the value of 94, and lastIdUsed is now 94.\n\nThe final result, while surprising, is possible. To see how these different results are possible, we need to understand the number of possible paths of execution and how the Java Virtual Machine executes them.\n\n# Number of Paths\n\nTo calculate the number of possible execution paths, we\u2019ll start with the generated byte-code. The one line of java (return ++lastIdUsed;) becomes eight byte-code instructions. It is possible for the two threads to interleave the execution of these eight instructions the way a card dealer interleaves cards as he shuffles a deck.2 Even with only eight cards in each hand, there are a remarkable number of shuffled outcomes.\n\nFor this simple case of N instructions in a sequence, no looping or conditionals, and T threads, the total number of possible execution paths is equal to:\n\n(NT)!\n-------------\nN!T\n\n# Calculating the Possible Orderings\n\nThis comes from an email from Uncle Bob to Brett:\n\nWith N steps and T threads there are T * N total steps. Prior to each step there is a context switch that chooses between the T threads. Each path can thus be represented as a string of digits denoting the context switches. Given steps A and B and threads 1 and 2, the six possible paths are 1122, 1212, 1221, 2112, 2121, and 2211. Or, in terms of steps it is A1B1A2B2, A1A2B1B2, A1A2B2B1, A2A1B1B2, A2A1B2B1, and A2B2A1B1. For three threads the sequence is 112233, 112323, 113223, 113232, 112233, 121233, 121323, 121332, 123132, 123123, . . . .\n\nOne characteristic of these strings is that there must always be N instances of each T. So the string 111111 is invalid because it has six instances of 1 and zero instances of 2 and 3.\n\n2. This is a bit of a simplification. However, for the purpose of this discussion, we can use this simplifying model.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2333, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f64276c9-371a-43a9-a43c-f2f7bbf41384": {"__data__": {"id_": "f64276c9-371a-43a9-a43c-f2f7bbf41384", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "583be628-3759-4676-a1ca-e6e0ade06826", "node_type": "4", "metadata": {}, "hash": "291d8b94bb4f54698e341b5a954f11489a557c732bf5da41f18916ceb81723f8", "class_name": "RelatedNodeInfo"}}, "text": "# Possible Paths of Execution\n\n# Calculating the Possible Orderings (continued)\n\nSo we want the permutations of N 1\u2019s, N 2\u2019s, . . . and N T\u2019s. This is really just the permutations of N * T things taken N * T at a time, which is (N * T)!, but with all the duplicates removed. So the trick is to count the duplicates and subtract that from (N * T)!\n\nGiven two steps and two threads, how many duplicates are there? Each four-digit string has two 1s and two 2s. Each of those pairs could be swapped without changing the sense of the string. You could swap the 1s or the 2s both, or neither. So there are four isomorphs for each string, which means that there are three duplicates. So three out of four of the options are duplicates; alternatively one of four of the permutations are NOT duplicates. 4! * .25 = 6. So this reasoning seems to work.\n\nHow many duplicates are there? In the case where N = 2 and T = 2, I could swap the 1s, the 2s, or both. In the case where N = 2 and T = 3, I could swap the 1s, the 2s, the 3s, 1s and 2s, 1s and 3s, or 2s and 3s. Swapping is just the permutations of N. Let\u2019s say there are P permutations of N. The number of different ways to arrange those permutations are PT.\n\nSo the number of possible isomorphs is N!T. And so the number of paths is (T*N)!/(N!T). Again, in our T = 2, N = 2 case we get 6 (24/4).\n\nFor N = 2 and T = 3 we get 720/8 = 90.\n\nFor N = 3 and T = 3 we get 9!/63 = 1680.\n\nFor our simple case of one line of Java code, which equates to eight lines of byte-code and two threads, the total number of possible paths of execution is 12,870. If the type of lastIdUsed is a long, then every read/write becomes two operations instead of one, and the number of possible orderings becomes 2,704,156.\n\nWhat happens if we make one change to this method?\n\npublic synchronized void incrementValue() {\n++lastIdUsed;\n}\nThe number of possible execution pathways becomes two for two threads and N! in the general case.\n\n# Digging Deeper\n\nWhat about the surprising result that two threads could both call the method once (before we added synchronized) and get the same numeric result? How is that possible? First things first.\n\nWhat is an atomic operation? We can define an atomic operation as any operation that is uninterruptable. For example, in the following code, line 5, where 0 is assigned to lastid, is atomic because according to the Java Memory model, assignment to a 32-bit value is uninterruptable.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2443, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "526c3d41-a980-431e-9daf-45815c500336": {"__data__": {"id_": "526c3d41-a980-431e-9daf-45815c500336", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f4de8b51-3edb-4112-aad5-d19580041366", "node_type": "4", "metadata": {}, "hash": "dcbd325de4884275de5d222e52d59d245a4de5e13fcc8daf1b2c55486e9dfecc", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\n01: public class Example {\n02:       int lastId;\n03:\n04:       public void resetId() {\n05:            value = 0;\n06:       }\n07:\n08:       public int getNextId() {\n09:            ++value;\n10:       }\n11:}\n\nWhat happens if we change type of lastId from int to long? Is line 5 still atomic?\n\nNot according to the JVM specification. It could be atomic on a particular processor, but according to the JVM specification, assignment to any 64-bit value requires two 32-bit assignments. This means that between the first 32-bit assignment and the second 32-bit assignment, some other thread could sneak in and change one of the values.\n\nWhat about the pre-increment operator, ++, on line 9? The pre-increment operator can be interrupted, so it is not atomic. To understand, let\u2019s review the byte-code of both of these methods in detail.\n\nBefore we go any further, here are three definitions that will be important:\n\n- Frame\u2014Every method invocation requires a frame. The frame includes the return address, any parameters passed into the method and the local variables defined in the method. This is a standard technique used to define a call stack, which is used by modern languages to allow for basic function/method invocation and to allow for recursive invocation.\n- Local variable\u2014Any variables defined in the scope of the method. All nonstatic methods have at least one variable, this, which represents the current object, the object that received the most recent message (in the current thread), which caused the method invocation.\n- Operand stack\u2014Many of the instructions in the Java Virtual Machine take parameters. The operand stack is where those parameters are put. The stack is a standard last-in, first-out (LIFO) data structure.\n\nHere is the byte-code generated for resetId():\n\n|Mnemonic|Description|Operand Stack After|\n|---|---|---|\n|ALOAD 0|Load the 0th variable onto the operand stack.|this|\n\nWhat is the 0th variable? It is this., the current object. When the method was called, the receiver of the message, an instance of Example, was pushed into the local variable array of the frame created for method invocation. This is always the first variable put in every instance method.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2221, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88d7a298-e38a-4b5b-891c-f5db37f020b4": {"__data__": {"id_": "88d7a298-e38a-4b5b-891c-f5db37f020b4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "816da1e9-330b-4bf6-ac60-5969cd42bdb3", "node_type": "4", "metadata": {}, "hash": "d0622adaf33ec81b75d0320de63b96ea0205b59fcd89c8dd6bb641417a0371f4", "class_name": "RelatedNodeInfo"}}, "text": "# Possible Paths of Execution\n\n# Mnemonic\n\n# Description\n\n# Operand\n\n# Stack After\n\n|ICONST_0|Put the constant value 0 onto the operand stack.| |this, 0|\n|---|---|---|---|\n|PUTFIELD lastId|Store the top value on the stack (which is 0) into the field value of the object referred to by the object reference one away from the top of the stack, this.| |&lt;empty&gt;|\n\nThese three instructions are guaranteed to be atomic because, although the thread executing them could be interrupted after any one of them, the information for the PUTFIELD instruction (the constant value 0 on the top of the stack and the reference to this one below the top, along with the field value) cannot be touched by another thread. So when the assignment occurs, we are guaranteed that the value 0 will be stored in the field value. The operation is atomic. The operands all deal with information local to the method, so there is no interference between multiple threads.\n\nSo if these three instructions are executed by ten threads, there are 4.38679733629e+24 possible orderings. However, there is only one possible outcome, so the different orderings are irrelevant. It just so happens that the same outcome is guaranteed for longs in this case as well. Why? All ten threads are assigning a constant value. Even if they interleave with each other, the end result is the same.\n\nWith the ++ operation in the getNextId method, there are going to be problems. Assume that lastId holds 42 at the beginning of this method. Here is the byte-code for this new method:\n\n# Mnemonic\n\n# Description\n\n# Operand\n\n# Stack After\n\n|ALOAD 0|Load this onto the operand stack| |this|\n|---|---|---|---|\n|DUP|Copy the top of the stack. We now have two copies of this on the operand stack.| |this, this|\n|GETFIELD lastId|Retrieve the value of the field lastId from the object pointed to on the top of the stack (this) and store that value back on to the stack.| |this, 42|\n|ICONST_1|Push the integer constant 1 on the stack.| |this, 42, 1|\n|IADD|Integer add the top two values on the operand stack and store the result back on to the operand stack.| |this, 43|\n|DUP_X1|Duplicate the value 43 and put it before this.| |43, this, 43|\n|PUTFIELD value|Store the top value on the operand stack, 43, into the field value of the current object, represented by the next-to-top value on the operand stack, this.| |43|\n|IRETURN|return the top (and only) value on the stack.| |&lt;empty&gt;|", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2435, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1d1ea7a-4b40-4b21-b9dc-9620d49e93f8": {"__data__": {"id_": "f1d1ea7a-4b40-4b21-b9dc-9620d49e93f8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f0d48d3-37ea-46ad-8316-bec482db7aed", "node_type": "4", "metadata": {}, "hash": "40b573fde946d03c13ce3e7c3731df7d1b21e1267210b64a66060fd2c09e33f7", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\nImagine the case where the first thread completes the first three instructions, up to and including GETFIELD, and then it is interrupted. A second thread takes over and performs the entire method, incrementing lastId by one; it gets 43 back. Then the first thread picks up where it left off; 42 is still on the operand stack because that was the value of lastId when it executed GETFIELD. It adds one to get 43 again and stores the result. The value 43 is returned to the first thread as well. The result is that one of the increments is lost because the first thread stepped on the second thread after the second thread interrupted the first thread.\n\nMaking the getNexId() method synchronized fixes this problem.\n\n# Conclusion\n\nAn intimate understanding of byte-code is not necessary to understand how threads can step on each other. If you can understand this one example, it should demonstrate the possibility of multiple threads stepping on each other, which is enough knowledge.\n\nThat being said, what this trivial example demonstrates is a need to understand the memory model enough to know what is and is not safe. It is a common misconception that the ++ (pre- or post-increment) operator is atomic, and it clearly is not. This means you need to know:\n\n- Where there are shared objects/values\n- The code that can cause concurrent read/update issues\n- How to guard such concurrent issues from happening\n\n# Knowing Your Library\n\n# Executor Framework\n\nAs demonstrated in the ExecutorClientScheduler.java on page 321, the Executor framework introduced in Java 5 allows for sophisticated execution using thread pools. This is a class in the java.util.concurrent package.\n\nIf you are creating threads and are not using a thread pool or are using a hand-written one, you should consider using the Executor. It will make your code cleaner, easier to follow, and smaller.\n\nThe Executor framework will pool threads, resize automatically, and recreate threads if necessary. It also supports futures, a common concurrent programming construct. The Executor framework works with classes that implement Runnable and also works with classes that implement the Callable interface. A Callable looks like a Runnable, but it can return a result, which is a common need in multithreaded solutions.\n\nA future is handy when code needs to execute multiple, independent operations and wait for both to finish:\n\npublic String processRequest(String message) throws Exception {\nCallable<String> makeExternalCall = new Callable<String>() {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2549, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a49965b-0e49-49e7-9d5e-038419dbeb29": {"__data__": {"id_": "8a49965b-0e49-49e7-9d5e-038419dbeb29", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "713fd54f-672e-4eb0-bce9-7e494d3477f5", "node_type": "4", "metadata": {}, "hash": "656608e52c983e85f95c6e498a456cd780d4caf3f5efdaaa616bb242a2352dc0", "class_name": "RelatedNodeInfo"}}, "text": "# Knowing Your Library\n\npublic String call() throws Exception {String result = \"\"; // make external request return result; }\n\n}; Future<String> result = executorService.submit(makeExternalCall); String partialResult = doSomeLocalProcessing(); return result.get() + partialResult; }\n\nIn this example, the method starts executing the makeExternalCall object. The method continues other processing. The final line calls result.get(), which blocks until the future completes.\n\n# Nonblocking Solutions\n\nThe Java 5 VM takes advantage of modern processor design, which supports reliable, nonblocking updates. Consider, for example, a class that uses synchronization (and therefore blocking) to provide a thread-safe update of a value:\n\npublic class ObjectWithValue {\nprivate int value;\npublic void synchronized incrementValue() { ++value; }\npublic int getValue() { return value; }\n}\n\nJava 5 has a series of new classes for situations like this: AtomicBoolean, AtomicInteger, and AtomicReference are three examples; there are several more. We can rewrite the above code to use a nonblocking approach as follows:\n\npublic class ObjectWithValue {\nprivate AtomicInteger value = new AtomicInteger(0);\npublic void incrementValue() { value.incrementAndGet(); }\npublic int getValue() { return value.get(); }\n}\n\nEven though this uses an object instead of a primitive and sends messages like incrementAndGet() instead of ++, the performance of this class will nearly always beat the previous version. In some cases it will only be slightly faster, but the cases where it will be slower are virtually nonexistent.\n\nHow is this possible? Modern processors have an operation typically called Compare and Swap (CAS). This operation is analogous to optimistic locking in databases, whereas the synchronized version is analogous to pessimistic locking.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1828, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5c939ce-7b5c-439d-a5b0-fcff358c79ad": {"__data__": {"id_": "f5c939ce-7b5c-439d-a5b0-fcff358c79ad", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "af5c6865-a60c-434a-9bef-7c09ee8e950a", "node_type": "4", "metadata": {}, "hash": "352b367869b786a1d5d5389ce69ceb89f3cd39783f3bb91673f691470f515446", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\nThe synchronized keyword always acquires a lock, even when a second thread is not trying to update the same value. Even though the performance of intrinsic locks has improved from version to version, they are still costly.\n\nThe nonblocking version starts with the assumption that multiple threads generally do not modify the same value often enough that a problem will arise. Instead, it efficiently detects whether such a situation has occurred and retries until the update happens successfully. This detection is almost always less costly than acquiring a lock, even in moderate to high contention situations.\n\nHow does the Virtual Machine accomplish this? The CAS operation is atomic. Logically, the CAS operation looks something like the following:\n\nint variableBeingSet;\nvoid simulateNonBlockingSet(int newValue) {\nint currentValue;\ndo {\ncurrentValue = variableBeingSet;\n} while(currentValue != compareAndSwap(currentValue, newValue));\n}\nint synchronized compareAndSwap(int currentValue, int newValue) {\nif(variableBeingSet == currentValue) {\nvariableBeingSet = newValue;\nreturn currentValue;\n}\nreturn variableBeingSet;\n}\n\nWhen a method attempts to update a shared variable, the CAS operation verifies that the variable getting set still has the last known value. If so, then the variable is changed. If not, then the variable is not set because another thread managed to get in the way. The method making the attempt (using the CAS operation) sees that the change was not made and retries.\n\n# Nonthread-Safe Classes\n\nThere are some classes that are inherently not thread safe. Here are a few examples:\n\n- SimpleDateFormat\n- Database Connections\n- Containers in java.util\n- Servlets\n\nNote that some collection classes have individual methods that are thread-safe. However, any operation that involves calling more than one method is not. For example, if you do not want to replace something in a HashTable because it is already there, you might write the following code:\n\nif(!hashTable.containsKey(someKey)) {\nhashTable.put(someKey, new SomeValue());\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2087, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35fe5075-015b-4424-a0b6-7ebd4e802d77": {"__data__": {"id_": "35fe5075-015b-4424-a0b6-7ebd4e802d77", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2ea6c917-0841-4890-b541-ce57acc666e2", "node_type": "4", "metadata": {}, "hash": "f9823145b247cac410dfecac67e6b1244705aa02ae76ced499c150acb1249aab", "class_name": "RelatedNodeInfo"}}, "text": "# Dependencies Between Methods Can Break Concurrent Code\n\nEach individual method is thread-safe. However, another thread might add a value in between the containsKey and put calls. There are several options to fix this problem.\n\n- Lock the HashTable first, and make sure all other users of the HashTable do the same\u2014client-based locking:\n\nsynchronized(map) {\nif(!map.containsKey(key)) map.put(key, value);\n}\n- Wrap the HashTable in its own object and use a different API\u2014server-based locking using an ADAPTER:\n\npublic class WrappedHashtable&lt;K, V&gt; {\nprivate Map&lt;K, V&gt; map = new Hashtable&lt;K, V&gt;();\npublic synchronized void putIfAbsent(K key, V value) {\nif (map.containsKey(key)) map.put(key, value);\n}\n}\n- Use the thread-safe collections:\n\nConcurrentHashMap&lt;Integer, String&gt; map = new ConcurrentHashMap&lt;Integer, String&gt;();\nmap.putIfAbsent(key, value);\nThe collections in java.util.concurrent have operations like putIfAbsent() to accommodate such operations.\n\n# Dependencies Between Methods Can Break Concurrent Code\n\nHere is a trivial example of a way to introduce dependencies between methods:\n\npublic class IntegerIterator implements Iterator&lt;Integer&gt; {\nprivate Integer nextValue = 0;\npublic synchronized boolean hasNext() {\nreturn nextValue &lt; 100000;\n}\npublic synchronized Integer next() {\nif (nextValue == 100000) throw new IteratorPastEndException();\nreturn nextValue++;\n}\npublic synchronized Integer getNextValue() {\nreturn nextValue;\n}\n}\nHere is some code to use this IntegerIterator:\n\nIntegerIterator iterator = new IntegerIterator();\nwhile(iterator.hasNext()) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1608, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e413dcc-e5df-43c3-b8de-450512c95c2f": {"__data__": {"id_": "2e413dcc-e5df-43c3-b8de-450512c95c2f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1d7b2bd3-d78c-42a6-aa89-8f46fb9c4a47", "node_type": "4", "metadata": {}, "hash": "738883d099474c7ef1e17e586f6e28fb80e4689e2d6ea06d199713dff1bb7e7e", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\nint nextValue = iterator.next();\n\n//  do something with nextValue\n\nIf one thread executes this code, there will be no problem. But what happens if two threads attempt to share a single instance of IntegerIterator with the intent that each thread will process the values it gets, but that each element of the list is processed only once? Most of the time, nothing bad happens; the threads happily share the list, processing the elements they are given by the iterator and stopping when the iterator is complete. However, there is a small chance that, at the end of the iteration, the two threads will interfere with each other and cause one thread to go beyond the end of the iterator and throw an exception.\n\nHere\u2019s the problem: Thread 1 asks the question hasNext(), which returns true. Thread 1 gets preempted and then Thread 2 asks the same question, which is still true. Thread 2 then calls next(), which returns a value as expected but has a side effect of making hasNext() return false. Thread 1 starts up again, thinking hasNext() is still true, and then calls next(). Even though the individual methods are synchronized, the client uses two methods.\n\nThis is a real problem and an example of the kinds of problems that crop up in concurrent code. In this particular situation this problem is especially subtle because the only time where this causes a fault is when it happens during the final iteration of the iterator. If the threads happen to break just right, then one of the threads could go beyond the end of the iterator. This is the kind of bug that happens long after a system has been in production, and it is hard to track down.\n\n# You have three options:\n\n- Tolerate the failure.\n- Solve the problem by changing the client: client-based locking\n- Solve the problem by changing the server, which additionally changes the client: server-based locking\n\n# Tolerate the Failure\n\nSometimes you can set things up such that the failure causes no harm. For example, the above client could catch the exception and clean up. Frankly, this is a bit sloppy. It\u2019s rather like cleaning up memory leaks by rebooting at midnight.\n\n# Client-Based Locking\n\nTo make IntegerIterator work correctly with multiple threads, change this client (and every other client) as follows:\n\nIntegerIterator iterator = new IntegerIterator();\n\nwhile (true) {int nextValue;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fbe792d7-1635-47ff-b6c2-0e1f432ef813": {"__data__": {"id_": "fbe792d7-1635-47ff-b6c2-0e1f432ef813", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f1bd6783-bf07-449d-9b8b-e3fbb5331a68", "node_type": "4", "metadata": {}, "hash": "18aadd9a93fb4f76de94125386988721e589d3b5187c15e5f8d6bf3a7ef2e6d9", "class_name": "RelatedNodeInfo"}}, "text": "# Dependencies Between Methods Can Break Concurrent Code\n\nsynchronized (iterator) {if (!iterator.hasNext()) break; nextValue = iterator.next(); } doSometingWith(nextValue; }\n\nEach client introduces a lock via the synchronized keyword. This duplication violates the DRY principle, but it might be necessary if the code uses non-thread-safe third-party tools.\n\nThis strategy is risky because all programmers who use the server must remember to lock it before using it and unlock it when done. Many (many!) years ago I worked on a system that employed client-based locking on a shared resource. The resource was used in hundreds of different places throughout the code. One poor programmer forgot to lock the resource in one of those places.\n\nThe system was a multi-terminal time-sharing system running accounting software for Local 705 of the trucker\u2019s union. The computer was in a raised-floor, environment-controlled room 50 miles north of the Local 705 headquarters. At the headquarters they had dozens of data entry clerks typing union dues postings into the terminals. The terminals were connected to the computer using dedicated phone lines and 600bps half-duplex modems. (This was a very, very long time ago.)\n\nAbout once per day, one of the terminals would \u201clock up.\u201d There was no rhyme or reason to it. The lock up showed no preference for particular terminals or particular times. It was as though there were someone rolling dice choosing the time and terminal to lock up. Sometimes more than one terminal would lock up. Sometimes days would go by without any lock-ups.\n\nAt first the only solution was a reboot. But reboots were tough to coordinate. We had to call the headquarters and get everyone to finish what they were doing on all the terminals. Then we could shut down and restart. If someone was doing something important that took an hour or two, the locked up terminal simply had to stay locked up.\n\nAfter a few weeks of debugging we found that the cause was a ring-buffer counter that had gotten out of sync with its pointer. This buffer controlled output to the terminal. The pointer value indicated that the buffer was empty, but the counter said it was full. Because it was empty, there was nothing to display; but because it was also full, nothing could be added to the buffer to be displayed on the screen.\n\nSo we knew why the terminals were locking, but we didn\u2019t know why the ring buffer was getting out of sync. So we added a hack to work around the problem. It was possible to read the front panel switches on the computer. (This was a very, very, very long time ago.) We wrote a little trap function that detected when one of these switches was thrown and then looked for a ring buffer that was both empty and full. If one was found, it reset that buffer to empty. Voila! The locked-up terminal(s) started displaying again.\n\nSo now we didn\u2019t have to reboot the system when a terminal locked up. The Local would simply call us and tell us we had a lock-up, and then we just walked into the computer room and flicked a switch.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3053, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab5cf61c-afdc-442e-96db-dd5fa303a0bc": {"__data__": {"id_": "ab5cf61c-afdc-442e-96db-dd5fa303a0bc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "736c5aa9-0d40-4717-8124-5363f77e84e6", "node_type": "4", "metadata": {}, "hash": "304d5a7c452d46676e0160a395329489da166441512c6aa36757c5f5cbf29351", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\nOf course sometimes they worked on the weekends, and we didn\u2019t. So we added a function to the scheduler that checked all the ring buffers once per minute and reset any that were both empty and full. This caused the displays to unclog before the Local could even get on the phone.\n\nIt was several more weeks of poring over page after page of monolithic assembly language code before we found the culprit. We had done the math and calculated that the frequency of the lock-ups was consistent with a single unprotected use of the ring buffer. So all we had to do was find that one faulty usage. Unfortunately, this was so very long ago that we didn\u2019t have search tools or cross references or any other kind of automated help. We simply had to pore over listings.\n\nI learned an important lesson that cold Chicago winter of 1971. Client-based locking really blows.\n\n# Server-Based Locking\n\nThe duplication can be removed by making the following changes to IntegerIterator:\n\npublic class IntegerIteratorServerLocked {\nprivate Integer nextValue = 0;\npublic synchronized Integer getNextOrNull() {\nif (nextValue &lt; 100000)\nelse return nextValue++;\nreturn null;\n}\n}\nAnd the client code changes as well:\n\nwhile (true) {\nInteger nextValue = iterator.getNextOrNull();\nif (next == null) break;\n// do something with nextValue\n}\nIn this case we actually change the API of our class to be multithread aware.3 The client needs to perform a null check instead of checking hasNext().\n\nIn general you should prefer server-based locking for these reasons:\n\n- It reduces repeated code\u2014Client-based locking forces each client to lock the server properly. By putting the locking code into the server, clients are free to use the object and not worry about writing additional locking code.\n\n3 In fact, the Iterator interface is inherently not thread-safe. It was never designed to be used by multiple threads, so this should come as no surprise.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1951, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "571f910a-0ea8-4c66-ae18-199c9d3b11c4": {"__data__": {"id_": "571f910a-0ea8-4c66-ae18-199c9d3b11c4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8a9fdba5-ce2b-43c4-8e7a-b8f8f4890358", "node_type": "4", "metadata": {}, "hash": "d0fb9b458c35349e5f2e32ec9e7e49c086cce2adfaeeb431d5709a2140449d6c", "class_name": "RelatedNodeInfo"}}, "text": "# Increasing Throughput\n\n- It allows for better performance\u2014You can swap out a thread-safe server for a non-thread safe one in the case of single-threaded deployment, thereby avoiding all overhead.\n- It reduces the possibility of error\u2014All it takes is for one programmer to forget to lock properly.\n- It enforces a single policy\u2014The policy is in one place, the server, rather than many places, each client.\n- It reduces the scope of the shared variables\u2014The client is not aware of them or how they are locked. All of that is hidden in the server. When things break, the number of places to look is smaller.\n\n# What if you do not own the server code?\n\n- Use an ADAPTER to change the API and add locking\n\npublic class ThreadSafeIntegerIterator {\nprivate IntegerIterator iterator = new IntegerIterator();\npublic synchronized Integer getNextOrNull() {\nif(iterator.hasNext())\nreturn iterator.next();\nreturn null;\n}\n}\n- OR better yet, use the thread-safe collections with extended interfaces\n\n# Increasing Throughput\n\nLet\u2019s assume that we want to go out on the net and read the contents of a set of pages from a list of URLs. As each page is read, we will parse it to accumulate some statistics. Once all the pages are read, we will print a summary report.\n\nThe following class returns the contents of one page, given a URL.\n\npublic //...class PageReader {\npublic String getPageFor(String url) {\nHttpMethod method = new GetMethod(url);\ntry {\nhttpClient.executeMethod(method);\nString response = method.getResponseBodyAsString();\nreturn response;\n} catch (Exception e) {\nhandle(e);\n} finally {\nmethod.releaseConnection();\n}\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1619, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58689a31-236e-417c-81f0-5f0957378b41": {"__data__": {"id_": "58689a31-236e-417c-81f0-5f0957378b41", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "174bb6a4-2439-4d6a-8a36-3c8ac79db009", "node_type": "4", "metadata": {}, "hash": "45ecf6be6d48459bcf71706b944125c0bb99876dc301773b53380805c6ba7d31", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\nThe next class is the iterator that provides the contents of the pages based on an iterator of URLs:\n\npublic class PageIterator {\nprivate PageReader reader;\nprivate URLIterator urls;\npublic PageIterator(PageReader reader, URLIterator urls) {\nthis.urls = urls;\nthis.reader = reader;\n}\npublic synchronized String getNextPageOrNull() {\nif (urls.hasNext())\nreturn getPageFor(urls.next());\nelse\nreturn null;\n}\npublic String getPageFor(String url) {\nreturn reader.getPageFor(url);\n}\n}\n\nAn instance of the PageIterator can be shared between many different threads, each one using its own instance of the PageReader to read and parse the pages it gets from the iterator.\n\nNotice that we\u2019ve kept the synchronized block very small. It contains just the critical section deep inside the PageIterator. It is always better to synchronize as little as possible as opposed to synchronizing as much as possible.\n\n# Single-Thread Calculation of Throughput\n\nNow let's do some simple calculations. For the purpose of argument, assume the following:\n\n- I/O time to retrieve a page (average): 1 second\n- Processing time to parse page (average): 0.5 seconds\n- I/O requires 0 percent of the CPU while processing requires 100 percent.\n\nFor N pages being processed by a single thread, the total execution time is 1.5 seconds * N. Figure A-1 shows a snapshot of 13 pages or about 19.5 seconds.\n\n# Figure A-1\n\nSingle thread", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1426, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4c396d5-252a-4d3e-8ad2-61c4bd64ff77": {"__data__": {"id_": "d4c396d5-252a-4d3e-8ad2-61c4bd64ff77", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "84e1ce13-0d04-4747-8891-497050c21c80", "node_type": "4", "metadata": {}, "hash": "4361dd37917a50264ef8292483f9a7577955a5b7d54137bfe75f4d311e391ff7", "class_name": "RelatedNodeInfo"}}, "text": "# Deadlock\n\n# Multithread Calculation of Throughput\n\nIf it is possible to retrieve pages in any order and process the pages independently, then it is possible to use multiple threads to increase throughput. What happens if we use three threads? How many pages can we acquire in the same time?\n\nAs you can see in Figure A-2, the multithreaded solution allows the process-bound parsing of the pages to overlap with the I/O-bound reading of the pages. In an idealized world this means that the processor is fully utilized. Each one-second page read is overlapped with two parses. Thus, we can process two pages per second, which is three times the throughput of the single-threaded solution.\n\n# Figure A-2\n\nThree concurrent threads\n\n# Deadlock\n\nImagine a Web application with two shared resource pools of some finite size:\n\n- A pool of database connections for local work in process storage\n- A pool of MQ connections to a master repository\n\nAssume there are two operations in this application, create and update:\n\n- Create\u2014Acquire connection to master repository and database. Talk to service master repository and then store work in local work in process database.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1163, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37c8366f-16c6-47ce-bc05-bd99bf5fde55": {"__data__": {"id_": "37c8366f-16c6-47ce-bc05-bd99bf5fde55", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e2f315bf-0774-42fd-9d05-e6993ac6f6e0", "node_type": "4", "metadata": {}, "hash": "2c3db558a5583b556c8eb5d415bc637fc87095f60e3bc030079184176a0b56c5", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\n- Update\u2014Acquire connection to database and then master repository. Read from work in process database and then send to the master repository.\n- What happens when there are more users than the pool sizes? Consider each pool has a size of ten.\n- Ten users attempt to use create, so all ten database connections are acquired, and each thread is interrupted after acquiring a database connection but before acquiring a connection to the master repository.\n- Ten users attempt to use update, so all ten master repository connections are acquired, and each thread is interrupted after acquiring the master repository but before acquiring a database connection.\n- Now the ten \u201ccreate\u201d threads must wait to acquire a master repository connection, but the ten \u201cupdate\u201d threads must wait to acquire a database connection.\n- Deadlock. The system never recovers.\n\nThis might sound like an unlikely situation, but who wants a system that freezes solid every other week? Who wants to debug a system with symptoms that are so difficult to reproduce? This is the kind of problem that happens in the field, then takes weeks to solve.\n\nA typical \u201csolution\u201d is to introduce debugging statements to find out what is happening. Of course, the debug statements change the code enough so that the deadlock happens in a different situation and takes months to again occur.4\n\nTo really solve the problem of deadlock, we need to understand what causes it. There are four conditions required for deadlock to occur:\n\n- Mutual exclusion\n- Lock & wait\n- No preemption\n- Circular wait\n\n# Mutual Exclusion\n\nMutual exclusion occurs when multiple threads need to use the same resources and those resources:\n\n- Cannot be used by multiple threads at the same time.\n- Are limited in number.\n\nA common example of such a resource is a database connection, a file open for write, a record lock, or a semaphore.\n\n4. For example, someone adds some debugging output and the problem \u201cdisappears.\u201d The debugging code \u201cfixes\u201d the problem so it remains in the system.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2051, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2eb61a6f-6343-4373-9d5d-1c0701dc3219": {"__data__": {"id_": "2eb61a6f-6343-4373-9d5d-1c0701dc3219", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6c1d3e8c-78b9-4d36-82bb-9490c89c870e", "node_type": "4", "metadata": {}, "hash": "ad7c57e31aa8bcbfda83cb26755d4104a6ad275440f3764188ebce56b15f37a6", "class_name": "RelatedNodeInfo"}}, "text": "# Deadlock\n\n# Lock & Wait\n\nOnce a thread acquires a resource, it will not release the resource until it has acquired all of the other resources it requires and has completed its work.\n\n# No Preemption\n\nOne thread cannot take resources away from another thread. Once a thread holds a resource, the only way for another thread to get it is for the holding thread to release it.\n\n# Circular Wait\n\nThis is also referred to as the deadly embrace. Imagine two threads, T1 and T2, and two resources, R1 and R2. T1 has R1, T2 has R2. T1 also requires R2, and T2 also requires R1. This gives something like Figure A-3:\n\n# Figure A-3\n\nAll four of these conditions must hold for deadlock to be possible. Break any one of these conditions and deadlock is not possible.\n\n# Breaking Mutual Exclusion\n\nOne strategy for avoiding deadlock is to sidestep the mutual exclusion condition. You might be able to do this by:\n\n- Using resources that allow simultaneous use, for example, AtomicInteger.\n- Increasing the number of resources such that it equals or exceeds the number of competing threads.\n- Checking that all your resources are free before seizing any.\n\nUnfortunately, most resources are limited in number and don\u2019t allow simultaneous use. And it\u2019s not uncommon for the identity of the second resource to be predicated on the results of operating on the first. But don\u2019t be discouraged; there are three conditions left.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1a23346-67b0-4ee8-a870-d2a7be7b9fe2": {"__data__": {"id_": "d1a23346-67b0-4ee8-a870-d2a7be7b9fe2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "da5a33f9-8023-497a-bf32-6109f8662e66", "node_type": "4", "metadata": {}, "hash": "d5778906192e3acb4e95ffbc0b814376657c47f52f8f7de9016666056f9c4744", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\n# Breaking Lock & Wait\n\nYou can also eliminate deadlock if you refuse to wait. Check each resource before you seize it, and release all resources and start over if you run into one that\u2019s busy.\n\nThis approach introduces several potential problems:\n\n- Starvation\u2014One thread keeps being unable to acquire the resources it needs (maybe it has a unique combination of resources that seldom all become available).\n- Livelock\u2014Several threads might get into lockstep and all acquire one resource and then release one resource, over and over again. This is especially likely with simplistic CPU scheduling algorithms (think embedded devices or simplistic hand-written thread balancing algorithms).\n\nBoth of these can cause poor throughput. The first results in low CPU utilization, whereas the second results in high and useless CPU utilization.\n\nAs inefficient as this strategy sounds, it\u2019s better than nothing. It has the benefit that it can almost always be implemented if all else fails.\n\n# Breaking Preemption\n\nAnother strategy for avoiding deadlock is to allow threads to take resources away from other threads. This is usually done through a simple request mechanism. When a thread discovers that a resource is busy, it asks the owner to release it. If the owner is also waiting for some other resource, it releases them all and starts over.\n\nThis is similar to the previous approach but has the benefit that a thread is allowed to wait for a resource. This decreases the number of startovers. Be warned, however, that managing all those requests can be tricky.\n\n# Breaking Circular Wait\n\nThis is the most common approach to preventing deadlock. For most systems it requires no more than a simple convention agreed to by all parties.\n\nIn the example above with Thread 1 wanting both Resource 1 and Resource 2 and Thread 2 wanting both Resource 2 and then Resource 1, simply forcing both Thread 1 and Thread 2 to allocate resources in the same order makes circular wait impossible.\n\nMore generally, if all threads can agree on a global ordering of resources and if they all allocate resources in that order, then deadlock is impossible. Like all the other strategies, this can cause problems:\n\n- The order of acquisition might not correspond to the order of use; thus a resource acquired at the start might not be used until the end. This can cause resources to be locked longer than strictly necessary.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2431, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a908a631-4ae2-46f6-a87e-277f01222a1b": {"__data__": {"id_": "a908a631-4ae2-46f6-a87e-277f01222a1b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8f68d969-4609-4cab-92fe-e3069981a5ca", "node_type": "4", "metadata": {}, "hash": "047d740dabecb274a642d3464efef852f88854fa5c305ba5f8a367b253663f6b", "class_name": "RelatedNodeInfo"}}, "text": "# Testing Multithreaded Code\n\nSometimes you cannot impose an order on the acquisition of resources. If the ID of the second resource comes from an operation performed on the first, then ordering is not feasible. Make heavy use of the CPU and reduce responsiveness. TANSTAAFL!5 So there are many ways to avoid deadlock. Some lead to starvation, whereas others isolating the thread-related part of your solution to allow for tuning and experimentation is a powerful way to gain the insights needed to determine the best strategies.\n\n# How can we write a test to demonstrate the following code is broken?\n\n01: public class ClassWithThreadingProblem {\n02:       int nextId;\n03:\n04:       public int takeNextId() {\n05:            return nextId++;\n06:       }\n07:}\n\nHere\u2019s a description of a test that will prove the code is broken:\n\n- Remember the current value of nextId.\n- Create two threads, both of which call takeNextId() once.\n- Verify that nextId is two more than what we started with.\n- Run this until we demonstrate that nextId was only incremented by one instead of two.\n\nListing A-2 shows such a test:\n\n# Listing A-2\n\n# ClassWithThreadingProblemTest.java\n\n01: package example;\n02:\n03: import static org.junit.Assert.fail;\n04:\n05: import org.junit.Test;\n06:\n07: public class ClassWithThreadingProblemTest {\n08:        @Test\n09:        public void twoThreadsShouldFailEventually() throws Exception {\n10:             final ClassWithThreadingProblem classWithThreadingProblem= new ClassWithThreadingProblem();\n11:\n\n5. There ain\u2019t no such thing as a free lunch.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1562, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79d0119e-ae74-4a9f-a8a4-c63c854df299": {"__data__": {"id_": "79d0119e-ae74-4a9f-a8a4-c63c854df299", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ea833cad-33cb-4e42-ae0c-584a89b1fb4d", "node_type": "4", "metadata": {}, "hash": "0ce600f4fe210a62cb078ae513f6f74c386aad7009428a51b380f7c3f1178095", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\n# Listing A-2 (continued)\n\n# ClassWithThreadingProblemTest.java\n\n12:             Runnable runnable = new Runnable() {\n13:                   public void run() {\n14:                         classWithThreadingProblem.takeNextId();\n15:                   }\n16:             };\n17:\n18:             for (int i = 0; i < 50000; ++i) {\n19:                   int startingId = classWithThreadingProblem.lastId;\n20:                   int expectedResult = 2 + startingId;\n21:\n22:                   Thread t1 = new Thread(runnable);\n23:                   Thread t2 = new Thread(runnable);\n24:                   t1.start();\n25:                   t2.start();\n26:                   t1.join();\n27:                   t2.join();\n28:\n29:                   int endingId = classWithThreadingProblem.lastId;\n30:\n31:                   if (endingId != expectedResult)\n32:                         return;\n33:             }\n34:\n35:             fail(\"Should have exposed a threading issue but it did not.\");\n36:        }\n37: }\n\n|Line|Description|\n|---|---|\n|10|Create a single instance of ClassWithThreadingProblem. Note, we must use the final keyword because we use it below in an anonymous inner class.|\n|12\u201316|Create an anonymous inner class that uses the single instance of ClassWithThreadingProblem.|\n|18|Run this code \u201cenough\u201d times to demonstrate that the code failed, but not so much that the test \u201ctakes too long.\u201d This is a balancing act; we don\u2019t want to wait too long to demonstrate failure. Picking this number is hard\u2014although later we\u2019ll see that we can greatly reduce this number.|\n|19|Remember the starting value. This test is trying to prove that the code in ClassWithThreadingProblem is broken. If this test passes, it proved that the code was broken. If this test fails, the test was unable to prove that the code is broken.|\n|20|We expect the final value to be two more than the current value.|\n|22\u201323|Create two threads, both of which use the object we created in lines 12\u201316. This gives us the potential of two threads trying to use our single instance of ClassWithThreadingProblem and interfering with each other.|", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2137, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf9f1651-1bbe-45b4-9e34-3f72f4e7879e": {"__data__": {"id_": "bf9f1651-1bbe-45b4-9e34-3f72f4e7879e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3bb8df50-cbf9-4498-ab36-6adb21350ae4", "node_type": "4", "metadata": {}, "hash": "72178885b22a5fc496ffb55e24a881e52ceca2041c259c563655a2f604d95852", "class_name": "RelatedNodeInfo"}}, "text": "# Testing Multithreaded Code\n\n|Line|Description|\n|---|---|\n|24\u201325|Make our two threads eligible to run.|\n|26\u201327|Wait for both threads to finish before we check the results.|\n|29|Record the actual final value.|\n|31\u201332|Did our endingId differ from what we expected? If so, return end the test\u2014 we\u2019ve proven that the code is broken. If not, try again.|\n|35|If we got to here, our test was unable to prove the production code was broken in a \u201creasonable\u201d amount of time; our code has failed. Either the code is not broken or we didn\u2019t run enough iterations to get the failure condition to occur.|\n\nThis test certainly sets up the conditions for a concurrent update problem. However, the problem occurs so infrequently that the vast majority of times this test won\u2019t detect it.\n\nIndeed, to truly detect the problem we need to set the number of iterations to over one million. Even then, in ten executions with a loop count of 1,000,000, the problem occurred only once. That means we probably ought to set the iteration count to well over one hundred million to get reliable failures. How long are we prepared to wait?\n\nEven if we tuned the test to get reliable failures on one machine, we\u2019ll probably have to retune the test with different values to demonstrate the failure on another machine, operating system, or version of the JVM.\n\nAnd this is a simple problem. If we cannot demonstrate broken code easily with this problem, how will we ever detect truly complex problems?\n\nSo what approaches can we take to demonstrate this simple failure? And, more importantly, how can we write tests that will demonstrate failures in more complex code? How will we be able to discover if our code has failures when we do not know where to look?\n\nHere are a few ideas:\n\n- Monte Carlo Testing. Make tests flexible, so they can be tuned. Then run the test over and over\u2014say on a test server\u2014randomly changing the tuning values. If the tests ever fail, the code is broken. Make sure to start writing those tests early so a continuous integration server starts running them soon. By the way, make sure you carefully log the conditions under which the test failed.\n- Run the test on every one of the target deployment platforms. Repeatedly. Continuously. The longer the tests run without failure, the more likely that\n- The production code is correct or\n- The tests aren\u2019t adequate to expose problems.\n- Run the tests on a machine with varying loads. If you can simulate loads close to a production environment, do so.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca06c1ad-6a4f-4f82-b112-0acf836e3757": {"__data__": {"id_": "ca06c1ad-6a4f-4f82-b112-0acf836e3757", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "417ce1fc-ab60-45cb-8f7b-ad3be3196749", "node_type": "4", "metadata": {}, "hash": "41c4505f2dfe1b276dd9fa9cccbf7b364c8556e7970a0bcd95c6663d7dc6fc57", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\nYet, even if you do all of these things, you still don\u2019t stand a very good chance of finding threading problems with your code. The most insidious problems are the ones that have such a small cross section that they only occur once in a billion opportunities. Such problems are the terror of complex systems.\n\n# Tool Support for Testing Thread-Based Code\n\nIBM has created a tool called ConTest.6 It instruments classes to make it more likely that non-thread-safe code fails.\n\nWe do not have any direct relationship with IBM or the team that developed ConTest. A colleague of ours pointed us to it. We noticed vast improvement in our ability to find threading issues after a few minutes of using it.\n\n# Here\u2019s an outline of how to use ConTest:\n\n- Write tests and production code, making sure there are tests specifically designed to simulate multiple users under varying loads, as mentioned above.\n- Instrument test and production code with ConTest.\n- Run the tests.\n\nWhen we instrumented code with ConTest, our success rate went from roughly one failure in ten million iterations to roughly one failure in thirty iterations. Here are the loop values for several runs of the test after instrumentation: 13, 23, 0, 54, 16, 14, 6, 69, 107, 49, 2. So clearly the instrumented classes failed much earlier and with much greater reliability.\n\n# Conclusion\n\nThis chapter has been a very brief sojourn through the large and treacherous territory of concurrent programming. We barely scratched the surface. Our emphasis here was on disciplines to help keep concurrent code clean, but there is much more you should learn if you are going to be writing concurrent systems. We recommend you start with Doug Lea\u2019s wonderful book *Concurrent Programming in Java: Design Principles and Patterns*.7\n\nIn this chapter we talked about concurrent update, and the disciplines of clean synchronization and locking that can prevent it. We talked about how threads can enhance the throughput of an I/O-bound system and showed the clean techniques for achieving such improvements. We talked about deadlock and the disciplines for preventing it in a clean manner.\n\n6. http://www.haifa.ibm.com/projects/verification/contest/index.html\n\n7. See [Lea99] p. 191.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2260, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd89b0c1-9235-47f3-be8f-e91d00a03705": {"__data__": {"id_": "dd89b0c1-9235-47f3-be8f-e91d00a03705", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f89e1d95-daec-485c-9026-3e3efc98370f", "node_type": "4", "metadata": {}, "hash": "2fe454524027db2e84a6de553ba1e04dc36811c67f3978c75b1e68f843baef7c", "class_name": "RelatedNodeInfo"}}, "text": "# Tutorial: Full Code Examples\n\n# Client/Server Nonthreaded\n\n# Listing A-3\n\n# Server.java\n\npackage com.objectmentor.clientserver.nonthreaded;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport common.MessageUtils;\n\npublic class Server implements Runnable {\nServerSocket serverSocket;\nvolatile boolean keepProcessing = true;\n\npublic Server(int port, int millisecondsTimeout) throws IOException {\nserverSocket = new ServerSocket(port);\nserverSocket.setSoTimeout(millisecondsTimeout);\n}\n\npublic void run() {\nSystem.out.printf(\"Server Starting\\n\");\nwhile (keepProcessing) {\ntry {\nSystem.out.printf(\"accepting client\\n\");\nSocket socket = serverSocket.accept();\nSystem.out.printf(\"got client\\n\");\nprocess(socket);\n} catch (Exception e) {\nhandle(e);\n}\n}\n}\n\nprivate void handle(Exception e) {\nif (!(e instanceof SocketException)) {\ne.printStackTrace();\n}\n}\n\npublic void stopProcessing() {\nkeepProcessing = false;\ncloseIgnoringException(serverSocket);\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1016, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f7d036d-5130-485b-a892-83922f3a4f1c": {"__data__": {"id_": "9f7d036d-5130-485b-a892-83922f3a4f1c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8cd9a97e-1d98-4453-9159-a88be6a8f7d7", "node_type": "4", "metadata": {}, "hash": "63234f9488f45f55d426a9b5e9885fad67c73fd5013111920261826438acbf4f", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\n# Listing A-3 (continued)\n\nvoid process(Socket socket) {\nif (socket == null)\nreturn;\ntry {\nSystem.out.printf(\"Server: getting message\\n\");\nString message = MessageUtils.getMessage(socket);\nSystem.out.printf(\"Server: got message: %s\\n\", message);\nThread.sleep(1000);\nSystem.out.printf(\"Server: sending reply: %s\\n\", message);\nMessageUtils.sendMessage(socket, \"Processed: \" + message);\nSystem.out.printf(\"Server: sent\\n\");\ncloseIgnoringException(socket);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n\nprivate void closeIgnoringException(Socket socket) {\nif (socket != null)\ntry {\nsocket.close();\n} catch (IOException ignore) {\n}\n}\n\nprivate void closeIgnoringException(ServerSocket serverSocket) {\nif (serverSocket != null)\ntry {\nserverSocket.close();\n} catch (IOException ignore) {\n}\n}\n\n# Listing A-4\n\nClientTest.java\npackage com.objectmentor.clientserver.nonthreaded;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport common.MessageUtils;\n\npublic class Server implements Runnable {\nServerSocket serverSocket;\nvolatile boolean keepProcessing = true;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1153, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02fb9d94-8682-4588-bea5-c0d76f53144a": {"__data__": {"id_": "02fb9d94-8682-4588-bea5-c0d76f53144a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "60a797ef-8017-4d63-b3c9-98447a805da3", "node_type": "4", "metadata": {}, "hash": "4ae510d6d264ac49cbc3b4460f177d21106c15e467da2a70d1cc5a4ab9befc85", "class_name": "RelatedNodeInfo"}}, "text": "# Tutorial: Full Code Examples\n\n# Listing A-4 (continued)\n\n# ClientTest.java\n\npublic Server(int port, int millisecondsTimeout) throws IOException {\nserverSocket = new ServerSocket(port);\nserverSocket.setSoTimeout(millisecondsTimeout);\n}\npublic void run() {\nSystem.out.printf(\"Server Starting\\n\");\nwhile (keepProcessing) {\ntry {\nSystem.out.printf(\"accepting client\\n\");\nSocket socket = serverSocket.accept();\nSystem.out.printf(\"got client\\n\");\nprocess(socket);\n} catch (Exception e) {\nhandle(e);\n}\n}\n}\nprivate void handle(Exception e) {\nif (!(e instanceof SocketException)) {\ne.printStackTrace();\n}\n}\npublic void stopProcessing() {\nkeepProcessing = false;\ncloseIgnoringException(serverSocket);\n}\nvoid process(Socket socket) {\nif (socket == null) return;\ntry {\nSystem.out.printf(\"Server: getting message\\n\");\nString message = MessageUtils.getMessage(socket);\nSystem.out.printf(\"Server: got message: %s\\n\", message);\nThread.sleep(1000);\nSystem.out.printf(\"Server: sending reply: %s\\n\", message);\nMessageUtils.sendMessage(socket, \"Processed: \" + message);\nSystem.out.printf(\"Server: sent\\n\");\ncloseIgnoringException(socket);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\nprivate void closeIgnoringException(Socket socket) {\nif (socket != null) try {\nsocket.close();\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "649821a7-79e7-4acd-ba34-b13672ddaaa7": {"__data__": {"id_": "649821a7-79e7-4acd-ba34-b13672ddaaa7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e123caef-4655-49f4-9731-1fca741408b3", "node_type": "4", "metadata": {}, "hash": "09c1327e91ea42c3b25c0601f5e293273d729928b962e8e1e2a6a138e9457881", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix A: Concurrency II\n\n# Listing A-4 (continued)\n\nClientTest.java\n} catch (IOException ignore) {\n}\n}\nprivate void closeIgnoringException(ServerSocket serverSocket) {\nif (serverSocket != null)\ntry {\nserverSocket.close();\n} catch (IOException ignore) {\n}\n}\n}\n\n# Listing A-5\n\nMessageUtils.java\npackage common;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class MessageUtils {\npublic static void sendMessage(Socket socket, String message) throws IOException {\nOutputStream stream = socket.getOutputStream();\nObjectOutputStream oos = new ObjectOutputStream(stream);\noos.writeUTF(message);\noos.flush();\n}\n\npublic static String getMessage(Socket socket) throws IOException {\nInputStream stream = socket.getInputStream();\nObjectInputStream ois = new ObjectInputStream(stream);\nreturn ois.readUTF();\n}\n}\n\n# Client/Server Using Threads\n\nChanging the server to use threads simply requires a change to the process message (new lines are emphasized to stand out):\n\nvoid process(final Socket socket) {\nif (socket == null)\nreturn;\nRunnable clientHandler = new Runnable() {\npublic void run() {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1225, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a1bc262f-859d-4a18-b7ac-45fd81d0d171": {"__data__": {"id_": "a1bc262f-859d-4a18-b7ac-45fd81d0d171", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8b67d42f-af2e-4c90-af07-812fb284ab0f", "node_type": "4", "metadata": {}, "hash": "20ffa756dac449e57f4c64e84d97645c2d84ca2f2b0e6ede0bccbfd57fc2bf25", "class_name": "RelatedNodeInfo"}}, "text": "# Tutorial: Full Code Examples\n\ntry {\nSystem.out.printf(\"Server: getting message\\n\");\nString message = MessageUtils.getMessage(socket);\nSystem.out.printf(\"Server: got message: %s\\n\", message);\nThread.sleep(1000);\nSystem.out.printf(\"Server: sending reply: %s\\n\", message);\nMessageUtils.sendMessage(socket, \"Processed: \" + message);\nSystem.out.printf(\"Server: sent\\n\");\ncloseIgnoringException(socket);\n} catch (Exception e) {\ne.printStackTrace();\n}\n\nThread clientConnection = new Thread(clientHandler);\nclientConnection.start();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 526, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d84fb232-b198-479e-b054-63b37e04a376": {"__data__": {"id_": "d84fb232-b198-479e-b054-63b37e04a376", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cef553ff-d329-48ab-96af-1e0cefe5bd52", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e24a498-af1d-442f-86db-2a2b26b83ab7": {"__data__": {"id_": "3e24a498-af1d-442f-86db-2a2b26b83ab7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c1891747-f67a-4805-990c-10fd9b83ecd3", "node_type": "4", "metadata": {}, "hash": "6fa5a214bf4379d173e34aa64c867e5dceaa155f1ce735a173de8bb3b09cd15e", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B\n\n# org.jfree.date.SerialDate\n\n# Listing B-1\n\n# SerialDate.Java\n\n1 /* ========================================================================\n2   * JCommon : a free general purpose class library for             the Java(tm)    platform\n3   * ========================================================================\n4   *\n5   * (C) Copyright 2000-2005, by Object Refinery            Limited and   Contributors.\n6   *\n7   * Project Info:      http://www.jfree.org/jcommon/index.html\n8   *\n9   * This library is free software; you can redistribute it and/or modify                 it\n10   * under   the terms of the GNU Lesser General Public           License as published by\n11   * the Free Software Foundation; either version 2.1             of the  License, or\n12   * (at your option) any later version.\n13   *\n14   * This library is distributed in the hope that it warranty  will   be  useful,   but\n15   * WITHOUT ANY WARRANTY; without even the implied                       of  MERCHANTABILITY\n16   * or FITNESS FOR A PARTICULAR PURPOSE. See           the GNU   Lesser  General   Public\n17   * License for more details.\n18   *\n19   * You should have received a copy of the GNU           Lesser General FreePublic\n20   * License along with this library; if not,           write to the          Software\n21   * Foundation, Inc., 51 Franklin Street, Fifth            Floor,  Boston,   MA   02110-1301,\n22   * USA.\n23   *\n24   * [Java   is a trademark or registered trademark of          Sun Microsystems,      Inc.\n25   * in the United States and other countries.]\n26   *\n27   * ---------------\n28   * SerialDate.java\n29   * ---------------\n30   * (C) Copyright 2001-2005, by Object Refinery            Limited.\n31   *\n32   * Original Author:      David Gilbert (for Object        Refinery  Limited);\n33   * Contributor(s):       -;\n34   *\n35   * $Id: SerialDate.java,v 1.7 2005/11/03 09:25:17 mungady Exp               $\n36   *\n37   * Changes (from 11-Oct-2001)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1975, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a11b6f3-6cae-4a57-b5d7-585b0420e75c": {"__data__": {"id_": "0a11b6f3-6cae-4a57-b5d7-585b0420e75c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7d6d0ded-5bcd-4ca9-8bde-34d3776314c2", "node_type": "4", "metadata": {}, "hash": "ecd249bb15bcdf054e9cffc4f25446551b566d529e415369efc03918fdb7d29c", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\nSerialDate.Java\n38    * --------------------------\n39    * 11-Oct-2001 : Re-organised the class and                             moved it to         new package\n40    *                          com.jrefinery.date (DG);\n41    * 05-Nov-2001 : Added a getDescription() method, and                                    eliminated NotableDate\n42    *                          class (DG);\n43    * 12-Nov-2001 : IBD requires setDescription() getPreviousDayOfWeek(), correctmethod, now        that    NotableDate\n44    *                          class is gone (DG);               Changed getNearestDayOfWeek()\n45    *                          getFollowingDayOfWeek() and                                                       to\n46    *                          bugs (DG);\n47    * 05-Dec-2001 : Fixed bug in SpreadsheetDate                              class      (DG);\n48    * 29-May-2002 : Moved the month constants into a separate                                       interface\n49    *                          (MonthConstants) (DG);\n50    * 27-Aug-2002 : Fixed bug in addMonths() method, thanks                                      to N???levka Petr (DG);\n51    * 03-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n52    * 13-Mar-2003 : Implemented Serializable (DG);(DG);\n53    * 29-May-2003 : Fixed bug in addMonths method\n54    * 04-Sep-2003 : Implemented Comparable.                             Updated the         isInRange       javadocs (DG);\n55    * 05-Jan-2005 : Fixed bug in addYears() method (1096282) (DG);\n56    *\n57    */\n58\n59 package org.jfree.date;\n60\n61 import java.io.Serializable;\n62 import java.text.DateFormatSymbols;\n63 import java.text.SimpleDateFormat;\n64 import java.util.Calendar;\n65 import java.util.GregorianCalendar;\n66\n67 /**\n68    *    An abstract class that defines our requirements                                 for   manipulating         dates,\n69    *    without tying down a particular implementation.\n70    *\n71    *    Requirement 1 : match at least what Excel                            does     for dates;\n72    *    Requirement 2 : class is immutable;\n73    *\n74    *    Why not just use java.util.Date?                        We will,       when     it makes      sense. in time,At times,\n75    *    java.util.Date can be *too* precise - it represents                                   an   instant dayon\n76    *    accurate to 1/1000th of a second (with the Sometimes we just want to representitselfdate   depending            the\n77    *    time-zone).                                                            about a particular day, or the21 (e.g.\n78    *    January 2015) without concerning ourselves we've                                 the    time    of\n79    *    time-zone, or anything else.                      That's what                   defined SerialDate             for.\n80    *\n81    *    You can call getInstance() to get a concrete                              subclass of         SerialDate,\n82    *    without worrying about the exact implementation.\n83    *\n84    * @author David Gilbert\n85    */\n86 public abstract class SerialDate implements                               Comparable,\n87                                                                           Serializable,\n88                                                                           MonthConstants           {\n89\n90         /** For serialization. */\n91         private static final long serialVersionUID                             =  -293716040467423637L;\n92\n93         /** Date format symbols. */\n94         public static final DateFormatSymbols\n95                DATE_FORMAT_SYMBOLS = new SimpleDateFormat().getDateFormatSymbols();\n96\n97         /** The serial number for 1 January 1900.\npublic static final int SERIAL_LOWER_BOUND*/\n98                                                                                =  2;\n99\n100          /** The serial number for 31 December 9999. */\n101          public static final int SERIAL_UPPER_BOUND                             =  2958465;\n102", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "44998c0e-0209-4be7-88b6-4acbe02068cf": {"__data__": {"id_": "44998c0e-0209-4be7-88b6-4acbe02068cf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9ee0d506-3e6c-441d-9d89-c726bbc5be33", "node_type": "4", "metadata": {}, "hash": "23fde665d833c2a7d686741a65f24fc7b258be657a1288fab77b1998a60934b4", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\nSerialDate.Java\n103              /** The lowest year value supported by this date format.                                                             */\n104              public static final int MINIMUM_YEAR_SUPPORTED                                                   = 1900;\n105\n106              /** The highest year value supported by                                           this       date 9999;format.         */\n107              public static final int MAXIMUM_YEAR_SUPPORTED                                                   =\n108\n109              /** Useful constant for Monday. Equivalent                                               to java.util.Calendar.MONDAY.                             */\n110              public static final int MONDAY = Calendar.MONDAY;\n111\n112              /**\n113                * Useful constant for Tuesday. Equivalent                                              to java.util.Calendar.TUESDAY.\n114                */\n115              public static final int TUESDAY = Calendar.TUESDAY;\n116\n117              /**\n118                * Useful constant for Wednesday. Equivalent                                                to\n119                * java.util.Calendar.WEDNESDAY.\n120                */\n121              public static final int WEDNESDAY = Calendar.WEDNESDAY;\n122\n123              /**\n124                * Useful constant for Thrusday. Equivalent to                                                  java.util.Calendar.THURSDAY.\n125                */\n126              public static final int THURSDAY = Calendar.THURSDAY;\n127\n128              /** Useful constant for Friday. Equivalent                                               to java.util.Calendar.FRIDAY.                             */\n129              public static final int FRIDAY = Calendar.FRIDAY;\n130\n131              /**\n132                * Useful constant for Saturday. Equivalent to                                                  java.util.Calendar.SATURDAY.\n133                */\n134              public static final int SATURDAY = Calendar.SATURDAY;\n135\n136              /** Useful constant for Sunday. Equivalent                                               to java.util.Calendar.SUNDAY.                             */\n137              public static final int SUNDAY = Calendar.SUNDAY;\n138\n139              /** The number of days in each month in                                           non leap years. */\n140              static final int[] LAST_DAY_OF_MONTH =\n141                      {0, 31, 28, 31, 30, 31, 30, 31, 31,                                       30, 31,          30,     31};\n142\n143              /** The number of days in a (non-leap) year up                                                   to    the end         of each month.              */\n144              static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH                                                      =\n145                      {0, 31, 59, 90, 120, 151, 181, 212,                                       243,       273,      304,      334,      365};\n146\n147              /** The number of days in a year up to the                                               end     of    the preceding month. */\n148              static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH                                                                =\n149                      {0, 0, 31, 59, 90, 120, 151, 181, 212,                                           243,      273,      304,      334,       365};\n150\n151              /** The number of days in a leap year up to the                                                    end     of    each      month.        */\n152              static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH                                                                =\n153                      {0, 31, 60, 91, 121, 152, 182, 213,                                       244,       274,      305,      335,      366};\n154\n155              /**\n156                * The number of days in a leap year up                                          to     the     end of the            preceding           month.\n157                */\n158              static final int[]\n159                      LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH                                                       =\n160                               {0, 0, 31, 60, 91, 121, 152, 182,                                    213,       244,      274,      305,      335,      366};\n161\n162              /** A useful constant for referring to the\n163                                                              public static final int FIRST_WEEK_IN_MONTHfirst week in                  a month. */\n164                                                                                                        = 1;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4877, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ee73331-809f-4371-b107-2752722c521f": {"__data__": {"id_": "4ee73331-809f-4371-b107-2752722c521f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "63d61ce1-ef11-4669-92c1-a30ed0ca29a6", "node_type": "4", "metadata": {}, "hash": "d1f5ba4c622f2dbb4a7f1755fc6041c6f2cad420c1b0509ee3e825c731923e96", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\nSerialDate.Java\n165           /** A useful constant for referring to the                                              second        week       in    a   month.        */\n166           public static final int SECOND_WEEK_IN_MONTH                                                =   2;\n167\n168           /** A useful constant for referring to the\npublic static final int THIRD_WEEK_IN_MONTHthird week in                 a month. */\n169                                                                                                    = 3;\n170\n171           /** A useful constant for referring to the                                              fourth        week       in    a   month.        */\n172           public static final int FOURTH_WEEK_IN_MONTH                                                =   4;\n173\n174           /** A useful constant for referring to the                                              last      week       in a      month.        */\n175           public static final int LAST_WEEK_IN_MONTH                                              =   0;\n176\n177           /** Useful range constant. */\n178           public static final int INCLUDE_NONE = 0;\n179\n180           /** Useful range constant. */\n181           public static final int INCLUDE_FIRST =                                           1;\n182\n183           /** Useful range constant. */\n184           public static final int INCLUDE_SECOND = 2;\n185\n186           /** Useful range constant. */\n187           public static final int INCLUDE_BOTH = 3;\n188\n189           /**\n190            * Useful constant for specifying a day                                           of    the     week      relative to a fixed\n191            * date.\n192            */\n193           public static final int PRECEDING = -1;\n194\n195           /**\n196            * Useful constant for specifying a day                                           of    the     week      relative to a fixed\n197            * date.\n198            */\n199           public static final int NEAREST = 0;\n200\n201           /**\n202            * Useful constant for specifying a day                                           of    the     week      relative to a fixed\n203            * date.\n204            */\n205           public static final int FOLLOWING = 1;\n206\n207           /** A description for the date. */\n208           private String description;\n209\n210           /**\n211            * Default constructor.\n212            */\n213           protected SerialDate() {\n214           }\n215\n216           /**\n217            * Returns true if the supplied                                                integer          code      represents a\n218            * valid day-of-the-week, and false otherwise.\n219            *\n220            * @param code                  the code being checked for                              validity.\n221            *\n222            * @return true if the supplied                                                integer          code otherwise.represents a\n223            *                    valid day-of-the-week, and false\n224            */\n225           public static boolean isValidWeekdayCode(final                                                  int code)           {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "593c9bfe-b307-4f23-ab15-426802b3ba33": {"__data__": {"id_": "593c9bfe-b307-4f23-ab15-426802b3ba33", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "94a178d9-9dd7-4c6f-a401-032d4ffae205", "node_type": "4", "metadata": {}, "hash": "683690c6d68be30a7868c8008bbf15b08a8fcb32fbe3a0cd9d36cb0f23b507a8", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\nSerialDate.Java\n227             switch(code) {\n228                  case SUNDAY:\n229                  case MONDAY:\n230                  case TUESDAY:\n231                  case WEDNESDAY:\n232                  case THURSDAY:\n233                  case FRIDAY:\n234                  case SATURDAY:\n235                       return true;\n236                  default:\n237                       return false;\n238             }\n239\n240        }\n241\n242        /**\n243         * Converts the supplied string to a day of the               week.\n244         *\n245         * @param s      a string representing the day          of the   week.\n246         *\n247         * @return -1 if the string is not               convertable, the   day of\n248         *            the week otherwise.\n249         */\n250        public static int stringToWeekdayCode(String              s)  {\n251\n252             final String[] shortWeekdayNames\n253                  = DATE_FORMAT_SYMBOLS.getShortWeekdays();\n254             final String[] weekDayNames = DATE_FORMAT_SYMBOLS.getWeekdays();\n255\n256             int result = -1;\n257             s = s.trim();\n258             for (int i = 0; i < weekDayNames.length; {i++)              {\n259                  if (s.equals(shortWeekdayNames[i]))\n260                       result = i;\n261                       break;\n262                  }\n263                  if (s.equals(weekDayNames[i])) {\n264                       result = i;\n265                       break;\n266                  }\n267             }\n268             return result;\n269\n270        }\n271\n272        /**\n273         * Returns a string representing the supplied day-of-the-week.\n274         *\n275         * Need to find a better approach.\n276         *\n277         * @param weekday       the day of the week.\n278         *\n279         * @return a string representing the supplied day-of-the-week.\n280         */\n281        public static String weekdayCodeToString(final               int weekday)     {\n282\n283             final String[] weekdays = DATE_FORMAT_SYMBOLS.getWeekdays();\n284             return weekdays[weekday];\n285\n286        }\n287\n288        /**", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2216, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc80510c-0dc7-45b1-ba1b-bff162d1fbb0": {"__data__": {"id_": "fc80510c-0dc7-45b1-ba1b-bff162d1fbb0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8ebb69d0-563b-4ebc-83f2-1e4b6bbb4425", "node_type": "4", "metadata": {}, "hash": "13dc21c61c18f74e15de32ef2318791904c98991f50c44b6b4e6a90793ca6942", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\npublic static String[] getMonths() {\nreturn getMonths(false);\n}\n\n/**\n* Returns an array of month names.\n*\n* @param shortened        a flag indicating that shortened month names should\n*                         be returned.\n*\n* @return an array of month names.\n*/\npublic static String[] getMonths(final boolean shortened) {\nif (shortened) {\nreturn DATE_FORMAT_SYMBOLS.getShortMonths();\n} else {\nreturn DATE_FORMAT_SYMBOLS.getMonths();\n}\n}\n\n/**\n* Returns true if the supplied integer code represents a valid month.\n*\n* @param code      the code being checked for validity.\n*\n* @return true if the supplied integer code represents a\n*         valid month.\n*/\npublic static boolean isValidMonthCode(final int code) {\nswitch(code) {\ncase JANUARY:\ncase FEBRUARY:\ncase MARCH:\ncase APRIL:\ncase MAY:\ncase JUNE:\ncase JULY:\ncase AUGUST:\ncase SEPTEMBER:\ncase OCTOBER:\ncase NOVEMBER:\ncase DECEMBER:\nreturn true;\ndefault:\nreturn false;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 993, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29ab628d-2627-4076-90f7-ea97549fd4c9": {"__data__": {"id_": "29ab628d-2627-4076-90f7-ea97549fd4c9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "75c04ce3-e845-4faa-889c-7e4373397195", "node_type": "4", "metadata": {}, "hash": "cd7b645bc49345528401f5972be45a6f8dfa33f132429e2cb99b55edfdbdc1e3", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\nSerialDate.Java\n351         * @param code       the month code (1-12).\n352         *\n353         * @return the quarter that the month belongs to.\n354         * @throws java.lang.IllegalArgumentException\n355         */\n356        public static int monthCodeToQuarter(final              int  code)   {\n357\n358             switch(code) {\n359                  case JANUARY:\n360                  case FEBRUARY:\n361                  case MARCH: return 1;\n362                  case APRIL:\n363                  case MAY:\n364                  case JUNE: return 2;\n365                  case JULY:\n366                  case AUGUST:\n367                  case SEPTEMBER: return 3;\n368                  case OCTOBER:\n369                  case NOVEMBER:\n370                  case DECEMBER: return 4;\n371                  default: throw new IllegalArgumentException(month\n372                        \"SerialDate.monthCodeToQuarter: invalid                     code.\");\n373             }\n374\n375        }\n376\n377        /**\n378         * Returns a string representing the supplied month.\n379         *\n380         * The string returned is the long form             of  the  month   name   taken from the\n381         * default locale.\n382         *\n383         * @param month       the month.\n384         *\n385         * @return a string representing the supplied month.\n386         */\n387        public static String monthCodeToString(final               int month) {\n388\n389             return monthCodeToString(month, false);\n390\n391        }\n392\n393        /**\n394         * Returns a string representing the supplied month.\n395         *\n396         * The string returned is the long or short form of                 the month    name   taken\n397         * from the default locale.\n398         *\n399         * @param month       the month.\n400         * @param shortened        if true        return the    abbreviation of the\n401         *                         month.\n402         *\n403         * @return a string representing the supplied month.\n404         * @throws java.lang.IllegalArgumentException\n405         */\n406        public static String monthCodeToString(final               int month,\n407                                                           final   boolean   shortened) {\n408\n409             // check arguments...\n410             if (!isValidMonthCode(month)) {\n411                  throw new IllegalArgumentException(month outside\n412                        \"SerialDate.monthCodeToString:                             valid   range.\");", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2613, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "075dc5ca-b1b5-42e3-b40d-1a555b1ca357": {"__data__": {"id_": "075dc5ca-b1b5-42e3-b40d-1a555b1ca357", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c1ef4326-d171-4a4a-950b-44cb34a3c0ad", "node_type": "4", "metadata": {}, "hash": "4af16f9c1e3f932486a5213e933179aa57cea3097378d823bdc81b92064173f0", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\nSerialDate.Java\n413             }\n414\n415             final String[] months;\n416\n417             if (shortened) {\n418                  months = DATE_FORMAT_SYMBOLS.getShortMonths();\n419             }\n420             else {\n421                  months = DATE_FORMAT_SYMBOLS.getMonths();\n422             }\n423\n424             return months[month - 1];\n425\n426        }\n427\n428        /**\n429         * Converts a string to a month code.\n430         *\n431         * This method will return one of the constants               JANUARY,    FEBRUARY,    ...,\n432         * DECEMBER that corresponds to the string.               If  the   string is    not\n433         * recognised, this method returns -1.\n434         *\n435         * @param s      the string to parse.\n436         *\n437         * @return -1 if the string is not               parseable, the      month of   the\n438         *            year otherwise.\n439         */\n440        public static int stringToMonthCode(String              s) {\n441\n442             final String[] shortMonthNames = DATE_FORMAT_SYMBOLS.getShortMonths();\n443             final String[] monthNames = DATE_FORMAT_SYMBOLS.getMonths();\n444\n445             int result = -1;\n446             s = s.trim();\n447\n448             // first try parsing the string as an             integer   (1-12)...\n449             try {\n450                  result = Integer.parseInt(s);\n451             }\n452             catch (NumberFormatException e) {\n453                  // suppress\n454             }\n455\n456             // now search through the month names...\n457             if ((result < 1) || (result > 12)) {\n458                  for (int i = 0; i < monthNames.length; {i++)              {\n459                       if (s.equals(shortMonthNames[i]))\n460                            result = i + 1;\n461                            break;\n462                       }\n463                       if (s.equals(monthNames[i])) {\n464                            result = i + 1;\n465                            break;\n466                       }\n467                  }\n468             }\n469\n470             return result;\n471\n472        }\n473\n474        /**", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd0f4af2-09dd-40f0-80ed-41897d2833ec": {"__data__": {"id_": "cd0f4af2-09dd-40f0-80ed-41897d2833ec", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bcfcaf83-feae-441d-989a-249326f4082f", "node_type": "4", "metadata": {}, "hash": "f6a770cfce1751704873c912854020749d483ff50605f34eca5a9fbcbb13a03c", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\n* Returns true if the supplied integer             code   represents a\nvalid week-in-the-month, and false otherwise.\n\n* @param code       the code being checked for         validity.\n* @return true if the supplied               integer   code   represents a\nvalid week-in-the-month.\n\npublic static boolean isValidWeekInMonthCode(final int                  code) {\n\nswitch(code) {\ncase FIRST_WEEK_IN_MONTH:\ncase SECOND_WEEK_IN_MONTH:\ncase THIRD_WEEK_IN_MONTH:\ncase FOURTH_WEEK_IN_MONTH:\ncase LAST_WEEK_IN_MONTH: return           true;\ndefault: return false;\n}\n}\n\n/**\n* Determines whether or not the specified              year   is a  leap   year.\n*\n* @param yyyy       the year (in the range 1900 to          9999).\n*\n* @return true if the specified year is a leap year.\n*/\npublic static boolean isLeapYear(final int              yyyy) {\n\nif ((yyyy % 4) != 0) {\nreturn false;\n}\nelse if ((yyyy % 400) == 0) {\nreturn true;\n}\nelse if ((yyyy % 100) == 0) {\nreturn false;\n}\nelse {\nreturn true;\n}\n}\n\n/**\n* Returns the number of leap years from 1900 to the                 specified    year\n* INCLUSIVE.\n*\n* Note that 1900 is not a leap year.\n*\n* @param yyyy       the year (in the range 1900 to          9999).\n*\n* @return the number of leap years from 1900 to the                 specified    year.\n*/\npublic static int leapYearCount(final int              yyyy)   {\n\nfinal int leap4 = (yyyy - 1896) / 4;100;\nfinal int leap100 = (yyyy - 1800) /\nfinal int leap400 = (yyyy - 1600) /            400;\nreturn leap4 - leap100 + leap400;\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1595, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e65270b1-dd36-4a09-a73c-822d8664fd30": {"__data__": {"id_": "e65270b1-dd36-4a09-a73c-822d8664fd30", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0247d5e5-2c5a-4089-b383-32e694511e79", "node_type": "4", "metadata": {}, "hash": "8bc20b6f067593ef440bf650666f7996397dcbdeb56a31f6e13dbdf8543740ca", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\nSerialDate.Java\n537\n538        /**\n539         * Returns the number of the last day of the               month,   taking into account\n540         * leap years.\n541         *\n542         * @param month the year (in the range 1900 to the month.\n543         * @param yyyy                                               9999).\n544         *\n545         * @return the number of the last day of the               month.\n546         */\n547        public static int lastDayOfMonth(final int              month,   final int     yyyy) {\n548\n549             final int result = LAST_DAY_OF_MONTH[month];\n550             if (month != FEBRUARY) {\n551                  return result;\n552             }\n553             else if (isLeapYear(yyyy)) {\n554                  return result + 1;\n555             }\n556             else {\n557                  return result;\n558             }\n559\n560        }\n561\n562        /**\n563         * Creates a new date by adding the specified number                 of days to the      base\n564         * date.\n565         *\n566         * @param days       the number of days to add         (can  be  negative).\n567         * @param base       the base date.\n568         *\n569         * @return a new date.\n570         */\n571        public static SerialDate addDays(final int              days, final     SerialDate base)      {\n572\n573             final int serialDayNumber = base.toSerial()               + days;\n574             return SerialDate.createInstance(serialDayNumber);\n575\n576        }\n577\n578        /**\n579         * Creates a new date by adding the specified number                 of months     to the   base\n580         * date.\n581         *\n582         * If the base date is close to the end 31 May + 1of    the  month, the     day  on  the result\n583         * may be adjusted slightly:                         month   = 30   June.\n584         *\n585         * @param months the base date.the number of months to add (can be negative).\n586         * @param base\n587         *\n588         * @return a new date.\n589         */\n590        public static SerialDate addMonths(final int               months,base)\n591                                                      final SerialDate              {\n592\n593             final int yy = (12 * base.getYYYY()            +  base.getMonth()      +  months   - 1)\n594                                 / 12;\n595             final int mm = (12 * base.getYYYY()            +  base.getMonth()      +  months   - 1)\n596                                 % 12 + 1;\n597             final int dd = Math.min(\n598                  base.getDayOfMonth(), SerialDate.lastDayOfMonth(mm,                  yy)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2734, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0eaf5f44-3947-4c77-b750-4d9ad443806c": {"__data__": {"id_": "0eaf5f44-3947-4c77-b750-4d9ad443806c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "24da72b9-9ffb-4c55-8f7d-d8409d39b53a", "node_type": "4", "metadata": {}, "hash": "91bd5a3ada34bc1678fafa3e2f333b6e533ff20125523ee14df141ed8fa5f5a6", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\nSerialDate.Java\n599             );\n600             return SerialDate.createInstance(dd, mm,              yy);\n601\n602        }\n603\n604        /**\n605         * Creates a new date by adding the specified number                 of years    to  the base\n606         * date.\n607         *\n608         * @param years the base date.the number of years to add (can be    negative).\n609         * @param base\n610         *\n611         * @return A new date.\n612         */\n613        public static SerialDate addYears(final             int years, final      SerialDate     base) {\n614\n615             final int baseY = base.getYYYY();\n616             final int baseM = base.getMonth();\n617             final int baseD = base.getDayOfMonth();\n618\n619             final int targetY = baseY + years;\n620             final int targetD = Math.min(\n621                  baseD, SerialDate.lastDayOfMonth(baseM,              targetY)\n622             );\n623\n624             return SerialDate.createInstance(targetD, baseM,                targetY);\n625\n626        }\n627\n628        /**\n629         * Returns the latest date that falls on the               specified    day-of-the-week and\n630         * is BEFORE the base date.\n631         *\n632         * @param targetWeekday          a code for the     target   day-of-the-week.\n633         * @param base       the base date.\n634         *\n635         * @return the latest date that falls on the               specified    day-of-the-week and\n636         *            is BEFORE the base date.\n637         */\n638        public static SerialDate getPreviousDayOfWeek(final                 int targetWeekday,\n639                                                                    final   SerialDate    base) {\n640\n641             // check arguments...\n642             if (!SerialDate.isValidWeekdayCode(targetWeekday))                 {\n643                  throw new IllegalArgumentException(\n644                        \"Invalid day-of-the-week code.\"\n645                  );\n646             }\n647\n648             // find the date...\n649             final int adjust;\n650             final int baseDOW = base.getDayOfWeek();\n651             if (baseDOW > targetWeekday) {\n652                  adjust = Math.min(0, targetWeekday            -  baseDOW);\n653             }\n654             else {\n655                  adjust = -7 + Math.max(0, targetWeekday              - baseDOW);\n656             }\n657\n658             return SerialDate.addDays(adjust, base);\n659\n660        }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2572, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d903f4fa-481a-4530-8f2f-8d0073da2603": {"__data__": {"id_": "d903f4fa-481a-4530-8f2f-8d0073da2603", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "45c0cdf5-b975-459d-bfc1-405155210906", "node_type": "4", "metadata": {}, "hash": "d2d90d48d2a654e8d5896851a5dbefc273e2130232b1560e94ae51b5ee62305a", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\nSerialDate.Java\n661\n662        /**\n663         * Returns the earliest date that falls             on  the  specified     day-of-the-week\n664         * and is AFTER the base date.\n665         *\n666         * @param targetWeekday          a code for the     target   day-of-the-week.\n667         * @param base       the base date.\n668         *\n669         * @return the earliest date that falls             on  the  specified     day-of-the-week\n670         *            and is AFTER the base date.\n671         */\n672        public static SerialDate getFollowingDayOfWeek(final                  int  targetWeekday,\n673                                                                     final    SerialDate base)      {\n674\n675             // check arguments...\n676             if (!SerialDate.isValidWeekdayCode(targetWeekday))                 {\n677                  throw new IllegalArgumentException(\n678                        \"Invalid day-of-the-week code.\"\n679                  );\n680             }\n681\n682             // find the date...\n683             final int adjust;\n684             final int baseDOW = base.getDayOfWeek();\n685             if (baseDOW > targetWeekday) {\n686                  adjust = 7 + Math.min(0, targetWeekday             - baseDOW);\n687             }\n688             else {\n689                  adjust = Math.max(0, targetWeekday            -  baseDOW);\n690             }\n691\n692             return SerialDate.addDays(adjust, base);\n693        }\n694\n695        /**\n696         * Returns the date that falls on the specified                day-of-the-week and       is\n697         * CLOSEST to the base date.\n698         *\n699         * @param targetDOW        a code for the target        day-of-the-week.\n700         * @param base       the base date.\n701         *\n702         * @return the date that falls on the specified                day-of-the-week and       is\n703         *            CLOSEST to the base date.\n704         */\n705        public static SerialDate getNearestDayOfWeek(final int                  targetDOW,\n706                                                                   final SerialDate      base)   {\n707\n708             // check arguments...\n709             if (!SerialDate.isValidWeekdayCode(targetDOW)) {\n710                  throw new IllegalArgumentException(\n711                        \"Invalid day-of-the-week code.\"\n712                  );\n713             }\n714\n715             // find the date...\n716             final int baseDOW = base.getDayOfWeek();\n717             int adjust = -Math.abs(targetDOW - baseDOW);\n718             if (adjust >= 4) {\n719                  adjust = 7 - adjust;\n720             }\n721             if (adjust <= -4) {\n722                  adjust = 7 + adjust;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2828, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90e1b4b5-d5d0-4f61-9cbc-52e8eaafbe3e": {"__data__": {"id_": "90e1b4b5-d5d0-4f61-9cbc-52e8eaafbe3e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "70516267-81e2-4a1d-bdb9-36731cf4aa9e", "node_type": "4", "metadata": {}, "hash": "8d428f811b4d74368f9116219c60e96870b443375bcdd2506bb265881789aecf", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\nSerialDate.Java\n723             }\n724             return SerialDate.addDays(adjust, base);\n725\n726        }\n727\n728        /**\n729         * Rolls the date forward to the last day              of  the month.\n730         *\n731         * @param base       the base date.\n732         *\n733         * @return a new serial date.\n734         */\n735        public SerialDate getEndOfCurrentMonth(final               SerialDate base)      {\n736             final int last = SerialDate.lastDayOfMonth(\n737                  base.getMonth(), base.getYYYY()\n738             );\n739             return SerialDate.createInstance(last,             base.getMonth(),       base.getYYYY());\n740        }\n741\n742        /**\n743         * Returns a string corresponding to the week-in-the-month code.\n744         *\n745         * Need to find a better approach.\n746         *\n747         * @param count       an integer code representing the            week-in-the-month.\n748         *\n749         * @return a string corresponding to the week-in-the-month code.\n750         */\n751        public static String weekInMonthToString(final                int count)    {\n752\n753             switch (count) {\n754                  case SerialDate.FIRST_WEEK_IN_MONTH : return return\"First\";\n755                  case SerialDate.SECOND_WEEK_IN_MONTH : return :              \"Second\";\n756                  case SerialDate.THIRD_WEEK_IN_MONTH                 return\"Third\";\n757                  case SerialDate.FOURTH_WEEK_IN_MONTH             :           \"Fourth\";\n758                  case SerialDate.LAST_WEEK_IN_MONTH            :  return   \"Last\";\n759                  default :\n760                        return \"SerialDate.weekInMonthToString(): invalid                code.\";\n761             }\n762\n763        }\n764\n765        /**\n766         * Returns a string representing the supplied 'relative'.\n767         *\n768         * Need to find a better approach.\n769         *\n770         * @param relative        a constant representing the          'relative'.\n771         *\n772         * @return a string representing the supplied 'relative'.\n773         */\n774        public static String relativeToString(final int                relative)    {\n775\n776             switch (relative) {\n777                  case SerialDate.PRECEDING : return            \"Preceding\";\n778                  case SerialDate.NEAREST : return \"Nearest\";\n779                  case SerialDate.FOLLOWING : return            \"Following\";\n780                  default : return \"ERROR : Relative            To String\";\n781             }\n782\n783        }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2668, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5495d483-071e-484d-a8a0-804d4ad02d5c": {"__data__": {"id_": "5495d483-071e-484d-a8a0-804d4ad02d5c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2a5775ae-5d20-4035-8187-e4c51548e8e2", "node_type": "4", "metadata": {}, "hash": "8386ebd8c584d86959784552e0edcdb4d3cf452d95db5431eb9f2673f36458dd", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\npublic static SerialDate createInstance(final int day,\nfinal int month,\nfinal int yyyy) {\nreturn new SpreadsheetDate(day, month, yyyy);\n}\n\npublic static SerialDate createInstance(final int serial) {\nreturn new SpreadsheetDate(serial);\n}\n\npublic static SerialDate createInstance(final java.util.Date date) {\nfinal GregorianCalendar calendar = new GregorianCalendar();\ncalendar.setTime(date);\nreturn new SpreadsheetDate(calendar.get(Calendar.DATE),\ncalendar.get(Calendar.MONTH) + 1,\ncalendar.get(Calendar.YEAR));\n}\n\npublic abstract int toSerial();\n\npublic abstract java.util.Date toDate();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 655, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f33250d2-bf5b-4c37-96f8-0c22eec5f4d0": {"__data__": {"id_": "f33250d2-bf5b-4c37-96f8-0c22eec5f4d0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d52a36c7-28de-49e1-9316-f61a07c40bff", "node_type": "4", "metadata": {}, "hash": "0d475fc08c418328c6309eed431625d4cbee8fd6b5b76387695837bc0eb000c6", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\npublic String getDescription() {\nreturn this.description;\n}\n\npublic void setDescription(final String description) {\nthis.description = description;\n}\n\npublic String toString() {\nreturn getDayOfMonth() + \"-\" + SerialDate.monthCodeToString(getMonth())\n+ \"-\" + getYYYY();\n}\n\npublic abstract int getYYYY();\n\npublic abstract int getMonth();\n\npublic abstract int getDayOfMonth();\n\npublic abstract int getDayOfWeek();\n\npublic abstract int getDifferenceInDays(SerialDate other);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 538, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7aea967-4066-4664-8de9-3f77042a32fd": {"__data__": {"id_": "d7aea967-4066-4664-8de9-3f77042a32fd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8ec43bd6-a946-4e28-b2d4-81f13d003b8e", "node_type": "4", "metadata": {}, "hash": "6f71d2bda0df1c88c3caeef31ef1693c78a774847d0bae4973dd90f1d2c83477", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\npublic abstract int compare(SerialDate other);\n\n/**\n* Returns true if this SerialDate represents the same date as the\n* specified SerialDate.\n*\n* @param other             the date being compared to.\n*\n* @return true if this SerialDate represents the same date as\n*         the specified SerialDate.\n*/\npublic abstract boolean isOn(SerialDate other);\n\n/**\n* Returns true if this SerialDate represents an earlier date compared to\n* the specified SerialDate.\n*\n* @param other             The date being compared to.\n*\n* @return true if this SerialDate compared to the specified SerialDate represents an earlier date\n*/\npublic abstract boolean isBefore(SerialDate other);\n\n/**\n* Returns true if this SerialDate represents the same date as the\n* specified SerialDate.\n*\n* @param other             the date being compared to.\n*\n* @return true if this SerialDate represents the same date as\n*         the specified SerialDate.\n*/\npublic abstract boolean isOnOrBefore(SerialDate other);\n\n/**\n* Returns true if this SerialDate represents the same date as the\n* specified SerialDate.\n*\n* @param other             the date being compared to.\n*\n* @return true if this SerialDate represents the same date as\n*         the specified SerialDate.\n*/\npublic abstract boolean isAfter(SerialDate other);\n\n/**\n* Returns true if this SerialDate represents the same date as the\n* specified SerialDate.\n*\n* @param other             the date being compared to.\n*\n* @return true if this SerialDate represents the same date as\n*         the specified SerialDate.\n*/\npublic abstract boolean isOnOrAfter(SerialDate other);\n\n/**\n* Returns true if this {@link SerialDate} is within the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1723, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e0f69f0-1fc9-47d7-8237-d0733cd6d097": {"__data__": {"id_": "8e0f69f0-1fc9-47d7-8237-d0733cd6d097", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e96a88f2-c65d-4925-b96f-8cc7d9792980", "node_type": "4", "metadata": {}, "hash": "e33d6e047f6e44ffd73ff0d5a4022916d1096ee9a19ef0633041d577f0f3bfc5", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-1 (continued)\n\n972                * specified range (INCLUSIVE).                                    The date          order        of d1 and           d2 is not\n973                * important.\n974                *\n975                * @param d1               a boundary date for the range.\n976                * @param d2               the other boundary date for                               the range.\n977                *\n978                * @return A boolean.\n979                */\n980              public abstract boolean isInRange(SerialDate                                                d1, SerialDate                 d2);\n981\n982              /**\n983                * Returns true if this {@link SerialDate} is within the\n984                * specified range (caller specifies whether isor                                                 not     the end-points                are\n985                * included).                 The date order of d1 and                           d2         not       important.\n986                *\n987                * @param d1               a boundary date for the range.\n988                * @param d2               the other boundary date for                               the range.\n989                * @param include                     a code that controls\n990                *                                                                                dates are included inwhether           or not        the start           and end\n991                *                                                                                the      range.\n992                *\n993                * @return A boolean.\n994                */\n995              public abstract boolean isInRange(SerialDate                                                d1, SerialDate                 d2,\n996                                                                                   int include);\n997\n998              /**\n999                * Returns the latest date that falls on the                                               specified            day-of-the-week and\n1000                 * is BEFORE this date.\n1001                 *\n1002                 * @param targetDOW                       a code for the target                        day-of-the-week.\n1003                 *\n1004                 * @return the latest date that falls on the                                               specified            day-of-the-week and\n1005                 *                   is BEFORE this date.\n1006                 */\n1007               public SerialDate getPreviousDayOfWeek(final                                                int targetDOW)                 {\n1008                       return getPreviousDayOfWeek(targetDOW,                                          this);\n1009               }\n1010\n1011               /**\n1012                 * Returns the earliest date that falls                                          on    the     specified            day-of-the-week\n1013                 * and is AFTER this date.\n1014                 *\n1015                 * @param targetDOW                       a code for the target                        day-of-the-week.\n1016                 *\n1017                 * @return the earliest date that falls                                          on    the     specified            day-of-the-week\n1018                 *                   and is AFTER this date.\n1019                 */\n1020               public SerialDate getFollowingDayOfWeek(final int return getFollowingDayOfWeek(targetDOW, this);targetDOW) {\n1021               }\n1022\n1023               /**\n1024                 * Returns the nearest date that falls on                                            the specified day-of-the-week.\n1025                 *\n1026                 * @param targetDOW                       a code for the target                        day-of-the-week.\n1027                 *\n1028                 * @return the nearest date that falls on                                            the specified day-of-the-week.\n1029                 */\n1030               public SerialDate getNearestDayOfWeek(final int this);targetDOW) {\n1031                       return getNearestDayOfWeek(targetDOW,\n1032               }\n1033\n1034 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4356, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d195f49d-999a-4cb9-9683-a196b6f74e44": {"__data__": {"id_": "d195f49d-999a-4cb9-9683-a196b6f74e44", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2a8c2819-37c0-41fb-bb22-2c390c3e31a9", "node_type": "4", "metadata": {}, "hash": "3446ecd4ad482f04fa6f78c40cd51a3ca7185ec309efa5063f8f967258d66245", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-2\n\n# SerialDateTest.java\n\n/* ========================================================================\n* JCommon : a free general purpose class library for                  the Java(tm)     platform\n* ========================================================================\n*\n* (C) Copyright 2000-2005, by Object Refinery                Limited and    Contributors.\n*\n* Project Info:       http://www.jfree.org/jcommon/index.html\n*\n* This library is free software; you can redistribute it and/or modify                        it\n* under    the terms of the GNU Lesser General Public              License as published by\n* the Free Software Foundation; either version 2.1                 of the   License, or\n* (at your option) any later version.\n*\n* This library is distributed in the hope that it warranty  will        be  useful,    but\n* WITHOUT ANY WARRANTY; without even the implied                            of  MERCHANTABILITY\n* or FITNESS FOR A PARTICULAR PURPOSE. See               the GNU   Lesser   General    Public\n* License for more details.\n*\n* You should have received a copy of the GNU               Lesser General FreePublic\n* License along with this library; if not,               write to the           Software\n* Foundation, Inc., 51 Franklin Street, Fifth                Floor,   Boston,   MA    02110-1301,\n* USA.\n*\n* [Java    is a trademark or registered trademark of              Sun Microsystems,       Inc.\n* in the United States and other countries.]\n*\n* --------------------\n* SerialDateTests.java\n* --------------------\n* (C) Copyright 2001-2005, by Object Refinery                Limited.\n*\n* Original Author:        David Gilbert (for Object          Refinery   Limited);\n* Contributor(s):         -;\n*\n* $Id: SerialDateTests.java,v 1.6 2005/11/16               15:58:40 taqua      Exp $\n*\n* Changes\n* -------\n* 15-Nov-2001 : Version 1 (DG);\n* 25-Jun-2002 : Removed unnecessary import               (DG);\n* 24-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n* 13-Mar-2003 : Added serialization test (DG);\n* 05-Jan-2005 : Added test for bug report 1096282                 (DG);\n*\n*/\n\npackage org.jfree.date.junit;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInput;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\nimport org.jfree.date.MonthConstants;\nimport org.jfree.date.SerialDate;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2574, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a68baf1-b459-4caf-989c-2bc45d177006": {"__data__": {"id_": "3a68baf1-b459-4caf-989c-2bc45d177006", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "52dcfe4c-ac38-45dc-97bb-50bf45548e95", "node_type": "4", "metadata": {}, "hash": "b184fc4d6f3a3a9b1bded805cd69d3b24241a7acb7e186a6360c38e43959258b", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-2 (continued)\n\n# SerialDateTest.java\n\n63 /**\n64   * Some JUnit tests for the {@link SerialDate} class.\n65   */\n66 public class SerialDateTests extends TestCase {\n67\n68       /** Date representing November 9. */\n69       private SerialDate nov9Y2001;\n70\n71       /**\n72        * Creates a new test case.\n73        *\n74        * @param name       the name.\n75        */\n76       public SerialDateTests(final String name) {\n77            super(name);\n78       }\n79\n80       /**\n81        * Returns a test suite for the JUnit test runner.\n82        *\n83        * @return The test suite.\n84        */\n85       public static Test suite() {\n86            return new TestSuite(SerialDateTests.class);\n87       }\n88\n89       /**\n90        * Problem set up.\n91        */\n92       protected void setUp() {\n93            this.nov9Y2001 = SerialDate.createInstance(9, MonthConstants.NOVEMBER, 2001);\n94       }\n95\n96       /**\n97        * 9 Nov 2001 plus two months should be 9 Jan 2002.\n98        */\n99       public void testAddMonthsTo9Nov2001() {\n100             final SerialDate jan9Y2002 = SerialDate.addMonths(2, this.nov9Y2001);\n101             final SerialDate answer = SerialDate.createInstance(9, 1, 2002);\n102             assertEquals(answer, jan9Y2002);\n103        }\n104\n105        /**\n106         * A test case for a reported bug, now fixed.\n107         */\n108        public void testAddMonthsTo5Oct2003() {\n109             final SerialDate d1 = SerialDate.createInstance(5, MonthConstants.OCTOBER, 2003);\n110             final SerialDate d2 = SerialDate.addMonths(2, d1);\n111             assertEquals(d2, SerialDate.createInstance(5, MonthConstants.DECEMBER, 2003));\n112        }\n113\n114        /**\n115         * A test case for a reported bug, now fixed.\n116         */\n117        public void testAddMonthsTo1Jan2003() {\n118             final SerialDate d1 = SerialDate.createInstance(1, MonthConstants.JANUARY, 2003);\n119             final SerialDate d2 = SerialDate.addMonths(0, d1);\n120             assertEquals(d2, d1);\n121        }\n122\n123        /**\n124         * Monday preceding Friday 9 November 2001 should be 5 November.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2186, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1ec9382-1d04-40bb-b0e2-10317b884df6": {"__data__": {"id_": "b1ec9382-1d04-40bb-b0e2-10317b884df6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3cfb1410-9df7-48d0-bb8a-04d6961c15a1", "node_type": "4", "metadata": {}, "hash": "2411dd501fbdf532741c207f0c7f0a5cad5b578374fbd0fdf5b1d9848e88a984", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-2 (continued)\n\n# SerialDateTest.java\n\n126         public void testMondayPrecedingFriday9Nov2001()                                {\n127               SerialDate mondayBefore = SerialDate.getPreviousDayOfWeek(\n128                      SerialDate.MONDAY, this.nov9Y2001\n129               );\n130               assertEquals(5, mondayBefore.getDayOfMonth());\n131         }\n132\n133         /**\n134          * Monday following Friday 9 November 2001                             should     be   12 November.\n135          */\n136         public void testMondayFollowingFriday9Nov2001()                                {\n137               SerialDate mondayAfter = SerialDate.getFollowingDayOfWeek(\n138                      SerialDate.MONDAY, this.nov9Y2001\n139               );\n140               assertEquals(12, mondayAfter.getDayOfMonth());\n141         }\n142\n143         /**\n144          * Monday nearest Friday 9 November 2001 should                                be 12 November.\n145          */\n146         public void testMondayNearestFriday9Nov2001() {\n147               SerialDate mondayNearest = SerialDate.getNearestDayOfWeek(\n148                      SerialDate.MONDAY, this.nov9Y2001\n149               );\n150               assertEquals(12, mondayNearest.getDayOfMonth());\n151         }\n152\n153         /**\n154          * The Monday nearest to 22nd January 1970                             falls on      the 19th.\n155          */\n156         public void testMondayNearest22Jan1970() {\n157               SerialDate jan22Y1970 = SerialDate.createInstance(22,                                    MonthConstants.JANUARY,                 1970);\n158               SerialDate mondayNearest=SerialDate.getNearestDayOfWeek(SerialDate.MONDAY, jan22Y1970);\n159               assertEquals(19, mondayNearest.getDayOfMonth());\n160         }\n161\n162         /**\n163          * Problem that the conversion of days to strings returns the right result.                                                  Actually, this\n164          * result depends on the Locale so this                           test    needs to be         modified.\n165          */\n166         public void testWeekdayCodeToString() {\n167\n168               final String test = SerialDate.weekdayCodeToString(SerialDate.SATURDAY);\n169               assertEquals(\"Saturday\", test);\n170\n171         }\n172\n173         /**\n174          * Test the conversion of a string to a                           weekday.        Note    that     this    test    will\n175          * test!fail  if   the default locale doesn't use English weekday names...devise a                                          better\n176          */\n177         public void testStringToWeekday() {\n178\n179               int weekday = SerialDate.stringToWeekdayCode(\"Wednesday\");\n180               assertEquals(SerialDate.WEDNESDAY, weekday);\n181\n182               weekday = SerialDate.stringToWeekdayCode(\"                             Wednesday        \");\n183               assertEquals(SerialDate.WEDNESDAY, weekday);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3075, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "714e8e16-b82d-4b68-9efb-c583d2b4e0fc": {"__data__": {"id_": "714e8e16-b82d-4b68-9efb-c583d2b4e0fc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "34d947ce-c896-45cf-a380-1b1c2e69352b", "node_type": "4", "metadata": {}, "hash": "2ae8fe1a03435d6c6804a3ec36a1698b655c734c6c0b5005e1dfbc8e671eb14c", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-2 (continued)\n\n# SerialDateTest.java\n\n185                weekday = SerialDate.stringToWeekdayCode(\"Wed\");\n186                assertEquals(SerialDate.WEDNESDAY, weekday);\n187\n188          }\n189\n190          /**\n191           * Test the conversion of a string to a                          month.       Note  that  this  test   will\n192           * test!fail  if the\n193           * default locale doesn't use English month names...devise a better\n194           */\n195          public void testStringToMonthCode() {\n196\n197                int m = SerialDate.stringToMonthCode(\"January\");\n198                assertEquals(MonthConstants.JANUARY, m);\n199\n200                m = SerialDate.stringToMonthCode(\" January                             \");\n201                assertEquals(MonthConstants.JANUARY, m);\n202\n203                m = SerialDate.stringToMonthCode(\"Jan\");\n204                assertEquals(MonthConstants.JANUARY, m);\n205          }\n206\n207          /**\n208           * Tests the conversion of a month code                          to   a  string.\n209           */\n210          public void testMonthCodeToStringCode()                          {\n211\n212                final String test = SerialDate.monthCodeToString(MonthConstants.DECEMBER);\n213                assertEquals(\"December\", test);\n214\n215          }\n216\n217          /**\n218           * 1900 is not a leap year.\n219           */\n220          public void testIsNotLeapYear1900() {\n221                assertTrue(!SerialDate.isLeapYear(1900));\n222          }\n223\n224          /**\n225           * 2000 is a leap year.\n226           */\n227          public void testIsLeapYear2000() {\n228                assertTrue(SerialDate.isLeapYear(2000));\n229          }\n230\n231          /**\n232           * The number of leap years from 1900 up-to-and-including                                 1899  is 0.\n233           */\n234          public void testLeapYearCount1899() {\n235                assertEquals(SerialDate.leapYearCount(1899), 0);\n236          }\n237\n238          /**\n239           * The number of leap years from 1900 up-to-and-including                                 1903  is 0.\n240           */\n241          public void testLeapYearCount1903() {\n242                assertEquals(SerialDate.leapYearCount(1903), 0);\n243          }\n244\n245          /**\n246           * The number of leap years from 1900 up-to-and-including                                 1904  is 1.\n247           */", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2506, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9cd5a72d-28bd-4330-aa62-bc312f250fae": {"__data__": {"id_": "9cd5a72d-28bd-4330-aa62-bc312f250fae", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "60d4a2bf-bce4-4486-a68e-9254611dddd1", "node_type": "4", "metadata": {}, "hash": "d19133c8b684669158c74b2003f2bc3338fe5e3c4fc5284bbf825fbbae3d4ea9", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-2 (continued)\n\n# SerialDateTest.java\n\npublic void testLeapYearCount1904() {\nassertEquals(SerialDate.leapYearCount(1904), 1);\n}\n\n/**\n* The number of leap years from 1900 up-to-and-including 1999 is 24.\n*/\npublic void testLeapYearCount1999() {\nassertEquals(SerialDate.leapYearCount(1999), 24);\n}\n\n/**\n* The number of leap years from 1900 up-to-and-including 2000 is 25.\n*/\npublic void testLeapYearCount2000() {\nassertEquals(SerialDate.leapYearCount(2000), 25);\n}\n\n/**\n* Serialize an instance, restore it, and check for equality.\n*/\npublic void testSerialization() {\nSerialDate d1 = SerialDate.createInstance(15, 4, 2000);\nSerialDate d2 = null;\n\ntry {\nByteArrayOutputStream buffer = new ByteArrayOutputStream();\nObjectOutput out = new ObjectOutputStream(buffer);\nout.writeObject(d1);\nout.close();\n\nObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\nd2 = (SerialDate) in.readObject();\nin.close();\n} catch (Exception e) {\nSystem.out.println(e.toString());\n}\nassertEquals(d1, d2);\n}\n\n/**\n* A test for bug report 1096282 (now fixed).\n*/\npublic void test1096282() {\nSerialDate d = SerialDate.createInstance(29, 2, 2004);\nd = SerialDate.addYears(1, d);\nSerialDate expected = SerialDate.createInstance(28, 2, 2005);\nassertTrue(d.isOn(expected));\n}\n\n/**\n* Miscellaneous tests for the addMonths() method.\n*/\npublic void testAddMonths() {\nSerialDate d1 = SerialDate.createInstance(31, 5, 2004);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e0c3610-9272-414a-92f9-40ac54401108": {"__data__": {"id_": "8e0c3610-9272-414a-92f9-40ac54401108", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9da828f5-1665-431c-a0d7-1782ddb1fc7b", "node_type": "4", "metadata": {}, "hash": "28094fe20e2c95ae346469df2e63852dc42199a4158aa578e2b08b502452822f", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-2 (continued)\n\nSerialDateTest.java\n307            SerialDate d2 = SerialDate.addMonths(1, d1);\n308            assertEquals(30, d2.getDayOfMonth());\n309            assertEquals(6, d2.getMonth());\n310            assertEquals(2004, d2.getYYYY());\n311\n312            SerialDate d3 = SerialDate.addMonths(2, d1);\n313            assertEquals(31, d3.getDayOfMonth());\n314            assertEquals(7, d3.getMonth());\n315            assertEquals(2004, d3.getYYYY());\n316\n317            SerialDate d4 = SerialDate.addMonths(1, SerialDate.addMonths(1,  d1));\n318            assertEquals(30, d4.getDayOfMonth());\n319            assertEquals(7, d4.getMonth());\n320            assertEquals(2004, d4.getYYYY());\n321        }\n322 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 767, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7de07210-fea1-47a7-bd9f-311e3ae64b2c": {"__data__": {"id_": "7de07210-fea1-47a7-bd9f-311e3ae64b2c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e2a7417-63cb-40f1-b611-b581652815ca", "node_type": "4", "metadata": {}, "hash": "292ff450bc775006900ba160f19fc07b1c2517429603eb553f6cbdbd68ff4562", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-3\n\n# MonthConstants.java\n\n/* ========================================================================\n* JCommon : a free general purpose class library for the Java(tm) platform\n* ========================================================================\n*\n* (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n*\n* Project Info:                   http://www.jfree.org/jcommon/index.html\n*\n* This library is free software; you can redistribute it and/or modify it\n* under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation; either version 2.1 of the License, or\n* (at your option) any later version.\n*\n* This library is distributed in the hope that it warranty will be useful, but\n* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n* License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Software\n* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n* USA.\n*\n* [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n* in the United States and other countries.]\n*\n* -------------------\n* MonthConstants.java\n* -------------------\n* (C) Copyright 2002, 2003, by Object Refinery Limited.\n*\n* Original Author:                       David Gilbert (for Object Refinery Limited);\n* Contributor(s):                        -;\n*\n* $Id: MonthConstants.java,v 1.4 2005/11/16 15:58:40 taqua Exp $\n*\n* Changes\n* -------\n* 29-May-2002 : Version 1 (code moved from SerialDate class) (DG);\n*\n*/\n\npackage org.jfree.date;\n\n/**\n* Useful constants for months. Note that these constants are NOT equivalent to the\n* constants defined by java.util.Calendar (where JANUARY=0 and DECEMBER=11).\n*\n* Used by the SerialDate and RegularTimePeriod classes.\n*\n* @author David Gilbert\n*/\npublic interface MonthConstants {\n\n/** Constant for January. */\npublic static final int JANUARY = 1;\n\n/** Constant for February. */\npublic static final int FEBRUARY = 2;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2173, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fe37b74-d1d3-4ec1-963b-3c7eae616c63": {"__data__": {"id_": "2fe37b74-d1d3-4ec1-963b-3c7eae616c63", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0a6df6a2-6024-4d80-af2f-00cd0be109f6", "node_type": "4", "metadata": {}, "hash": "c1bec8037d718b23369c24173f12f78540dfe7517961116bf46c38edd4629c88", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-3 (continued)\n\nMonthConstants.java\n61       /** Constant for March. */\n62       public static final int MARCH = 3;\n63\n64       /** Constant for April. */\n65       public static final int APRIL = 4;\n66\n67       /** Constant for May. */\n68       public static final int MAY = 5;\n69\n70       /** Constant for June. */\n71       public static final int JUNE = 6;\n72\n73       /** Constant for July. */\n74       public static final int JULY = 7;\n75\n76       /** Constant for August. */\n77       public static final int AUGUST = 8;\n78\n79       /** Constant for September. */\n80       public static final int SEPTEMBER = 9;\n81\n82       /** Constant for October. */\n83       public static final int OCTOBER = 10;\n84\n85       /** Constant for November. */\n86       public static final int NOVEMBER = 11;\n87\n88       /** Constant for December. */\n89       public static final int DECEMBER = 12;\n90\n91 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 943, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03372624-8c8b-4290-be17-ef32421398df": {"__data__": {"id_": "03372624-8c8b-4290-be17-ef32421398df", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "44a27c52-2ac4-41c8-aa14-d2bc6eeaecb4", "node_type": "4", "metadata": {}, "hash": "b01cb1bb079b1abbac7fa77316663e1e0de03dd475b24a1b866f94f26148221c", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-4\n\n# BobsSerialDateTest.java\n\n1 package org.jfree.date.junit;\n2\n3 import junit.framework.TestCase;\n4 import org.jfree.date.*;\n5 import static org.jfree.date.SerialDate.*;\n6\n7 import java.util.*;\n8\n9 public class BobsSerialDateTest extends TestCase {\n10\n11     public void testIsValidWeekdayCode() throws Exception {\n12       for (int day = 1; day <= 7; day++)\n13          assertTrue(isValidWeekdayCode(day));\n14       assertFalse(isValidWeekdayCode(0));\n15       assertFalse(isValidWeekdayCode(8));\n16     }\n17\n18     public void testStringToWeekdayCode() throws Exception {\n19\n20       assertEquals(-1, stringToWeekdayCode(\"Hello\"));\n21       assertEquals(MONDAY, stringToWeekdayCode(\"Monday\"));\n22       assertEquals(MONDAY, stringToWeekdayCode(\"Mon\"));\n23 //todo assertEquals(MONDAY,stringToWeekdayCode(\"MONDAY\"));\n24 //            assertEquals(MONDAY,stringToWeekdayCode(\"monday\"));\n25 //       assertEquals(MONDAY, stringToWeekdayCode(\"mon\"));\n26\n27       assertEquals(TUESDAY, stringToWeekdayCode(\"Tuesday\"));\n28       assertEquals(TUESDAY, stringToWeekdayCode(\"Tue\"));\n29 //       assertEquals(TUESDAY,stringToWeekdayCode(\"tuesday\"));\n30 //       assertEquals(TUESDAY,stringToWeekdayCode(\"TUESDAY\"));\n31 //       assertEquals(TUESDAY, stringToWeekdayCode(\"tue\"));\n32 //       assertEquals(TUESDAY, stringToWeekdayCode(\"tues\"));\n33\n34       assertEquals(WEDNESDAY, stringToWeekdayCode(\"Wednesday\"));\n35       assertEquals(WEDNESDAY, stringToWeekdayCode(\"Wed\"));\n36 //       assertEquals(WEDNESDAY,stringToWeekdayCode(\"wednesday\"));\n37 //       assertEquals(WEDNESDAY,stringToWeekdayCode(\"WEDNESDAY\"));\n38 //       assertEquals(WEDNESDAY, stringToWeekdayCode(\"wed\"));\n39\n40       assertEquals(THURSDAY, stringToWeekdayCode(\"Thursday\"));\n41       assertEquals(THURSDAY, stringToWeekdayCode(\"Thu\"));\n42 //       assertEquals(THURSDAY,stringToWeekdayCode(\"thursday\"));\n43 //       assertEquals(THURSDAY,stringToWeekdayCode(\"THURSDAY\"));\n44 //       assertEquals(THURSDAY, stringToWeekdayCode(\"thu\"));\n45 //       assertEquals(THURSDAY, stringToWeekdayCode(\"thurs\"));\n46\n47       assertEquals(FRIDAY, stringToWeekdayCode(\"Friday\"));\n48       assertEquals(FRIDAY, stringToWeekdayCode(\"Fri\"));\n49 //       assertEquals(FRIDAY,stringToWeekdayCode(\"friday\"));\n50 //       assertEquals(FRIDAY,stringToWeekdayCode(\"FRIDAY\"));\n51 //       assertEquals(FRIDAY, stringToWeekdayCode(\"fri\"));\n52\n53       assertEquals(SATURDAY, stringToWeekdayCode(\"Saturday\"));\n54       assertEquals(SATURDAY, stringToWeekdayCode(\"Sat\"));\n55 //       assertEquals(SATURDAY,stringToWeekdayCode(\"saturday\"));\n56 //       assertEquals(SATURDAY,stringToWeekdayCode(\"SATURDAY\"));\n57 //       assertEquals(SATURDAY, stringToWeekdayCode(\"sat\"));\n58\n59       assertEquals(SUNDAY, stringToWeekdayCode(\"Sunday\"));\n60       assertEquals(SUNDAY, stringToWeekdayCode(\"Sun\"));\n61 //       assertEquals(SUNDAY,stringToWeekdayCode(\"sunday\"));\n62 //       assertEquals(SUNDAY,stringToWeekdayCode(\"SUNDAY\"));\n63 //}\n64          assertEquals(SUNDAY, stringToWeekdayCode(\"sun\"));", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3086, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "31280672-c8b7-4ddd-a2dd-10a382a37cb9": {"__data__": {"id_": "31280672-c8b7-4ddd-a2dd-10a382a37cb9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d7aa0775-cc23-403c-b23f-84fa2a37dbf1", "node_type": "4", "metadata": {}, "hash": "52822f4b05066249f71a68a3a5cd53c847ea394c72bdfb9ec69a9b7994c9fcb3", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-4 (continued)\n\n# BobsSerialDateTest.java\n\npublic void testWeekdayCodeToString() throws Exception {\nassertEquals(\"Sunday\", weekdayCodeToString(SUNDAY));\nassertEquals(\"Monday\", weekdayCodeToString(MONDAY));\nassertEquals(\"Tuesday\", weekdayCodeToString(TUESDAY));\nassertEquals(\"Wednesday\", weekdayCodeToString(WEDNESDAY));\nassertEquals(\"Thursday\", weekdayCodeToString(THURSDAY));\nassertEquals(\"Friday\", weekdayCodeToString(FRIDAY));\nassertEquals(\"Saturday\", weekdayCodeToString(SATURDAY));\n}\n\npublic void testIsValidMonthCode() throws Exception {\nfor (int i = 1; i <= 12; i++)\nassertTrue(isValidMonthCode(i));\nassertFalse(isValidMonthCode(0));\nassertFalse(isValidMonthCode(13));\n}\n\npublic void testMonthToQuarter() throws Exception {\nassertEquals(1, monthCodeToQuarter(JANUARY));\nassertEquals(1, monthCodeToQuarter(FEBRUARY));\nassertEquals(1, monthCodeToQuarter(MARCH));\nassertEquals(2, monthCodeToQuarter(APRIL));\nassertEquals(2, monthCodeToQuarter(MAY));\nassertEquals(2, monthCodeToQuarter(JUNE));\nassertEquals(3, monthCodeToQuarter(JULY));\nassertEquals(3, monthCodeToQuarter(AUGUST));\nassertEquals(3, monthCodeToQuarter(SEPTEMBER));\nassertEquals(4, monthCodeToQuarter(OCTOBER));\nassertEquals(4, monthCodeToQuarter(NOVEMBER));\nassertEquals(4, monthCodeToQuarter(DECEMBER));\n\ntry {\nmonthCodeToQuarter(-1);\nfail(\"Invalid Month Code should throw exception\");\n} catch (IllegalArgumentException e) {\n}\n}\n\npublic void testMonthCodeToString() throws Exception {\nassertEquals(\"January\", monthCodeToString(JANUARY));\nassertEquals(\"February\", monthCodeToString(FEBRUARY));\nassertEquals(\"March\", monthCodeToString(MARCH));\nassertEquals(\"April\", monthCodeToString(APRIL));\nassertEquals(\"May\", monthCodeToString(MAY));\nassertEquals(\"June\", monthCodeToString(JUNE));\nassertEquals(\"July\", monthCodeToString(JULY));\nassertEquals(\"August\", monthCodeToString(AUGUST));\nassertEquals(\"September\", monthCodeToString(SEPTEMBER));\nassertEquals(\"October\", monthCodeToString(OCTOBER));\nassertEquals(\"November\", monthCodeToString(NOVEMBER));\nassertEquals(\"December\", monthCodeToString(DECEMBER));\n\nassertEquals(\"Jan\", monthCodeToString(JANUARY, true));\nassertEquals(\"Feb\", monthCodeToString(FEBRUARY, true));\nassertEquals(\"Mar\", monthCodeToString(MARCH, true));\nassertEquals(\"Apr\", monthCodeToString(APRIL, true));\nassertEquals(\"May\", monthCodeToString(MAY, true));\nassertEquals(\"Jun\", monthCodeToString(JUNE, true));\nassertEquals(\"Jul\", monthCodeToString(JULY, true));\nassertEquals(\"Aug\", monthCodeToString(AUGUST, true));\nassertEquals(\"Sep\", monthCodeToString(SEPTEMBER, true));\nassertEquals(\"Oct\", monthCodeToString(OCTOBER, true));\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2662, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d16ee9f8-a6ad-430e-b6b2-528d0e78c03e": {"__data__": {"id_": "d16ee9f8-a6ad-430e-b6b2-528d0e78c03e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc6ae143-7fda-4193-b52a-2e232d82c7ce", "node_type": "4", "metadata": {}, "hash": "3ac04608d190da200f776aee9d6e1188be2a91759ce15cdb8b0648a42446d083", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-4 (continued)\n\n# BobsSerialDateTest.java\n\nassertEquals(\"Nov\", monthCodeToString(NOVEMBER, true));\nassertEquals(\"Dec\", monthCodeToString(DECEMBER, true));\n\ntry {\nmonthCodeToString(-1);\nfail(\"Invalid month code should throw exception\");\n} catch (IllegalArgumentException e) {\n}\n\n}\n\npublic void testStringToMonthCode() throws Exception {\nassertEquals(JANUARY, stringToMonthCode(\"1\"));\nassertEquals(FEBRUARY, stringToMonthCode(\"2\"));\nassertEquals(MARCH, stringToMonthCode(\"3\"));\nassertEquals(APRIL, stringToMonthCode(\"4\"));\nassertEquals(MAY, stringToMonthCode(\"5\"));\nassertEquals(JUNE, stringToMonthCode(\"6\"));\nassertEquals(JULY, stringToMonthCode(\"7\"));\nassertEquals(AUGUST, stringToMonthCode(\"8\"));\nassertEquals(SEPTEMBER, stringToMonthCode(\"9\"));\nassertEquals(OCTOBER, stringToMonthCode(\"10\"));\nassertEquals(NOVEMBER, stringToMonthCode(\"11\"));\nassertEquals(DECEMBER, stringToMonthCode(\"12\"));\n\n//todo assertEquals(-1, stringToMonthCode(\"13\"));\n//             assertEquals(-1, stringToMonthCode(\"0\"));\n\nassertEquals(-1, stringToMonthCode(\"Hello\"));\n\nfor (int m = 1; m <= 12; m++) {\nassertEquals(m, stringToMonthCode(monthCodeToString(m, false)));\nassertEquals(m, stringToMonthCode(monthCodeToString(m, true)));\n}\n\n//        assertEquals(1,stringToMonthCode(\"jan\"));\n//        assertEquals(2,stringToMonthCode(\"feb\"));\n//        assertEquals(3,stringToMonthCode(\"mar\"));\n//        assertEquals(4,stringToMonthCode(\"apr\"));\n//        assertEquals(5,stringToMonthCode(\"may\"));\n//        assertEquals(6,stringToMonthCode(\"jun\"));\n//        assertEquals(7,stringToMonthCode(\"jul\"));\n//        assertEquals(8,stringToMonthCode(\"aug\"));\n//        assertEquals(9,stringToMonthCode(\"sep\"));\n//        assertEquals(10,stringToMonthCode(\"oct\"));\n//        assertEquals(11,stringToMonthCode(\"nov\"));\n//        assertEquals(12,stringToMonthCode(\"dec\"));\n\n//        assertEquals(1,stringToMonthCode(\"JAN\"));\n//        assertEquals(2,stringToMonthCode(\"FEB\"));\n//        assertEquals(3,stringToMonthCode(\"MAR\"));\n//        assertEquals(4,stringToMonthCode(\"APR\"));\n//        assertEquals(5,stringToMonthCode(\"MAY\"));\n//        assertEquals(6,stringToMonthCode(\"JUN\"));\n//        assertEquals(7,stringToMonthCode(\"JUL\"));\n//        assertEquals(8,stringToMonthCode(\"AUG\"));\n//        assertEquals(9,stringToMonthCode(\"SEP\"));\n//        assertEquals(10,stringToMonthCode(\"OCT\"));\n//        assertEquals(11,stringToMonthCode(\"NOV\"));\n//        assertEquals(12,stringToMonthCode(\"DEC\"));\n\n//        assertEquals(1,stringToMonthCode(\"january\"));\n//        assertEquals(2,stringToMonthCode(\"february\"));", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2633, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9fc7b9d8-f3c7-4117-a3e2-c251dbbfaa88": {"__data__": {"id_": "9fc7b9d8-f3c7-4117-a3e2-c251dbbfaa88", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7fdf2bc9-1cd7-434d-9496-3ffa3e1bfd2b", "node_type": "4", "metadata": {}, "hash": "b75cab4009e589f506d245bbd101c389796e3c767b17e983c744a130859249b0", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-4 (continued)\n\n# BobsSerialDateTest.java\n\n//        assertEquals(3,stringToMonthCode(\"march\"));\n//        assertEquals(4,stringToMonthCode(\"april\"));\n//        assertEquals(5,stringToMonthCode(\"may\"));\n//        assertEquals(6,stringToMonthCode(\"june\"));\n//        assertEquals(7,stringToMonthCode(\"july\"));\n//        assertEquals(8,stringToMonthCode(\"august\"));\n//        assertEquals(9,stringToMonthCode(\"september\"));\n//        assertEquals(10,stringToMonthCode(\"october\"));\n//        assertEquals(11,stringToMonthCode(\"november\"));\n//        assertEquals(12,stringToMonthCode(\"december\"));\n\n//        assertEquals(1,stringToMonthCode(\"JANUARY\"));\n//        assertEquals(2,stringToMonthCode(\"FEBRUARY\"));\n//        assertEquals(3,stringToMonthCode(\"MAR\"));\n//        assertEquals(4,stringToMonthCode(\"APRIL\"));\n//        assertEquals(5,stringToMonthCode(\"MAY\"));\n//        assertEquals(6,stringToMonthCode(\"JUNE\"));\n//        assertEquals(7,stringToMonthCode(\"JULY\"));\n//        assertEquals(8,stringToMonthCode(\"AUGUST\"));\n//        assertEquals(9,stringToMonthCode(\"SEPTEMBER\"));\n//        assertEquals(10,stringToMonthCode(\"OCTOBER\"));\n//        assertEquals(11,stringToMonthCode(\"NOVEMBER\"));\n//}\nassertEquals(12,stringToMonthCode(\"DECEMBER\"));\n\npublic void testIsValidWeekInMonthCode() throws Exception {\nfor (int w = 0; w <= 4; w++) {\nassertTrue(isValidWeekInMonthCode(w));\n}\nassertFalse(isValidWeekInMonthCode(5));\n}\n\npublic void testIsLeapYear() throws Exception {\nassertFalse(isLeapYear(1900));\nassertFalse(isLeapYear(1901));\nassertFalse(isLeapYear(1902));\nassertFalse(isLeapYear(1903));\nassertTrue(isLeapYear(1904));\nassertTrue(isLeapYear(1908));\nassertFalse(isLeapYear(1955));\nassertTrue(isLeapYear(1964));\nassertTrue(isLeapYear(1980));\nassertTrue(isLeapYear(2000));\nassertFalse(isLeapYear(2001));\nassertFalse(isLeapYear(2100));\n}\n\npublic void testLeapYearCount() throws Exception {\nassertEquals(0, leapYearCount(1900));\nassertEquals(0, leapYearCount(1901));\nassertEquals(0, leapYearCount(1902));\nassertEquals(0, leapYearCount(1903));\nassertEquals(1, leapYearCount(1904));\nassertEquals(1, leapYearCount(1905));\nassertEquals(1, leapYearCount(1906));\nassertEquals(1, leapYearCount(1907));\nassertEquals(2, leapYearCount(1908));\nassertEquals(24, leapYearCount(1999));\nassertEquals(25, leapYearCount(2001));\nassertEquals(49, leapYearCount(2101));\nassertEquals(73, leapYearCount(2201));", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2447, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc536e84-76e3-483d-af87-fa229d491215": {"__data__": {"id_": "cc536e84-76e3-483d-af87-fa229d491215", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ce7143-4d96-4984-a213-860513e7800c", "node_type": "4", "metadata": {}, "hash": "29bd9f5b940dedfda7ed36dc15595fc514c39dfc6430503596553cf823483fdc", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-4 (continued)\n\n# BobsSerialDateTest.java\n\nassertEquals(97, leapYearCount(2301));\nassertEquals(122, leapYearCount(2401));\n\npublic void testLastDayOfMonth() throws Exception {\nassertEquals(31, lastDayOfMonth(JANUARY, 1901));\nassertEquals(28, lastDayOfMonth(FEBRUARY, 1901));\nassertEquals(31, lastDayOfMonth(MARCH, 1901));\nassertEquals(30, lastDayOfMonth(APRIL, 1901));\nassertEquals(31, lastDayOfMonth(MAY, 1901));\nassertEquals(30, lastDayOfMonth(JUNE, 1901));\nassertEquals(31, lastDayOfMonth(JULY, 1901));\nassertEquals(31, lastDayOfMonth(AUGUST, 1901));\nassertEquals(30, lastDayOfMonth(SEPTEMBER, 1901));\nassertEquals(31, lastDayOfMonth(OCTOBER, 1901));\nassertEquals(30, lastDayOfMonth(NOVEMBER, 1901));\nassertEquals(31, lastDayOfMonth(DECEMBER, 1901));\nassertEquals(29, lastDayOfMonth(FEBRUARY, 1904));\n}\n\npublic void testAddDays() throws Exception {\nSerialDate newYears = d(1, JANUARY, 1900);\nassertEquals(d(2, JANUARY, 1900), addDays(1, newYears));\nassertEquals(d(1, FEBRUARY, 1900), addDays(31, newYears));\nassertEquals(d(1, JANUARY, 1901), addDays(365, newYears));\nassertEquals(d(31, DECEMBER, 1904), addDays(5, 365, newYears));\n}\n\nprivate static SpreadsheetDate d(int day, int month, int year) {\nreturn new SpreadsheetDate(day, month, year);\n}\n\npublic void testAddMonths() throws Exception {\nassertEquals(d(1, FEBRUARY, 1900), addMonths(1, d(1, JANUARY, 1900)));\nassertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(31, JANUARY, 1900)));\nassertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(30, JANUARY, 1900)));\nassertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(29, JANUARY, 1900)));\nassertEquals(d(27, FEBRUARY, 1900), addMonths(1, d(28, JANUARY, 1900)));\nassertEquals(d(30, JUNE, 1900), addMonths(5, d(31, JANUARY, 1900)));\nassertEquals(d(30, JUNE, 1901), addMonths(17, d(31, JANUARY, 1900)));\nassertEquals(d(29, FEBRUARY, 1904), addMonths(49, d(31, JANUARY, 1900)));\n}\n\npublic void testAddYears() throws Exception {\nassertEquals(d(1, JANUARY, 1901), addYears(1, d(1, JANUARY, 1900)));\nassertEquals(d(28, FEBRUARY, 1905), addYears(1, d(29, FEBRUARY, 1904)));\nassertEquals(d(28, FEBRUARY, 1905), addYears(1, d(28, FEBRUARY, 1904)));\nassertEquals(d(28, FEBRUARY, 1904), addYears(1, d(28, FEBRUARY, 1903)));\n}\n\npublic void testGetPreviousDayOfWeek() throws Exception {\nassertEquals(d(24, FEBRUARY, 2006), getPreviousDayOfWeek(FRIDAY, d(1, MARCH, 2006)));\nassertEquals(d(22, FEBRUARY, 2006), getPreviousDayOfWeek(WEDNESDAY, d(1, MARCH, 2006)));\nassertEquals(d(29, FEBRUARY, 2004), getPreviousDayOfWeek(SUNDAY, d(3, MARCH, 2004)));\nassertEquals(d(29, DECEMBER, 2004), getPreviousDayOfWeek(WEDNESDAY, d(5, JANUARY, 2005)));\n\ntry {\ngetPreviousDayOfWeek(-1, d(1, JANUARY, 2006));\nfail(\"Invalid day of week code should throw exception\");\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2789, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d66ef5dc-85d9-4f55-8996-646e87d402e4": {"__data__": {"id_": "d66ef5dc-85d9-4f55-8996-646e87d402e4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b7d373a2-c27a-411e-bbb1-0eaabcc1a9f7", "node_type": "4", "metadata": {}, "hash": "997dfafd66c45c2ffd9acaa5944057d3839a35627567394466d9c8b637fa054c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8bd8ecc2-09af-427d-a5a3-18d234a77c38", "node_type": "1", "metadata": {}, "hash": "e76307b5565cfad0fdd43048f6ab81f6cee92fff6e6d355d75a6a8980becec8d", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-4 (continued)\n\n# BobsSerialDateTest.java\n\n313                       } catch (IllegalArgumentException e) {\n314                       }\n315                 }\n316\n317 // public\n318                             assertEquals(d(1, JANUARY, 2005), getFollowingDayOfWeek(SATURDAY, d(25, DECEMBER, 2004)));\n319                       assertEquals(d(1, JANUARY, 2005), getFollowingDayOfWeek(SATURDAY, d(26, FEBRUARY, 2004)));\n320                       assertEquals(d(3, MARCH, 2004), getFollowingDayOfWeek(WEDNESDAY, d(28, FEBRUARY, 2004)));\n321\n322                       try {\n323                             getFollowingDayOfWeek(-1, d(1, JANUARY, 2006));\n324                             fail(\"Invalid day of week code should throw exception\");\n325                       } catch (IllegalArgumentException e) {\n326                       }\n327                 }\n328\n329                 public                void testGetNearestDayOfWeek() throws Exception {\n330                       assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(16, APRIL, 2006)));\n331                       assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(17, APRIL, 2006)));\n332                       assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(18, APRIL, 2006)));\n333                       assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(19, APRIL, 2006)));\n334                       assertEquals(d(23, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(20, APRIL, 2006)));\n335                       assertEquals(d(23, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(21, APRIL, 2006)));\n336                       assertEquals(d(23, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(22, APRIL, 2006)));\n337\n338 //todo                                   assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(16, APRIL, 2006)));\n339                       assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(17, APRIL, 2006)));\n340                       assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(18, APRIL, 2006)));\n341                       assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(19, APRIL, 2006)));\n342                       assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(20, APRIL, 2006)));\n343                       assertEquals(d(24, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(21, APRIL, 2006)));\n344                       assertEquals(d(24, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(22, APRIL, 2006)));\n345\n346 //                          assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(16, APRIL, 2006)));\n347 //                          assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(17, APRIL, 2006)));\n348                       assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(18, APRIL, 2006)));\n349                       assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(19, APRIL, 2006)));\n350                       assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(20, APRIL, 2006)));\n351                       assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(21, APRIL, 2006)));\n352                       assertEquals(d(25, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(22, APRIL, 2006)));\n353\n354 //                          assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(16, APRIL, 2006)));", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8bd8ecc2-09af-427d-a5a3-18d234a77c38": {"__data__": {"id_": "8bd8ecc2-09af-427d-a5a3-18d234a77c38", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b7d373a2-c27a-411e-bbb1-0eaabcc1a9f7", "node_type": "4", "metadata": {}, "hash": "997dfafd66c45c2ffd9acaa5944057d3839a35627567394466d9c8b637fa054c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d66ef5dc-85d9-4f55-8996-646e87d402e4", "node_type": "1", "metadata": {}, "hash": "2dfb452b656a77c0cd91ca3219e613216a843b8af793665b49872f916f9687e1", "class_name": "RelatedNodeInfo"}}, "text": "getNearestDayOfWeek(TUESDAY, d(18, APRIL, 2006)));\n349                       assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(19, APRIL, 2006)));\n350                       assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(20, APRIL, 2006)));\n351                       assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(21, APRIL, 2006)));\n352                       assertEquals(d(25, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(22, APRIL, 2006)));\n353\n354 //                          assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(16, APRIL, 2006)));\n355 //                          assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(17, APRIL, 2006)));\n356 //                          assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(18, APRIL, 2006)));\n357                       assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(19, APRIL, 2006)));\n358                       assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(20, APRIL, 2006)));\n359                       assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(21, APRIL, 2006)));\n360                       assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(22, APRIL, 2006)));\n361\n362 //                          assertEquals(d(13, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(16, APRIL, 2006)));\n363 //                          assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(17, APRIL, 2006)));\n364 //                          assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(18, APRIL, 2006)));\n365 //                          assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(19, APRIL, 2006)));\n366                       assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(20, APRIL, 2006)));\n367                       assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(21, APRIL, 2006)));\n368                       assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(22, APRIL, 2006)));\n369\n370 //                          assertEquals(d(14, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(16, APRIL, 2006)));\n371 //                          assertEquals(d(14, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(17, APRIL, 2006)));\n372 //                          assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(18, APRIL, 2006)));\n373 //                          assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(19, APRIL, 2006)));\n374 //                          assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(20, APRIL, 2006)));", "mimetype": "text/plain", "start_char_idx": 2844, "end_char_idx": 5524, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bd16e6b-5770-439b-9e65-94c2aa08a407": {"__data__": {"id_": "1bd16e6b-5770-439b-9e65-94c2aa08a407", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fccae089-e1ca-448d-af71-404966474ca8", "node_type": "4", "metadata": {}, "hash": "2e0cc09fbdda4882765c680b177d9cc85be856bf9853b1170bff3e49aec6c5dc", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-4 (continued)\n\n# BobsSerialDateTest.java\n\nassertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(21, APRIL, 2006)));\nassertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(22, APRIL, 2006)));\n\n// assertEquals(d(15, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(16, APRIL, 2006)));\n// assertEquals(d(15, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(17, APRIL, 2006)));\n// assertEquals(d(15, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(18, APRIL, 2006)));\n// assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(19, APRIL, 2006)));\n// assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(20, APRIL, 2006)));\n// assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(21, APRIL, 2006)));\nassertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(22, APRIL, 2006)));\n\ntry {\ngetNearestDayOfWeek(-1, d(1, JANUARY, 2006));\nfail(\"Invalid day of week code should throw exception\");\n} catch (IllegalArgumentException e) {\n}\n\npublic void testEndOfCurrentMonth() throws Exception {\nSerialDate d = SerialDate.createInstance(2);\nassertEquals(d(31, JANUARY, 2006), d.getEndOfCurrentMonth(d(1, JANUARY, 2006)));\nassertEquals(d(28, FEBRUARY, 2006), d.getEndOfCurrentMonth(d(1, FEBRUARY, 2006)));\nassertEquals(d(31, MARCH, 2006), d.getEndOfCurrentMonth(d(1, MARCH, 2006)));\nassertEquals(d(30, APRIL, 2006), d.getEndOfCurrentMonth(d(1, APRIL, 2006)));\nassertEquals(d(31, MAY, 2006), d.getEndOfCurrentMonth(d(1, MAY, 2006)));\nassertEquals(d(30, JUNE, 2006), d.getEndOfCurrentMonth(d(1, JUNE, 2006)));\nassertEquals(d(31, JULY, 2006), d.getEndOfCurrentMonth(d(1, JULY, 2006)));\nassertEquals(d(31, AUGUST, 2006), d.getEndOfCurrentMonth(d(1, AUGUST, 2006)));\nassertEquals(d(30, SEPTEMBER, 2006), d.getEndOfCurrentMonth(d(1, SEPTEMBER, 2006)));\nassertEquals(d(31, OCTOBER, 2006), d.getEndOfCurrentMonth(d(1, OCTOBER, 2006)));\nassertEquals(d(30, NOVEMBER, 2006), d.getEndOfCurrentMonth(d(1, NOVEMBER, 2006)));\nassertEquals(d(31, DECEMBER, 2006), d.getEndOfCurrentMonth(d(1, DECEMBER, 2006)));\nassertEquals(d(29, FEBRUARY, 2008), d.getEndOfCurrentMonth(d(1, DECEMBER, 2006)));\n}\n\npublic void testWeekInMonthToString() throws Exception {\nassertEquals(\"First\", weekInMonthToString(FIRST_WEEK_IN_MONTH));\nassertEquals(\"Second\", weekInMonthToString(SECOND_WEEK_IN_MONTH));\nassertEquals(\"Third\", weekInMonthToString(THIRD_WEEK_IN_MONTH));\nassertEquals(\"Fourth\", weekInMonthToString(FOURTH_WEEK_IN_MONTH));\nassertEquals(\"Last\", weekInMonthToString(LAST_WEEK_IN_MONTH));\n\n// try {\n//     weekInMonthToString(-1);\n//     fail(\"Invalid week code should throw exception\");\n// } catch (IllegalArgumentException e) {\n// }\n}\n\npublic void testRelativeToString() throws Exception {\nassertEquals(\"Preceding\", relativeToString(PRECEDING));\nassertEquals(\"Nearest\", relativeToString(NEAREST));\nassertEquals(\"Following\", relativeToString(FOLLOWING));\n\n// try {\n//     relativeToString(-1000);\n//     fail(\"Invalid relative code should throw exception\");\n// } catch (IllegalArgumentException e) {\n// }\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3067, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7318a024-7904-4b84-884b-826075217736": {"__data__": {"id_": "7318a024-7904-4b84-884b-826075217736", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "608a0009-411e-4289-b7a7-296bcedc579b", "node_type": "4", "metadata": {}, "hash": "bace6eef1eea5f41db80efa0ff9a21132e7b41a868986599647833fb3296ab73", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-4 (continued)\n\n# BobsSerialDateTest.java\n\npublic void testCreateInstanceFromDDMMYYY() throws Exception {\nSerialDate date = createInstance(1, JANUARY, 1900);\nassertEquals(1,date.getDayOfMonth());\nassertEquals(JANUARY,date.getMonth());\nassertEquals(1900,date.getYYYY());\nassertEquals(2,date.toSerial());\n}\n\npublic void testCreateInstanceFromSerial() throws Exception {\nassertEquals(d(1, JANUARY, 1900),createInstance(2));\nassertEquals(d(1, JANUARY, 1901), createInstance(367));\n}\n\npublic void testCreateInstanceFromJavaDate() throws Exception {\nassertEquals(d(1, JANUARY, 1900),createInstance(new GregorianCalendar(1900,0,1).getTime()));\nassertEquals(d(1, JANUARY, 2006),createInstance(new GregorianCalendar(2006,0,1).getTime()));\n}\n\npublic static void main(String[] args) {\njunit.textui.TestRunner.run(BobsSerialDateTest.class);\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 882, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "89b51367-6414-4e5e-b37b-e5d93ae4786c": {"__data__": {"id_": "89b51367-6414-4e5e-b37b-e5d93ae4786c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b61cc75d-b5c5-43d6-b882-8f02eb4a250e", "node_type": "4", "metadata": {}, "hash": "e3893464a97f815bf5b01bee47636eff00d5123b5576321db3c2297103831296", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-5\n\n# SpreadsheetDate.java\n\n/* ========================================================================\n* JCommon : a free general purpose class library for the Java(tm) platform\n* ========================================================================\n*\n* (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n*\n* Project Info:                    http://www.jfree.org/jcommon/index.html\n*\n* This library is free software; you can redistribute it and/or modify it\n* under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation; either version 2.1 of the License, or\n* (at your option) any later version.\n*\n* This library is distributed in the hope that it warranty will be useful, but\n* WITHOUT ANY WARRANTY; without even the implied of MERCHANTABILITY\n* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n* License for more details.\n*\n* You should have received a copy of the GNU Lesser General FreePublic\n* License along with this library; if not, write to the Software\n* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n* USA.\n*\n* [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n* in the United States and other countries.]\n*\n* --------------------\n* SpreadsheetDate.java\n* --------------------\n* (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n*\n* Original Author:                       David Gilbert (for Object Refinery Limited);\n* Contributor(s):                        -;\n*\n* $Id: SpreadsheetDate.java,v 1.8 2005/11/03 09:25:39 mungady Exp $\n*\n* Changes\n* -------\n* 11-Oct-2001 : Version 1 (DG);\n* 05-Nov-2001 : Added getDescription() and setDescription() methods (DG);(DG);\n* 12-Nov-2001 : Changed name from ExcelDate.java to SpreadsheetDate.java\n*                                Fixed a bug in calculating day, month and year from serial\n*                                number (DG);\n* 24-Jan-2002 : Fixed a bug in calculating\n* 29-May-2002 : Added equals(Object) methodthe serial number the report day,from the\n*                                month and year.                    Thanks to            Trevor (SourceForgefor  Hills                            (DG);\n* 03-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n* 13-Mar-2003 : Implemented Serializable (DG);(DG);\n* 04-Sep-2003 : Completed isInRange() methods\n* 05-Sep-2003 : Implemented Comparable (DG);\n* 21-Oct-2003 : Added hashCode() method (DG);\n*\n*/\n\npackage org.jfree.date;\n\nimport java.util.Calendar;\nimport java.util.Date;\n\n/**\n* Represents a date using an integer, in a similar fashion to the\n* implementation in Microsoft Excel. The range of dates supported is", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2743, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1101a264-b0e6-4b59-9d96-404994729523": {"__data__": {"id_": "1101a264-b0e6-4b59-9d96-404994729523", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9fa108ae-f31a-4790-a32d-df70d2b88a73", "node_type": "4", "metadata": {}, "hash": "7ce5b11f27daa6a7b12f93641338dfb955ea085b6d9eb129de341772debfd2cb", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-5 (continued)\n\nSpreadsheetDate.java\n63        * 1-Jan-1900 to 31-Dec-9999.\n64        *\n65        * Be aware that there is a deliberate bug in Excel Q181370: You can that recognises the year\n66        * 1900 as a leap year when in fact it is not a leap year. find more\n67        * information on the Microsoft website in article\n68        *\n69        * http://support.microsoft.com/support/kb/articles/Q181/3/70.asp\n70        *\n71        * Excel uses the convention that 1-Jan-1900 = 1. This class uses the\n72        * convention 1-Jan-1900 = 2.\n73        * The result is that the day number in this class figure for January and February 1900...but will then be different in to an the\n74        * Excel Excel adds extra\n75        * day (29-Feb-1900 which does not actually exist!) and from that point forward\n76        * the day numbers will match.\n77        *\n78        * @author David Gilbert\n79        */\n80 public class SpreadsheetDate extends SerialDate {\n81\n82               /** For serialization. */\n83               private static final long serialVersionUID = -2039586705374454461L;\n84\n85               /**\n86                  * The day number (1-Jan-1900 = 2, 2-Jan-1900 = 3, ..., 31-Dec-9999 =\n87                  * 2958465).\n88                  */\n89               private int serial;\n90\n91               /** The day of the month (1 to 28, 29, 30 or 31 depending on the month). */\n92               private int day;\n93\n94               /** The month of the year (1 to 12). */\n95               private int month;\n96\n97               /** The year (1900 to 9999). */\n98               private int year;\n99\n100                 /** An optional description for the date. */\n101                 private String description;\n102\n103                 /**\n104                    * Creates a new date instance.\n105                    *\n106                    * @param day\n107                    * @param month the day (in the range 1 to 28/29/30/31).\n108                    * @param year the year (in the range 1900 to 9999).\n109                    */\n110                 public SpreadsheetDate(final int day, final int month, final int year) {\n111\n112                           if ((year >= 1900) && (year <= 9999)) {\n113                                      this.year = year;\n114                           }\n115                           else {\n116                                      throw new IllegalArgumentException(\n117                                                \"The 'year' argument must be in 1900 to 9999.\"\n118                                      );\n119                           }\n120\n121                           if ((month >= MonthConstants.JANUARY)\n122                                                && (month <= MonthConstants.DECEMBER)) {\n123                                      this.month = month;\n124                           }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2903, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa627225-e8d2-4827-9117-d6878ae11f23": {"__data__": {"id_": "aa627225-e8d2-4827-9117-d6878ae11f23", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aec55f65-4da7-4a42-b205-fa9481ac47d2", "node_type": "4", "metadata": {}, "hash": "10f7af62b51165c7b2f7f194b925fc865db730d5318edb8b1d807438b4a173b3", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-5 (continued)\n\nSpreadsheetDate.java\n125                  else {\n126                           throw new IllegalArgumentException(\n127                                   \"The 'month' argument must be                                in    the range            1   to    12.\"\n128                           );\n129                  }\n130\n131                  if ((day >= 1) && (day <= SerialDate.lastDayOfMonth(month,                                                               year))) {\n132                           this.day = day;\n133                  }\n134                  else {\n135                           throw new IllegalArgumentException(\"Invalid                                               'day'       argument.\");\n136                  }\n137\n138                  // the serial number needs to be synchronised                                                  with      the day-month-year...\n139                  this.serial = calcSerial(day, month, year);\n140\n141                  this.description = null;\n142\n143          }\n144\n145          /**\n146            * Standard constructor - creates a new\n* specified day number (which should bedate the object            representing              the\n147                                                                                             in              range 2 to 2958465.\n148            *\n149            * @param serial                    the serial number for                        the day          (range: 2           to 2958465).\n150            */\n151          public SpreadsheetDate(final int serial) {\n152\n153                  if ((serial >= SERIAL_LOWER_BOUND) &&                                         (serial          <=    SERIAL_UPPER_BOUND)) {\n154                           this.serial = serial;\n155                  }\n156                  else {\n157                           throw new IllegalArgumentException(\n158                                   \"SpreadsheetDate: Serial must                                be    in     range 2 to 2958465.\");\n159                  }\n160\n161                  // the day-month-year needs to be synchronised with the                                                            serial        number...\n162                  calcDayMonthYear();\n163\n164          }\n165\n166          /**\n167            * Returns the description that is attached to\n* required that a date have a description, but the date.               It is not\n168                                                                                                             for     some      applications              it\n169            * is useful.\n170            *\n171            * @return The description that is attached to                                                 the date.\n172            */\n173          public String getDescription() {\n174                  return this.description;\n175          }\n176\n177          /**\n178            * Sets the description for the date.\n179            *\n180            * @param description                          the description for                     this       date      (null\n181            *                                             permitted).\n182            */\n183          public void setDescription(final String                                           description)               {\n184                  this.description = description;\n185          }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3437, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "248029fe-e35e-4aa5-ad70-f4e024b86dd8": {"__data__": {"id_": "248029fe-e35e-4aa5-ad70-f4e024b86dd8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0a39d496-0972-4c20-99bd-44382fff6b9e", "node_type": "4", "metadata": {}, "hash": "8e033c5d88cc6c5fb544742132ee4ef260e7f1d56346768323f5ce4a248da3ae", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-5 (continued)\n\nSpreadsheetDate.java\n187        /**\n188         * Returns the serial number for the date,              where 1 January 1900 = 2\n189         * (this corresponds, almost, to the numbering               system used in      Microsoft\n190         * Excel for Windows and Lotus 1-2-3).\n191         *\n192         * @return The serial number of this date.\n193         */\n194        public int toSerial() {\n195             return this.serial;\n196        }\n197\n198        /**\n199         * Returns a java.util.Date equivalent                 to  this  date.\n200         *\n201         * @return The date.\n202         */\n203        public Date toDate() {\n204             final Calendar calendar = Calendar.getInstance();\n205             calendar.set(getYYYY(), getMonth() - 1, getDayOfMonth(), 0, 0,                    0);\n206             return calendar.getTime();\n207        }\n208\n209        /**\n210         * Returns the year (assume a valid range              of  1900  to  9999).\n211         *\n212         * @return The year.\n213         */\n214        public int getYYYY() {\n215             return this.year;\n216        }\n217\n218        /**\n219         * Returns the month (January = 1, February = 2, March                  = 3).\n220         *\n221         * @return The month of the year.\n222         */\n223        public int getMonth() {\n224             return this.month;\n225        }\n226\n227        /**\n228         * Returns the day of the month.\n229         *\n230         * @return The day of the month.\n231         */\n232        public int getDayOfMonth() {\n233             return this.day;\n234        }\n235\n236        /**\n237         * Returns a code representing the day of              the week.\n238         *\n239         * The codes are defined in the {@link SerialDate} class                  as:\n240         * SUNDAY, MONDAY,               TUESDAY,\n241         * WEDNESDAY, THURSDAY,                FRIDAY, and\n242         * SATURDAY.\n243         *\n244         * @return A code representing the day of              the week.\n245         */\n246        public int getDayOfWeek() {\n247             return (this.serial + 6) % 7 + 1;\n248        }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2213, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a998dff-e030-4f11-857e-3d73a8e27188": {"__data__": {"id_": "3a998dff-e030-4f11-857e-3d73a8e27188", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a86b5ab6-d887-4c8d-8ecf-aee648a2267f", "node_type": "4", "metadata": {}, "hash": "3291a78893d94668353cf193ae6dd1c32eb01f7655c42dd430f698680ffbc614", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-5 (continued)\n\n# SpreadsheetDate.java\n\n/**\n* Tests the equality of this date with an arbitrary object.\n*\n* This method will return true ONLY if {@link SerialDate} base class, and it\n* represents the same day instance of the {@link SpreadsheetDate}.\n*\n* @param object       the object to compare        (null permitted).\n*\n* @return A boolean.\n*/\npublic boolean equals(final Object object) {\nif (object instanceof SerialDate) {\nfinal SerialDate s = (SerialDate) object;\nreturn (s.toSerial() == this.toSerial());\n} else {\nreturn false;\n}\n}\n\n/**\n* Returns a hash code for this object instance.\n*\n* @return A hash code.\n*/\npublic int hashCode() {\nreturn toSerial();\n}\n\n/**\n* Returns the difference (in days) between this date and the specified\n* 'other' date.\n*\n* @param other       the date being compared to.\n*\n* @return The difference (in days) between this date and the specified\n*         'other' date.\n*/\npublic int compare(final SerialDate other) {\nreturn this.serial - other.toSerial();\n}\n\n/**\n* Implements the method required by the Comparable interface.\n*\n* @param other       the other object (usually another SerialDate).\n*\n* @return A negative integer, zero, or a positive integer as this object\n*         is less than, equal to, or greater than the specified object.\n*/\npublic int compareTo(final Object other) {\nreturn compare((SerialDate) other);\n}\n\n/**\n* Returns true if this SerialDate represents the same date as the\n* specified SerialDate.\n*/", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1511, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7bbfed40-3829-4d12-a554-037829ed8187": {"__data__": {"id_": "7bbfed40-3829-4d12-a554-037829ed8187", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "66b26d01-2de6-4625-a692-819df8ca743c", "node_type": "4", "metadata": {}, "hash": "d8080f94709d0757fd9a4a476ecab77f7be9e7ea4fbecf440086ac03e058358e", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-5 (continued)\n\n311               * @param other                   the date being compared to.\n312               *\n313               * @return true if this SerialDate                                                   represents the                same      date      as\n314               *                    the specified SerialDate.\n315               */\n316              public boolean isOn(final SerialDate other) {\n317                      return (this.serial == other.toSerial());\n318              }\n319\n320              /**\n321               * Returns true if this SerialDate represents an earlier                                                            date      compared to\n322               * the specified SerialDate.\n323               *\n324               * @param other                   the date being compared to.\n325               *\n326               * @return true if this SerialDate compared to the specified SerialDate.represents an                            earlier         date\n327               *\n328               */\n329              public boolean isBefore(final SerialDate other)                                                   {\n330                      return (this.serial < other.toSerial());\n331              }\n332\n333              /**\n334               * Returns true if this SerialDate represents the                                                     same      date      as    the\n335               * specified SerialDate.\n336               *\n337               * @param other                   the date being compared to.\n338               *\n339               * @return true if this SerialDate                                                   represents the                same      date\n340               *                    as the specified SerialDate.\n341               */\n342              public boolean isOnOrBefore(final SerialDate return (this.serial <= other.toSerial());other)              {\n343\n344              }\n345\n346              /**\n347               * Returns true if this SerialDate represents the                                                     same      date      as    the\n348               * specified SerialDate.\n349               *\n350               * @param other                   the date being compared to.\n351               *\n352               * @return true if this SerialDate                                                   represents the                same      date\n353               *                    as the specified SerialDate.\n354               */\n355              public boolean isAfter(final SerialDate                                           other)        {\n356                      return (this.serial > other.toSerial());\n357              }\n358\n359              /**\n360               * Returns true if this SerialDate represents the                                                     same      date      as    the\n361               * specified SerialDate.\n362               *\n363               * @param other                   the date being compared to.\n364               *\n365               * @return true if this SerialDate                                                   represents the                same      date      as\n366               *                    the specified SerialDate.\n367               */\n368              public boolean isOnOrAfter(final SerialDate other) {\n369                      return (this.serial >= other.toSerial());\n370              }\n371\n372              /**\n373               * Returns true if this {@link SerialDate} is within the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3616, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5db08d2a-b388-401b-a8a4-e8eaf5feb724": {"__data__": {"id_": "5db08d2a-b388-401b-a8a4-e8eaf5feb724", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1aad1afd-883b-4c7b-b917-109f19fa4f3e", "node_type": "4", "metadata": {}, "hash": "d3d0f315dad2c74684028518c5a3e0983024da3a6f88fcd6f917ee058364dee8", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-5 (continued)\n\n374            * specified range (INCLUSIVE).                                    The date           order       of d1 and            d2 is not\n375            * important.\n376            *\n377            * @param d1                a boundary date for the range.\n378            * @param d2                the other boundary date for                               the range.\n379            *\n380            * @return A boolean.\n381            */\n382           public boolean isInRange(final SerialDate                                             d1, final           SerialDate             d2)     {\n383                   return isInRange(d1, d2, SerialDate.INCLUDE_BOTH);\n384           }\n385\n386           /**\n387            * Returns true if this SerialDate is within                                                the specified range                      (callerd1\n388            * specifies whether or not the end-points                                              are     included).              The      order of\n389            * and d2 is not important.\n390            *\n391            * @param d1                one boundary date for the\na second boundary date forrange.\n392            * @param d2                                                                       the      range.not\n393            * @param include                     a code that controls\ndates are included inwhether           or            the start            and end\n394            *                                                                                 the      range.\n395            *\n396            * @return true if this SerialDate                                                   is within            the     specified\n397            *                    range.\n398            */\n399           public boolean isInRange(final SerialDate                                             d1, final           SerialDate             d2,\n400                                                              final int include) {\n401                   final int s1 = d1.toSerial();\n402                   final int s2 = d2.toSerial();\n403                   final int start = Math.min(s1, s2);\n404                   final int end = Math.max(s1, s2);\n405\n406                   final int s = toSerial();\n407                   if (include == SerialDate.INCLUDE_BOTH) {\n408                           return (s >= start && s <= end);\n409                   }\n410                   else if (include == SerialDate.INCLUDE_FIRST)                                                 {\n411                           return (s >= start && s < end);\n412                   }\n413                   else if (include == SerialDate.INCLUDE_SECOND) {\n414                           return (s > start && s <= end);\n415                   }\n416                   else {\n417                           return (s > start && s < end);\n418                   }\n419           }\n420\n421           /**\n422            * Calculate the serial number from the                                           day,      month and           year.\n423            *\n424            * 1-Jan-1900 = 2.\n425            *\n426            * @param d               the day.\n427            * @param m               the month.\n428            * @param y               the year.\n429            *\n430            * @return the serial number from the day,                                              month and           year.\n431            */\n432           private int calcSerial(final int d, final                                             int m, final              int y)         {\n433                   final int yy = ((y - 1900) * 365) +                                       SerialDate.leapYearCount(y                             - 1);\n434                   int mm = SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[m];\n435                   if (m > MonthConstants.FEBRUARY) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3966, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "707e880f-65b5-4062-ba15-4a2af7d5a7d5": {"__data__": {"id_": "707e880f-65b5-4062-ba15-4a2af7d5a7d5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "69db63e8-1226-4ea8-9736-2c92f50153fb", "node_type": "4", "metadata": {}, "hash": "7c92b42ee43e064383874ea30d396019614b4ad3e0125f26003bc8ba0ec7f335", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-5 (continued)\n\nSpreadsheetDate.java\n436                              if (SerialDate.isLeapYear(y)) {\n437                                      mm = mm + 1;\n438                              }\n439                     }\n440                     final int dd = d;\n441                     return yy + mm + dd + 1;\n442             }\n443\n444             /**\n445               * Calculate the day, month and year from                                            the serial            number.\n446               */\n447             private void calcDayMonthYear() {\n448\n449                     // get the year from the serial date\n450                     final int days = this.serial - SERIAL_LOWER_BOUND;\n451                     // overestimated because we ignored\nfinal int overestimatedYYYY = 1900 +leap        days365);\n452                                                                                                (days        /\n453                     final int leaps = SerialDate.leapYearCount(overestimatedYYYY);\n454                     final int nonleapdays = days - leaps;\n455                     // underestimated because we overestimated                                              years\n456                     int underestimatedYYYY = 1900 + (nonleapdays / 365);\n457\n458                     if (underestimatedYYYY == overestimatedYYYY) {\n459                              this.year = underestimatedYYYY;\n460                     }\n461                     else {\n462                              int ss1 = calcSerial(1, 1, underestimatedYYYY);\n463                              while (ss1 <= this.serial) {\n464                                      underestimatedYYYY = underestimatedYYYY                                          + 1;\n465                                      ss1 = calcSerial(1, 1, underestimatedYYYY);\n466                              }\n467                              this.year = underestimatedYYYY - 1;\n468                     }\n469\n470                     final int ss2 = calcSerial(1, 1, this.year);\n471\n472                     int[] daysToEndOfPrecedingMonth\n473                              = AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;\n474\n475                     if (isLeapYear(this.year)) {\n476                              daysToEndOfPrecedingMonth\n477                                      = LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;\n478                     }\n479\n480                     // get the month from the serial date\n481                     int mm = 1;\n482                     int sss = ss2 + daysToEndOfPrecedingMonth[mm]                                                  -  1;\n483                     while (sss < this.serial) {\n484                              mm = mm + 1;\n485                              sss = ss2 + daysToEndOfPrecedingMonth[mm]                                             -  1;\n486                     }\n487                     this.month = mm - 1;\n488\n489                     // what's left is d(+1);\n490                     this.day = this.serial - ss2\n491                                            - daysToEndOfPrecedingMonth[this.month]                                          +   1;\n492\n493             }\n494\n495 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1642316a-f879-4192-b050-a56e3b356c22": {"__data__": {"id_": "1642316a-f879-4192-b050-a56e3b356c22", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3df05c36-7ac1-49fa-b384-2dceb5bb4d1b", "node_type": "4", "metadata": {}, "hash": "cbc66325cedd678012b6f591d650baf34f07cc668a300d09a4f59457f841cc5d", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-6\n\n# RelativeDayOfWeekRule.java\n\n/* ========================================================================\n* JCommon : a free general purpose class library for                  the Java(tm)     platform\n* ========================================================================\n*\n* (C) Copyright 2000-2005, by Object Refinery                Limited and    Contributors.\n*\n* Project Info:       http://www.jfree.org/jcommon/index.html\n*\n* This library is free software; you can redistribute it and/or modify                       it\n* under    the terms of the GNU Lesser General Public              License as published by\n* the Free Software Foundation; either version 2.1                 of the   License, or\n* (at your option) any later version.\n*\n* This library is distributed in the hope that it warranty  will        be  useful,    but\n* WITHOUT ANY WARRANTY; without even the implied                            of  MERCHANTABILITY\n* or FITNESS FOR A PARTICULAR PURPOSE. See               the GNU   Lesser   General    Public\n* License for more details.\n*\n* You should have received a copy of the GNU               Lesser General FreePublic\n* License along with this library; if not,               write to the           Software\n* Foundation, Inc., 51 Franklin Street, Fifth                Floor,   Boston,   MA   02110-1301,\n* USA.\n*\n* [Java    is a trademark or registered trademark of              Sun Microsystems,      Inc.\n* in the United States and other countries.]\n*\n* --------------------------\n* RelativeDayOfWeekRule.java\n* --------------------------\n* (C) Copyright 2000-2003, by Object Refinery                Limited and    Contributors.\n*\n* Original Author:        David Gilbert (for Object          Refinery   Limited);\n* Contributor(s):         -;\n*\n* $Id: RelativeDayOfWeekRule.java,v 1.6 2005/11/16                 15:58:40    taqua   Exp  $\n*\n* Changes (from 26-Oct-2001)\n* --------------------------\n* 26-Oct-2001 : Changed package to com.jrefinery.date.*;\n* 03-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n*\n*/\n\npackage org.jfree.date;\n\n/**\n* An annual date rule that returns a date for (c) a each           year   based on   (a) a\n* reference rule; (b) a day of the week; and                       selection    parameter\n* (SerialDate.PRECEDING, SerialDate.NEAREST,               SerialDate.FOLLOWING).\n*\n* For example, Good Friday can be specified as 'the Friday PRECEDING Easter\n* Sunday'.\n*\n* @author David Gilbert\n*/\npublic class RelativeDayOfWeekRule extends AnnualDateRule {\n\n/** A reference to the annual date rule              on  which this rule is      based. */\nprivate AnnualDateRule subrule;\n\n/**\n* The day of the week (SerialDate.MONDAY,               SerialDate.TUESDAY,       and  so  on).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2799, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3fc9d4e-6433-4eee-8be2-059f6f8ec45f": {"__data__": {"id_": "b3fc9d4e-6433-4eee-8be2-059f6f8ec45f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7b156118-14d4-4bf1-9127-641696d3a746", "node_type": "4", "metadata": {}, "hash": "286686ebaf5b935e0ff4691e1310add3ecbb7332ed14fb6e5709dd748482f95f", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-6 (continued)\n\n# RelativeDayOfWeekRule.java\n\n63                  */\n64                private int dayOfWeek;\n65\n66                /** Specifies which day of the week (PRECEDING, NEAREST or FOLLOWING). */\n67                private int relative;\n68\n69                /**\n70                  * Default constructor - builds a rule for the Monday following 1 January.\n71                  */\n72                public RelativeDayOfWeekRule() {\n73                          this(new DayAndMonthRule(), SerialDate.MONDAY, SerialDate.FOLLOWING);\n74                }\n75\n76                /**\n77                  * Standard constructor - builds rule based on the supplied sub-rule.\n78                  *\n79                  * @param subrule\n80                  * @param dayOfWeek the rule that determines the reference date.\n81                  * indicates which day-of-the-week relative to the date.\n82                  * @param relative (preceding, nearest, or following).\n83                  */\n84                public RelativeDayOfWeekRule(final AnnualDateRule subrule,\n85                                     final int dayOfWeek, final int relative) {\n86                          this.subrule = subrule;\n87                          this.dayOfWeek = dayOfWeek;\n88                          this.relative = relative;\n89                }\n90\n91                /**\n92                  * Returns the sub-rule (also called the reference rule).\n93                  *\n94                  * @return The annual date rule that determines the reference date for this rule.\n95                  */\n96                public AnnualDateRule getSubrule() {\n97                          return this.subrule;\n98                }\n99\n100                  /**\n101                    * Sets the sub-rule.\n102                    *\n103                    * @param subrule the annual date rule that determines the reference date for this rule.\n104                    */\n105                  public void setSubrule(final AnnualDateRule subrule) {\n106                            this.subrule = subrule;\n107                  }\n108\n109                  /**\n110                    * Returns the day-of-the-week for this rule.\n111                    *\n112                    * @return the day-of-the-week for this rule.\n113                    */\n114                  public int getDayOfWeek() {\n115                            return this.dayOfWeek;\n116                  }\n117\n118                  /**\n119                    * Sets the day-of-the-week for this rule.\n120                    *\n121                    * @param dayOfWeek the day-of-the-week (SerialDate.MONDAY,\n122                    * SerialDate.TUESDAY, and so on).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2738, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6fac4b9-ddab-4895-9c95-5ba5197abf14": {"__data__": {"id_": "f6fac4b9-ddab-4895-9c95-5ba5197abf14", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4e6bc38c-617a-4895-aeaf-9ba37dc78556", "node_type": "4", "metadata": {}, "hash": "73d82a8a6f2c0fd56a138c238fcc824d5c01b8318576c7efa09886cc5bc9b584", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-6 (continued)\n\n# RelativeDayOfWeekRule.java\n\npublic void setDayOfWeek(final int dayOfWeek) {\nthis.dayOfWeek = dayOfWeek;\n}\n\n/**\n* Returns the 'relative' attribute, that determines *which*\n* day-of-the-week we are interested in (SerialDate.PRECEDING,\n* SerialDate.NEAREST or SerialDate.FOLLOWING).\n*\n* @return The 'relative' attribute.\n*/\npublic int getRelative() {\nreturn this.relative;\n}\n\n/**\n* Sets the 'relative' attribute (SerialDate.PRECEDING, SerialDate.NEAREST,\n* SerialDate.FOLLOWING).\n*\n* @param relative determines *which* day-of-the-week is selected by this\n*                 rule.\n*/\npublic void setRelative(final int relative) {\nthis.relative = relative;\n}\n\n/**\n* Creates a clone of this rule.\n*\n* @return a clone of this rule.\n*\n* @throws CloneNotSupportedException this should never happen.\n*/\npublic Object clone() throws CloneNotSupportedException {\nfinal RelativeDayOfWeekRule duplicate\n= (RelativeDayOfWeekRule) super.clone();\nduplicate.subrule = (AnnualDateRule) duplicate.getSubrule().clone();\nreturn duplicate;\n}\n\n/**\n* Returns the date generated by this rule, for the specified year.\n*\n* @param year the year (1900 &lt;= year &lt;= 9999).\n*\n* @return The date generated by the rule for the given year (possibly\n*         null).\n*/\npublic SerialDate getDate(final int year) {\n// check argument...\nif ((year < SerialDate.MINIMUM_YEAR_SUPPORTED)\n|| (year > SerialDate.MAXIMUM_YEAR_SUPPORTED)) {\nthrow new IllegalArgumentException(\n\"RelativeDayOfWeekRule.getDate(): year outside valid range.\");\n}\n\n// calculate the date...\nSerialDate result = null;\nfinal SerialDate base = this.subrule.getDate(year);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1672, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7dcfe417-9921-4e65-9e58-4df90fe86a98": {"__data__": {"id_": "7dcfe417-9921-4e65-9e58-4df90fe86a98", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "11006273-4fc6-4a99-b835-61cb80254f64", "node_type": "4", "metadata": {}, "hash": "f0bfdc5d31b3f0ce3bc3bc7179b1d7bca83febd4a27b0ec80a8b4835e9a837df", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-6 (continued)\n\nRelativeDayOfWeekRule.java\n187            if (base != null) {\n188                 switch (this.relative) {\n189                      case(SerialDate.PRECEDING):\n190                           result = SerialDate.getPreviousDayOfWeek(this.dayOfWeek,\n191                                     base);\n192                           break;\n193                      case(SerialDate.NEAREST):\n194                           result = SerialDate.getNearestDayOfWeek(this.dayOfWeek,\n195                                     base);\n196                           break;\n197                      case(SerialDate.FOLLOWING):\n198                           result = SerialDate.getFollowingDayOfWeek(this.dayOfWeek,\n199                                     base);\n200                           break;\n201                      default:\n202                           break;\n203                 }\n204            }\n205            return result;\n206\n207       }\n208\n209 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1010, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9be83ca3-4577-496f-9c84-b77f9b3576bf": {"__data__": {"id_": "9be83ca3-4577-496f-9c84-b77f9b3576bf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c5b760a4-a70d-40e1-a971-447bbedab459", "node_type": "4", "metadata": {}, "hash": "165ca4ccd77ba06f91629ad68c1966ef87ad8fb3b300c37f52ce58eeb7061af3", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-7\n\n# DayDate.java (Final)\n\n/* ========================================================================\n* JCommon : a free general purpose class library for the Java(tm) platform\n* ========================================================================\n*\n* (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n*/\npackage org.jfree.date;\n\nimport java.io.Serializable;\nimport java.util.*;\n\n/**\n* An abstract class that represents immutable date fixed dates with a precision of\n* one day. The implementation will map each some to an origin.integer that\n* represents an ordinal number of days from\n*\n* Why not just use java.util.Date? We will, when it makes sense. in on At times,\n* java.util.Date can be *too* precise - it represents an instant time,\n* accurate to 1/1000th of a second (with the Sometimes we just want to represent\n* a particular day (e.g. January 2015) without concerning ourselves about the\n* time of day, the time-zone, or anything else. That's what DayDate is for.\n*\n* Use DayDateFactory.makeDate to create an instance.\n*\n* @author David Gilbert\n* @author Robert C. Martin did a lot of refactoring.\n*/\n\npublic abstract class DayDate implements Comparable, Serializable {\npublic abstract int getOrdinalDay();\npublic abstract int getYear();\npublic abstract Month getMonth();\npublic abstract int getDayOfMonth();\n\nprotected abstract Day getDayOfWeekForOrdinalZero();\n\npublic DayDate plusDays(int days) {\nreturn DayDateFactory.makeDate(getOrdinalDay() + days);\n}\n\npublic DayDate plusMonths(int months) {\nint thisMonthAsOrdinal = getMonth().toInt() - Month.JANUARY.toInt();\nint thisMonthAndYearAsOrdinal = 12 * getYear() + thisMonthAsOrdinal;\nint resultMonthAndYearAsOrdinal = thisMonthAndYearAsOrdinal + months;\nint resultYear = resultMonthAndYearAsOrdinal / 12;\nint resultMonthAsOrdinal = resultMonthAndYearAsOrdinal % 12 + Month.JANUARY.toInt();\nMonth resultMonth = Month.fromInt(resultMonthAsOrdinal);\nint resultDay = correctLastDayOfMonth(getDayOfMonth(), resultMonth, resultYear);\nreturn DayDateFactory.makeDate(resultDay, resultMonth, resultYear);\n}\n\npublic DayDate plusYears(int years) {\nint resultYear = getYear() + years;\nint resultDay = correctLastDayOfMonth(getDayOfMonth(), getMonth(), resultYear);\nreturn DayDateFactory.makeDate(resultDay, getMonth(), resultYear);\n}\n\nprivate int correctLastDayOfMonth(int day, Month month, int year) {\nint lastDayOfMonth = DateUtil.lastDayOfMonth(month);\nif (day > lastDayOfMonth)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2511, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e01fcc9-dc8f-47f5-a8ed-f0431c94d5b2": {"__data__": {"id_": "1e01fcc9-dc8f-47f5-a8ed-f0431c94d5b2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8fde6c13-ce59-471c-8bd8-2528808952bf", "node_type": "4", "metadata": {}, "hash": "ef72ce08ce82127f327d8f6c7ab4e94c30c5da0b023b15c931286588802bdd55", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-7 (continued)\n\n# DayDate.java (Final)\n\n92            day = lastDayOfMonth;\n93       return day;\n94    }\n95\n96    public   DayDate getPreviousDayOfWeek(Day targetDayOfWeek)                 {\n97       int offsetToTarget = targetDayOfWeek.toInt()               -  getDayOfWeek().toInt();\n98       if (offsetToTarget >= 0)\n99         offsetToTarget -= 7;\n100        return plusDays(offsetToTarget);\n101     }\n102\n103     public   DayDate getFollowingDayOfWeek(Day targetDayOfWeek) {\n104        int offsetToTarget = targetDayOfWeek.toInt()               -  getDayOfWeek().toInt();\n105        if (offsetToTarget <= 0)\n106          offsetToTarget += 7;\n107        return plusDays(offsetToTarget);\n108     }\n109\n110     public   DayDate getNearestDayOfWeek(Day targetDayOfWeek) { getDayOfWeek().toInt();\n111        int offsetToThisWeeksTarget = targetDayOfWeek.toInt() -\n112        int offsetToFutureTarget = (offsetToThisWeeksTarget                 + 7)   % 7;\n113        int offsetToPreviousTarget = offsetToFutureTarget                 - 7;\n114\n115        if (offsetToFutureTarget > 3)\n116          return plusDays(offsetToPreviousTarget);\n117        else\n118          return plusDays(offsetToFutureTarget);\n119     }\n120\n121     public   DayDate getEndOfMonth() {\n122        Month month = getMonth();\n123       int year = getYear();\n124       int lastDay = DateUtil.lastDayOfMonth(month,               year);\n125       return DayDateFactory.makeDate(lastDay,             month,    year);\n126     }\n127\n128     public   Date toDate() {\n129        final Calendar calendar = Calendar.getInstance();\n130        int ordinalMonth = getMonth().toInt() -             Month.JANUARY.toInt();\n131        calendar.set(getYear(), ordinalMonth, getDayOfMonth(),                  0,  0, 0);\n132        return calendar.getTime();\n133     }\n134\n135     public   String toString() {\n136        return String.format(\"%02d-%s-%d\", getDayOfMonth(),                 getMonth(), getYear());\n137     }\n138\n139     public   Day getDayOfWeek() {\n140        Day startingDay = getDayOfWeekForOrdinalZero();\n141        int startingOffset = startingDay.toInt() - + startingOffset) Day.SUNDAY.toInt();7;\n142        int ordinalOfDayOfWeek = (getOrdinalDay() Day.SUNDAY.toInt());%\n143        return Day.fromInt(ordinalOfDayOfWeek +\n144     }\n145\n146     public   int daysSince(DayDate date) {\n147        return getOrdinalDay() - date.getOrdinalDay();\n148     }\n149\n150     public   boolean isOn(DayDate other) {\n151        return getOrdinalDay() == other.getOrdinalDay();\n152     }\n153", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2601, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d453c45-a5a8-47f7-9390-e2cba4d847c7": {"__data__": {"id_": "9d453c45-a5a8-47f7-9390-e2cba4d847c7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e63d98a6-e9d7-43ef-a6f5-bc69e1292d81", "node_type": "4", "metadata": {}, "hash": "91313179ccf8584f6a938d284e18bf8dd78c0ca835fcbecf4aeb93a9e5539871", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-7 (continued)\n\n# DayDate.java (Final)\n\n154           public                boolean isBefore(DayDate other) {\n155                 return getOrdinalDay() < other.getOrdinalDay();\n156           }\n157\n158           public                boolean isOnOrBefore(DayDate other) {\n159                 return getOrdinalDay() <= other.getOrdinalDay();\n160           }\n161\n162           public                boolean isAfter(DayDate other) {\n163                 return getOrdinalDay() > other.getOrdinalDay();\n164           }\n165\n166           public                boolean isOnOrAfter(DayDate other) {\n167                 return getOrdinalDay() >= other.getOrdinalDay();\n168           }\n169\n170           public                boolean isInRange(DayDate d1, DayDate d2) {\n171                 return isInRange(d1, d2, DateInterval.CLOSED);\n172           }\n173\n174           public int right = Math.max(d1.getOrdinalDay(),d2.getOrdinalDay());\n175                 boolean isInRange(DayDate d1, DayDate d2, DateInterval interval) {\n176                 int left = Math.min(d1.getOrdinalDay(), d2.getOrdinalDay());\n177                 return interval.isIn(getOrdinalDay(), left, right);\n178           }\n179 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "033be745-26a4-4e92-9132-265287278e21": {"__data__": {"id_": "033be745-26a4-4e92-9132-265287278e21", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d96cd64d-3d28-421e-8bdd-79b8156693ca", "node_type": "4", "metadata": {}, "hash": "4501456b19462d2aaf265240e2c158f0b47ea38cb812f49cd40574d4724823c8", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-8\n\n# Month.java (Final)\n\n1 package org.jfree.date;\n2\n3 import java.text.DateFormatSymbols;\n4\n5 public enum Month {\n6    JANUARY(1), FEBRUARY(2), MARCH(3),\n7    APRIL(4),       MAY(5),          JUNE(6),\n8    JULY(7),        AUGUST(8),       SEPTEMBER(9),\n9    OCTOBER(10),NOVEMBER(11),DECEMBER(12);\n10    private static DateFormatSymbols dateFormatSymbols = new                   DateFormatSymbols();\n11    private static final int[] LAST_DAY_OF_MONTH 31,=30,\n12       {0, 31, 28, 31, 30, 31, 30, 31, 31, 30,                        31};\n13\n14    private int index;\n15\n16    Month(int index) {\n17       this.index = index;\n18    }\n19\n20    public   static Month fromInt(int monthIndex)             {\n21       for (Month m : Month.values()) {\n22         if return m;(m.index == monthIndex)\n23\n24       }\n25       throw new IllegalArgumentException(\"Invalid month                index \"    + monthIndex);\n26    }\n27\n28    public   int lastDay() {\n29       return LAST_DAY_OF_MONTH[index];\n30    }\n31\n32    public   int quarter() {\n33       return 1 + (index - 1) / 3;\n34    }\n35\n36    public   String toString() {\n37       return dateFormatSymbols.getMonths()[index              -  1];\n38    }\n39\n40    public   String toShortString() {\n41       return dateFormatSymbols.getShortMonths()[index                - 1];\n42    }\n43\n44    public   static Month parse(String s) {\n45       s = s.trim();\n46       for (Month m : Month.values())\n47         if return m;(m.matches(s))\n48\n49\n50       try {\n51         return fromInt(Integer.parseInt(s));\n52       }\n53       catch (NumberFormatException e) {}\n54       throw new IllegalArgumentException(\"Invalid month                \"  + s);\n55    }\n56\n57    private boolean matches(String s) {\n58       return s.equalsIgnoreCase(toString()) ||\n59                s.equalsIgnoreCase(toShortString());\n60    }\n61\n62    public   int toInt() {\n63       return index;\n64    }\n65 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1962, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f874f34e-8c75-4b92-a64e-9d2f223923c9": {"__data__": {"id_": "f874f34e-8c75-4b92-a64e-9d2f223923c9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4686d2d2-c98d-4b01-af72-48c5e8235592", "node_type": "4", "metadata": {}, "hash": "2ebfc4d016c399d8d80413edcacaa20bd228b3fe77e948b3a6c61a08c4a55a74", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-9\n\n# Day.java (Final)\n\n1 package org.jfree.date;\n2\n3 import java.util.Calendar;\n4 import java.text.DateFormatSymbols;\n5\n6 public enum Day {\n7    MONDAY(Calendar.MONDAY),\n8    TUESDAY(Calendar.TUESDAY),\n9    WEDNESDAY(Calendar.WEDNESDAY),\n10    THURSDAY(Calendar.THURSDAY),\n11    FRIDAY(Calendar.FRIDAY),\n12    SATURDAY(Calendar.SATURDAY),\n13    SUNDAY(Calendar.SUNDAY);\n14\n15    private final int index;\n16    private static DateFormatSymbols dateSymbols               =  new DateFormatSymbols();\n17\n18    Day(int day) {\n19       index = day;\n20    }\n21\n22    public   static Day fromInt(int index) throws             IllegalArgumentException        {\n23       for (Day d : Day.values())\n24         if return d;(d.index == index)\n25\n26       throw new IllegalArgumentException(\n27         String.format(\"Illegal day index: %d.\",              index));\n28    }\n29\n30    public   static Day parse(String s) throws IllegalArgumentException {\n31       String[] shortWeekdayNames =\n32         dateSymbols.getShortWeekdays();\n33       String[] weekDayNames =\n34         dateSymbols.getWeekdays();\n35\n36       s = s.trim();\n37       for (Day day : Day.values()) {\n38         if  (s.equalsIgnoreCase(shortWeekdayNames[day.index])                 ||\n39              s.equalsIgnoreCase(weekDayNames[day.index])) {\n40            return day;\n41         }\n42       }\n43       throw new IllegalArgumentException(\n44         String.format(\"%s is not a valid weekday              string\",    s));\n45    }\n46\n47    public   String toString() {\n48       return dateSymbols.getWeekdays()[index];\n49    }\n50\n51    public   int toInt() {\n52       return index;\n53    }\n54 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1704, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9aeb828-3aa9-4b63-b088-3a4b3a4bf88e": {"__data__": {"id_": "c9aeb828-3aa9-4b63-b088-3a4b3a4bf88e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "54242bdd-5cb0-41fe-a331-3c24c719a174", "node_type": "4", "metadata": {}, "hash": "2e7bbe43c2df02f7c01ae4e7e26fc4f830031512427145cd4b47a488be6a3f75", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-10\n\n# DateInterval.java (Final)\n\n1 package org.jfree.date;\n2\n3 public enum DateInterval {\n4    OPEN {\n5      public boolean isIn(int d, int left, int right)    {\n6         return d > left && d < right;\n7    },}\n8\n9    CLOSED_LEFT {\n10      public boolean isIn(int d, int left, int right)    {\n11         return d >= left && d < right;\n12    },}\n13\n14    CLOSED_RIGHT {\n15      public boolean isIn(int d, int left, int right)    {\n16         return d > left && d <= right;\n17    },}\n18\n19    CLOSED   {\n20      public boolean isIn(int d, int left, int right)    {\n21         return d >= left && d <= right;\n22    };}\n23\n24\n25    public   abstract boolean isIn(int d, int left, int  right);\n26 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 746, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea3a66c1-c701-4261-93db-f18afcfa8451": {"__data__": {"id_": "ea3a66c1-c701-4261-93db-f18afcfa8451", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7df9a371-36f6-4e32-bad9-a49238bf7748", "node_type": "4", "metadata": {}, "hash": "79b22c328b66e22fd349c66a2f28c82a8665bc07c7c1ef7b97cbda522da0e58b", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-11\n\n# WeekInMonth.java (Final)\n\npackage org.jfree.date;\n\npublic enum WeekInMonth {\nFIRST(1), SECOND(2), THIRD(3), FOURTH(4), LAST(0);\nprivate final int index;\n\nWeekInMonth(int index) {\nthis.index = index;\n}\n\npublic int toInt() {\nreturn index;\n}\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 299, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4efbe6d2-de49-46a4-b77b-bdf7bbd0f699": {"__data__": {"id_": "4efbe6d2-de49-46a4-b77b-bdf7bbd0f699", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c9eb790-63ac-4929-9288-a40697d6f129", "node_type": "4", "metadata": {}, "hash": "e99d668dae2bd8ddd7dc2f050856fbf0885e99b13a3f367891e83a7bb7aed8b4", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-12\n\n# WeekdayRange.java (Final)\n\n1 package org.jfree.date;\n2\n3 public enum WeekdayRange {\n4   LAST, NEAREST, NEXT\n5 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "724826d3-7f26-41a9-9580-b2bad9437d45": {"__data__": {"id_": "724826d3-7f26-41a9-9580-b2bad9437d45", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "075a961b-5dfc-426c-a486-1ebffac9655f", "node_type": "4", "metadata": {}, "hash": "38f48f23402e3ee8aa378e10f6f34436d097677a68fe5b21d93679ec4cb204ea", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-13\n\n# DateUtil.java (Final)\n\n1 package org.jfree.date;\n2\n3 import java.text.DateFormatSymbols;\n4\n5 public class DateUtil {\n6     private static DateFormatSymbols dateFormatSymbols = new DateFormatSymbols();\n7\n8     public static String[] getMonthNames() {\n9       return dateFormatSymbols.getMonths();\n10     }\n11\n12     public static boolean isLeapYear(int year) {\n13       boolean fourth = year % 4 == 0;\n14       boolean hundredth = year % 100 == 0;\n15       boolean fourHundredth = year % 400 == 0;\n16       return fourth && (!hundredth || fourHundredth);\n17     }\n18\n19     public static int lastDayOfMonth(Month month, int year) {\n20         if (month == Month.FEBRUARY && isLeapYear(year)) {\n21             return month.lastDay() + 1;\n22         } else\n23             return month.lastDay();\n24     }\n25\n26     public static int leapYearCount(int year) {\n27       int leap4 = (year - 1896) / 4;\n28       int leap100 = (year - 1800) / 100;\n29       int leap400 = (year - 1600) / 400;\n30       return leap4 - leap100 + leap400;\n31     }\n32 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2f6d704-3ced-4ef6-b91b-bcaf938055de": {"__data__": {"id_": "b2f6d704-3ced-4ef6-b91b-bcaf938055de", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "caa841cc-6426-4f40-9f3b-0b2b89dd1520", "node_type": "4", "metadata": {}, "hash": "553f391c6cde9fdaa25e65f284c1ac2f6d38ad25ec35633286a460e68427ce26", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-14\n\n# DayDateFactory.java (Final)\n\n1 package org.jfree.date;\n2\n3 public abstract class DayDateFactory {\n4    private static DayDateFactory factory = new              SpreadsheetDateFactory();\n5    public   static void setInstance(DayDateFactory factory)               {\n6      DayDateFactory.factory = factory;\n7    }\n8\n9    protected abstract DayDate _makeDate(int ordinal);\n10     protected abstract DayDate _makeDate(int day, Month                month,   int year);\n11     protected abstract DayDate _makeDate(int day, int                month,   int year);\n12     protected abstract DayDate _makeDate(java.util.Date                date);\n13     protected abstract int _getMinimumYear();\n14     protected abstract int _getMaximumYear();\n15\n16     public   static DayDate makeDate(int ordinal)            {\n17       return factory._makeDate(ordinal);\n18     }\n19\n20     public   static DayDate makeDate(int day, Month month, int                year) {\n21       return factory._makeDate(day, month, year);\n22     }\n23\n24     public   static DayDate makeDate(int day, int            month, int    year) {\n25       return factory._makeDate(day, month, year);\n26     }\n27\n28     public   static DayDate makeDate(java.util.Date date)              {\n29       return factory._makeDate(date);\n30     }\n31\n32     public   static int getMinimumYear() {\n33       return factory._getMinimumYear();\n34     }\n35\n36     public   static int getMaximumYear() {\n37       return factory._getMaximumYear();\n38     }\n39 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1556, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e90f877d-6013-42ae-844f-b82648383c7d": {"__data__": {"id_": "e90f877d-6013-42ae-844f-b82648383c7d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bd9c2a72-d0ae-4750-8d27-2aca06b0fbbb", "node_type": "4", "metadata": {}, "hash": "01ed2dbe2f1a657cd7cabd0bcd784f3b9761e06f10e4f424b644c217f74fadc8", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-15\n\n# SpreadsheetDateFactory.java (Final)\n\n1 package org.jfree.date;\n2\n3 import java.util.*;\n4\n5 public class SpreadsheetDateFactory extends DayDateFactory {\n6       public DayDate _makeDate(int ordinal) {\n7           return new SpreadsheetDate(ordinal);\n8       }\n9\n10       public DayDate _makeDate(int day, Month month, int year) {\n11\n12       }\n13\n14       public DayDate _makeDate(int day, int month, int year) {\n15           return new SpreadsheetDate(day, month, year);\n16       }\n17\n18       public DayDate _makeDate(Date date) {\n19           final GregorianCalendar calendar = new GregorianCalendar();\n20           calendar.setTime(date);\n21           return new SpreadsheetDate(\n22               calendar.get(Calendar.DATE),\n23               Month.fromInt(calendar.get(Calendar.MONTH) + 1),\n24               calendar.get(Calendar.YEAR));\n25       }\n26\n27       protected int _getMinimumYear() {\n28           return SpreadsheetDate.MINIMUM_YEAR_SUPPORTED;\n29       }\n30\n31       protected int _getMaximumYear() {\n32           return SpreadsheetDate.MAXIMUM_YEAR_SUPPORTED;\n33       }\n34 }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f144d24-6e7b-4f1c-9fff-e0ca013ea343": {"__data__": {"id_": "7f144d24-6e7b-4f1c-9fff-e0ca013ea343", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "522223ec-6fce-4eec-bed7-f6eee9dc5321", "node_type": "4", "metadata": {}, "hash": "a01d2f96104eec0516858374b0e7d068ccf43b5d7bd8ef49516e6c65dbc849e6", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-16\n\n# SpreadsheetDate.java (Final)\n\n/* ========================================================================\n* JCommon : a free general purpose class library for the Java(tm) platform\n* ========================================================================\n*\n* (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n*\n*/\n\npackage org.jfree.date;\n\nimport static org.jfree.date.Month.FEBRUARY;\n\nimport java.util.*;\n\n/**\n* Represents a date using an integer, in a similar fashion to the\n* implementation in Microsoft Excel. The range of dates supported is\n* 1-Jan-1900 to 31-Dec-9999.\n*\n* Be aware that there is a deliberate bug in Excel Q181370: You can that recognises the year\n* 1900 as a leap year when in fact it is not a leap year. find more\n* information on the Microsoft website in article\n*\n* http://support.microsoft.com/support/kb/articles/Q181/3/70.asp\n*\n* Excel uses the convention that 1-Jan-1900 = 1. This class uses the\n* convention 1-Jan-1900 = 2.\n* The result is that the day number in this class figure for January and February 1900...but will then be different in to an the\n* Excel Excel adds extra\n* day (29-Feb-1900 which does not actually exist!) and from that point forward\n* the day numbers will match.\n*\n* @author David Gilbert\n*/\n\npublic class SpreadsheetDate extends DayDate {\npublic static final int EARLIEST_DATE_ORDINAL = 2; // 1/1/1900\npublic static final int LATEST_DATE_ORDINAL = 2958465; // 12/31/9999\npublic static final int MINIMUM_YEAR_SUPPORTED = 1900;\npublic static final int MAXIMUM_YEAR_SUPPORTED = 9999;\nstatic {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, =365}; final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH\nstatic final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n{0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};\n\nprivate int ordinalDay;\nprivate int day;\nprivate Month month;\nprivate int year;\n\npublic SpreadsheetDate(int day, Month month, > MAXIMUM_YEAR_SUPPORTED) int year) {\nif (year < MINIMUM_YEAR_SUPPORTED || year\nthrow new IllegalArgumentException(\n\"The 'year' argument must be in range \" +\nMINIMUM_YEAR_SUPPORTED + \" to \" + MAXIMUM_YEAR_SUPPORTED + \".\");\nif (day < 1 || day > DateUtil.lastDayOfMonth(month, year))\nthrow new IllegalArgumentException(\"Invalid 'day' argument.\");\n\nthis.year = year;\nthis.month = month;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2390, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46e916f9-dd25-4f43-9c71-b1c2b3156cf3": {"__data__": {"id_": "46e916f9-dd25-4f43-9c71-b1c2b3156cf3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f266a285-53a6-4af1-9571-fea000c3709b", "node_type": "4", "metadata": {}, "hash": "0c0b41fa82d13353985f49b537c58a8bfec95cdc28f9424e0383412672e3e0b9", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-16 (continued)\n\nSpreadsheetDate.java (Final)\n106        this.day = day;\n107        ordinalDay = calcOrdinal(day, month, year);\n108     }\n109\n110     public   SpreadsheetDate(int day, int month, int             year) {\n111        this(day, Month.fromInt(month), year);\n112     }\n113\n114     public   SpreadsheetDate(int serial) {\n115        if (serial < EARLIEST_DATE_ORDINAL || serial              >  LATEST_DATE_ORDINAL)\n116          throw new IllegalArgumentException(\n117             \"SpreadsheetDate: Serial must be in            range 2   to 2958465.\");\n118\n119        ordinalDay = serial;\n120        calcDayMonthYear();\n121     }\n122\n123     public   int getOrdinalDay() {\n124        return ordinalDay;\n125     }\n126\n127     public   int getYear() {\n128        return year;\n129     }\n130\n131     public   Month getMonth() {\n132        return month;\n133     }\n134\n135     public   int getDayOfMonth() {\n136        return day;\n137     }\n138\n139     protected Day getDayOfWeekForOrdinalZero() {return Day.SATURDAY;}\n140\n141     public   boolean equals(Object object) {\n142        if (!(object instanceof DayDate))\n143          return false;\n144\n145        DayDate date = (DayDate) object;\n146        return date.getOrdinalDay() == getOrdinalDay();\n147     }\n148\n149     public   int hashCode() {\n150        return getOrdinalDay();\n151     }\n152\n153     public   int compareTo(Object other) {\n154        return daysSince((DayDate) other);\n155     }\n156\n157     private int calcOrdinal(int day, Month month, int                year) {\n158        int leapDaysForYear = DateUtil.leapYearCount(year\n159                                                              int daysUpToYear = (year - MINIMUM_YEAR_SUPPORTED)- * 1);\n160                                                                             365  + leapDaysForYear;\n161        int daysUpToMonth = AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[month.toInt()];\n162        if (DateUtil.isLeapYear(year) && month.toInt()               > FEBRUARY.toInt())\n163          daysUpToMonth++;\n164        int daysInMonth = day - 1;\n165        return daysUpToYear + daysUpToMonth + daysInMonth                + EARLIEST_DATE_ORDINAL;\n166     }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2235, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "193517b4-1b26-4a42-b0c4-5e9c3213d304": {"__data__": {"id_": "193517b4-1b26-4a42-b0c4-5e9c3213d304", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "523e9a22-24bc-4f65-9bf0-c6aeccc526fe", "node_type": "4", "metadata": {}, "hash": "4ea9bc2c0feb8c2986769bfcc3c2e428288390c8181d790992d4afcce28d9f09", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix B: org.jfree.date.SerialDate\n\n# Listing B-16 (continued)\n\n# SpreadsheetDate.java (Final)\n\nprivate void calcDayMonthYear() {\nint days = ordinalDay - EARLIEST_DATE_ORDINAL;\nint overestimatedYear = MINIMUM_YEAR_SUPPORTED + days / 365;\nint nonleapdays = days - DateUtil.leapYearCount(overestimatedYear);\nint underestimatedYear = MINIMUM_YEAR_SUPPORTED + nonleapdays / 365;\n\nyear  = huntForYearContaining(ordinalDay, underestimatedYear);\nint firstOrdinalOfYear = firstOrdinalOfYear(year);\nmonth = huntForMonthContaining(ordinalDay, firstOrdinalOfYear);\nday = ordinalDay - firstOrdinalOfYear - daysBeforeThisMonth(month.toInt());\n}\n\nprivate Month huntForMonthContaining(int anOrdinal, int firstOrdinalOfYear) {\nint daysIntoThisYear = anOrdinal - firstOrdinalOfYear;\nint aMonth = 1;\nwhile (daysBeforeThisMonth(aMonth) < daysIntoThisYear)\naMonth++;\n\nreturn Month.fromInt(aMonth - 1);\n}\n\nprivate int daysBeforeThisMonth(int aMonth) {\nif (DateUtil.isLeapYear(year))\nreturn LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[aMonth] - 1;\nelse\nreturn AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[aMonth] - 1;\n}\n\nprivate int huntForYearContaining(int anOrdinalDay, int startingYear) {\nint aYear = startingYear;\nwhile (firstOrdinalOfYear(aYear) <= anOrdinalDay)\naYear++;\n\nreturn aYear - 1;\n}\n\nprivate int firstOrdinalOfYear(int year) {\nreturn calcOrdinal(1, Month.JANUARY, year);\n}\n\npublic static DayDate createInstance(Date date) {\nGregorianCalendar calendar = new GregorianCalendar();\ncalendar.setTime(date);\nreturn new SpreadsheetDate(calendar.get(Calendar.DATE),\nMonth.fromInt(calendar.get(Calendar.MONTH) + 1),\ncalendar.get(Calendar.YEAR));\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1640, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d794e10-d1d9-4f56-b4c0-d6d073597ae5": {"__data__": {"id_": "9d794e10-d1d9-4f56-b4c0-d6d073597ae5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fa51f938-ceee-4636-99b4-253668b66633", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad27cb85-3dca-4b16-9dab-7dec00287632": {"__data__": {"id_": "ad27cb85-3dca-4b16-9dab-7dec00287632", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1f2f284c-9710-4695-a59a-9735d4e60e5a", "node_type": "4", "metadata": {}, "hash": "2be52644e43792cbed9f6e552833143610959fefe48b0c19fd8b0b53e39a788e", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix C\n\n# Cross References of Heuristics\n\nCross references of Smells and Heuristics. All other cross references can be deleted.\n\n|C1|16-276, 16-279, 17-292|\n|---|---|\n|C2|16-279, 16-285, 16-295, 17-292|\n|C3|16-283, 16-285, 16-288, 17-293|\n|C4|17-293|\n|C5|17-293|\n|E1|17-294|\n|E2|17-294|\n|F1|14-239, 17-295|\n|F2|17-295|\n|F3|17-295|\n|F4| |\n|G1|14-289, 16-273, 16-285, 16-287, 16-288, 17-295|\n|G2|16-276, 17-295|\n|G3|16-273, 16-274, 17-296|\n|G4|16-274, 17-296|\n|G5|9-31, 16-279, 16-286, 16-291, 17-297|\n|G6|9-31, 16-279, 16-286, 16-291, 16-296, 17-297|\n| |6-106, 16-280, 16-283, 16-284, 16-289, 16-293, 16-294, 16-296, 17-299|\n|G7|16-281, 16-283, 17-300|\n|G8|16-283, 17-301|\n|G9|16-283, 16-285, 16-286, 16-287, 17-302|\n|G10|5-86, 15-264, 16-276, 16-284, 17-302|\n|G11|15-264, 16-284, 16-288, 16-292, 17-302|\n|G12|16-284, 16-285, 16-286, 16-287, 16-288, 16-295, 17-303|\n|G13|16-286, 16-288, 17-303|\n|G14|16-288, 16-292, 17-304|\n\n409", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 933, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ad9cbfd-cac0-4d1e-9e6e-a105a1774c41": {"__data__": {"id_": "7ad9cbfd-cac0-4d1e-9e6e-a105a1774c41", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7c792e07-ced1-42b7-bd75-4bcc3213839a", "node_type": "4", "metadata": {}, "hash": "71d26fb549fd2fe1b317dc044bfd577711c33efc9c39ed531bf2a1b10581a30e", "class_name": "RelatedNodeInfo"}}, "text": "# Appendix C: Cross References of Heuristics\n\n|G15|16-288, 17-305|\n|---|---|\n|G16|16-289, 17-306|\n|G17|16-289, 17-307, 17-312|\n|G18|16-289, 16-290, 16-291, 17-308|\n|G19|16-290, 16-291, 16-292, 17-309|\n|G20|16-290, 17-309|\n|G21|16-291, 17-310|\n|G22|16-294, 17-322|\n|G23|??-44, 14-239, 16-295, 17-313|\n|G24|16-296, 17-313|\n|G25|16-296, 17-314|\n|G26|17-316|\n|G27|17-316|\n|G28|15-262, 17-317|\n|G29|15-262, 17-317|\n|G30|15-263, 17-317|\n|G31|15-264, 17-318|\n|G32|15-265, 17-319|\n|G33|15-265, 15-266, 17-320|\n|G34|1-40, 6-106, 17-321|\n|G35|5-90, 17-323|\n|G36|6-103, 17-324|\n|J1|16-276, 17-325|\n|J2|16-278, 16-285, 17-326|\n|J3| |\n|N1|16-283, 16-285, 17-327|\n| |15-264, 16-277, 16-279, 16-282, 16-287, 16-288, 16-289, 16-290, 16-294, 16-296, 17-328|\n|N2|16-277, 17-330|\n|N3|16-284, 16-288, 17-331|\n|N4|15-263, 16-291, 17-332|\n|N5|2-26, 14-221, 15-262, 17-332|\n|N6|15-261, 17-333|\n|N7|15-263, 17-333|\n|T1|16-273, 16-274, 17-334|\n|T2|16-273, 17-334|\n|T3|16-274, 17-334|\n|T4|17-334|\n|T5|16-274, 16-275, 17-335|\n|T6|16-275, 17-335|\n|T7|16-275, 17-335|\n|T8|16-275, 17-335|\n|T9|17-336|", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1070, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7fd71a01-b1d3-439c-9d7a-cd58f398412f": {"__data__": {"id_": "7fd71a01-b1d3-439c-9d7a-cd58f398412f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fa31f90c-6c93-4a30-9f09-d5d2164f705f", "node_type": "4", "metadata": {}, "hash": "90f2a18c066075f30201e168a4cff4273685f709d77b61d47843386c45c1c64f", "class_name": "RelatedNodeInfo"}}, "text": "# Epilogue\n\nIn 2005, while attending the Agile conference in Denver, Elisabeth Hedrickson1 handed me a green wrist band similar to the kind that Lance Armstrong made so popular. This one said \u201cTest Obsessed\u201d on it. I gladly put it on and wore it proudly. Since learning TDD from Kent Beck in 1999, I have indeed become obsessed with test-driven development.\n\nBut then something strange happened. I found I could not take the band off. Not because it was physically stuck, but because it was morally stuck. The band made an overt statement about my professional ethics. It was a visible indication of my commitment to writing the best code I could write. Taking it off seemed like a betrayal of those ethics and of that commitment.\n\nSo it is on my wrist still. When I write code, I see it there in my peripheral vision. It is a constant reminder of the promise I made to myself to write clean code.\n\n1. http://www.qualitytree.com/\n\n411", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 934, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "855fb120-3feb-4fce-8813-63c72eb40d63": {"__data__": {"id_": "855fb120-3feb-4fce-8813-63c72eb40d63", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8330c622-4ed0-4962-8eae-34d3d772bd99", "node_type": "4", "metadata": {}, "hash": "6a099f39a00d267b6d658c822de365be395edcabcc666f0bb6c10e357dd7f57f", "class_name": "RelatedNodeInfo"}}, "text": "This page intentionally left blank", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa152b0d-d7b9-400c-861d-b12e89c383e8": {"__data__": {"id_": "fa152b0d-d7b9-400c-861d-b12e89c383e8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3bee48f5-54c3-4f50-828d-35671214ec5b", "node_type": "4", "metadata": {}, "hash": "4076a5ed8b499066b88f9874af7f1059aa5b700c9782404180e366a6dbcaf5bc", "class_name": "RelatedNodeInfo"}}, "text": "# detection, 237\u2013238\n\n++ (pre- or post-increment) operator, 325, 326\n\n# A\n\naborted computation, 109\n\nabstract classes, 149, 271, 290\n\nABSTRACT FACTORY pattern, 38, 156, 273, 274\n\nabstract interfaces, 94\n\nabstract methods\n\n- adding to ArgumentMarshaler, 234\u2013235\n- modifying, 282\n\nabstract terms, 95\n\nabstraction\n\n- classes depending on, 150\n- code at wrong level of, 290\u2013291\n- descending one level at a time, 37\n- functions descending only one level of, 304\u2013306\n- mixing levels of, 36\u201337\n- names at the appropriate level of, 311\n- separating levels of, 305\n- wrapping an implementation, 11\n\nabstraction levels\n\n- raising, 290\n- separating, 305\n\naccessor functions, Law of Demeter and, 98\n\naccessors, naming, 25\n\nActive Records, 101\n\nadapted server, 185\n\n# Index\n\naffinity, 84\n\nAgile Software Development: Principles, Patterns, Practices (PPP), 15\n\nalgorithms\n\n- correcting, 269\u2013270\n- repeating, 48\n- understanding, 297\u2013298\n\nambiguities\n\n- in code, 301\n- ignored tests as, 313\n\namplification comments, 59\n\nanalysis functions, 265\n\n\u201cannotation form\u201d, of AspectJ, 166\n\nAnt project, 76, 77\n\nAOP (aspect-oriented programming), 160, 163\n\nAPIs. See also public APIs\n\n- calling a null-returning method from, 110\n- specialized for tests, 127\n- wrapping third-party, 108\n\napplications\n\n- decoupled from Spring, 164\n- decoupling from construction details, 156\n- infrastructure of, 163\n- keeping concurrency-related code separate, 181\n\narbitrary structure, 303\u2013304\n\nargs array, converting into a list, 231\u2013232\n\nArgs class\n\n- constructing, 194\n- implementation of, 194\u2013200\n- rough drafts of, 201\u2013212, 226\u2013231", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1594, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77461fde-48ff-4dc3-905b-ad0c286744eb": {"__data__": {"id_": "77461fde-48ff-4dc3-905b-ad0c286744eb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ca20f5c3-efbd-4557-8a78-dbd0dcc96542", "node_type": "4", "metadata": {}, "hash": "688e88ed661fcdd5d2c8fe81446436cea5dcdb009048aefa5a7c9a92cb7eedc7", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n# ArgsException class\n\nlisting, 198\u2013200\n\nmerging exceptions into, 239\u2013242\n\n# argument(s)\n\nflag, 41\n\nfor a function, 40\n\nin functions, 288\n\nmonadic forms of, 41\n\nreducing, 43\n\n# argument lists\n\n43\n\n# argument objects\n\n43\n\n# argument types\n\nadding, 200, 237\n\nnegative impact of, 208\n\n# ArgumentMarshaler class\n\nadding the skeleton of, 213\u2013214\n\nbirth of, 212\n\n# ArgumentMarshaler interface\n\n197\u2013198\n\n# arrays\n\nmoving, 279\n\n# art\n\nof clean code, 6\u20137\n\n# artificial coupling\n\n293\n\n# AspectJ language\n\n166\n\n# aspect-oriented programming (AOP)\n\n160, 163\n\n# aspects\n\nin AOP, 160\u2013161\n\n\u201cfirst-class\u201d support for, 166\n\n# assert statements\n\n130\u2013131\n\n# assertEquals\n\n42\n\n# assertions\n\nusing a set of, 111\n\n# assignments\n\nunaligned, 87\u201388\n\n# atomic operation\n\n323\u2013324\n\n# attributes\n\n68\n\n# authors\n\nof JUnit, 252\n\nprogrammers as, 13\u201314\n\n# authorship statements\n\n55\n\n# automated code instrumentation\n\n189\u2013190\n\n# automated suite\n\nof unit tests, 124\n\n# B\n\n# bad code\n\n3\u20134. See also dirty code; messy code\n\ndegrading effect of, 250\n\nexample, 71\u201372\n\nexperience of cleaning, 250\n\nnot making up for, 55\n\n# bad comments\n\n59\u201374\n\n# banner\n\ngathering functions beneath, 67\n\n# base classes\n\n290, 291\n\n# BDUF (Big Design Up Front)\n\n167\n\n# beans\n\nprivate variables manipulated, 100\u2013101\n\n# Beck, Kent\n\n3, 34, 71, 171, 252, 289, 296\n\n# behaviors\n\n288\u2013289\n\n# Big Design Up Front (BDUF)\n\n167\n\n# blank lines\n\nin code, 78\u201379\n\n# blocks\n\ncalling functions within, 35\n\n# Booch, Grady\n\n8\u20139\n\n# boolean\n\npassing into a function, 41\n\n# boolean arguments\n\n194, 288\n\n# boolean map\n\ndeleting, 224\n\n# boolean output\n\nof tests, 132\n\n# bound resources\n\n183, 184\n\n# boundaries\n\nclean, 120\n\nexploring and learning, 116\n\nincorrect behavior at, 289\n\nseparating known from unknown, 118\u2013119\n\n# boundary condition errors\n\n269\n\n# boundary conditions\n\nencapsulating, 304\n\ntesting, 314\n\n# boundary tests\n\neasing a migration, 118\n\n# \u201cBowling Game\u201d\n\n312\n\n# Boy Scout Rule\n\n14\u201315, 257\n\nfollowing, 284\n\nsatisfying, 265\n\n# broken windows metaphor\n\n8\n\n# bucket brigade\n\n303\n\n# BUILD-OPERATE-CHECK pattern\n\n127\n\n# builds\n\n287\n\n# business logic\n\nseparating from error handling, 109\n\n# bylines\n\n68\n\n# byte-manipulation libraries\n\n161, 162\u2013163", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2183, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19e86d68-b5b9-4294-b8c1-7ce09b4cdb94": {"__data__": {"id_": "19e86d68-b5b9-4294-b8c1-7ce09b4cdb94", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "32ff9c05-d355-4878-bcda-033c918cff99", "node_type": "4", "metadata": {}, "hash": "53024b89817a907ebf8aa30d6a473adba4fed1cd1a93b52367a7f37aa062648a", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n415\n\n# C\n\nThe C++ Programming Language, 7\n\n- calculations, breaking into intermediate values, 296\n- call stack, 324\n- Callable interface, 326\n- caller, cluttering, 104\n- calling hierarchy, 106\n- calls, avoiding chains of, 98\n- caring, for code, 10\n- Cartesian points, 42\n- CAS operation, as atomic, 328\n- change(s)\n- - isolating from, 149\u2013150\n- large number of very tiny, 213\n- organizing for, 147\u2013150\n- tests enabling, 124\n\nchange history, deleting, 270\n- check exceptions, in Java, 106\n- circular wait, 337, 338\u2013339\n- clarification, comments as, 57\n- clarity, 25, 26\n- class names, 25\n- classes\n- - cohesion of, 140\u2013141\n- creating for bigger concepts, 28\u201329\n- declaring instance variables, 81\n- enforcing design and business rules, 115\n- exposing internals of, 294\n- instrumenting into ConTest, 342\n- keeping small, 136, 175\n- minimizing the number of, 176\n- naming, 25, 138\n- nonthread-safe, 328\u2013329\n- as nouns of a language, 49\n- organization of, 136\n- organizing to reduce risk of change, 147\n- supporting advanced concurrency design, 183\n\nclassification, of errors, 107\n- clean boundaries, 120\n- clean code\n- - art of, 6\u20137\n- described, 7\u201312\n- writing, 6\u20137\n\nclean tests, 124\u2013127\n- cleanliness\n- - acquired sense of, 6\u20137\n- tied to tests, 9\n\ncleanup, of code, 14\u201315\n- clever names, 26\n- client, using two methods, 330\n- client code, connecting to a server, 318\n- client-based locking, 185, 329, 330\u2013332\n- clientScheduler, 320\n- client/server application, concurrency in, 317\u2013321\n- Client/Server nonthreaded, code for, 343\u2013346\n- client-server using threads, code changes, 346\u2013347\n- ClientTest.java, 318, 344\u2013346\n- closing braces, comments on, 67\u201368\n- Clover, 268, 269\n- clutter\n- - Javadocs as, 276\n- keeping free of, 293\n\ncode, 2", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1741, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3ac1895-dcf6-4e14-b78e-785ae48f7d3a": {"__data__": {"id_": "e3ac1895-dcf6-4e14-b78e-785ae48f7d3a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "018d53a3-b850-467f-8394-062ab5b55aaa", "node_type": "4", "metadata": {}, "hash": "ffe79dc180d6944830543785c4b09c1e5f5b843872675a1d7b340f697256e320", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n# code, continued\n\n- third-party, 114\u2013115\n- width of lines in, 85\u201390\n- at wrong level of abstraction, 290\u2013291\n\n# code bases\n\ndominated by error handling, 103\n\n# code changes\n\ncomments not always following, 54\n\n# code completion\n\nautomatic, 20\n\n# code coverage analysis\n\n254\u2013256\n\n# code instrumentation\n\n188\u2013190\n\n# \u201ccode sense\u201d\n\n6, 7\n\n# code smells\n\nlisting of, 285\u2013314\n\n# coding standard\n\n299\n\n# cohesion\n\n- of classes, 140\u2013141\n- maintaining, 141\u2013146\n\n# command line arguments\n\n193\u2013194\n\n# commands\n\nseparating from queries, 45\u201346\n\n# comment header standard\n\n55\u201356\n\n# comment headers\n\nreplacing, 70\n\n# commented-out code\n\n68\u201369, 287\n\n# commenting style\n\nexample of bad, 71\u201372\n\n# comments\n\n- amplifying importance of something, 59\n- bad, 59\u201374\n- deleting, 282\n- as failures, 54\n- good, 55\u201359\n- heuristics on, 286\u2013287\n- HTML, 69\n- inaccurate, 54\n- informative, 56\n- journal, 63\u201364\n- legal, 55\u201356\n- mandated, 63\n- misleading, 63\n- mumbling, 59\u201360\n- as a necessary evil, 53\u201359\n- noise, 64\u201366\n- not making up for bad code, 55\n- obsolete, 286\n- poorly written, 287\n- proper use of, 54\n- redundant, 60\u201362, 272, 275, 286\u2013287\n- restating the obvious, 64\n- separated from code, 54\n- TODO, 58\u201359\n- too much information in, 70\n- venting in, 65\n- writing, 287\n\n# \u201ccommunication gap\u201d\n\nminimizing, 168\n\n# Compare and Swap (CAS) operation\n\n327\u2013328\n\n# ComparisonCompactor module\n\n252\u2013265\n\n- defactored, 256\u2013261\n- final, 263\u2013265\n- interim, 261\u2013263\n- original code, 254\u2013256\n\n# compiler warnings\n\nturning off, 289\n\n# complex code\n\ndemonstrating failures in, 341\n\n# complexity\n\nmanaging, 139\u2013140\n\n# computer science (CS) terms\n\nusing for names, 27\n\n# concepts\n\n- keeping close to each other, 80\n- naming, 19\n- one word per, 26\n- separating at different levels, 290\n- spelling similar similarly, 20\n- vertical openness between, 78\u201379\n\n# conceptual affinity\n\nof code, 84\n\n# concerns\n\n- cross-cutting, 160\u2013161\n- separating, 154, 166, 178, 250\n\n# concrete classes\n\n149\n\n# concrete details\n\n149\n\n# concrete terms\n\n94\n\n# concurrency\n\n- defense principles, 180\u2013182\n- issues, 190\n- motives for adopting, 178\u2013179\n- myths and misconceptions about, 179\u2013180\n\n# concurrency code\n\n- compared to nonconcurrency-related code, 181\n- focusing, 321", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2216, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24042656-5d5e-41db-94eb-e75e01048125": {"__data__": {"id_": "24042656-5d5e-41db-94eb-e75e01048125", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c9444508-1c72-4010-94cb-24bd00277749", "node_type": "4", "metadata": {}, "hash": "d77db202f46681fcc0819cc913492a834f9e5e00bc2a153ce113fce01dd7cf1f", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n417\n\n# concurrent algorithms\n\n179\n\n# concurrent applications\n\npartition behavior, 183\n\n# concurrent code\n\n- breaking, 329\u2013333\n- defending from problems of, 180\n- flaws hiding in, 188\n\n# concurrent programming\n\n180\n\n# Concurrent Programming in Java: Design Principles and Patterns\n\n182, 342\n\n# concurrent programs\n\n178\n\n# concurrent update problems\n\n341\n\n# ConcurrentHashMap implementation\n\n183\n\n# conditionals\n\n- avoiding negative, 302\n- encapsulating, 257\u2013258, 301\n\n# configurable data\n\n306\n\n# configuration constants\n\n306\n\n# consequences\n\nwarning of, 58\n\n# consistency\n\n- in code, 292\n- of enums, 278\n- in names, 40\n\n# consistent conventions\n\n259\n\n# constants\n\n- versus enums, 308\u2013309\n- hiding, 308\n- inheriting, 271, 307\u2013308\n- keeping at the appropriate level, 83\n- leaving as raw numbers, 300\n- not inheriting, 307\u2013308\n- passing as symbols, 276\n- turning into enums, 275\u2013276\n\n# construction\n\n- moving all to main, 155, 156\n- separating with factory, 156\n- of a system, 154\n\n# constructor arguments\n\n157\n\n# constructors\n\noverloading, 25\n\n# consumer threads\n\n184\n\n# ConTest tool\n\n190, 342\n\n# context\n\n- adding meaningful, 27\u201329\n- not adding gratuitous, 29\u201330\n- providing with exceptions, 107\n\n# continuous readers\n\n184\n\n# control variables\n\nwithin loop statements, 80\u201381\n\n# convenient idioms\n\n155\n\n# convention(s)\n\n- following standard, 299\u2013300\n- over configuration, 164\n- structure over, 301\n- using consistent, 259\n\n# convoluted code\n\n175\n\n# copyright statements\n\n55\n\n# cosmic-rays\n\nSee one-offs\n\n# CountDownLatch class\n\n183\n\n# coupling\n\nSee also decoupling; temporal coupling; tight coupling\n\n- artificial, 293\n- hidden temporal, 302\u2013303\n- lack of, 150\n\n# coverage patterns\n\ntesting, 314\n\n# coverage tools\n\n313\n\n# \u201ccrisp abstraction\u201d\n\n8\u20139\n\n# cross-cutting concerns\n\n160\n\n# Cunningham, Ward\n\n11\u201312\n\n# cuteness\n\nin code, 26\n\n# D\n\n# dangling false argument\n\n294\n\n# data\n\n- abstraction, 93\u201395\n- copies of, 181\u2013182\n- encapsulation, 181\n- limiting the scope of, 181\n- sets processed in parallel, 179\n- types, 97, 101\n\n# data structures\n\nSee also structure(s)\n\n- compared to objects, 95, 97\n- defined, 95\n- interfaces representing, 94\n- treating Active Records as, 101\n\n# data transfer-objects (DTOs)\n\n100\u2013101, 160\n\n# database normal forms\n\n48\n\n# DateInterval enum\n\n282\u2013283\n\n# DAY enumeration\n\n277", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2304, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "617f93ac-5cd2-4650-846b-34709a8884db": {"__data__": {"id_": "617f93ac-5cd2-4650-846b-34709a8884db", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0b7be2ea-c511-434b-a3fd-a4ada747d45f", "node_type": "4", "metadata": {}, "hash": "ebd9989f44cbf80812b1e60761587816658f6ee15ae28a475805b1f90e82342b", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\nDayDate class, running SerialDate as, 271\n\nDayDateFactory, 273\u2013274\n\ndead code, 288, 292\n\ndead functions, 288\n\ndeadlock, 183, 335\u2013339\n\ndeadly embrace. See circular wait\n\ndebugging, finding deadlocks, 336\n\ndecision making, optimizing, 167\u2013168\n\ndecisions, postponing, 168\n\ndeclarations, unaligned, 87\u201388\n\nDECORATOR objects, 164\n\nDECORATOR pattern, 274\n\ndecoupled architecture, 167\n\ndecoupling, from construction details, 156\n\ndecoupling strategy, concurrency as, 178\n\ndefault constructor, deleting, 276\n\ndegradation, preventing, 14\n\ndeletions, as the majority of changes, 250\n\ndensity, vertical in code, 79\u201380\n\ndependencies\n\n- finding and breaking, 250\n- injecting, 157\n- logical, 282\n- making logical physical, 298\u2013299\n- between methods, 329\u2013333\n- between synchronized methods, 185\n\nDependency Injection (DI), 157\n\nDependency Inversion Principle (DIP), 15, 150\n\ndependency magnet, 47\n\ndependent functions, formatting, 82\u201383\n\nderivatives\n\n- base classes depending on, 291\n- base classes knowing about, 273\n- of the exception class, 48\n- moving set functions into, 232, 233\u2013235\n- pushing functionality into, 217\n\ndescription\n\n- of a class, 138\n- overloading the structure of code into, 310\n\ndescriptive names\n\n- choosing, 309\u2013310\n- using, 39\u201340\n\ndesign(s)\n\n- of concurrent algorithms, 179\n- minimally coupled, 167\n- principles of, 15\n\ndesign patterns, 290\n\ndetails, paying attention to, 8\n\nDI (Dependency Injection), 157\n\nDijkstra, Edsger, 48\n\ndining philosophers execution model, 184\u2013185\n\nDIP (Dependency Inversion Principle), 15, 150\n\ndirty code. See also bad code; messy code\n\ndirty code, cleaning, 200\n\ndirty tests, 123\n\ndisinformation, avoiding, 19\u201320\n\ndistance, vertical in code, 80\u201384\n\ndistinctions, making meaningful, 20\u201321\n\ndomain-specific languages (DSLs), 168\u2013169\n\ndomain-specific testing language, 127\n\nDoubleArgumentMarshaler class, 238\n\nDRY principle (Don't Repeat Yourself), 181, 289\n\nDTOs (data transfer objects), 100\u2013101, 160\n\ndummy scopes, 90\n\nduplicate if statements, 276\n\nduplication\n\n- of code, 48\n- in code, 289\u2013290\n- eliminating, 173\u2013175\n- focusing on, 10\n- forms of, 173, 290\n- reduction of, 48\n- strategies for eliminating, 48", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2156, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd000c8d-509c-46b7-b624-741c8843f25d": {"__data__": {"id_": "dd000c8d-509c-46b7-b624-741c8843f25d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "995f121e-a983-452d-9f11-c5efba5c2af2", "node_type": "4", "metadata": {}, "hash": "388002521fda3bada6cc907827ec354de488dcabad921df29ea2a7aa9bb1ff1c", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n419\n\n# D\n\ndyadic argument, 40\n\ndyadic functions, 42\n\ndynamic proxies, 161\n\n# E\n\ne, as a variable name, 22\n\nEclipse, 26\n\nedit sessions, playing back, 13\u201314\n\nefficiency, of code, 7\n\nEJB architecture, early as over-engineered, 167\n\nEJB standard, complete overhaul of, 164\n\nEJB2 beans, 160\n\nEJB3, Bank object rewritten in, 165\u2013166\n\n\u201celegant\u201d code, 7\n\nemergent design, 171\u2013176\n\nencapsulation, 136\n\nof boundary conditions, 304\n\nbreaking, 106\u2013107\n\nof conditionals, 301\n\nencodings, avoiding, 23\u201324, 312\u2013313\n\nentity bean, 158\u2013160\n\nenum(s)\n\nchanging MonthConstants to, 272\n\nusing, 308\u2013309\n\nenumeration, moving, 277\n\nenvironment, heuristics on, 287\n\nenvironment control system, 128\u2013129\n\nenvying, the scope of a class, 293\n\nerror check, hiding a side effect, 258\n\nError class, 47\u201348\n\nerror code constants, 198\u2013200\n\nerror codes\n\nimplying a class or enum, 47\u201348\n\npreferring exceptions to, 46\n\nreturning, 103\u2013104\n\nreusing old, 48\n\nseparating from the Args module, 242\u2013250\n\nerror detection, pushing to the edges, 109\n\nerror flags, 103\u2013104\n\nerror handling, 8, 47\u201348\n\nerror messages, 107, 250\n\nerror processing, testing, 238\u2013239\n\nerrorMessage method, 250\n\nerrors. See also boundary condition errors; spelling errors; string comparison errors\n\nclassifying, 107\n\nEvans, Eric, 311\n\nevents, 41\n\nexception classification, 107\n\nexception clauses, 107\u2013108\n\nexception management code, 223\n\nexceptions\n\ninstead of return codes, 103\u2013105\n\nnarrowing the type of, 105\u2013106\n\npreferring to error codes, 46\n\nproviding context with, 107\n\nseparating from Args, 242\u2013250\n\nthrowing, 104\u2013105, 194\n\nunchecked, 106\u2013107\n\nexecution, possible paths of, 321\u2013326\n\nexecution models, 183\u2013185\n\nExecutor framework, 326\u2013327\n\nExecutorClientScheduler.java, 321\n\nexplanation, of intent, 56\u201357\n\nexplanatory variables, 296\u2013297\n\nexplicitness, of code, 19\n\nexpressive code, 295\n\nexpressiveness\n\nin code, 10\u201311\n\nensuring, 175\u2013176\n\nExtract Method refactoring, 11\n\nExtreme Programming Adventures in C#, 10\n\nExtreme Programming Installed, 10\n\n\u201ceye-full\u201d, code fitting into, 79\u201380\n\n# F\n\nfactories, 155\u2013156\n\nfactory classes, 273\u2013275\n\nfailure\n\nto express ourselves in code, 54", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2118, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12223403-3614-47f2-89e4-0d287becc24c": {"__data__": {"id_": "12223403-3614-47f2-89e4-0d287becc24c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67801df2-70d8-409b-bea3-ab03e5b95c08", "node_type": "4", "metadata": {}, "hash": "0f4447fbb5e798b3f991f257900280d714bf73337fa6a7ecfdf0e80da7f433e5", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n# failure, continued\n\npatterns of, 314\n\ntolerating with no harm, 330\n\n# false argument\n\n294\n\n# fast tests\n\n132\n\n# fast-running threads\n\nstarving longer running, 183\n\n# fear\n\nof renaming, 30\n\n# Feathers, Michael\n\n10\n\n# feature envy\n\neliminating, 293\u2013294\n\nsmelling of, 278\n\n# file size\n\nin Java, 76\n\n# final keywords\n\n276\n\n# F.I.R.S.T. acronym\n\n132\u2013133\n\n# First Law\n\nof TDD, 122\n\n# FitNesse project\n\ncoding style for, 90\n\nfile sizes, 76, 77\n\nfunction in, 32\u201333\n\ninvoking all tests, 224\n\n# flag arguments\n\n41, 288\n\n# focussed code\n\n8\n\n# foreign code\n\nSee third-party code\n\n# formatting\n\nhorizontal, 85\u201390\n\npurpose of, 76\n\nUncle Bob\u2019s rules, 90\u201392\n\nvertical, 76\u201385\n\n# formatting style\n\nfor a team of developers, 90\n\n# Fortran\n\nforcing encodings, 23\n\n# Fowler, Martin\n\n285, 293\n\n# frame\n\n324\n\n# function arguments\n\n40\u201345\n\n# function call dependencies\n\n84\u201385\n\n# function headers\n\n70\n\n# function signature\n\n45\n\n# functionality\n\nplacement of, 295\u2013296\n\n# functions\n\nbreaking into smaller, 141\u2013146\n\ncalling within a block, 35\n\ndead, 288\n\ndefining private, 292\n\ndescending one level of abstraction, 304\u2013306\n\ndoing one thing, 35\u201336, 302\n\ndyadic, 42\n\neliminating extraneous if statements, 262\n\nestablishing the temporal nature of, 260\n\nformatting dependent, 82\u201383\n\ngathering beneath a banner, 67\n\nheuristics on, 288\n\nintention-revealing, 19\n\nkeeping small, 175\n\nlength of, 34\u201335\n\nmoving, 279\n\nnaming, 39, 297\n\nnumber of arguments in, 288\n\none level of abstraction per, 36\u201337\n\nin place of comments, 67\n\nrenaming for clarity, 258\n\nrewriting for clarity, 258\u2013259\n\nsections within, 36\n\nsmall as better, 34\n\nstructured programming with, 49\n\nunderstanding, 297\u2013298\n\nas verbs of a language, 49\n\nwriting, 49\n\n# futures\n\n326\n\n# Gamma, Eric\n\n252\n\n# general heuristics\n\n288\u2013307\n\n# generated byte-code\n\n180\n\n# generics\n\nimproving code readability, 115\n\n# get functions\n\n218\n\n# getBoolean function\n\n224\n\n# GETFIELD instruction\n\n325, 326\n\n# getNextId method\n\n326\n\n# getState function\n\n129\n\n# Gilbert, David\n\n267, 268\n\n# given-when-then convention\n\n130\n\n# glitches\n\nSee one-offs", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2059, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46761435-a68a-47fd-9758-3c4b10503962": {"__data__": {"id_": "46761435-a68a-47fd-9758-3c4b10503962", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6c03ea0e-fd65-4642-8717-66d44be4145e", "node_type": "4", "metadata": {}, "hash": "19c3e8e3a72daaf503573353f5188bbb0e9ab41b6daca0a5a93b8029e1e3d307", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n421\n\n# global setup strategy\n\n155\n\n# \u201cGod class\u201d\n\n136\u2013137\n\n# good comments\n\n55\u201359\n\n# goto statements\n\navoiding, 48, 49\n\n# grand redesign\n\n5\n\n# gratuitous context\n\n29\u201330\n\n# H\n\n# hand-coded instrumentation\n\n189\n\n# HashTable\n\n328\u2013329\n\n# headers\n\nSee comment headers; function headers\n\n# heuristics\n\ncross references of, 286, 409\n\ngeneral, 288\u2013307\n\nlisting of, 285\u2013314\n\n# hidden temporal coupling\n\n259, 302\u2013303\n\n# hidden things\n\nin a function, 44\n\n# hiding\n\nimplementation, 94\n\nstructures, 99\n\n# hierarchy of scopes\n\n88\n\n# HN\n\nSee Hungarian Notation\n\n# horizontal alignment\n\nof code, 87\u201388\n\n# horizontal formatting\n\n85\u201390\n\n# horizontal white space\n\n86\n\n# HTML\n\nin source code, 69\n\n# Hungarian Notation (HN)\n\n23\u201324, 295\n\n# Hunt, Andy\n\n8, 289\n\n# hybrid structures\n\n99\n\n# I\n\n# if statements\n\nduplicate, 276\n\neliminating, 262\n\n# if-else chain\n\nappearing again and again, 290\n\neliminating, 233\n\n# ignored tests\n\n313\n\n# implementation\n\nduplication of, 173\n\nencoding, 24\n\nexposing, 94\n\nhiding, 94\n\nwrapping an abstraction, 11\n\n# Implementation Patterns\n\n3, 296\n\n# implicity\n\nof code, 18\n\n# import lists\n\navoiding long, 307\n\nshortening in SerialDate, 270\n\n# imports\n\nas hard dependencies, 307\n\n# imprecision\n\nin code, 301\n\n# inaccurate comments\n\n54\n\n# inappropriate information\n\nin comments, 286\n\n# inappropriate static methods\n\n296\n\n# include method\n\n48\n\n# inconsistency\n\nin code, 292\n\n# inconsistent spellings\n\n20\n\n# incrementalism\n\n212\u2013214\n\n# indent level\n\nof a function, 35\n\n# indentation\n\nof code, 88\u201389\n\n# indentation rules\n\n89\n\n# independent tests\n\n132\n\n# information\n\ninappropriate, 286\n\ntoo much, 70, 291\u2013292\n\n# informative comments\n\n56\n\n# inheritance hierarchy\n\n308\n\n# inobvious connection\n\nbetween a comment and code, 70\n\n# input arguments\n\n41\n\n# instance variables in classes\n\ndeclaring, 81\n\nhiding the declaration of, 81\u201382\n\npassing as function arguments, 231\n\nproliferation of, 140\n\n# instrumented classes\n\n342\n\n# insufficient tests\n\n313\n\n# integer argument(s)\n\ndefining, 194\n\nintegrating, 224\u2013225\n\n# integer argument functionality\n\nmoving into ArgumentMarshaler, 215\u2013216", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2082, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cf9ac21a-cdb1-46af-803d-b6364d8d5183": {"__data__": {"id_": "cf9ac21a-cdb1-46af-803d-b6364d8d5183", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "47b89433-2c06-4f1b-84a7-26df87c3dc8b", "node_type": "4", "metadata": {}, "hash": "37996ea0041487e43d26ebb1036d2532c1aad888fb99a8f15aa728003ad71f45", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n# integer argument type, adding to Args\n\n212\n\n# integers, pattern of changes for\n\n220\n\n# IntelliJ\n\n26\n\n# intent\n\n# explaining in code\n\n55\n\n# explanation of\n\n56\u201357\n\n# obscured\n\n295\n\n# intention-revealing function\n\n19\n\n# intention-revealing names\n\n18\u201319\n\n# interface(s)\n\n# defining local or remote\n\n158\u2013160\n\n# encoding\n\n24\n\n# implementing\n\n149\u2013150\n\n# representing abstract concerns\n\n150\n\n# turning ArgumentMarshaler into\n\n237\n\n# well-defined\n\n291\u2013292\n\n# writing\n\n119\n\n# internal structures, objects hiding\n\n97\n\n# intersection, of domains\n\n160\n\n# intuition, not relying on\n\n289\n\n# inventor of C++\n\n7\n\n# Inversion of Control (IoC)\n\n157\n\n# InvocationHandler object\n\n162\n\n# I/O bound\n\n318\n\n# isolating, from change\n\n149\u2013150\n\n# isxxxArg methods\n\n221\u2013222\n\n# iterative process, refactoring as\n\n265\n\n# J\n\n# jar files, deploying derivatives and bases in\n\n291\n\n# Java\n\n# aspects or aspect-like mechanisms\n\n161\u2013166\n\n# heuristics on\n\n307\u2013309\n\n# as a wordy language\n\n200\n\n# Java 5, improvements for concurrent development\n\n182\u2013183\n\n# Java 5 Executor framework\n\n320\u2013321\n\n# Java 5 VM, nonblocking solutions in\n\n327\u2013328\n\n# Java AOP frameworks\n\n163\u2013166\n\n# Java programmers, encoding not needed\n\n24\n\n# Java proxies\n\n161\u2013163\n\n# Java source files\n\n76\u201377\n\n# javadocs\n\n# as clutter\n\n276\n\n# in nonpublic code\n\n71\n\n# preserving formatting in\n\n270\n\n# in public APIs\n\n59\n\n# requiring for every function\n\n63\n\n# java.util.concurrent package, collections in\n\n182\u2013183\n\n# JBoss AOP, proxies in\n\n163\n\n# JCommon library\n\n267\n\n# JCommon unit tests\n\n270\n\n# JDepend project\n\n76, 77\n\n# JDK proxy, providing persistence support\n\n161\u2013163\n\n# Jeffries, Ron\n\n10\u201311, 289\n\n# jiggling strategies\n\n190\n\n# JNDI lookups\n\n157\n\n# journal comments\n\n63\u201364\n\n# JUnit\n\n34\n\n# JUnit framework\n\n252\u2013265\n\n# Junit project\n\n76, 77\n\n# Just-In-Time Compiler\n\n180\n\n# keyword form, of a function name\n\n43\n\n# L\n\n# lower-case in variable names\n\n20\n\n# language design, art of programming as\n\n49\n\n# languages\n\n# appearing to be simple\n\n12\n\n# level of abstraction\n\n2\n\n# multiple in one source file\n\n288\n\n# multiples in a comment\n\n270\n\n# last-in, first-out (LIFO) data structure, operand stack as\n\n324\n\n# Law of Demeter\n\n97\u201398, 306", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2167, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b067de27-4e22-48d1-84df-c1619cac3234": {"__data__": {"id_": "b067de27-4e22-48d1-84df-c1619cac3234", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9844f360-9f03-40bd-b3c1-223c242990e4", "node_type": "4", "metadata": {}, "hash": "81e13f5d34879dd4d6e99eaa579cf32327d9cf3f00980c8276f5ad7cc2c8e9f2", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n423\n\n# LAZY INITIALIZATION/\n\nEVALUATION idiom, 154\n\nLAZY-INITIALIZATION, 157\n\nLea, Doug, 182, 342\n\nlearning tests, 116, 118\n\nLeBlanc\u2019s law, 4\n\nlegacy code, 307\n\nlegal comments, 55\u201356\n\nlevel of abstraction, 36\u201337\n\nlevels of detail, 99\n\nlexicon, having a consistent, 26\n\n# lines of code\n\nduplicating, 173\n\nwidth of, 85\n\n# list(s)\n\nof arguments, 43\n\nmeaning specific to programmers, 19\n\nreturning a predefined immutable, 110\n\n# literate code, 9\n\n# literate programming, 9\n\nLiterate Programming, 141\n\nlivelock, 183, 338\n\n# local comments, 69\u201370\n\n# local variables, 324\n\ndeclaring, 292\n\nat the top of each function, 80\n\n# lock & wait, 337, 338\n\n# locks, introducing, 185\n\n# log4j package, 116\u2013118\n\n# logical dependencies, 282, 298\u2013299\n\n# LOGO language, 36\n\n# long descriptive names, 39\n\n# long names, for long scopes, 312\n\n# loop counters, single-letter names for, 25\n\n# M\n\n# magic numbers\n\nobscuring intent, 295\n\nreplacing with named constants, 300\u2013301\n\n# main function, moving construction to, 155, 156\n\n# managers, role of, 6\n\n# mandated comments, 63\n\n# manual control, over a serial ID, 272\n\n# Map\n\nadding for ArgumentMarshaler, 221\n\nmethods of, 114\n\n# maps, breaking the use of, 222\u2013223\n\n# marshalling implementation, 214\u2013215\n\n# meaningful context, 27\u201329\n\n# member variables\n\nf prefix for, 257\n\nprefixing, 24\n\nrenaming for clarity, 259\n\n# mental mapping, avoiding, 25\n\n# messy code. See also bad code; dirty code\n\ntotal cost of owning, 4\u201312\n\n# method invocations, 324\n\n# method names, 25\n\n# methods\n\naffecting the order of execution, 188\n\ncalling a twin with a flag, 278\n\nchanging from static to instance, 280\n\nof classes, 140\n\ndependencies between, 329\u2013333\n\neliminating duplication between, 173\u2013174\n\nminimizing assert statements in, 176\n\nnaming, 25\n\ntests exposing bugs in, 269\n\n# minimal code, 9\n\n# misleading comments, 63\n\n# misplaced responsibility, 295\u2013296, 299\n\n# MOCK OBJECT, assigning, 155\n\n# monadic argument, 40\n\n# monadic forms, of arguments, 41\n\n# monads, converting dyads into, 42\n\n# Monte Carlo testing, 341\n\n# Month enum, 278\n\n# MonthConstants class, 271\n\n# multithread aware, 332\n\n# multithread-calculation, of throughput, 335", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2151, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c21e5da-b566-4586-a12c-6ac56df7e265": {"__data__": {"id_": "7c21e5da-b566-4586-a12c-6ac56df7e265", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ba7d344f-f6f7-41b7-85df-c695302d0034", "node_type": "4", "metadata": {}, "hash": "cf63e2c6995a36e3764efe4358ca4bcd317362c23a56455becae79da4f2ef543", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n# M\n\nmultithreaded code, 188, 339\u2013342\n\nmumbling, 59\u201360\n\nmutators, naming, 25\n\nmutual exclusion, 183, 336, 337\n\n# N\n\nnamed constants, replacing magic numbers, 300\u2013301\n\nname-length-challenged languages, 23\n\n# names\n\nabstractions, appropriate level of, 311\n\nchanging, 40\n\nchoosing, 175, 309\u2013310\n\nof classes, 270\u2013271\n\nclever, 26\n\ndescriptive, 39\u201340\n\nof functions, 297\n\nheuristics on, 309\u2013313\n\nimportance of, 309\u2013310\n\nintention-revealing, 18\u201319\n\nlength of corresponding to scope, 22\u201323\n\nlong names for long scopes, 312\n\nmaking unambiguous, 258\n\nproblem domain, 27\n\npronounceable, 21\u201322\n\nrules for creating, 18\u201330\n\nsearchable, 22\u201323\n\nshorter generally better than longer, 30\n\nsolution domain, 27\n\nwith subtle differences, 20\n\nunambiguous, 312\n\nat the wrong level of abstraction, 271\n\nnaming, classes, 138\n\nnaming conventions, as inferior to structures, 301\n\nnavigational methods, in Active Records, 101\n\nnear bugs, testing, 314\n\nnegative conditionals, avoiding, 302\n\nnegatives, 258\n\nnested structures, 46\n\nNewkirk, Jim, 116\n\nnewspaper metaphor, 77\u201378\n\nniladic argument, 40\n\nno preemption, 337\n\n# noise\n\ncomments, 64\u201366\n\nscary, 66\n\nwords, 21\n\nnomenclature, using standard, 311\u2013312\n\nnonblocking solutions, 327\u2013328\n\nnonconcurrency-related code, 181\n\nnoninformative names, 21\n\nnonlocal information, 69\u201370\n\nnonpublic code, javadocs in, 71\n\nnonstatic methods, preferred to static, 296\n\nnonthreaded code, getting working first, 187\n\nnonthread-safe classes, 328\u2013329\n\nnormal flow, 109\n\n# null\n\nnot passing into methods, 111\u2013112\n\nnot returning, 109\u2013110\n\npassed by a caller accidentally, 111\n\nnull detection logic, for ArgumentMarshaler, 214\n\nNullPointerException, 110, 111\n\nnumber-series naming, 21\n\n# O\n\nObject Oriented Analysis and Design with Applications, 8\n\nobject-oriented design, 15\n\n# objects\n\ncompared to data structures, 95, 97\n\ncompared to data types and procedures, 101\n\ncopying read-only, 181\n\ndefined, 95\n\nobscured intent, 295\n\nobsolete comments, 286\n\nobvious behavior, 288\u2013289\n\nobvious code, 12", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2002, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e25da57-83f1-482e-8026-799c93fa6a61": {"__data__": {"id_": "4e25da57-83f1-482e-8026-799c93fa6a61", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f870920f-f6d1-4250-9d25-21637308e1bc", "node_type": "4", "metadata": {}, "hash": "2ca1b9094386a39bc5031a2e28627c2589afd6aae911ac07f918d17e5a495a60", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n425\n\n# \u201cOnce and only once\u201d principle\n\n289\n\n# \u201cONE SWITCH\u201d rule\n\n299\n\n# one thing, functions doing\n\n35\u201336, 302\n\n# one-offs\n\n180, 187, 191\n\n# OO code\n\n97\n\n# OO design\n\n139\n\n# Open Closed Principle (OCP)\n\n15, 38\n\nby checked exceptions, 106\n\nsupporting, 149\n\n# operand stack\n\n324\n\n# operating systems, threading policies\n\n188\n\n# operators, precedence of\n\n86\n\n# optimistic locking\n\n327\n\n# optimizations, LAZY-EVALUATION\n\nas, 157\n\n# optimizing, decision making\n\n167\u2013168\n\n# orderings, calculating the possible\n\n322\u2013323\n\n# organization\n\nfor change, 147\u2013150\n\nof classes, 136\n\nmanaging complexity, 139\u2013140\n\n# outbound tests\n\nexercising an interface, 118\n\n# output arguments\n\n41, 288\n\navoiding, 45\n\nneed for disappearing, 45\n\n# outputs, arguments as\n\n45\n\n# overhead\n\nincurred by concurrency, 179\n\n# overloading\n\nof code with description, 310\n\n# P\n\n# paperback model\n\nas an academic model, 27\n\n# parameters\n\ntaken by instructions, 324\n\n# parse operation\n\nthrowing an exception, 220\n\n# partitioning\n\n250\n\n# paths of execution\n\n321\u2013326\n\n# pathways\n\nthrough critical sections, 188\n\n# pattern names\n\nusing standard, 175\n\n# patterns\n\nof failure, 314\n\nas one kind of standard, 311\n\n# performance\n\nof a client/server pair, 318\n\nconcurrency improving, 179\n\nof server-based locking, 333\n\n# permutations\n\ncalculating, 323\n\n# persistence\n\n160, 161\n\n# pessimistic locking\n\n327\n\n# phraseology\n\nin similar names, 40\n\n# physicalizing\n\na dependency, 299\n\n# Plain-Old Java Objects\n\nSee POJOs\n\n# platforms\n\nrunning threaded code, 188\n\n# pleasing code\n\n7\n\n# pluggable thread-based code\n\n187\n\n# POJO system\n\nagility provided by, 168\n\n# POJOs (Plain-Old Java Objects)\n\ncreating, 187\n\nimplementing business logic, 162\n\nseparating threaded-aware code, 190\n\nin Spring, 163\n\nwriting application domain logic, 166\n\n# polyadic argument\n\n40\n\n# polymorphic behavior\n\nof functions, 296\n\n# polymorphic changes\n\n96\u201397\n\n# polymorphism\n\n37, 299\n\n# position markers\n\n67\n\n# positives\n\nas easier to understand, 258\n\nexpressing conditionals as, 302\n\nof decisions, 301\n\n# precision\n\nas the point of all naming, 30\n\n# predicates\n\nnaming, 25\n\n# preemption\n\nbreaking, 338\n\n# prefixes\n\nfor member variables, 24\n\nas useless in today\u2019s environments, 312\u2013313\n\n# pre-increment operator\n\n++, 324, 325, 326\n\n# \u201cprequel\u201d\n\nthis book as, 15\n\n# principle of least surprise\n\n288\u2013289, 295\n\n# principles\n\nof design, 15\n\n# PrintPrimes program\n\ntranslation into Java, 141\n\n# private behavior\n\nisolating, 148\u2013149", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb446fd2-2c4e-48f4-b730-efdc07c08f14": {"__data__": {"id_": "fb446fd2-2c4e-48f4-b730-efdc07c08f14", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08995181-8794-4c15-9c69-5b43948bf058", "node_type": "4", "metadata": {}, "hash": "ed586b1782a632c1734aba524f4c0c32310849b655eda7ef27c8cdd3c400583a", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\nprivate functions, 292\n\nprivate method behavior, 147\n\nproblem domain names, 27\n\nprocedural code, 97\n\nprocedural shape example, 95\u201396\n\nprocedures, compared to objects, 101\n\nprocess function, repartitioning, 319\u2013320\n\nprocess method, I/O bound, 319\n\nprocesses, competing for resources, 184\n\nprocessor bound, code as, 318\n\nproducer consumer execution model, 184\n\nproducer threads, 184\n\nproduction environment, 127\u2013130\n\nproductivity, decreased by messy code, 4\n\nprofessional programmer, 25\n\nprofessional review, of code, 268\n\nprogrammers\n\n- as authors, 13\u201314\n- conundrum faced by, 6\n- responsibility for messes, 5\u20136\n- unprofessional, 5\u20136\n\nprogramming\n\n- defined, 2\n- structured, 48\u201349\n\nprograms, getting them to work, 201\n\npronounceable names, 21\u201322\n\nprotected variables, avoiding, 80\n\nproxies, drawbacks of, 163\n\npublic APIs, javadocs in, 59\n\npuns, avoiding, 26\u201327\n\nPUTFIELD instruction, as atomic, 325\n\nqueries, separating from commands, 45\u201346\n\nrandom jiggling, tests running, 190\n\nrange, including end-point dates in, 276\n\nreadability\n\n- of clean tests, 124\n- of code, 76\n- Dave Thomas on, 9\n- improving using generics, 115\n\nreadability perspective, 8\n\nreaders\n\n- of code, 13\u201314\n- continuous, 184\n\nreaders-writers execution model, 184\n\nreading\n\n- clean code, 8\n- code from top to bottom, 37\n- versus writing, 14\n\nreboots, as a lock up solution, 331\n\nrecommendations, in this book, 13\n\nredesign, demanded by the team, 5\n\nredundancy, of noise words, 21\n\nredundant comments, 60\u201362, 272, 275, 286\u2013287\n\nReentrantLock class, 183\n\nrefactored programs, as longer, 146\n\nrefactoring\n\n- Args, 212\n- code incrementally, 172\n- as an iterative process, 265\n- putting things in to take out, 233\n- test code, 127\n\nRefactoring (Fowler), 285\n\nrenaming, fear of, 30\n\nrepeatability, of concurrency bugs, 180\n\nrepeatable tests, 132\n\nrequirements, specifying, 2\n\nresetId, byte-code generated for, 324\u2013325\n\nresources\n\n- bound, 183\n- processes competing for, 184\n- threads agreeing on a global ordering of, 338\n\nresponsibilities\n\n- counting in classes, 136\n- definition of, 138\n- identifying, 139\n- misplaced, 295\u2013296, 299\n- splitting a program into main, 146\n\nreturn codes, using exceptions instead, 103\u2013105", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2191, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e3d0dcf-fd6c-4613-8dc3-235938b6781a": {"__data__": {"id_": "0e3d0dcf-fd6c-4613-8dc3-235938b6781a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f2da3132-2f1b-4d64-95fb-a07768620643", "node_type": "4", "metadata": {}, "hash": "6b32acabc8e0c7436fa9285e561918dda05db2e3474bcb8c7951437352ca4e4b", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\nreuse, 174\n\nrisk of change, reducing, 147\n\nrobust clear code, writing, 112\n\nrough drafts, writing, 200\n\nrunnable interface, 326\n\nrun-on expressions, 295\n\nrun-on journal entries, 63\u201364\n\nruntime logic, separating startup from, 154\n\n# S\n\nsafety mechanisms, overridden, 289\n\nscaling up, 157\u2013161\n\nscary noise, 66\n\nschema, of a class, 194\n\nschools of thought, about clean code, 12\u201313\n\nscissors rule, in C++, 81\n\nscope(s)\n\n- defined by exceptions, 105\n- dummy, 90\n- envying, 293\n- expanding and indenting, 89\n- hierarchy in a source file, 88\n- limiting for data, 181\n- names related to the length of, 22\u201323, 312\n- of shared variables, 333\n\nsearchable names, 22\u201323\n\nSecond Law, of TDD, 122\n\nsections, within functions, 36\n\nselector arguments, avoiding, 294\u2013295\n\nself validating tests, 132\n\nSemaphore class, 183\n\nsemicolon, making visible, 90\n\n\u201cserial number\u201d, SerialDate using, 271\n\nSerialDate class\n\n- making it right, 270\u2013284\n- naming of, 270\u2013271\n- refactoring, 267\u2013284\n\nSerialDateTests class, 268\n\nserialization, 272\n\nserver, threads created by, 319\u2013321\n\nserver application, 317\u2013318, 343\u2013344\n\nserver code, responsibilities of, 319\n\nserver-based locking, 329\n\n- as preferred, 332\u2013333\n- with synchronized methods, 185\n\n\u201cServlet\u201d model, of Web applications, 178\n\nServlets, synchronization problems, 182\n\nset functions, moving into appropriate derivatives, 232, 233\u2013235\n\nsetArgument, changing, 232\u2013233\n\nsetBoolean function, 217\n\nsetter methods, injecting dependencies, 157\n\nsetup strategy, 155\n\nSetupTeardownIncluder.java listing, 50\u201352\n\nshape classes, 95\u201396\n\nshared data, limiting access, 181\n\nshared variables\n\n- method updating, 328\n- reducing the scope of, 333\n\nshotgun approach, hand-coded instrumentation as, 189\n\nshut-down code, 186\n\nshutdowns, graceful, 186\n\nside effects\n\n- having none, 44\n- names describing, 313\n\nSimmons, Robert, 276\n\nsimple code, 10, 12\n\nSimple Design, rules of, 171\u2013176\n\nsimplicity, of code, 18, 19\n\nsingle assert rule, 130\u2013131\n\nsingle concepts, in each test function, 131\u2013132\n\nSingle Responsibility Principle (SRP), 15, 138\u2013140\n\n- applying, 321\n- breaking, 155\n- as a concurrency defense principle, 181\n- recognizing violations of, 174\n- server violating, 320", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2190, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "792dc495-5158-4f45-a31f-bf9093cefa25": {"__data__": {"id_": "792dc495-5158-4f45-a31f-bf9093cefa25", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c1d895d-fdd8-4a09-a7e6-dc4cfadee7b5", "node_type": "4", "metadata": {}, "hash": "e1239e0868651d3fab045e2ef63c0ed7014730bbd5ddc9ae6a9c0f84d027eb94", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n# Single Responsibility Principle (SRP), continued\n\n- Sql class violating, 147\n- supporting, 157\n- in test classes conforming to, 172\n- violating, 38\n\n- single value, ordered components of, 42\n- single-letter names, 22, 25\n- single-thread calculation, of throughput, 334\n- SINGLETON pattern, 274\n- small classes, 136\n- Smalltalk Best Practice Patterns, 296\n- smart programmer, 25\n- software project, maintenance of, 175\n- software systems. See also system(s) compared to physical systems, 158\n- SOLID class design principle, 150\n- solution domain names, 27\n- source code control systems, 64, 68, 69\n- source files compared to newspaper articles, 77\u201378\n- multiple languages in, 288\n- Sparkle program, 34\n- spawned threads, deadlocked, 186\n- special case objects, 110\n- SPECIAL CASE PATTERN, 109\n- specifications, purpose of, 2\n- spelling errors, correcting, 20\n- SpreadsheetDateFactory, 274\u2013275\n- Spring AOP, proxies in, 163\n- Spring Framework, 157\n- Spring model, following EJB3, 165\n- Spring V2.5 configuration file, 163\u2013164\n- spurious failures, 187\n- Sql class, changing, 147\u2013149\n- square root, as the iteration limit, 74\n- SRP. See Single Responsibility Principle\n- standard conventions, 299\u2013300\n- standard nomenclature, 175, 311\u2013312\n- standards, using wisely, 168\n- startup process, separating from runtime logic, 154\n- starvation, 183, 184, 338\n- static function, 279\n- static import, 308\n- static methods, inappropriate, 296\n- The Step-down Rule, 37\n- stories, implementing only today\u2019s, 158\n- STRATEGY pattern, 290\n- string arguments, 194, 208\u2013212, 214\u2013225\n- string comparison errors, 252\n- StringBuffers, 129\n- Stroustrup, Bjarne, 7\u20138\n- structure(s). See also data structures hiding, 99\n- hybrid, 99\n- making massive changes to, 212\n- over convention, 301\n- structured programming, 48\u201349\n- SuperDashboard class, 136\u2013137\n- swapping, as permutations, 323\n- switch statements burying, 37, 38\n- considering polymorphism before, 299\n- reasons to tolerate, 38\u201339\n- switch/case chain, 290\n- synchronization problems, avoiding with Servlets, 182\n- synchronized block, 334\n- synchronized keyword, 185\n- adding, 323\n- always acquiring a lock, 328\n- introducing a lock via, 331\n- protecting a critical section in code, 181\n- synchronized methods, 185\n- synchronizing, avoiding, 182\n- synthesis functions, 265\n- system(s). See also software systems file sizes of significant, 77\n- keeping running during development, 213\n- needing domain-specific, 168\n- system architecture, test driving, 166\u2013167", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2501, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea45eb46-4907-4c4a-8450-fea6464394bb": {"__data__": {"id_": "ea45eb46-4907-4c4a-8450-fea6464394bb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4749472b-2bd3-44d1-a077-f5c9d0763dc3", "node_type": "4", "metadata": {}, "hash": "79ed5dcddf2d4e37ebe9c3ded21b67e52080e7d4ba6321af5c87c3e01059396c", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n429\n\n# system failures\n\nnot ignoring one-offs, 187\n\n# system level\n\nstaying clean at, 154\n\n# system-wide information\n\nin a local comment, 69\u201370\n\n# T\n\n# tables\n\nmoving, 275\n\n# target deployment platforms\n\nrunning tests on, 341\n\n# task swapping\n\nencouraging, 188\n\n# TDD (Test Driven Development)\n\nbuilding logic, 106\n\nas fundamental discipline, 9\n\nlaws of, 122\u2013123\n\n# team rules\n\n90\n\n# teams\n\ncoding standard for every, 299\u2013300\n\nslowed by messy code, 4\n\n# technical names\n\nchoosing, 27\n\n# technical notes\n\nreserving comments for, 286\n\n# TEMPLATE METHOD pattern\n\naddressing duplication, 290\n\nremoving higher-level duplication, 174\u2013175\n\nusing, 130\n\n# temporal coupling\n\nexposing, 259\u2013260\n\nhidden, 302\u2013303\n\nside effect creating, 44\n\n# temporary variables\n\nexplaining, 279\u2013281\n\n# test cases\n\nadding to check arguments, 237\n\nin ComparisonCompactor, 252\u2013254\n\npatterns of failure, 269, 314\n\nturning off, 58\n\n# test code\n\n124, 127\n\n# TEST DOUBLE\n\nassigning, 155\n\n# Test Driven Development\n\nSee TDD\n\n# test driving\n\narchitecture, 166\u2013167\n\n# test environment\n\n127\u2013130\n\n# test functions\n\nsingle concepts in, 131\u2013132\n\n# test implementation\n\nof an interface, 150\n\n# test suite\n\nautomated, 213\n\nof unit tests, 124, 268\n\nverifying precise behavior, 146\n\n# testable systems\n\n172\n\n# test-driven development\n\nSee TDD\n\n# testing\n\narguments making harder, 40\n\nconstruction logic mixed with runtime, 155\n\n# testing language\n\ndomain-specific, 127\n\n# testNG project\n\n76, 77\n\n# tests\n\nclean, 124\u2013127\n\ncleanliness tied to, 9\n\ncommented out for SerialDate, 268\u2013270\n\ndirty, 123\n\nenabling the -ilities, 124\n\nfast, 132\n\nfast versus slow, 314\n\nheuristics on, 313\u2013314\n\nignored, 313\n\nindependent, 132\n\ninsufficient, 313\n\nkeeping clean, 123\u2013124\n\nminimizing assert statements in, 130\u2013131\n\nnot stopping trivial, 313\n\nrefactoring, 126\u2013127\n\nrepeatable, 132\n\nrequiring more than one step, 287\n\nrunning, 341\n\nself validating, 132\n\nsimple design running all, 172\n\nsuite of automated, 213\n\ntimely, 133\n\nwriting for multithreaded code, 339\u2013342\n\nwriting for threaded code, 186\u2013190\n\nwriting good, 122\u2013123", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2067, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad7c2bb4-c078-4055-89f2-e8a0d4c508f3": {"__data__": {"id_": "ad7c2bb4-c078-4055-89f2-e8a0d4c508f3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2864ab27-9984-4d55-b99a-14b236bdd164", "node_type": "4", "metadata": {}, "hash": "027e11136574dfaa4671a48888eed78312c160c19c3e559a72e1ee055ab3dc57", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n# Third Law, of TDD\n\n122\n\n# third-party code\n\n- integrating, 116\n- learning, 116\n- using, 114\u2013115\n- writing tests for, 116\n\n# this variable\n\n324\n\n# Thomas, Dave\n\n8, 9, 289\n\n# thread(s)\n\n- adding to a method, 322\n- interfering with each other, 330\n- making as independent as possible, 182\n- stepping on each other, 180, 326\n- taking resources from other threads, 338\n\n# thread management strategy\n\n320\n\n# thread pools\n\n326\n\n# thread-based code, testing\n\n342\n\n# threaded code\n\n- making pluggable, 187\n- making tunable, 187\u2013188\n- symptoms of bugs in, 187\n- testing, 186\u2013190\n- writing in Java 5, 182\u2013183\n\n# threading\n\n- adding to a client/server application, 319, 346\u2013347\n- problems in complex systems, 342\n\n# thread-safe collections\n\n182\u2013183, 329\n\n# throughput\n\n- causing starvation, 184\n- improving, 319\n- increasing, 333\u2013335\n- validating, 318\n\n# throws clause\n\n106\n\n# tiger team\n\n5\n\n# tight coupling\n\n172\n\n# time, taking to go fast\n\n6\n\n# Time and Money project\n\n76\n\n- file sizes, 77\n\n# timely tests\n\n133\n\n# timer program, testing\n\n121\u2013122\n\n# \u201cTO\u201d keyword\n\n36\n\n# TO paragraphs\n\n37\n\n# TODO comments\n\n58\u201359\n\n# tokens, used as magic numbers\n\n300\n\n# Tomcat project\n\n76, 77\n\n# tools\n\n- ConTest tool, 190, 342\n- coverage, 313\n- handling proxy boilerplate, 163\n- testing thread-based code, 342\n\n# train wrecks\n\n98\u201399\n\n# transformations, as return values\n\n41\n\n# transitive navigation, avoiding\n\n306\u2013307\n\n# triadic argument\n\n40\n\n# triads\n\n42\n\n# try blocks\n\n105\n\n# try/catch blocks\n\n46\u201347, 65\u201366\n\n# try-catch-finally statement\n\n105\u2013106\n\n# tunable threaded-based code\n\n187\u2013188\n\n# type encoding\n\n24\n\n# ubiquitous language\n\n311\u2013312\n\n# unambiguous names\n\n312\n\n# unchecked exceptions\n\n106\u2013107\n\n# unencapsulated conditional, encapsulating\n\n257\n\n# unit testing\n\nisolated as difficult, 160\n\n# unit tests\n\n124, 175, 268\n\n# unprofessional programming\n\n5\u20136\n\n# uppercase C, in variable names\n\n20\n\n# usability, of newspapers\n\n78\n\n# use, of a system\n\n154\n\n# users, handling concurrently\n\n179\n\n# validation, of throughput\n\n318\n\n# variable names, single-letter\n\n25", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2045, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f43984e9-f22c-4310-a4f5-d5b67fbb98ec": {"__data__": {"id_": "f43984e9-f22c-4310-a4f5-d5b67fbb98ec", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc1422c5-a532-4e5b-89ae-7697fcebe8a4", "node_type": "4", "metadata": {}, "hash": "087a0f8fd6b12b466b5dc853e64d80e5bdcba7384adeed84940e3ca53bd8f2ef", "class_name": "RelatedNodeInfo"}}, "text": "# Index\n\n431\n\n# variables\n\n- 1 based versus zero based, 261\n- declaring, 80, 81, 292\n- explaining temporary, 279\u2013281\n- explanatory, 296\u2013297\n- keeping private, 93\n- local, 292, 324\n- moving to a different class, 273\n- in place of comments, 67\n- promoting to instance variables of classes, 141\n- with unclear context, 28\n\n# venting\n\nin comments, 65\n\n# verbs\n\nkeywords and, 43\n\n# Version class\n\n139\n\n# versions\n\nnot deserializing across, 272\n\n# vertical density\n\nin code, 79\u201380\n\n# vertical distance\n\nin code, 80\u201384\n\n# vertical formatting\n\n76\u201385\n\n# vertical openness\n\nbetween concepts, 78\u201379\n\n# vertical ordering\n\nin code, 84\u201385\n\n# vertical separation\n\n292\n\n# wading\n\nthrough bad code, 3\n\n# Web containers\n\ndecoupling provided by, 178\n\n# what\n\ndecoupling from when, 178\n\n# white space\n\nuse of horizontal, 86\n\n# wildcards\n\n307\n\n# Working Effectively with Legacy Code\n\n10\n\n# \u201cworking\u201d programs\n\n201\n\n# workmanship\n\n176\n\n# wrappers\n\n108\n\n# wrapping\n\n108\n\n# writers\n\nstarvation of, 184\n\n# \u201cWriting Shy Code\u201d\n\n306\n\n# XML\n\n- deployment descriptors, 160\n- \u201cpolicy\u201d specified configuration files, 164", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1088, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"1d1baa03-c6f3-4610-9f77-b26b95123cba": {"node_ids": ["4edf47ec-0232-408c-81b5-9c568f136dc1"], "metadata": {}}, "9808ab77-f1a8-4683-9977-2dee8a4c5828": {"node_ids": ["6cdf88ba-6d4a-4302-826d-36a4f795d6b4"], "metadata": {}}, "ec42a72e-2280-432e-b782-163ce6301e3b": {"node_ids": ["401b5e3a-529d-4c89-9ffb-b96dbab40afd"], "metadata": {}}, "8df783f4-4076-4e92-a211-2e4e9dfb0064": {"node_ids": ["d1702043-0703-4b53-aed1-485de9ded984"], "metadata": {}}, "a047ec66-08e5-442b-8da6-1668c6a0cf3a": {"node_ids": ["6d24c795-71cc-4ff5-aaf6-9302ee84258b"], "metadata": {}}, "62d8c3cd-6b19-45eb-9b69-6d31ee7aec11": {"node_ids": ["cebda661-911c-4a63-bd1b-13022d2d4550"], "metadata": {}}, "dcf19d7d-c990-4b78-a44b-e0005da5b489": {"node_ids": ["31d396ee-c23b-468d-93b1-a0e5ba650687"], "metadata": {}}, "5b61e905-33ed-43bd-add9-00ff3b9662de": {"node_ids": ["6793dbb9-4ee4-4015-a244-75a314ac4999"], "metadata": {}}, "5a149286-00a5-4fb2-bd99-f417f937320f": {"node_ids": ["931c2ee1-45bc-432e-8f38-bf8affc19333"], "metadata": {}}, "fdeab5b5-eeba-4a4c-afe1-d43a0ff5309d": {"node_ids": ["97ff9ddb-56e7-445f-9765-16c09d3d72f4"], "metadata": {}}, "e44861d8-a1f0-477a-bb0d-69916afee46b": {"node_ids": ["8961aeaa-b613-4494-8df0-875d44765fcb"], "metadata": {}}, "a618e9d7-a0d3-4408-af49-5f17200e5b74": {"node_ids": ["2f032b13-2695-40cc-903a-989808b7ee01"], "metadata": {}}, "0796285b-5e13-4871-870a-d739897a79b6": {"node_ids": ["aef3ef00-7e3e-44dd-b6ff-3e5079a91d31"], "metadata": {}}, "e6f56868-b7de-4860-974a-14d04b02c48f": {"node_ids": ["587a3e00-0524-4f3f-a2a0-d180508caf26"], "metadata": {}}, "26b73214-5ba0-4609-a439-809b7ac80bf3": {"node_ids": ["eab82e75-7627-48dd-9c28-a89bcab74544"], "metadata": {}}, "1aa209e7-029d-4f20-a4e0-9e9fad7e786a": {"node_ids": ["917bb0f4-4303-4bd2-954a-d8ac85b728b5"], "metadata": {}}, "0073e0e8-87a2-454f-adaf-9ee3b8f4c8f3": {"node_ids": ["5f98cca6-229f-4a40-97b4-2ed3398b71ca"], "metadata": {}}, "7467d371-e5e0-476b-908c-99441d384750": {"node_ids": ["6dc7cae4-7896-404b-98df-51b16dc0f02b"], "metadata": {}}, "3d268c10-d111-44da-a5b7-36260a32f9e0": {"node_ids": ["da2985b1-99c6-424c-a0d5-49369adda818"], "metadata": {}}, "1a22c53f-a0b1-414a-a8f6-c1f0dc0317e9": {"node_ids": ["452c4bdc-050e-4ae2-972a-8976bfc974bf"], "metadata": {}}, "5bd02a5e-5b8d-46bc-9f1f-077c3bf246ec": {"node_ids": ["057aa515-f7d0-4006-9913-67320b4ea8e9"], "metadata": {}}, "ad9f9ced-3c86-4231-9403-656847cfecdd": {"node_ids": ["9cc4b6ba-71ae-4b93-bac6-2c22a4ca9ed8"], "metadata": {}}, "ad1c0b89-a961-4650-9467-b6140034e9fe": {"node_ids": ["f0936cab-9a4f-47be-b561-d51a1f1ffc3c"], "metadata": {}}, "b9bbffe7-3ee9-4955-b789-cf151d2bcc60": {"node_ids": ["b585a0ab-b920-4a44-9ab4-38ecf810d352"], "metadata": {}}, "6f5b9b4e-8d0f-448b-9bef-cc864f665904": {"node_ids": ["196131fe-4252-4d62-a6cf-ffbf94509cea"], "metadata": {}}, "cf89e281-a52e-491a-8daf-0067f9c31db2": {"node_ids": ["641ffb4a-d1af-4bc2-8a78-4ccb6f7b23ea"], "metadata": {}}, "f72ce39d-643c-4d6e-91c9-a6eef09613ea": {"node_ids": ["8f278069-92ba-4a4d-8416-585add7f025a"], "metadata": {}}, "2f7d3b5c-ba36-4d9c-94ed-2f1e3b0ad19b": {"node_ids": ["2a4aee53-5d7a-4f50-a2bc-b713b7bf14e3"], "metadata": {}}, "cc017129-6eb9-491b-83de-ba38983a3b99": {"node_ids": ["c312d7a1-1d1c-4684-a748-4384e7d37db0"], "metadata": {}}, "2796cf5a-2555-42e9-b7bd-8ce00b87fc14": {"node_ids": ["bd6ffabb-1d46-4f5e-9b7e-6ea5285c659b"], "metadata": {}}, "ca266c4e-113e-43d5-9611-f06295838240": {"node_ids": ["3a98b9b6-17e3-4f35-a768-aaa2437cb60f"], "metadata": {}}, "3c126f03-965e-46d7-a966-526786046d75": {"node_ids": ["f421d97e-8688-467d-a7d1-918ef9aa3834"], "metadata": {}}, "b4e758e8-ffc5-4fe5-beda-563eb996f5f2": {"node_ids": ["c826acf3-8636-4e08-b778-a4e981b1c885"], "metadata": {}}, "b6f0812d-0866-4b88-b491-9d9c066ee0cd": {"node_ids": ["11c0225e-96ca-4d6b-864b-00aaf6167fba"], "metadata": {}}, "d7617009-4e33-432e-a01f-181c598e4248": {"node_ids": ["4cbfece1-da10-4430-94f0-950f1aaaafef"], "metadata": {}}, "eb021ee3-d0c1-453a-84ef-e708fc9e23fa": {"node_ids": ["22d3b465-de61-45ca-8b36-a43421fe07b7"], "metadata": {}}, "0a046843-5ab8-427b-9c82-97899a3f1204": {"node_ids": ["d76b5db4-4965-4488-baae-ea1d108ab655"], "metadata": {}}, "bf3f73ca-1574-43b6-84d0-0f582c6806a7": {"node_ids": ["8e0b8809-d245-4a9e-823e-b5f11f1453ed"], "metadata": {}}, "3f4807ea-416b-4904-99bf-65d91415dbf7": {"node_ids": ["91d056a4-5bc6-4f3c-a0a7-93b16fc04e25"], "metadata": {}}, "2daf754d-4d3a-4f5b-86b7-206b2ec4f84e": {"node_ids": ["c5f7a56e-ec41-4658-b466-b0e340084449"], "metadata": {}}, "b753db42-87df-4063-a41e-aef6170e3892": {"node_ids": ["0c421d2d-5eaf-4904-9fe5-041892be888a"], "metadata": {}}, "18e2c49b-f4ab-425e-b95e-fe31962a2dc7": {"node_ids": ["32332606-5189-4448-bef2-9ccb1dd0c5ba"], "metadata": {}}, "177a7f78-a4dd-4254-b67f-2e15e5cde805": {"node_ids": ["a0c20bde-4697-4c20-85f0-9539a0fd3130"], "metadata": {}}, "c184216a-01e5-409e-b418-4ec2beadd0fe": {"node_ids": ["d9b54a71-b6fb-43e9-8aa4-3ac233c9dbdf"], "metadata": {}}, "181ec876-e228-4fc5-804e-d39fb195fd62": {"node_ids": ["489a958a-34e4-489f-aa1b-a186f7788754"], "metadata": {}}, "5257f577-289f-4647-aa6e-1452a72eb79a": {"node_ids": ["96b47de9-42a9-4525-9652-d62d182f5efa"], "metadata": {}}, "f3d390bb-d139-4dbc-8424-d37ede41a03c": {"node_ids": ["12128c5b-1244-4dd1-948f-55e5aed44f69"], "metadata": {}}, "6c0642f6-2001-49b0-b1da-e64b27053a62": {"node_ids": ["b654461a-13ea-4346-9e0a-085bc461b50b"], "metadata": {}}, "e85178e8-cb49-4ab7-8689-f52473bcc995": {"node_ids": ["d6bf80d4-9661-491f-b795-5dbb8611bc7b"], "metadata": {}}, "829bced3-c1f2-43bc-92fb-38e3307f2f3f": {"node_ids": ["b001ed2b-1c9d-4a23-9285-69b21166897e"], "metadata": {}}, "386a0e8f-64ec-479f-9ee6-a4f4bd6537ed": {"node_ids": ["42290184-daf4-4e9c-842a-cdbfd3a77974"], "metadata": {}}, "632c4dd1-7773-4864-b24f-7c34610c32ae": {"node_ids": ["8e889f6b-b42a-4fda-900b-3e17ea950b7e"], "metadata": {}}, "40f45d5c-e60f-4b20-9265-0f4306d35f27": {"node_ids": ["c6b7e307-eeec-40e9-8f69-83e0b7f068dc"], "metadata": {}}, "6b2711c8-4963-4ad7-9f84-6520e8d477eb": {"node_ids": ["d4ca1b0a-500b-4476-9a83-3276567bd392"], "metadata": {}}, "05204725-89af-40b6-939f-1036b943b279": {"node_ids": ["23bd8f2f-c6a5-40b9-8bc0-b1ad880e7c3a"], "metadata": {}}, "ab2b811a-9134-4cc1-a78e-6a25150b8ef6": {"node_ids": ["8b06276b-ebf4-4f56-9780-bdd18b72de14"], "metadata": {}}, "7220c50f-5d88-45ec-8b10-9df96de543dd": {"node_ids": ["05872280-e21f-4981-bbbd-1f25592546a3"], "metadata": {}}, "c2fe4195-c69f-40ee-998c-482f53041309": {"node_ids": ["61714b55-fcbe-4deb-8bb1-5e5db11a251f"], "metadata": {}}, "9f1dfaa4-39d6-4cb4-8314-c9a3f0e2414b": {"node_ids": ["40eef337-d053-47bd-a894-91e49b327fbb"], "metadata": {}}, "c81fb79e-fa03-4623-b4dd-3b66c8d99f34": {"node_ids": ["014e93b4-52eb-4fcc-9be0-6743b1bc7324"], "metadata": {}}, "1e351f9b-0751-4d08-925a-b8d31cb0b459": {"node_ids": ["e740443a-7273-4fdd-8769-3d0bcfc4a878"], "metadata": {}}, "0fd7efd7-c004-42d3-bf0f-852f6fa85f2b": {"node_ids": ["24dfebc2-3b46-4b4a-a056-b886ceeb4b21"], "metadata": {}}, "176bd1e5-ef37-47ee-aead-5c13208adca4": {"node_ids": ["c6f99af6-ae92-4479-b733-6e9290ed4080"], "metadata": {}}, "923ad0da-023f-4746-a71b-fb4797a3966f": {"node_ids": ["e249ad4b-db17-4109-a770-0695bfcff43b"], "metadata": {}}, "813af12d-03eb-4008-9759-dd0351de5b8a": {"node_ids": ["ee98a5ed-3f1e-4a48-a166-0d00524fdf65"], "metadata": {}}, "c2c81484-d2b2-4ee4-bf20-6bd2c584649f": {"node_ids": ["d5cae16c-59f4-4dcb-b1ec-8956958be84e"], "metadata": {}}, "ceffbeec-91af-4bb9-b96f-e3887e270b05": {"node_ids": ["3a6eb1bc-31e0-4367-a79d-e8f7fd70aaf6"], "metadata": {}}, "c71c2253-051c-4134-b3bc-38034913fdfa": {"node_ids": ["bc9fb91b-e3ab-4a85-8d6b-d7de88910b9c"], "metadata": {}}, "004103bd-da0c-4e66-9a80-4004789b6d8b": {"node_ids": ["146c47e8-2e2c-43d4-8296-b315db068a02"], "metadata": {}}, "12e9ffce-bf9c-4bcf-b425-be6a36225461": {"node_ids": ["0decbf09-ee2b-4319-8289-530fd171b8d0"], "metadata": {}}, "670691da-1af7-4a7e-8eaf-303497c79377": {"node_ids": ["3eaf3ec7-a8fe-4c5b-8cbe-553cce0707d8"], "metadata": {}}, "46173870-5ae4-4ae0-8d4a-09c3effe2ca5": {"node_ids": ["2d820291-7456-429a-a591-4a541f2fe340"], "metadata": {}}, "9600eabe-14f3-4a6a-b7b6-ae0f158c1794": {"node_ids": ["8b3ecda9-f2b1-4a9f-b6eb-957bb72380a3"], "metadata": {}}, "2e835c08-7ce7-4684-a11b-16299b20f791": {"node_ids": ["af83d168-1a9e-4679-9a50-93adbc0893aa"], "metadata": {}}, "1eac3ece-fb94-4721-a205-5c11b6da8905": {"node_ids": ["cbd7e16d-9c19-4672-8223-247e7d2c95f4"], "metadata": {}}, "b0c03699-ef6b-41be-bce9-ba88c27984ae": {"node_ids": ["225f78b1-73d2-4b98-85eb-96b7d3859b47"], "metadata": {}}, "d2f14d70-ac9e-433b-9135-598d8ee0d05b": {"node_ids": ["ad3fada0-46f9-4615-9334-bae6c63c3c76"], "metadata": {}}, "54aff9d7-30e0-418a-9163-0f3af7f7c4f6": {"node_ids": ["eebb379e-b1a8-424d-878e-6199f178f4ee"], "metadata": {}}, "f39da648-ebd1-4c28-8159-9a91852f37cd": {"node_ids": ["b5ae41f7-e338-4baf-863c-601d32317223"], "metadata": {}}, "93050b94-e078-4e05-a9aa-02f79c8abdb0": {"node_ids": ["91c28aa2-beb6-4df8-b076-87ff1e59ee52"], "metadata": {}}, "49916695-9d7b-49df-bada-5f3dadb8c7ff": {"node_ids": ["10468574-c4e4-44e7-b364-d36567ece64f"], "metadata": {}}, "c90dc745-ba15-402e-b8f9-9ae178e9d9d8": {"node_ids": ["7e0f799b-3b04-4118-bd58-a1401a098f84"], "metadata": {}}, "cfebe566-186c-4760-b71a-7a5e37d02e67": {"node_ids": ["ac91eba3-2021-45c9-98e8-083b51af108b"], "metadata": {}}, "9db335d0-4728-472e-a920-628afe85bc1a": {"node_ids": ["df9e6cc1-17a8-4367-958a-39a15efbec2f"], "metadata": {}}, "b8527c9b-5002-421e-9c35-2b57e6f34bcf": {"node_ids": ["7c606c85-bab4-44bd-a232-dcce6ec56f72"], "metadata": {}}, "f2760dbf-f3cf-446b-94ff-16f231899bd8": {"node_ids": ["471bd6be-d6ef-41b2-9ca6-2b80207ff410"], "metadata": {}}, "e0987405-a52e-4138-9a79-12eadeb1ffac": {"node_ids": ["84b49567-c626-4b89-b5fc-7b0139cfdcc9"], "metadata": {}}, "c194c1c7-df20-41f0-bdc7-f0f7acc90c2e": {"node_ids": ["e7100307-d031-456b-96e0-a232b373fda0"], "metadata": {}}, "52db4253-9d84-443d-8fc0-2aecbec1ca4d": {"node_ids": ["fab76254-3ec2-40b5-9e94-9690347d37c6"], "metadata": {}}, "6f0600a8-ab8f-4ca4-bfba-47660401cd3a": {"node_ids": ["c3333456-f3ad-481e-aeb4-0f5c9a7b8ef0"], "metadata": {}}, "53bd4853-e1e1-4036-b094-5631df681b40": {"node_ids": ["f4d109c4-8aae-480f-b5f2-b323e3856845"], "metadata": {}}, "2b06a8ec-c863-4e57-9a96-a8f7a893ea22": {"node_ids": ["d1e158d1-e15c-41c6-aca6-5fb7285880bf"], "metadata": {}}, "a9c7e8fb-02b2-49d8-8c2b-a56d1010d872": {"node_ids": ["6a824b90-5eee-491a-b5c4-a717cd09e27f"], "metadata": {}}, "a9660f39-b3b4-49db-954c-b857cc6f0f40": {"node_ids": ["7d4227ac-ab54-408a-b072-d4db28184974"], "metadata": {}}, "b27a1f4e-35ad-4bb4-af7e-7c86c2790ef1": {"node_ids": ["f2c32ab1-65e0-4fdc-bbfb-9120a986703f"], "metadata": {}}, "e326d52c-8e18-4e7f-9586-d6cd8c90bfa7": {"node_ids": ["189d0ca4-3521-4a78-b955-7946396cbdf4"], "metadata": {}}, "d20a1274-cdb3-484d-aa5c-304940004d14": {"node_ids": ["25f01218-a3dc-4e61-ada5-64fbcada32d9"], "metadata": {}}, "ee74f456-c6a2-4829-bb5f-65e62ac7dd35": {"node_ids": ["241cda35-f1f0-4b74-8232-605992efd8a3"], "metadata": {}}, "85f3d880-c9ae-4e6e-a7b1-121123bdf14e": {"node_ids": ["e75a3e95-e160-43e8-932f-ac4521d2e70a"], "metadata": {}}, "571b071c-a310-4eac-84cd-52948f04c910": {"node_ids": ["844f3e85-fdf1-4ec0-ae9c-77072429fe40"], "metadata": {}}, "b443310a-4f93-40f2-b7fb-04e488b2c072": {"node_ids": ["c7c7b346-4c38-45fd-b379-88dcaa1c4cba"], "metadata": {}}, "10bb00df-702d-4ceb-975c-ab679dee4e14": {"node_ids": ["ddb2a544-a164-413d-b857-ee82a481a5f4"], "metadata": {}}, "7a315e4f-d594-44ed-a1cb-c30e91739750": {"node_ids": ["835f644f-447f-4c66-bc09-67d39d3e086d"], "metadata": {}}, "ffc8f1ed-00a7-428f-b1a2-dbebe437b11e": {"node_ids": ["d5ef895c-dc9f-48fc-8fb1-e606c181ecce"], "metadata": {}}, "bd2b71fa-97c3-4bbd-a68e-ffbe9f811f6d": {"node_ids": ["af16708a-ecc6-4adb-bf54-e24a578803a7"], "metadata": {}}, "0f43862d-bc29-4102-9fb5-7602315cd86b": {"node_ids": ["e5d97c0e-f7b6-4eb2-8924-f95401e538e5"], "metadata": {}}, "81f67177-d6d1-45df-9ff3-acb6bbd0d302": {"node_ids": ["17d0af34-8e8c-47ef-acc8-27e908e551ad"], "metadata": {}}, "6b7491cd-e336-479f-a652-d9b5faecb704": {"node_ids": ["36008bfe-7cb3-40fb-b914-df9eec7a85f7"], "metadata": {}}, "11e8bc8c-8b5c-4137-93bf-d5bb2190c667": {"node_ids": ["500fcaf7-ef28-428c-8952-b7e152530a57"], "metadata": {}}, "9a4cfe53-ffe1-4560-89ae-27e94dd16801": {"node_ids": ["75f48f55-93d5-4c7e-95d0-44a10fa9904d"], "metadata": {}}, "ca0db829-8805-471d-a5c2-6fd6cbc8078a": {"node_ids": ["3c07422f-f740-4286-b5fc-c866487f55b9"], "metadata": {}}, "0137af98-7e46-448c-9167-349760428b08": {"node_ids": ["0bd3eb75-d412-49f6-a906-83334f8ef17b"], "metadata": {}}, "78bacbc2-bcb1-4156-a428-a3b4adb1db70": {"node_ids": ["edfb05f0-2ca7-427b-b38e-4293ea0c6c67"], "metadata": {}}, "b33622c4-5f9c-4b27-ab0a-8007add8120a": {"node_ids": ["5b151c28-70a2-4632-b05a-9896e093fa0a"], "metadata": {}}, "321e99a4-6c1c-4c76-a457-6a528e445ad9": {"node_ids": ["29b3a83b-4da1-4d4b-bb78-77b18dfe533c"], "metadata": {}}, "8dcda919-bcdd-4d0e-80af-596b5a267512": {"node_ids": ["b176278f-1af1-4ae7-91bb-42fad0dbf716"], "metadata": {}}, "26c3d0e9-f115-4c3e-a05b-4258ca854214": {"node_ids": ["e24781ee-a5a7-42ea-8e3e-71748215d076"], "metadata": {}}, "3e628e7b-9a34-48be-b0f0-5ad3fcbe94b0": {"node_ids": ["4c657eaf-84f1-4c9e-a0bc-8b97e12e607a"], "metadata": {}}, "e0da973f-01ab-4c4f-a947-7b40b5219b32": {"node_ids": ["af55ae02-fbe3-45d5-8c55-330767d238bc"], "metadata": {}}, "75290870-f1dc-443e-be2c-fa9c0e5f7bcb": {"node_ids": ["6cf0c576-72da-4e0f-a3f7-071fe5f713c9"], "metadata": {}}, "5f3cd516-ecb6-4888-89f7-13af4b0df74d": {"node_ids": ["dfa97452-3007-4300-ab3c-6417540ada2e"], "metadata": {}}, "3ce2a25b-3cde-4aa2-86d0-4be2dbbc22ca": {"node_ids": ["84b0c7a5-8ff6-4897-b606-cc7bc770592d"], "metadata": {}}, "2f4d65f6-4127-4109-909a-59e1fe2e0861": {"node_ids": ["d58b6ef9-2b06-48aa-b98a-573e1e00c309"], "metadata": {}}, "372d1996-de06-426e-a430-a6b6cad0476a": {"node_ids": ["a7d2e7e5-7cf5-4080-b1b8-8246deeca572"], "metadata": {}}, "29a96a0d-8aa9-4fa9-812d-839eba70911a": {"node_ids": ["c561f292-db90-4ed9-a7a2-d7c8705e00ce"], "metadata": {}}, "07e6cd1d-6d63-45dd-8b7d-fd48c734ab62": {"node_ids": ["79463e93-cedf-4c23-8710-92d8d0159ea9"], "metadata": {}}, "dff9e31a-5d34-4e92-b210-db7da99093fc": {"node_ids": ["c39eb48b-6ece-4c6f-9c37-c69a118de154"], "metadata": {}}, "ebb9d183-cfcd-4342-9716-afddeaa1302e": {"node_ids": ["a6d1f671-0a4a-4324-8c29-5895503611b7"], "metadata": {}}, "431f2daa-f594-4600-b8e8-e0734771e623": {"node_ids": ["6622d65e-1e2f-490c-827c-fea83ee1e280"], "metadata": {}}, "4b9a1e04-0615-4171-8829-ed2e9e54065c": {"node_ids": ["803713a0-3968-42c5-b39e-38a2546ebfbe"], "metadata": {}}, "91a542e5-0019-4902-8741-69c75eed8b25": {"node_ids": ["6c052e3b-4b34-4668-99f0-38d67db95935"], "metadata": {}}, "d3cbe5a0-fab5-4a33-bb62-0dd43731453b": {"node_ids": ["3044002f-abf0-4ebd-ac21-f9ffea7a52c4"], "metadata": {}}, "94854d01-4bfa-455c-bdd4-4a009a2d89bd": {"node_ids": ["71bfc9e5-9ae3-4dea-93f4-b83860251771"], "metadata": {}}, "19d6beb9-c634-497d-beea-109a48d6890d": {"node_ids": ["5ae9eac2-b2b8-44b7-9db7-d3db0853d180"], "metadata": {}}, "e3c51dd3-04c3-47e1-8192-db54d888af92": {"node_ids": ["037586cb-4709-4132-b37f-e0f69b7665b7"], "metadata": {}}, "d4790dfc-1083-4506-abdc-c6d40bf9241f": {"node_ids": ["f4b3115e-043d-48e8-bac1-d121bcaa65c4"], "metadata": {}}, "479799ab-7d82-4297-a293-c918a11f68cf": {"node_ids": ["c5b177f1-e2a1-4ae7-8d18-181ff29c69e9"], "metadata": {}}, "011a7eb2-2844-431e-91da-a45974adb667": {"node_ids": ["8fc3a558-29f3-4166-9f59-f4ba4f8d9253"], "metadata": {}}, "eca1e77c-4f7f-46ca-aa8d-553e52ad8b61": {"node_ids": ["9546141b-09b5-483a-b84d-1e6ef3142cb0"], "metadata": {}}, "4bbfbd84-2c41-4d7b-879e-bd7045aa5bf8": {"node_ids": ["34705267-76d4-404d-8f1d-707368fed4bc"], "metadata": {}}, "9ed6479c-2835-4ef2-829d-e0a75ef0b6f0": {"node_ids": ["000a83bc-3b81-46a3-8a5a-74f6771da929"], "metadata": {}}, "d8ac74df-e1ec-4a78-9d40-694767d6b21a": {"node_ids": ["27f4fe41-104a-44c6-829e-a9f14834f2a8"], "metadata": {}}, "16a0cf89-e092-4225-9cd7-e321acac1554": {"node_ids": ["afcd8498-985d-4636-a683-d0f3e9b1d3db"], "metadata": {}}, "134a497a-cfe0-43c5-a48e-420144c08973": {"node_ids": ["3bc74ce6-fff7-42b4-8611-aba0dca9aedf"], "metadata": {}}, "a545d0f9-0fcd-4d2d-9fe6-04ae256d4c96": {"node_ids": ["2d5b9ef2-98ee-4d09-b3ee-85d80c6415d1"], "metadata": {}}, "5e5e4196-561a-4c8f-95ae-aa82d5505471": {"node_ids": ["d8275205-b75e-4273-82e6-cd50f87dd643"], "metadata": {}}, "fd6c5776-8c62-4d7c-990d-c4321538235f": {"node_ids": ["5bec92b5-ef8d-4ba7-96b4-adc2c39fafaf"], "metadata": {}}, "9d56d754-a5cb-4b13-ac5d-13a4ffacd7eb": {"node_ids": ["b769dbae-0aa1-41a9-a2b9-51f207915fa2"], "metadata": {}}, "fd0d5124-f4ea-42d5-b2a2-0b6ae9e53cbb": {"node_ids": ["7694cb2b-ff7f-43ed-b3c2-d0adf1909a9b"], "metadata": {}}, "dae28d8e-7b67-4218-a48d-9a97969cbefe": {"node_ids": ["7ba35e27-837c-40cd-8133-2092a06457f9"], "metadata": {}}, "525e1717-2340-4802-a7b8-73bae0616679": {"node_ids": ["c2793d7b-f19c-4af7-aed5-b6390c037272"], "metadata": {}}, "ea733736-961f-4673-80b9-c955290b3c9f": {"node_ids": ["08d2bb1b-9bfc-44a0-aa29-9e36b05f21a8"], "metadata": {}}, "1a2b9bd4-041d-4f10-833c-79ec891c049c": {"node_ids": ["023eaa90-d79c-4e91-8164-0694ae3c8397"], "metadata": {}}, "e4b7e8bd-1f4a-49aa-ad66-afe5b99a8a15": {"node_ids": ["359eea17-c49e-4f9c-b6e2-f8d88f7cfffa"], "metadata": {}}, "1ba24ca6-3fcb-4fa0-8df3-de166d139c19": {"node_ids": ["6ef94be8-4a43-4215-a770-71197dbc400b"], "metadata": {}}, "99fdf391-62ab-49a4-be8d-6eb1b6046c1e": {"node_ids": ["d2c78001-925d-4f0e-b3c1-f3ace47545a5"], "metadata": {}}, "f7313fa5-9ed9-469f-9c40-c462b82d2265": {"node_ids": ["73b0ea8f-ad0d-464a-b02e-010ca41d9525"], "metadata": {}}, "f911e384-1de4-4463-a2b2-c3770d0b8ecd": {"node_ids": ["a5f68a09-4f90-402c-b906-cd1e67cf92dd"], "metadata": {}}, "6470e424-1054-4318-83cd-28f48714cb5e": {"node_ids": ["9f63714a-6143-4a85-b106-cdbf4669728e"], "metadata": {}}, "9a5532e6-8ee2-4669-b2de-2e9786ee34c1": {"node_ids": ["652da2b9-4af8-4d9e-a35b-c3b16a0526a1"], "metadata": {}}, "6796bd05-9825-4805-88da-f469b7a2eb4b": {"node_ids": ["a5d29cee-f5e2-436c-8f4c-c9d597aac62a"], "metadata": {}}, "2961fc4e-0518-4599-84b9-bd6f8c876968": {"node_ids": ["92c7fd55-3af9-42ce-b58b-98265abab806"], "metadata": {}}, "14bb8349-c701-4922-88a7-42b750c52736": {"node_ids": ["014f1d3d-3179-4c94-9564-b82481e197c4"], "metadata": {}}, "a279150a-5ee4-49ff-8d54-e91bde64c680": {"node_ids": ["be83846e-4a96-4089-aac2-f12cc8237783"], "metadata": {}}, "03e363ed-81bf-4396-867a-1d796205441d": {"node_ids": ["fe40715f-aaf4-4068-8abb-b8c20416ea60"], "metadata": {}}, "1b97ac2c-8a5c-4122-9a5e-abcef4078c2b": {"node_ids": ["103edf06-464f-4bbc-bfb7-4d6f90606a98"], "metadata": {}}, "143586cb-816c-45b3-84ba-c063d4d9f506": {"node_ids": ["6583aff1-129b-44a5-83a7-d504e1d3f904"], "metadata": {}}, "99ad6c3b-5e13-4103-965a-e8fd2891ba40": {"node_ids": ["4a21ed45-c5c4-444b-940d-484b92226f3f"], "metadata": {}}, "1127571b-bb0a-4ad4-abeb-86fce034675f": {"node_ids": ["776a5a0e-110f-445f-bcef-889107df3b97"], "metadata": {}}, "0b8fd5d3-af03-4891-81f9-b22fa7134deb": {"node_ids": ["471566c2-4b1c-4d57-93c8-30291e6f15d6"], "metadata": {}}, "55f3aad0-5a41-4220-a3db-a6b126edbdde": {"node_ids": ["9d4a8e36-07f5-4d81-a943-fa8e5bb978bd"], "metadata": {}}, "1d2bf1fb-cbd9-4a6f-b6a7-d7f17dd0f688": {"node_ids": ["f92aaac2-9fc6-4bd5-9d70-5af59e75ca7f"], "metadata": {}}, "bce5cfce-567c-4fac-862e-923ef324b5ea": {"node_ids": ["390b4f0f-2248-4042-9108-a97eeabc6931"], "metadata": {}}, "1d28c199-0fdf-4a72-a3f9-169a76281026": {"node_ids": ["1f8def8f-1f5a-4aad-ac12-a894b98b221b"], "metadata": {}}, "957e781f-4df4-4be3-9bef-57bab432902c": {"node_ids": ["33206ee2-6832-4eae-8f31-832600b84f82"], "metadata": {}}, "4560894e-d5f4-49a5-987c-10846caaedfd": {"node_ids": ["bce96abe-7364-4c07-a7af-f2ffe3de5ca5"], "metadata": {}}, "fccfddb5-c36b-4cba-aca8-3ab5e83174ac": {"node_ids": ["2ac2d11d-1b4a-4409-b26f-caf0175ab750"], "metadata": {}}, "b3344f3c-d2f2-4e6f-bafe-9185c2af83a6": {"node_ids": ["41cb553f-adce-440b-9e1d-2ecfbf26d6e4"], "metadata": {}}, "26ac80d7-4e9a-4f94-8a8d-7647eab4d960": {"node_ids": ["9bc6afe3-8760-46d7-afac-9def0ae20f0b"], "metadata": {}}, "a366c28f-bf78-4bc8-a2a4-6d61ca1e8faf": {"node_ids": ["c876f86a-8e62-4a91-9d52-e122a499be56"], "metadata": {}}, "abf31dac-182f-4c25-a6b5-f4999680ea21": {"node_ids": ["8647c29f-9296-40d1-891c-d67f320c2f46"], "metadata": {}}, "6388febd-7e90-41e8-89ab-88acd38b9b66": {"node_ids": ["9df8e144-0ddb-46aa-8909-6ee8f1db80a0"], "metadata": {}}, "026c914a-29f3-4643-b33a-554615d6a766": {"node_ids": ["c265a3de-1eb5-4683-9144-1d3d9ca2c586"], "metadata": {}}, "3db0d810-6c2f-40e2-bef8-0435f7085900": {"node_ids": ["0ce2b5e8-6f4a-44c6-9c17-4ba13a903ed3"], "metadata": {}}, "586b4fed-44e7-4286-ac9c-27428b49190a": {"node_ids": ["0031574b-17f1-4ae6-8475-38e1f11b46b1"], "metadata": {}}, "fff026bd-77c1-4cf5-9a58-ae3c99319c9e": {"node_ids": ["87390136-8361-4438-be09-efd5a44c9786"], "metadata": {}}, "d552cfe4-67ea-43dd-874e-ff9cee3730c1": {"node_ids": ["5a8fce17-482c-48e2-beed-27487c49d1f7"], "metadata": {}}, "566534af-4457-4c79-9551-2d20cdccdfa2": {"node_ids": ["1d3241ae-ac8e-4eca-b94e-96e9df8a31f8"], "metadata": {}}, "2c701332-4fd5-40d3-9a2e-edad38f5cda3": {"node_ids": ["c1ef0d57-53a6-47bb-ae24-cab2295fb152"], "metadata": {}}, "ac598ff0-7dde-4d75-b5d8-03b56a9a7cd1": {"node_ids": ["66319d01-2127-4bec-8823-6777a258b267"], "metadata": {}}, "cd1f4905-e614-4fd6-89e8-bc56dfce5005": {"node_ids": ["87b682fe-507d-4873-b5eb-4672765d8de2"], "metadata": {}}, "b5cb8a19-3ead-4999-b7bc-66164232ee33": {"node_ids": ["79a8bc35-1caa-4bb6-893b-423bad9070e7"], "metadata": {}}, "2c98c9b3-a045-451a-be3c-707e258409aa": {"node_ids": ["6b715474-ab00-49b3-b96b-ec7c6a15db0e"], "metadata": {}}, "ea8983f0-85ec-41b4-9832-38693710bb3e": {"node_ids": ["e664b102-79bf-4f1d-a8a6-2920e6d0c50b"], "metadata": {}}, "24482ac1-906f-4fdf-ace3-e21ee4592bc1": {"node_ids": ["f75c1b39-a71c-4bfd-8642-7db6dc74977c"], "metadata": {}}, "f8a73abc-8b7b-473a-bc70-7dc262128f43": {"node_ids": ["4f4f070f-810a-4a0e-848a-fa0ec71f7975"], "metadata": {}}, "b85b2c9f-f6f8-4d09-96ad-693e08719039": {"node_ids": ["dfe3733b-1ade-4bdf-a7d9-0bb1d873d789"], "metadata": {}}, "d2c1cf8b-e9bf-40ac-b7f5-a3d89e91edb6": {"node_ids": ["6200bb52-bd00-4b64-b893-2799b2e59e6e"], "metadata": {}}, "e710e637-2fb8-48dd-8071-d072f748b64b": {"node_ids": ["2994bbd5-0ab5-4deb-9229-1ac886a45ce0"], "metadata": {}}, "715dcca5-1b64-4245-ba57-715fe3fac989": {"node_ids": ["f779ad36-6b5d-492e-98df-d24eb9809fcf"], "metadata": {}}, "c3e12033-fd83-44a1-902e-c35207db8512": {"node_ids": ["064873f0-01ce-484d-8774-fa7afc371950"], "metadata": {}}, "b098aa41-27eb-4a6b-b52b-c79410d38383": {"node_ids": ["aaa30792-d935-4209-a77f-c2b4174ecd35"], "metadata": {}}, "a6f2e44c-e202-4563-a035-78e4dcd2b825": {"node_ids": ["b2ee11ba-af15-4210-98c8-d6c79d68ce14"], "metadata": {}}, "eefc890c-bb1d-404f-aa4e-d55ec467ead1": {"node_ids": ["f0be3316-1000-443f-bea9-8645961ab40d"], "metadata": {}}, "8dabf594-fa7e-4c08-a47e-b45bd960c2ab": {"node_ids": ["079dfe27-0605-4033-a27c-c71d19fa0d34"], "metadata": {}}, "6f591dd7-1ddf-4848-a123-0a7855b9e1c0": {"node_ids": ["88245585-e5cf-4bff-bd34-1e5240fea79b"], "metadata": {}}, "a60e5cea-ab36-4494-8666-b971ed5646e6": {"node_ids": ["5b18ce63-074f-415c-8b60-8370cc0f1e65"], "metadata": {}}, "eb18a2be-1afa-4d23-a812-e70c516e5053": {"node_ids": ["a93a9ea4-e5a7-4108-b68c-64eeff75b1e2"], "metadata": {}}, "fb398e8b-369b-4c4f-aa02-fb0e2bc98ccf": {"node_ids": ["3e9c3584-15f2-4ebd-a8f8-34bef9b8d596"], "metadata": {}}, "f57d40f9-ca5f-47e1-82a9-6ab56f496a36": {"node_ids": ["a2b1b829-0120-44c9-a283-8c6afd214ce5"], "metadata": {}}, "7762a72e-0f61-4d34-8270-53bd9be0b690": {"node_ids": ["9338af10-315d-4d73-96ae-c181ac8e2070"], "metadata": {}}, "32feb1bf-0377-40bc-9e6d-1f57849b83c7": {"node_ids": ["7a8a7248-2e8a-4ecc-976f-90e750de043a"], "metadata": {}}, "2a3011a6-50a7-4470-8571-bd6685d3c442": {"node_ids": ["db4af358-a91b-4377-b371-09c130da01f3"], "metadata": {}}, "3116ac29-5983-4d5e-aa9e-89b57960b943": {"node_ids": ["66739602-ecf3-42a1-ac70-1039497d2dca"], "metadata": {}}, "a68fc1f4-3d46-455e-983a-d73786304b20": {"node_ids": ["b92ee4e3-4ff9-4e65-a190-88c156c5566d"], "metadata": {}}, "907de937-ba12-4cf3-a7fd-ea8811c91a12": {"node_ids": ["4d84001c-7c97-4911-9956-ad8b5a128fda"], "metadata": {}}, "cdc361c2-ba9a-40a6-b3d1-7d70ce715907": {"node_ids": ["91c3fc8d-9e74-45a5-955b-13349db2cfe7"], "metadata": {}}, "47b0867c-314b-45c7-961e-b2ffacbfcbd6": {"node_ids": ["f5481cb7-36fb-4956-b1c8-0966bf7bdb1f"], "metadata": {}}, "401b851c-4b06-4832-8661-348efbc8a029": {"node_ids": ["3993586e-5769-4d5f-a01d-cd30d988ea1a"], "metadata": {}}, "60c5813b-194f-44dc-aeca-b2e294a053ab": {"node_ids": ["6d369ba6-2356-4648-9e03-f437d3426012"], "metadata": {}}, "b0ab75b3-0e32-4fba-aa3d-f6501ff1f6c3": {"node_ids": ["d1569b7a-24b4-45eb-81dc-6bb799c8abf8"], "metadata": {}}, "a5497175-ac41-46dd-b542-313101438eb7": {"node_ids": ["227e5b1a-1e33-483a-ba3f-0c85fd7cfc58"], "metadata": {}}, "d3fd87b6-7c3d-4d16-bc38-7cd0cf2dba33": {"node_ids": ["01ea07ab-f222-4e60-8fda-ee1dc5b0302c"], "metadata": {}}, "38062fe1-3efb-4af5-8238-59032184224a": {"node_ids": ["4ee935ab-fe8d-4c81-af12-50bf250e5f7b"], "metadata": {}}, "ce3b0c30-db4c-44af-bdbf-ad72968590b6": {"node_ids": ["0d948b30-867b-407c-ab06-6d9225b16801"], "metadata": {}}, "f5428164-e69a-4511-bab5-0ed4907a66b8": {"node_ids": ["8d9edada-6491-4181-b0ad-63eaaaf9ff6e"], "metadata": {}}, "11839251-0972-4fcf-98d5-1e96b5e6febe": {"node_ids": ["4956c4c0-eed5-4041-b349-fa584b613127"], "metadata": {}}, "0ddf5fa0-18c4-4178-8b15-28306a8f27a1": {"node_ids": ["621db5f7-9dab-49e1-af53-33fbd0eeb533"], "metadata": {}}, "fab49502-c1c4-4874-bf14-42d086211eb9": {"node_ids": ["355653c9-b572-4a56-9b84-31ffa842f96c"], "metadata": {}}, "c6d71844-218b-4b3c-8ec8-b7d21ffa03c8": {"node_ids": ["20dde164-6d96-4a77-a9a6-b3d9cac4fb95"], "metadata": {}}, "4821d88d-083d-4fb7-96b2-bc33f3cd4833": {"node_ids": ["6ac6e32d-aa82-454f-8dd4-c5b2d28e1771"], "metadata": {}}, "295785f1-8d2b-4582-90ac-b9425bea0afa": {"node_ids": ["2c053595-f1d5-4df6-8fbd-965cab5b12ba"], "metadata": {}}, "d06c9d02-6bce-4350-a3c2-ed23155f2b42": {"node_ids": ["a19d7248-e750-42d0-bd84-a8de9caf4147"], "metadata": {}}, "52914f46-cfde-4193-929c-3563fa2031c5": {"node_ids": ["f2ea714d-412f-435a-a971-acd128ada9d2"], "metadata": {}}, "d4ed3b70-ccee-4205-a111-04efeca34e0a": {"node_ids": ["26b69292-72fe-486a-bf23-4e4d890e4a5e"], "metadata": {}}, "2b4e3b1f-b4fb-4ad6-beec-800c6b589377": {"node_ids": ["f8c6fa2b-3a6c-499f-a82a-bbcf366404da"], "metadata": {}}, "caf7c77b-b9f5-4b21-b2df-9237614f5604": {"node_ids": ["1a636504-55d9-40b2-b969-3cde57c2eadf"], "metadata": {}}, "cd306b6d-35ca-4169-af99-48bd4c3d09f0": {"node_ids": ["8c6b9305-9716-464d-ac83-e6b65c552c12"], "metadata": {}}, "3b05a250-477d-4275-8905-4211b1a975bf": {"node_ids": ["31c51fe1-0761-48ba-996d-2730a45a5fe7"], "metadata": {}}, "9567c207-0a67-473a-9433-cb30e74a0b5a": {"node_ids": ["493359b6-53eb-4869-b232-6177ce6a95b4"], "metadata": {}}, "dcb0a653-40d6-4df2-ae36-94ef093e8886": {"node_ids": ["6bd112bb-2f56-4457-a2de-a3dc73749def"], "metadata": {}}, "147dd45f-5d06-4913-af1f-c43e5425e63f": {"node_ids": ["5c185139-1672-4b05-8ab2-0c2c64a3adb4"], "metadata": {}}, "525718eb-b425-4b79-8d73-b15822a0f3c6": {"node_ids": ["206c86eb-42fb-4dbf-a6cd-ac7788d541ab"], "metadata": {}}, "a0b0acc8-840b-4422-ae48-826db59e12dd": {"node_ids": ["109da770-5ce6-4b71-b2af-e3e78ab2c055"], "metadata": {}}, "7f33ce81-b1b4-4889-aafd-d5f5f370d877": {"node_ids": ["45fee225-76bb-4be2-af2d-924964ff423f"], "metadata": {}}, "7ceecf92-6721-4f77-82da-312959cb0eb6": {"node_ids": ["5003bd1a-a9a8-49e5-96cf-3d2089da2ab9"], "metadata": {}}, "b976ccd1-0e4c-4b19-b7cb-bb8d7e22747f": {"node_ids": ["f320e175-32e6-4a95-b73f-c9d24c0be7c4"], "metadata": {}}, "b678f24e-45a2-485f-b6ae-d81f169e5b4e": {"node_ids": ["fd9e5706-6fae-46f4-a610-2854dbbcaafa"], "metadata": {}}, "1a5c1c7e-605a-49d7-aea1-9f8cd7028037": {"node_ids": ["f556e10c-8770-4893-834f-011f418bbfd6"], "metadata": {}}, "477bfe58-3a30-4596-befa-265b35347458": {"node_ids": ["1c9dff9b-3da7-41f8-ba29-40c9edd1faf9"], "metadata": {}}, "797d82f5-ae36-444e-9ef4-4f1935439737": {"node_ids": ["01ed3659-b5a7-4933-921f-9129e5246699"], "metadata": {}}, "0f2e80de-f13d-443d-af52-c8a71508d0d0": {"node_ids": ["1513a2ea-688f-4952-9081-5a93963811bb"], "metadata": {}}, "254d5bd0-fc3c-432b-9d1b-6a309088976c": {"node_ids": ["8ed24efe-0b9d-4608-8fc2-02d6a8d6f54a"], "metadata": {}}, "81b270bc-5b13-48ec-917a-1abee218d9cd": {"node_ids": ["e51cb12d-8487-408b-ab6a-7f4e51806f2e"], "metadata": {}}, "f8d17f7f-08f9-4602-9934-10600eb86522": {"node_ids": ["10e75e74-dfc4-4116-bcf0-1ee1a17f8e08"], "metadata": {}}, "a300ae8b-6907-431e-a588-7a855e38e50d": {"node_ids": ["83d10a9a-1f37-48ef-9cfc-5e65a5618ae4"], "metadata": {}}, "d5f71016-c79e-4024-b898-0f87bc436f6c": {"node_ids": ["f357bcc0-28eb-4ac4-8c15-4644e0891cab"], "metadata": {}}, "1f31637e-fd02-43ba-85f5-1d76a29edc45": {"node_ids": ["3b91eb20-3c3d-4e31-aa7c-6f2585382a7c"], "metadata": {}}, "b5438909-29ce-4865-8e7f-5780a68edc89": {"node_ids": ["0571b00d-9832-4575-9aaf-9317b4b68621"], "metadata": {}}, "6daf7c8d-169c-4e71-b3aa-7d656c5aa335": {"node_ids": ["7df48a73-ffa3-4405-9e62-da3bb4e88690"], "metadata": {}}, "9c5098d1-0a4a-4d55-95ee-6df2759dfe96": {"node_ids": ["85c39591-d095-4b98-9ad2-416b4d785079"], "metadata": {}}, "c3f93af7-81e2-4537-b9b6-bccfe8312be8": {"node_ids": ["aaae221b-980c-4afe-abf4-d924b9b8e8d4"], "metadata": {}}, "8d959bfd-bb64-47f7-911c-9c083ab1c30d": {"node_ids": ["091d4173-5e9a-4381-92d0-4bb4b53a36e2"], "metadata": {}}, "d7cb1dc2-af40-42ae-ba9f-700904bf5a95": {"node_ids": ["a8afc509-eff8-4ce5-b58c-be6e29cf6f09"], "metadata": {}}, "b2511b1e-1be2-4a93-ba44-9dc973a0a9fd": {"node_ids": ["8f9b74eb-8552-4bdb-a213-8dc926f2d246"], "metadata": {}}, "365027d3-bb03-4a81-8da3-a962a2555411": {"node_ids": ["fd186674-52e1-4191-b6b0-4f34b5c33739"], "metadata": {}}, "92efdd71-4c98-4e32-8a26-73bfeffa15f7": {"node_ids": ["bbeff375-3182-41a1-b261-d3d0fc381850"], "metadata": {}}, "6526a161-6d12-44f7-8179-cc640fe3430a": {"node_ids": ["4550aae7-b224-4382-9aae-b71e938f6af2"], "metadata": {}}, "e5538af5-739f-422e-8fd4-842a95100454": {"node_ids": ["d08b21af-0ed9-4752-9ba8-f5c2c3ce494a"], "metadata": {}}, "9b01bb83-5716-45f4-8fa4-52c27394eac3": {"node_ids": ["3ea710cc-8d20-4301-a415-dd45dcbd8464"], "metadata": {}}, "2679f2d0-c56c-4e2a-86fb-f52ac438a56e": {"node_ids": ["9dfe52ed-3e43-4ab7-bc59-c81bbc1477bf"], "metadata": {}}, "7db29dd5-3b0f-4114-af3e-544f12562230": {"node_ids": ["8df15780-7f3c-404b-957d-0d1a88ff55af"], "metadata": {}}, "417fbe10-311b-4221-adce-6d8f1c8a3d2b": {"node_ids": ["362b4396-f019-4996-8572-c8f5b07d01a6"], "metadata": {}}, "19ae6b6d-2bbc-4709-9c27-1d196e5814cc": {"node_ids": ["6efbd2ac-fb3c-4baa-8134-302499cca2e6"], "metadata": {}}, "0eb11fe7-d1c0-4e7f-b83d-bedfd3bb8ac7": {"node_ids": ["a5a82a65-d69f-4468-a8b1-38d37a60f4ec"], "metadata": {}}, "b0651d64-9470-4e90-97f5-294404387893": {"node_ids": ["a8be7381-0914-4206-9cdf-3bb914083414"], "metadata": {}}, "da3bb542-5030-46cc-9d18-888e96baf54b": {"node_ids": ["ec8b2d88-10ec-4e2f-a04b-103af7d1d1a4"], "metadata": {}}, "798fc166-f2a5-4ea9-a1d3-7e0985c78487": {"node_ids": ["f16eb65a-1d1c-434d-a02a-30f14e1d2f1e"], "metadata": {}}, "f3419ce1-8af9-47bf-824e-a752aa4d10ea": {"node_ids": ["8ba43bfe-9a7e-456c-8b0e-3b6a9cb95177"], "metadata": {}}, "5c96af14-8d46-48c6-855b-fcd8c7a73ac1": {"node_ids": ["fefc7547-4936-4267-a58d-538c425e69bc"], "metadata": {}}, "f1bbb7cb-18dc-4f96-849b-a4db39ea554b": {"node_ids": ["ce542681-5df6-40f1-98ab-f25c958db555"], "metadata": {}}, "3e463451-0b00-4782-9640-47611f1b5cfe": {"node_ids": ["d373c242-503b-418d-ad2e-4a600c34d723"], "metadata": {}}, "41cf41a1-2bff-473e-9290-4b90b09e03d4": {"node_ids": ["ca276a6a-518a-4bf9-b601-0ec824e6e577"], "metadata": {}}, "d74e098f-2a40-4127-86a2-6b81fc9e329d": {"node_ids": ["61fb5623-4a4e-4558-bcd6-4ed61764e5e4"], "metadata": {}}, "47838cde-e8e3-40b5-a74e-952d956e4c7a": {"node_ids": ["e3243344-5260-4418-a126-043faae264e3"], "metadata": {}}, "5944158c-54e7-4259-b9b2-d7fa58fd0ce2": {"node_ids": ["e87e1b3a-547d-4e7a-9a7b-43781a095cfb"], "metadata": {}}, "73b6846b-37f3-45c8-9acc-6e353b97d485": {"node_ids": ["edd11344-6f86-4f7f-bb7e-0055f1e17925"], "metadata": {}}, "bd93353b-78af-4d64-a5ca-40087cf45f5e": {"node_ids": ["20a0372d-30a0-4e19-9fe8-4bfd9c17513a"], "metadata": {}}, "f6d1a57b-e17b-4f78-8566-d47e8525f40c": {"node_ids": ["ad6f3633-cb40-4253-90c5-e497bed907fc"], "metadata": {}}, "88e9680c-0a8e-46f8-baa5-2478e5e7de03": {"node_ids": ["869d6937-816c-4398-931c-2b48f326e89b"], "metadata": {}}, "1fd068ce-718f-485e-887a-b5dcbab5396d": {"node_ids": ["4a5c8e8e-9643-4178-bb15-51bcb4f8a065"], "metadata": {}}, "e0b80983-7483-4ca6-ac72-05577586137f": {"node_ids": ["1993dd5f-f1c8-4f19-9638-af4a0a967a9d"], "metadata": {}}, "20da4996-3bc4-4b68-bfda-cfd130060dd7": {"node_ids": ["25d02104-a1f4-4a52-972b-f0037e6e7984"], "metadata": {}}, "c1044ee8-0424-497a-8db9-83b93acb1c38": {"node_ids": ["9dd90495-39df-493d-b3fc-52c47dfc1567"], "metadata": {}}, "f6c988ba-a0b6-4b5f-bb39-1885ef0cc6c6": {"node_ids": ["f08c999d-55a6-46d3-a503-60a2cc43fe92"], "metadata": {}}, "3558b6ba-1382-445a-806d-e4ee1e8dae18": {"node_ids": ["6dcb4123-1ae1-483d-8c90-2b965d3d0ac8"], "metadata": {}}, "bff12fb3-7c7d-4933-b52a-6e9b3bb38064": {"node_ids": ["5c33eae1-4945-47c0-9ae1-a6dccb5f9f0c"], "metadata": {}}, "7bd5c609-4f68-44cb-a2f9-e7aa0027d797": {"node_ids": ["cce1653f-e93c-4d78-ad95-0d6bfc889fe8"], "metadata": {}}, "76b1c29c-69cc-4152-9644-dbb0381d20a3": {"node_ids": ["def95df7-9d85-44a5-901e-27caae716292"], "metadata": {}}, "c2fb43d8-5e80-4edb-8252-5b1c6c853ba5": {"node_ids": ["2c2d0efa-c041-44ac-9596-8123e0187104"], "metadata": {}}, "ed47c2be-31a0-4b93-814d-96b706709af6": {"node_ids": ["dd016ec9-c6b2-47dc-a7d2-dd8698664070"], "metadata": {}}, "3071a475-adbe-4c31-bbb5-1ea73e06a834": {"node_ids": ["5d189999-b189-41e0-b7d4-63523c6d1776"], "metadata": {}}, "b40e685c-05f3-42fd-8b9e-2da3241c3c97": {"node_ids": ["f9c21777-97c6-4150-bea8-132bcf9758b8"], "metadata": {}}, "cb736e8e-ef47-4322-8509-a86d54659846": {"node_ids": ["3a22b7b2-9c89-4f74-9307-026fc65081e6"], "metadata": {}}, "5422306f-455e-4a92-9d6e-1095334f5ec8": {"node_ids": ["e30a7447-86ef-483c-a669-2c2509c60d0c"], "metadata": {}}, "736650ca-46a7-46e2-89ac-f31a5f6d6ed4": {"node_ids": ["c924316e-d266-4a77-9355-b861fee597b0"], "metadata": {}}, "99c74577-1e2b-41e2-bf02-e7714f773426": {"node_ids": ["2d39eaa3-0d1c-4bf6-aae5-d08ca19bb937"], "metadata": {}}, "dc91214b-09de-4bff-a373-d386bf126e10": {"node_ids": ["04008d16-7658-4807-ba95-b8424d979c05"], "metadata": {}}, "3247c556-c251-4d8e-92fd-6c444ee9e8d4": {"node_ids": ["361ee216-599f-4164-82ae-a6689b92c7fc"], "metadata": {}}, "4954e71a-c7b4-4cc9-b906-a427e3ba12bf": {"node_ids": ["c75af2a9-9e4d-4509-a09a-e6e1d13fb4d9"], "metadata": {}}, "6845825d-dcc4-45f3-bc8b-4aa2f25791eb": {"node_ids": ["1e32f4d0-64bc-4694-8653-39f0f5a5d1a3"], "metadata": {}}, "b63eb823-65b8-4f81-ac25-2643ab0de952": {"node_ids": ["47813bf9-2a31-4101-b40b-fcba953e7be7"], "metadata": {}}, "9ac6a875-2674-4875-ba0f-e2ddd4664a9f": {"node_ids": ["c6e911fd-6c11-45f7-95b5-5173c28b0476"], "metadata": {}}, "5b943f8d-da2e-4489-83d0-315e25d8c0af": {"node_ids": ["a3c3b0d7-40a8-43f0-98f8-59ca2de6c8bc"], "metadata": {}}, "1ea64f0b-df78-4e30-b208-d7cc9a906641": {"node_ids": ["4d4e3a15-5d1c-4285-9fb9-07f20f507482"], "metadata": {}}, "b34bde9b-921b-4e4f-8db4-b4f42004df4d": {"node_ids": ["d3858ba3-b706-43d2-aa4b-a2515ca5fdef"], "metadata": {}}, "720dbb9b-6cb5-42fd-8b2b-98bb1df4fa92": {"node_ids": ["56642dd3-2109-4d76-8e73-cb747d37f5fd"], "metadata": {}}, "e8687c05-bdfc-4f8a-81a4-91d807fc2bfa": {"node_ids": ["aa2c5fa1-4bde-450d-9d72-65e4ffc34fc6"], "metadata": {}}, "f6f5414f-48b4-4d9e-9342-ec0be4d70a79": {"node_ids": ["eefdbb25-09d8-4044-97cf-b9b90feab8a4"], "metadata": {}}, "ec439c5f-4fb1-42a5-bd53-23b528c8a034": {"node_ids": ["2d3f8eda-feb0-4fce-bed4-ae19122b18bb"], "metadata": {}}, "9967566f-8d3e-410f-b3b0-2abb6d3b4917": {"node_ids": ["17a3f36c-58eb-4159-b17a-1b9998ddd8ea"], "metadata": {}}, "7d5fd680-3984-4d9f-abb7-154a069d9198": {"node_ids": ["38e2716a-3fb1-4b38-a667-d47251331e12"], "metadata": {}}, "bd7befe7-954d-4140-bfdb-ea9224fc7d95": {"node_ids": ["f3551ecb-6dbd-4507-8400-71e82a99845b"], "metadata": {}}, "293bebd4-c05a-4185-a8d3-2fd4c380c4b0": {"node_ids": ["e6860251-a6f5-4362-92ff-a83cf2e7bb58"], "metadata": {}}, "3565263c-cd86-4611-abb1-76e7156ec4d4": {"node_ids": ["82081ef7-da8c-4701-b4b4-88de5dcb4a18"], "metadata": {}}, "00a6454b-31d3-45b7-b596-0d87a5010c70": {"node_ids": ["5862b298-0064-484d-973d-489dcda19315"], "metadata": {}}, "99226b58-b8ac-4f2e-9daf-a4dcf4ea23a6": {"node_ids": ["8d767ca8-ff7f-4632-a588-28d70c9a6037"], "metadata": {}}, "07660a68-d66c-410f-9aca-ec1b975d2d5e": {"node_ids": ["a9bafaa1-eea0-45f6-9e9e-48855c521ca3"], "metadata": {}}, "f767f52d-a0fb-4309-a1ec-fa95404729c9": {"node_ids": ["abc14f02-9827-481a-bc89-23088210135c"], "metadata": {}}, "517ca926-f127-4824-a6c4-d8312b787518": {"node_ids": ["e2c44c65-3e18-423a-a65e-0edb787e9d97"], "metadata": {}}, "9e4ca1e2-53cc-4d4f-be35-ad98183623ab": {"node_ids": ["325d7034-1b85-4eaa-b061-5de7cd4817a4"], "metadata": {}}, "b548d86a-6af5-4223-9a16-8d5dec55155f": {"node_ids": ["e13b388e-f816-410a-8fc9-8d8a13c4280c"], "metadata": {}}, "ac126ab5-c1f3-4117-9c69-735dab219d4d": {"node_ids": ["2016821f-b4d4-4a48-9af6-cb83298a2fe7"], "metadata": {}}, "c5a18b58-b19d-4e85-bea5-81831b9ea486": {"node_ids": ["4934dc4b-e83b-4c76-b6a8-cd7e2996d9b7"], "metadata": {}}, "6bb96ce0-1458-4b22-9d23-08ab0e590d2a": {"node_ids": ["c557b98c-f550-439a-baae-ee5357fd4913"], "metadata": {}}, "6ac933ff-741a-4e85-a2aa-f6adc31970f7": {"node_ids": ["2ea8cf0a-773f-4066-9b27-9a49d6fe4b7e"], "metadata": {}}, "ab4f8438-c1d8-4e72-813b-8a31ea8a562c": {"node_ids": ["7eac7cca-e933-431d-bb6c-5df6a8d84c82"], "metadata": {}}, "815da48c-4209-45e7-bd38-2fb37d5fbd2e": {"node_ids": ["e5da2a62-9c17-4f58-b144-75224404594b"], "metadata": {}}, "556d9d2c-4fcd-43dc-ab43-0d2091fdab34": {"node_ids": ["50507e9c-7f5c-4fc8-811d-0d8a069c93f8"], "metadata": {}}, "89fcab02-a926-495a-b8f1-383724d2bd14": {"node_ids": ["5fc40572-c56d-495c-99d8-57dea8229e3d"], "metadata": {}}, "807aefac-1828-4b1b-8cbf-2b8e3b91a2bb": {"node_ids": ["7ce4b246-c762-4410-ad7b-c8fe2a743540"], "metadata": {}}, "823babdc-b9c9-4440-a971-740f50d65a61": {"node_ids": ["309ca1f5-161a-4bb8-a011-1a92b30f6ce6"], "metadata": {}}, "efe0f79b-2f23-48b8-b1a7-dfb683bf964c": {"node_ids": ["bdf69ce1-cd4b-4795-b657-b5d5706f825c"], "metadata": {}}, "8f650b97-e971-4ec9-8ebf-b5b01760fee8": {"node_ids": ["807a3fd1-d28e-4419-8885-08c47ac3968b"], "metadata": {}}, "ab414123-9f57-4173-8acb-8d6d1f09d3df": {"node_ids": ["e68fd50b-8133-4d47-8076-3c03dad7438d"], "metadata": {}}, "6482c848-e524-4afa-b54a-7919594d6ac6": {"node_ids": ["0fb9c46a-6b4d-40ce-b7cf-141da971514c"], "metadata": {}}, "1dcfae0f-969c-4dee-86ef-2eb7bed3ea17": {"node_ids": ["b4052ad7-c8ad-4b74-bc60-9fef9398c1fd"], "metadata": {}}, "ccb3eae5-d3b8-4c03-bf6c-5eb92f1c0f8f": {"node_ids": ["56713210-a9d1-4369-a628-f5aba8be6c90"], "metadata": {}}, "33460cd3-8cc1-4f4a-8995-ed5d2783b19b": {"node_ids": ["0e7e2281-38ae-406c-ab7c-d395f282b774"], "metadata": {}}, "8d1d7474-026b-487c-ab26-80e43788d426": {"node_ids": ["eac0d71f-1cf8-48b5-8242-aee39cbbd449"], "metadata": {}}, "7a0030e8-749c-4d30-ae8b-81f030bc7a2d": {"node_ids": ["9f8839b2-6297-476d-ac0d-314934b4bf78"], "metadata": {}}, "3968bab8-b910-4a03-b3f3-550770c85437": {"node_ids": ["f1890bf2-e3fd-46b5-82f6-969cbdc30807"], "metadata": {}}, "7f4f9660-efb7-42df-95d9-230ccc1cd29c": {"node_ids": ["8ee3dce2-a8c9-48c8-9e02-b52f881a52b1"], "metadata": {}}, "583be628-3759-4676-a1ca-e6e0ade06826": {"node_ids": ["f64276c9-371a-43a9-a43c-f2f7bbf41384"], "metadata": {}}, "f4de8b51-3edb-4112-aad5-d19580041366": {"node_ids": ["526c3d41-a980-431e-9daf-45815c500336"], "metadata": {}}, "816da1e9-330b-4bf6-ac60-5969cd42bdb3": {"node_ids": ["88d7a298-e38a-4b5b-891c-f5db37f020b4"], "metadata": {}}, "3f0d48d3-37ea-46ad-8316-bec482db7aed": {"node_ids": ["f1d1ea7a-4b40-4b21-b9dc-9620d49e93f8"], "metadata": {}}, "713fd54f-672e-4eb0-bce9-7e494d3477f5": {"node_ids": ["8a49965b-0e49-49e7-9d5e-038419dbeb29"], "metadata": {}}, "af5c6865-a60c-434a-9bef-7c09ee8e950a": {"node_ids": ["f5c939ce-7b5c-439d-a5b0-fcff358c79ad"], "metadata": {}}, "2ea6c917-0841-4890-b541-ce57acc666e2": {"node_ids": ["35fe5075-015b-4424-a0b6-7ebd4e802d77"], "metadata": {}}, "1d7b2bd3-d78c-42a6-aa89-8f46fb9c4a47": {"node_ids": ["2e413dcc-e5df-43c3-b8de-450512c95c2f"], "metadata": {}}, "f1bd6783-bf07-449d-9b8b-e3fbb5331a68": {"node_ids": ["fbe792d7-1635-47ff-b6c2-0e1f432ef813"], "metadata": {}}, "736c5aa9-0d40-4717-8124-5363f77e84e6": {"node_ids": ["ab5cf61c-afdc-442e-96db-dd5fa303a0bc"], "metadata": {}}, "8a9fdba5-ce2b-43c4-8e7a-b8f8f4890358": {"node_ids": ["571f910a-0ea8-4c66-ae18-199c9d3b11c4"], "metadata": {}}, "174bb6a4-2439-4d6a-8a36-3c8ac79db009": {"node_ids": ["58689a31-236e-417c-81f0-5f0957378b41"], "metadata": {}}, "84e1ce13-0d04-4747-8891-497050c21c80": {"node_ids": ["d4c396d5-252a-4d3e-8ad2-61c4bd64ff77"], "metadata": {}}, "e2f315bf-0774-42fd-9d05-e6993ac6f6e0": {"node_ids": ["37c8366f-16c6-47ce-bc05-bd99bf5fde55"], "metadata": {}}, "6c1d3e8c-78b9-4d36-82bb-9490c89c870e": {"node_ids": ["2eb61a6f-6343-4373-9d5d-1c0701dc3219"], "metadata": {}}, "da5a33f9-8023-497a-bf32-6109f8662e66": {"node_ids": ["d1a23346-67b0-4ee8-a870-d2a7be7b9fe2"], "metadata": {}}, "8f68d969-4609-4cab-92fe-e3069981a5ca": {"node_ids": ["a908a631-4ae2-46f6-a87e-277f01222a1b"], "metadata": {}}, "ea833cad-33cb-4e42-ae0c-584a89b1fb4d": {"node_ids": ["79d0119e-ae74-4a9f-a8a4-c63c854df299"], "metadata": {}}, "3bb8df50-cbf9-4498-ab36-6adb21350ae4": {"node_ids": ["bf9f1651-1bbe-45b4-9e34-3f72f4e7879e"], "metadata": {}}, "417ce1fc-ab60-45cb-8f7b-ad3be3196749": {"node_ids": ["ca06c1ad-6a4f-4f82-b112-0acf836e3757"], "metadata": {}}, "f89e1d95-daec-485c-9026-3e3efc98370f": {"node_ids": ["dd89b0c1-9235-47f3-be8f-e91d00a03705"], "metadata": {}}, "8cd9a97e-1d98-4453-9159-a88be6a8f7d7": {"node_ids": ["9f7d036d-5130-485b-a892-83922f3a4f1c"], "metadata": {}}, "60a797ef-8017-4d63-b3c9-98447a805da3": {"node_ids": ["02fb9d94-8682-4588-bea5-c0d76f53144a"], "metadata": {}}, "e123caef-4655-49f4-9731-1fca741408b3": {"node_ids": ["649821a7-79e7-4acd-ba34-b13672ddaaa7"], "metadata": {}}, "8b67d42f-af2e-4c90-af07-812fb284ab0f": {"node_ids": ["a1bc262f-859d-4a18-b7ac-45fd81d0d171"], "metadata": {}}, "cef553ff-d329-48ab-96af-1e0cefe5bd52": {"node_ids": ["d84fb232-b198-479e-b054-63b37e04a376"], "metadata": {}}, "c1891747-f67a-4805-990c-10fd9b83ecd3": {"node_ids": ["3e24a498-af1d-442f-86db-2a2b26b83ab7"], "metadata": {}}, "7d6d0ded-5bcd-4ca9-8bde-34d3776314c2": {"node_ids": ["0a11b6f3-6cae-4a57-b5d7-585b0420e75c"], "metadata": {}}, "9ee0d506-3e6c-441d-9d89-c726bbc5be33": {"node_ids": ["44998c0e-0209-4be7-88b6-4acbe02068cf"], "metadata": {}}, "63d61ce1-ef11-4669-92c1-a30ed0ca29a6": {"node_ids": ["4ee73331-809f-4371-b107-2752722c521f"], "metadata": {}}, "94a178d9-9dd7-4c6f-a401-032d4ffae205": {"node_ids": ["593c9bfe-b307-4f23-ab15-426802b3ba33"], "metadata": {}}, "8ebb69d0-563b-4ebc-83f2-1e4b6bbb4425": {"node_ids": ["fc80510c-0dc7-45b1-ba1b-bff162d1fbb0"], "metadata": {}}, "75c04ce3-e845-4faa-889c-7e4373397195": {"node_ids": ["29ab628d-2627-4076-90f7-ea97549fd4c9"], "metadata": {}}, "c1ef4326-d171-4a4a-950b-44cb34a3c0ad": {"node_ids": ["075dc5ca-b1b5-42e3-b40d-1a555b1ca357"], "metadata": {}}, "bcfcaf83-feae-441d-989a-249326f4082f": {"node_ids": ["cd0f4af2-09dd-40f0-80ed-41897d2833ec"], "metadata": {}}, "0247d5e5-2c5a-4089-b383-32e694511e79": {"node_ids": ["e65270b1-dd36-4a09-a73c-822d8664fd30"], "metadata": {}}, "24da72b9-9ffb-4c55-8f7d-d8409d39b53a": {"node_ids": ["0eaf5f44-3947-4c77-b750-4d9ad443806c"], "metadata": {}}, "45c0cdf5-b975-459d-bfc1-405155210906": {"node_ids": ["d903f4fa-481a-4530-8f2f-8d0073da2603"], "metadata": {}}, "70516267-81e2-4a1d-bdb9-36731cf4aa9e": {"node_ids": ["90e1b4b5-d5d0-4f61-9cbc-52e8eaafbe3e"], "metadata": {}}, "2a5775ae-5d20-4035-8187-e4c51548e8e2": {"node_ids": ["5495d483-071e-484d-a8a0-804d4ad02d5c"], "metadata": {}}, "d52a36c7-28de-49e1-9316-f61a07c40bff": {"node_ids": ["f33250d2-bf5b-4c37-96f8-0c22eec5f4d0"], "metadata": {}}, "8ec43bd6-a946-4e28-b2d4-81f13d003b8e": {"node_ids": ["d7aea967-4066-4664-8de9-3f77042a32fd"], "metadata": {}}, "e96a88f2-c65d-4925-b96f-8cc7d9792980": {"node_ids": ["8e0f69f0-1fc9-47d7-8237-d0733cd6d097"], "metadata": {}}, "2a8c2819-37c0-41fb-bb22-2c390c3e31a9": {"node_ids": ["d195f49d-999a-4cb9-9683-a196b6f74e44"], "metadata": {}}, "52dcfe4c-ac38-45dc-97bb-50bf45548e95": {"node_ids": ["3a68baf1-b459-4caf-989c-2bc45d177006"], "metadata": {}}, "3cfb1410-9df7-48d0-bb8a-04d6961c15a1": {"node_ids": ["b1ec9382-1d04-40bb-b0e2-10317b884df6"], "metadata": {}}, "34d947ce-c896-45cf-a380-1b1c2e69352b": {"node_ids": ["714e8e16-b82d-4b68-9efb-c583d2b4e0fc"], "metadata": {}}, "60d4a2bf-bce4-4486-a68e-9254611dddd1": {"node_ids": ["9cd5a72d-28bd-4330-aa62-bc312f250fae"], "metadata": {}}, "9da828f5-1665-431c-a0d7-1782ddb1fc7b": {"node_ids": ["8e0c3610-9272-414a-92f9-40ac54401108"], "metadata": {}}, "0e2a7417-63cb-40f1-b611-b581652815ca": {"node_ids": ["7de07210-fea1-47a7-bd9f-311e3ae64b2c"], "metadata": {}}, "0a6df6a2-6024-4d80-af2f-00cd0be109f6": {"node_ids": ["2fe37b74-d1d3-4ec1-963b-3c7eae616c63"], "metadata": {}}, "44a27c52-2ac4-41c8-aa14-d2bc6eeaecb4": {"node_ids": ["03372624-8c8b-4290-be17-ef32421398df"], "metadata": {}}, "d7aa0775-cc23-403c-b23f-84fa2a37dbf1": {"node_ids": ["31280672-c8b7-4ddd-a2dd-10a382a37cb9"], "metadata": {}}, "fc6ae143-7fda-4193-b52a-2e232d82c7ce": {"node_ids": ["d16ee9f8-a6ad-430e-b6b2-528d0e78c03e"], "metadata": {}}, "7fdf2bc9-1cd7-434d-9496-3ffa3e1bfd2b": {"node_ids": ["9fc7b9d8-f3c7-4117-a3e2-c251dbbfaa88"], "metadata": {}}, "e7ce7143-4d96-4984-a213-860513e7800c": {"node_ids": ["cc536e84-76e3-483d-af87-fa229d491215"], "metadata": {}}, "b7d373a2-c27a-411e-bbb1-0eaabcc1a9f7": {"node_ids": ["d66ef5dc-85d9-4f55-8996-646e87d402e4", "8bd8ecc2-09af-427d-a5a3-18d234a77c38"], "metadata": {}}, "fccae089-e1ca-448d-af71-404966474ca8": {"node_ids": ["1bd16e6b-5770-439b-9e65-94c2aa08a407"], "metadata": {}}, "608a0009-411e-4289-b7a7-296bcedc579b": {"node_ids": ["7318a024-7904-4b84-884b-826075217736"], "metadata": {}}, "b61cc75d-b5c5-43d6-b882-8f02eb4a250e": {"node_ids": ["89b51367-6414-4e5e-b37b-e5d93ae4786c"], "metadata": {}}, "9fa108ae-f31a-4790-a32d-df70d2b88a73": {"node_ids": ["1101a264-b0e6-4b59-9d96-404994729523"], "metadata": {}}, "aec55f65-4da7-4a42-b205-fa9481ac47d2": {"node_ids": ["aa627225-e8d2-4827-9117-d6878ae11f23"], "metadata": {}}, "0a39d496-0972-4c20-99bd-44382fff6b9e": {"node_ids": ["248029fe-e35e-4aa5-ad70-f4e024b86dd8"], "metadata": {}}, "a86b5ab6-d887-4c8d-8ecf-aee648a2267f": {"node_ids": ["3a998dff-e030-4f11-857e-3d73a8e27188"], "metadata": {}}, "66b26d01-2de6-4625-a692-819df8ca743c": {"node_ids": ["7bbfed40-3829-4d12-a554-037829ed8187"], "metadata": {}}, "1aad1afd-883b-4c7b-b917-109f19fa4f3e": {"node_ids": ["5db08d2a-b388-401b-a8a4-e8eaf5feb724"], "metadata": {}}, "69db63e8-1226-4ea8-9736-2c92f50153fb": {"node_ids": ["707e880f-65b5-4062-ba15-4a2af7d5a7d5"], "metadata": {}}, "3df05c36-7ac1-49fa-b384-2dceb5bb4d1b": {"node_ids": ["1642316a-f879-4192-b050-a56e3b356c22"], "metadata": {}}, "7b156118-14d4-4bf1-9127-641696d3a746": {"node_ids": ["b3fc9d4e-6433-4eee-8be2-059f6f8ec45f"], "metadata": {}}, "4e6bc38c-617a-4895-aeaf-9ba37dc78556": {"node_ids": ["f6fac4b9-ddab-4895-9c95-5ba5197abf14"], "metadata": {}}, "11006273-4fc6-4a99-b835-61cb80254f64": {"node_ids": ["7dcfe417-9921-4e65-9e58-4df90fe86a98"], "metadata": {}}, "c5b760a4-a70d-40e1-a971-447bbedab459": {"node_ids": ["9be83ca3-4577-496f-9c84-b77f9b3576bf"], "metadata": {}}, "8fde6c13-ce59-471c-8bd8-2528808952bf": {"node_ids": ["1e01fcc9-dc8f-47f5-a8ed-f0431c94d5b2"], "metadata": {}}, "e63d98a6-e9d7-43ef-a6f5-bc69e1292d81": {"node_ids": ["9d453c45-a5a8-47f7-9390-e2cba4d847c7"], "metadata": {}}, "d96cd64d-3d28-421e-8bdd-79b8156693ca": {"node_ids": ["033be745-26a4-4e92-9132-265287278e21"], "metadata": {}}, "4686d2d2-c98d-4b01-af72-48c5e8235592": {"node_ids": ["f874f34e-8c75-4b92-a64e-9d2f223923c9"], "metadata": {}}, "54242bdd-5cb0-41fe-a331-3c24c719a174": {"node_ids": ["c9aeb828-3aa9-4b63-b088-3a4b3a4bf88e"], "metadata": {}}, "7df9a371-36f6-4e32-bad9-a49238bf7748": {"node_ids": ["ea3a66c1-c701-4261-93db-f18afcfa8451"], "metadata": {}}, "9c9eb790-63ac-4929-9288-a40697d6f129": {"node_ids": ["4efbe6d2-de49-46a4-b77b-bdf7bbd0f699"], "metadata": {}}, "075a961b-5dfc-426c-a486-1ebffac9655f": {"node_ids": ["724826d3-7f26-41a9-9580-b2bad9437d45"], "metadata": {}}, "caa841cc-6426-4f40-9f3b-0b2b89dd1520": {"node_ids": ["b2f6d704-3ced-4ef6-b91b-bcaf938055de"], "metadata": {}}, "bd9c2a72-d0ae-4750-8d27-2aca06b0fbbb": {"node_ids": ["e90f877d-6013-42ae-844f-b82648383c7d"], "metadata": {}}, "522223ec-6fce-4eec-bed7-f6eee9dc5321": {"node_ids": ["7f144d24-6e7b-4f1c-9fff-e0ca013ea343"], "metadata": {}}, "f266a285-53a6-4af1-9571-fea000c3709b": {"node_ids": ["46e916f9-dd25-4f43-9c71-b1c2b3156cf3"], "metadata": {}}, "523e9a22-24bc-4f65-9bf0-c6aeccc526fe": {"node_ids": ["193517b4-1b26-4a42-b0c4-5e9c3213d304"], "metadata": {}}, "fa51f938-ceee-4636-99b4-253668b66633": {"node_ids": ["9d794e10-d1d9-4f56-b4c0-d6d073597ae5"], "metadata": {}}, "1f2f284c-9710-4695-a59a-9735d4e60e5a": {"node_ids": ["ad27cb85-3dca-4b16-9dab-7dec00287632"], "metadata": {}}, "7c792e07-ced1-42b7-bd75-4bcc3213839a": {"node_ids": ["7ad9cbfd-cac0-4d1e-9e6e-a105a1774c41"], "metadata": {}}, "fa31f90c-6c93-4a30-9f09-d5d2164f705f": {"node_ids": ["7fd71a01-b1d3-439c-9d7a-cd58f398412f"], "metadata": {}}, "8330c622-4ed0-4962-8eae-34d3d772bd99": {"node_ids": ["855fb120-3feb-4fce-8813-63c72eb40d63"], "metadata": {}}, "3bee48f5-54c3-4f50-828d-35671214ec5b": {"node_ids": ["fa152b0d-d7b9-400c-861d-b12e89c383e8"], "metadata": {}}, "ca20f5c3-efbd-4557-8a78-dbd0dcc96542": {"node_ids": ["77461fde-48ff-4dc3-905b-ad0c286744eb"], "metadata": {}}, "32ff9c05-d355-4878-bcda-033c918cff99": {"node_ids": ["19e86d68-b5b9-4294-b8c1-7ce09b4cdb94"], "metadata": {}}, "018d53a3-b850-467f-8394-062ab5b55aaa": {"node_ids": ["e3ac1895-dcf6-4e14-b78e-785ae48f7d3a"], "metadata": {}}, "c9444508-1c72-4010-94cb-24bd00277749": {"node_ids": ["24042656-5d5e-41db-94eb-e75e01048125"], "metadata": {}}, "0b7be2ea-c511-434b-a3fd-a4ada747d45f": {"node_ids": ["617f93ac-5cd2-4650-846b-34709a8884db"], "metadata": {}}, "995f121e-a983-452d-9f11-c5efba5c2af2": {"node_ids": ["dd000c8d-509c-46b7-b624-741c8843f25d"], "metadata": {}}, "67801df2-70d8-409b-bea3-ab03e5b95c08": {"node_ids": ["12223403-3614-47f2-89e4-0d287becc24c"], "metadata": {}}, "6c03ea0e-fd65-4642-8717-66d44be4145e": {"node_ids": ["46761435-a68a-47fd-9758-3c4b10503962"], "metadata": {}}, "47b89433-2c06-4f1b-84a7-26df87c3dc8b": {"node_ids": ["cf9ac21a-cdb1-46af-803d-b6364d8d5183"], "metadata": {}}, "9844f360-9f03-40bd-b3c1-223c242990e4": {"node_ids": ["b067de27-4e22-48d1-84df-c1619cac3234"], "metadata": {}}, "ba7d344f-f6f7-41b7-85df-c695302d0034": {"node_ids": ["7c21e5da-b566-4586-a12c-6ac56df7e265"], "metadata": {}}, "f870920f-f6d1-4250-9d25-21637308e1bc": {"node_ids": ["4e25da57-83f1-482e-8026-799c93fa6a61"], "metadata": {}}, "08995181-8794-4c15-9c69-5b43948bf058": {"node_ids": ["fb446fd2-2c4e-48f4-b730-efdc07c08f14"], "metadata": {}}, "f2da3132-2f1b-4d64-95fb-a07768620643": {"node_ids": ["0e3d0dcf-fd6c-4613-8dc3-235938b6781a"], "metadata": {}}, "9c1d895d-fdd8-4a09-a7e6-dc4cfadee7b5": {"node_ids": ["792dc495-5158-4f45-a31f-bf9093cefa25"], "metadata": {}}, "4749472b-2bd3-44d1-a077-f5c9d0763dc3": {"node_ids": ["ea45eb46-4907-4c4a-8450-fea6464394bb"], "metadata": {}}, "2864ab27-9984-4d55-b99a-14b236bdd164": {"node_ids": ["ad7c2bb4-c078-4055-89f2-e8a0d4c508f3"], "metadata": {}}, "fc1422c5-a532-4e5b-89ae-7697fcebe8a4": {"node_ids": ["f43984e9-f22c-4310-a4f5-d5b67fbb98ec"], "metadata": {}}}}